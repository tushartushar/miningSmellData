Implementation smell,Namespace,Class,File,Method,Description
Long Method,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Update,The method has 114 lines of code.
Long Method,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The method has 198 lines of code.
Complex Method,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Update,Cyclomatic complexity of the method is 24
Complex Method,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,Cyclomatic complexity of the method is 80
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,CheckClientUpdate,The length of the statement  "			long ticks = File.GetLastWriteTime (FolderInfo.GetApplicationDataFolder (FolderInfo.eApplicationType.Client) + item).Ticks; " is 123.
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The length of the statement  "			//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name)) " is 120.
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The length of the statement  "			//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP? " is 142.
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The length of the statement  "					Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode)); " is 120.
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,RecvFileData,The length of the statement  "	//			control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 135.
Long Statement,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,RecvFileData,The length of the statement  "	//	control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 133.
Empty Catch Block,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,CheckClientUpdate,The method has an empty catch block.
Empty Catch Block,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The method has an empty catch block.
Empty Catch Block,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The method has an empty catch block.
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,OnConnectToMainServer,The following statement contains a magic number: GettingIPListCount = 1000;  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "register":  		//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -3:  				control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -4:  				control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -5:  				control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "deleteUser":  		//受信  1…result(0…ok' -1…not registered ID' -2…password error)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				break;  			case -1:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				break;  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkLauncherUpdate":  		//受信	1…result(-1…error)  		//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						OldFileFlag = true;  						break;  					}  				}  				catch {  				}  			}  			int n = split.Length / 2;  			foreach (var item in UpdateCheck.LauncherFiles) {  				if (!File.Exists (item)) {  					OldFileFlag = true;  					break;  				}  				long ticks1 = File.GetLastWriteTime (item).Ticks;  				for (int i = 0; i < n; i++) {  					string file = split [i * 2 + 1];  					if (item == file) {  						long ticks2 = long.Parse (split [i * 2 + 2]);  						if (ticks2 / 10000000 > ticks1 / 10000000) {  							OldFileFlag = true;  							break;  						}  					}  				}  				if (OldFileFlag) {  					break;  				}  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						FileUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("clientUpdate");  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "setupUDP":  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "register":  	//受信  1…result(0…ok' -1…has registered ID' -2…has registered Name' -3…data error' -4…cannot use ID' -5…cannot use Name))  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -3:  			control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -4:  			control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -5:  			control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "deleteUser":  	//受信  1…result(0…ok' -1…not registered ID' -2…password error)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			break;  		case -1:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		case -2:  			control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		default:  			control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			break;  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkLauncherUpdate":  	//受信	1…result(-1…error)  	//受信	1' 2…(fileName1' ticks1)' 3' 4…(fileName2' ticks2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					OldFileFlag = true;  					break;  				}  			}  			catch {  			}  		}  		int n = split.Length / 2;  		foreach (var item in UpdateCheck.LauncherFiles) {  			if (!File.Exists (item)) {  				OldFileFlag = true;  				break;  			}  			long ticks1 = File.GetLastWriteTime (item).Ticks;  			for (int i = 0; i < n; i++) {  				string file = split [i * 2 + 1];  				if (item == file) {  					long ticks2 = long.Parse (split [i * 2 + 2]);  					if (ticks2 / 10000000 > ticks1 / 10000000) {  						OldFileFlag = true;  						break;  					}  				}  			}  			if (OldFileFlag) {  				break;  			}  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					FileUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("clientUpdate");  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "setupUDP":  	break;  default:  	flag = false;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	break;  case -1:  	control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -3:  	control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -4:  	control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -5:  	control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	break;  case -1:  	control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -3:  	control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -4:  	control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -5:  	control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	break;  case -1:  	control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -3:  	control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -4:  	control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -5:  	control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	control.AddMessage2 ("登録に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	break;  case -1:  	control.AddMessage2 ("このIDはすでに登録されています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("この名前はすでに使われています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -3:  	control.AddMessage2 ("登録時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -4:  	control.AddMessage2 ("使用できないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -5:  	control.AddMessage2 ("使用できない名前です．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("登録時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	control.AddMessage2 ("削除に成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	break;  case -1:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("パスワードが間違っています．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("削除時に予期せぬエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (state == 0) {  	if (RoomUpdated != null) {  		RoomUpdated ();  	}  }  else if (state == -2) {  }  else {  	Rooms.Clear ();  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (state == -2) {  }  else {  	Rooms.Clear ();  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: LoggedInNumber = int.Parse (split [2]);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	try {  		int result = int.Parse (split [1]);  		if (result == -1) {  			OldFileFlag = true;  			break;  		}  	}  	catch {  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: foreach (var item in UpdateCheck.LauncherFiles) {  	if (!File.Exists (item)) {  		OldFileFlag = true;  		break;  	}  	long ticks1 = File.GetLastWriteTime (item).Ticks;  	for (int i = 0; i < n; i++) {  		string file = split [i * 2 + 1];  		if (item == file) {  			long ticks2 = long.Parse (split [i * 2 + 2]);  			if (ticks2 / 10000000 > ticks1 / 10000000) {  				OldFileFlag = true;  				break;  			}  		}  	}  	if (OldFileFlag) {  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: foreach (var item in UpdateCheck.LauncherFiles) {  	if (!File.Exists (item)) {  		OldFileFlag = true;  		break;  	}  	long ticks1 = File.GetLastWriteTime (item).Ticks;  	for (int i = 0; i < n; i++) {  		string file = split [i * 2 + 1];  		if (item == file) {  			long ticks2 = long.Parse (split [i * 2 + 2]);  			if (ticks2 / 10000000 > ticks1 / 10000000) {  				OldFileFlag = true;  				break;  			}  		}  	}  	if (OldFileFlag) {  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: foreach (var item in UpdateCheck.LauncherFiles) {  	if (!File.Exists (item)) {  		OldFileFlag = true;  		break;  	}  	long ticks1 = File.GetLastWriteTime (item).Ticks;  	for (int i = 0; i < n; i++) {  		string file = split [i * 2 + 1];  		if (item == file) {  			long ticks2 = long.Parse (split [i * 2 + 2]);  			if (ticks2 / 10000000 > ticks1 / 10000000) {  				OldFileFlag = true;  				break;  			}  		}  	}  	if (OldFileFlag) {  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: foreach (var item in UpdateCheck.LauncherFiles) {  	if (!File.Exists (item)) {  		OldFileFlag = true;  		break;  	}  	long ticks1 = File.GetLastWriteTime (item).Ticks;  	for (int i = 0; i < n; i++) {  		string file = split [i * 2 + 1];  		if (item == file) {  			long ticks2 = long.Parse (split [i * 2 + 2]);  			if (ticks2 / 10000000 > ticks1 / 10000000) {  				OldFileFlag = true;  				break;  			}  		}  	}  	if (OldFileFlag) {  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: foreach (var item in UpdateCheck.LauncherFiles) {  	if (!File.Exists (item)) {  		OldFileFlag = true;  		break;  	}  	long ticks1 = File.GetLastWriteTime (item).Ticks;  	for (int i = 0; i < n; i++) {  		string file = split [i * 2 + 1];  		if (item == file) {  			long ticks2 = long.Parse (split [i * 2 + 2]);  			if (ticks2 / 10000000 > ticks1 / 10000000) {  				OldFileFlag = true;  				break;  			}  		}  	}  	if (OldFileFlag) {  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	string file = split [i * 2 + 1];  	if (item == file) {  		long ticks2 = long.Parse (split [i * 2 + 2]);  		if (ticks2 / 10000000 > ticks1 / 10000000) {  			OldFileFlag = true;  			break;  		}  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	string file = split [i * 2 + 1];  	if (item == file) {  		long ticks2 = long.Parse (split [i * 2 + 2]);  		if (ticks2 / 10000000 > ticks1 / 10000000) {  			OldFileFlag = true;  			break;  		}  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	string file = split [i * 2 + 1];  	if (item == file) {  		long ticks2 = long.Parse (split [i * 2 + 2]);  		if (ticks2 / 10000000 > ticks1 / 10000000) {  			OldFileFlag = true;  			break;  		}  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	string file = split [i * 2 + 1];  	if (item == file) {  		long ticks2 = long.Parse (split [i * 2 + 2]);  		if (ticks2 / 10000000 > ticks1 / 10000000) {  			OldFileFlag = true;  			break;  		}  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0; i < n; i++) {  	string file = split [i * 2 + 1];  	if (item == file) {  		long ticks2 = long.Parse (split [i * 2 + 2]);  		if (ticks2 / 10000000 > ticks1 / 10000000) {  			OldFileFlag = true;  			break;  		}  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (item == file) {  	long ticks2 = long.Parse (split [i * 2 + 2]);  	if (ticks2 / 10000000 > ticks1 / 10000000) {  		OldFileFlag = true;  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (item == file) {  	long ticks2 = long.Parse (split [i * 2 + 2]);  	if (ticks2 / 10000000 > ticks1 / 10000000) {  		OldFileFlag = true;  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (item == file) {  	long ticks2 = long.Parse (split [i * 2 + 2]);  	if (ticks2 / 10000000 > ticks1 / 10000000) {  		OldFileFlag = true;  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (item == file) {  	long ticks2 = long.Parse (split [i * 2 + 2]);  	if (ticks2 / 10000000 > ticks1 / 10000000) {  		OldFileFlag = true;  		break;  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (ticks2 / 10000000 > ticks1 / 10000000) {  	OldFileFlag = true;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (ticks2 / 10000000 > ticks1 / 10000000) {  	OldFileFlag = true;  	break;  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	try {  		int result = int.Parse (split [1]);  		if (result == -1) {  			FileUpdated = true;  			break;  		}  	}  	catch {  	}  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileNum = (split.Length - 1) / 2;  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileSize += long.Parse (split [i * 2 + 2]);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileSize += long.Parse (split [i * 2 + 2]);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,ParseMessages,The following statement contains a magic number: downloadFilePath.Add (split [i * 2 + 1]);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Draw,The following statement contains a magic number: DX.DrawString (0' 50' State' control.COLOR_RED);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  }  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Draw,The following statement contains a magic number: processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  
Magic Number,Startup,StartupNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\StartupNetwork\StartupNetwork.cs,Draw,The following statement contains a magic number: processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  
