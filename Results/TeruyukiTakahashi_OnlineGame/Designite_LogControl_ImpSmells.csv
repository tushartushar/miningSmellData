Implementation smell,Namespace,Class,File,Method,Description
Long Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The method has 240 lines of code.
Long Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The method has 170 lines of code.
Complex Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,Chat,Cyclomatic complexity of the method is 19
Complex Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,Cyclomatic complexity of the method is 70
Complex Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetCursorPos,Cyclomatic complexity of the method is 9
Complex Method,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,Cyclomatic complexity of the method is 39
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The length of the statement  "			cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4); " is 147.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,CheckMouseOverChatMode,The length of the statement  "	return control.MouseX >= Left && control.MouseX <= InputLeft && control.MouseY >= Bottom - LOG_FONT_SIZE - 4 && control.MouseY <= Bottom; " is 137.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The length of the statement  "				else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) { " is 210.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The length of the statement  "						network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ())); " is 288.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The length of the statement  "						network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand); " is 136.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The length of the statement  "		if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) { " is 136.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "				Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B)); " is 144.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "					Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B)); " is 128.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "					Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B)); " is 128.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "			Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B)); " is 142.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "			Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B)); " is 138.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "						DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE); " is 127.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "						DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE); " is 129.
Long Statement,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The length of the statement  "						DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE); " is 127.
Complex Conditional,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The conditional expression  "(!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")"  is complex.
Complex Conditional,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The conditional expression  "(split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)"  is complex.
Complex Conditional,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The conditional expression  "!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))"  is complex.
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,ResetPosition,The following statement contains a magic number: top = GameControl.SHeight - LOG_WINDOW_HEIGHT - 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,ResetPosition,The following statement contains a magic number: bottom = GameControl.SHeight - LOG_FONT_SIZE - 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,ResetPosition,The following statement contains a magic number: left = 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: control.SetUseMouseDrawFunc ((mouseX' mouseY) =>  {  	if (cursorGph != null) {  		cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  	}  });  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: if (cursorGph != null) {  	cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetDrawCursorFunc,The following statement contains a magic number: cursorGph.DrawExtendGraph (mouseX - logFontSize * 3 / 4' mouseY - logFontSize * 3 / 4' mouseX + logFontSize * 3 / 4' mouseY + logFontSize * 3 / 4);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,Init,The following statement contains a magic number: Left = 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,Init,The following statement contains a magic number: Top = GameControl.SHeight - LOG_WINDOW_HEIGHT - 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,Init,The following statement contains a magic number: Bottom = GameControl.SHeight - LOG_FONT_SIZE - 10;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,CheckMouseOverChatMode,The following statement contains a magic number: return control.MouseX >= Left && control.MouseX <= InputLeft && control.MouseY >= Bottom - LOG_FONT_SIZE - 4 && control.MouseY <= Bottom;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (network.RecvDataList.Count > 0) {  	bool isServer = network.Params.User.UserName == Const.SERVER_ID;  	string message = network.RecvDataList [0].Item1.Message;  	string[] split = message.Split ('\t');  	if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  		//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  		network.RecvDataList.RemoveAt (0);  		if (split.Length != 7) {  			control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  		}  		else {  			int room = int.Parse (split [5]);  			eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  			if (room == -2) {  				mode = eChatMode.System;  				room = RoomIndex;  				PersonalChatName = "";  			}  			if (isServer) {  				Chat (control' mode' split [3]' split [2]);  			}  			else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  				if (onlyCheckSystemMessage) {  					if (mode == eChatMode.System) {  						Chat (control' mode' split [3]' split [2]);  					}  				}  				else {  					Chat (control' mode' split [3]' split [2]);  				}  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((!isServer && split [0] == "talk") || (isServer && split [0] == "serverTalk")) {  	//受信  1…ChatMode' 2…UserName' 3…Message' 4…SendToName' 5…RoomIndex' 6…Append  	network.RecvDataList.RemoveAt (0);  	if (split.Length != 7) {  		control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  	}  	else {  		int room = int.Parse (split [5]);  		eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  		if (room == -2) {  			mode = eChatMode.System;  			room = RoomIndex;  			PersonalChatName = "";  		}  		if (isServer) {  			Chat (control' mode' split [3]' split [2]);  		}  		else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  			if (onlyCheckSystemMessage) {  				if (mode == eChatMode.System) {  					Chat (control' mode' split [3]' split [2]);  				}  			}  			else {  				Chat (control' mode' split [3]' split [2]);  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (split.Length != 7) {  	control.AddMessage2 ("メッセージのフォーマットが異常．\n" + message' Const.SYSTEM_ID);  }  else {  	int room = int.Parse (split [5]);  	eChatMode mode = (eChatMode)Enum.Parse (typeof(eChatMode)' split [1]);  	if (room == -2) {  		mode = eChatMode.System;  		room = RoomIndex;  		PersonalChatName = "";  	}  	if (isServer) {  		Chat (control' mode' split [3]' split [2]);  	}  	else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  		if (onlyCheckSystemMessage) {  			if (mode == eChatMode.System) {  				Chat (control' mode' split [3]' split [2]);  			}  		}  		else {  			Chat (control' mode' split [3]' split [2]);  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (room == -2) {  	mode = eChatMode.System;  	room = RoomIndex;  	PersonalChatName = "";  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (isServer) {  	Chat (control' mode' split [3]' split [2]);  }  else if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if ((split [4] == network.Params.User.UserName || split [2] == network.Params.User.UserName || mode == eChatMode.System) || ((room == RoomIndex || split [2] == Const.SERVER_ID) && mode == eChatMode.All)) {  	if (onlyCheckSystemMessage) {  		if (mode == eChatMode.System) {  			Chat (control' mode' split [3]' split [2]);  		}  	}  	else {  		Chat (control' mode' split [3]' split [2]);  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (onlyCheckSystemMessage) {  	if (mode == eChatMode.System) {  		Chat (control' mode' split [3]' split [2]);  	}  }  else {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (onlyCheckSystemMessage) {  	if (mode == eChatMode.System) {  		Chat (control' mode' split [3]' split [2]);  	}  }  else {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (onlyCheckSystemMessage) {  	if (mode == eChatMode.System) {  		Chat (control' mode' split [3]' split [2]);  	}  }  else {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (onlyCheckSystemMessage) {  	if (mode == eChatMode.System) {  		Chat (control' mode' split [3]' split [2]);  	}  }  else {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (mode == eChatMode.System) {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (mode == eChatMode.System) {  	Chat (control' mode' split [3]' split [2]);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: Chat (control' mode' split [3]' split [2]);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (IsValidComment) {  	if (cursorGph == null) {  		LoadCursorGraphic ();  	}  	switch (DX.CheckKeyInput (commentHandle)) {  	case 0:  		//まだ  		break;  	case 1:  		//正常に終了  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			if (ChatMode != eChatMode.Personal || !setName) {  				if (ChatMode != eChatMode.Personal) {  					PersonalChatName = "";  				}  				//入力された  				if (network.Params.User.UserName == Const.SERVER_ID) {  					// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  					network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  				}  				else {  					network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  				}  			}  			else if (ChatMode == eChatMode.Personal) {  				PersonalChatName = get.ToString ();  				setName = false;  			}  		}  		IsValidComment = false;  		DX.SetKeyInputString (""' commentHandle);  		break;  	case 2:  		//キャンセル  		IsValidComment = false;  		break;  	default:  		//エラー  		IsValidComment = false;  		break;  	}  	int b = Bottom - LOG_FONT_SIZE - 4;  	int left = InputLeft;  	bool tmp = setName;  	setName = true;  	int modeRight = InputLeft;  	setName = false;  	int nameRight = InputLeft;  	setName = tmp;  	bool editAreaYFlag = control.MouseY >= b && control.MouseY <= Bottom;  	bool editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	if (ChatMode == eChatMode.Personal && setName) {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= nameRight;  	}  	else {  		editAreaXFlag = control.MouseX >= left && control.MouseX <= Right;  	}  	bool mouseFlag = control.MouseX >= Left && control.MouseX <= modeRight && editAreaYFlag;  	if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  		switch (ChatMode) {  		case eChatMode.All:  			{  				ChatMode = eChatMode.Personal;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length <= 0) {  					setName = true;  				}  				else {  					setName = PersonalChatName == "";  					if (!setName) {  						DX.SetKeyInputString (""' commentHandle);  					}  				}  			}  			break;  		case eChatMode.Personal:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						if (network.Params.User.UserName == Const.SERVER_ID) {  							ChatMode = eChatMode.System;  						}  						else {  							ChatMode = eChatMode.All;  						}  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  			}  			break;  		case eChatMode.System:  			{  				if (setName) {  					setName = false;  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					else if (PersonalChatName == "") {  						ChatMode = eChatMode.All;  					}  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			break;  		}  		control.SetPrevMouseInputLeft ();  	}  	else if (control.IsMouseClickedLeftNow ()) {  		if (editAreaYFlag) {  			if (ChatMode == eChatMode.Personal) {  				if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  					if (!setName) {  						setName = true;  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  				else if (control.MouseX > nameRight && control.MouseX <= Right) {  					if (setName) {  						StringBuilder get = new StringBuilder (1024);  						DX.GetKeyInputString (get' commentHandle);  						if (get.Length > 0) {  							PersonalChatName = get.ToString ();  						}  						setName = false;  						DX.SetKeyInputString (""' commentHandle);  					}  					else {  						SetCursorPos (control);  					}  					mouseFlag = true;  				}  			}  			else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  				if (editAreaXFlag) {  					SetCursorPos (control);  					mouseFlag = true;  				}  			}  			if (mouseFlag) {  				control.SetPrevMouseInputLeft ();  			}  		}  	}  	if (editAreaXFlag && editAreaYFlag) {  		SetDrawCursorFunc (control);  	}  	else {  		ResetDrawCursorFunc (control);  	}  	cursorCount += control.MilliSecond;  	while (cursorCount > 800) {  		cursorCount -= 800;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: switch (DX.CheckKeyInput (commentHandle)) {  case 0:  	//まだ  	break;  case 1:  	//正常に終了  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	if (get.Length > 0) {  		if (ChatMode != eChatMode.Personal || !setName) {  			if (ChatMode != eChatMode.Personal) {  				PersonalChatName = "";  			}  			//入力された  			if (network.Params.User.UserName == Const.SERVER_ID) {  				// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  				network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  			}  			else {  				network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  			}  		}  		else if (ChatMode == eChatMode.Personal) {  			PersonalChatName = get.ToString ();  			setName = false;  		}  	}  	IsValidComment = false;  	DX.SetKeyInputString (""' commentHandle);  	break;  case 2:  	//キャンセル  	IsValidComment = false;  	break;  default:  	//エラー  	IsValidComment = false;  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: switch (DX.CheckKeyInput (commentHandle)) {  case 0:  	//まだ  	break;  case 1:  	//正常に終了  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	if (get.Length > 0) {  		if (ChatMode != eChatMode.Personal || !setName) {  			if (ChatMode != eChatMode.Personal) {  				PersonalChatName = "";  			}  			//入力された  			if (network.Params.User.UserName == Const.SERVER_ID) {  				// 1…ChatMode' 2…Message' 3…SendToName' 4…RoomIndex' 5…Append  				network.RecvDataList.Add (new Tuple<Network.NetworkSendData' int' Network.CheckDataLife> (new Network.NetworkSendData (network.Params.User.UserName' "talk"' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand)' -1' new Network.CheckDataLife ()));  			}  			else {  				network.AddSendData (SendMessageCommand' ChatMode.ToString ()' get.ToString ()' PersonalChatName' RoomIndex.ToString ()' AppendCommand);  			}  		}  		else if (ChatMode == eChatMode.Personal) {  			PersonalChatName = get.ToString ();  			setName = false;  		}  	}  	IsValidComment = false;  	DX.SetKeyInputString (""' commentHandle);  	break;  case 2:  	//キャンセル  	IsValidComment = false;  	break;  default:  	//エラー  	IsValidComment = false;  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  	switch (ChatMode) {  	case eChatMode.All:  		{  			ChatMode = eChatMode.Personal;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length <= 0) {  				setName = true;  			}  			else {  				setName = PersonalChatName == "";  				if (!setName) {  					DX.SetKeyInputString (""' commentHandle);  				}  			}  		}  		break;  	case eChatMode.Personal:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  		}  		break;  	case eChatMode.System:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					ChatMode = eChatMode.All;  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  		break;  	}  	control.SetPrevMouseInputLeft ();  }  else if (control.IsMouseClickedLeftNow ()) {  	if (editAreaYFlag) {  		if (ChatMode == eChatMode.Personal) {  			if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  				if (!setName) {  					setName = true;  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  			else if (control.MouseX > nameRight && control.MouseX <= Right) {  				if (setName) {  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					setName = false;  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  		}  		else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  			if (editAreaXFlag) {  				SetCursorPos (control);  				mouseFlag = true;  			}  		}  		if (mouseFlag) {  			control.SetPrevMouseInputLeft ();  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  	switch (ChatMode) {  	case eChatMode.All:  		{  			ChatMode = eChatMode.Personal;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length <= 0) {  				setName = true;  			}  			else {  				setName = PersonalChatName == "";  				if (!setName) {  					DX.SetKeyInputString (""' commentHandle);  				}  			}  		}  		break;  	case eChatMode.Personal:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  		}  		break;  	case eChatMode.System:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					ChatMode = eChatMode.All;  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  		break;  	}  	control.SetPrevMouseInputLeft ();  }  else if (control.IsMouseClickedLeftNow ()) {  	if (editAreaYFlag) {  		if (ChatMode == eChatMode.Personal) {  			if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  				if (!setName) {  					setName = true;  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  			else if (control.MouseX > nameRight && control.MouseX <= Right) {  				if (setName) {  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					setName = false;  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  		}  		else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  			if (editAreaXFlag) {  				SetCursorPos (control);  				mouseFlag = true;  			}  		}  		if (mouseFlag) {  			control.SetPrevMouseInputLeft ();  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  	switch (ChatMode) {  	case eChatMode.All:  		{  			ChatMode = eChatMode.Personal;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length <= 0) {  				setName = true;  			}  			else {  				setName = PersonalChatName == "";  				if (!setName) {  					DX.SetKeyInputString (""' commentHandle);  				}  			}  		}  		break;  	case eChatMode.Personal:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  		}  		break;  	case eChatMode.System:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					ChatMode = eChatMode.All;  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  		break;  	}  	control.SetPrevMouseInputLeft ();  }  else if (control.IsMouseClickedLeftNow ()) {  	if (editAreaYFlag) {  		if (ChatMode == eChatMode.Personal) {  			if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  				if (!setName) {  					setName = true;  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  			else if (control.MouseX > nameRight && control.MouseX <= Right) {  				if (setName) {  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					setName = false;  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  		}  		else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  			if (editAreaXFlag) {  				SetCursorPos (control);  				mouseFlag = true;  			}  		}  		if (mouseFlag) {  			control.SetPrevMouseInputLeft ();  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (!IsValidCustomSendMessageCommand && (control.IsKeyInputNow (DX.KEY_INPUT_TAB) || (control.IsMouseClickedLeftNow () && mouseFlag))) {  	switch (ChatMode) {  	case eChatMode.All:  		{  			ChatMode = eChatMode.Personal;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length <= 0) {  				setName = true;  			}  			else {  				setName = PersonalChatName == "";  				if (!setName) {  					DX.SetKeyInputString (""' commentHandle);  				}  			}  		}  		break;  	case eChatMode.Personal:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					if (network.Params.User.UserName == Const.SERVER_ID) {  						ChatMode = eChatMode.System;  					}  					else {  						ChatMode = eChatMode.All;  					}  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  		}  		break;  	case eChatMode.System:  		{  			if (setName) {  				setName = false;  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				else if (PersonalChatName == "") {  					ChatMode = eChatMode.All;  				}  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  		break;  	}  	control.SetPrevMouseInputLeft ();  }  else if (control.IsMouseClickedLeftNow ()) {  	if (editAreaYFlag) {  		if (ChatMode == eChatMode.Personal) {  			if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  				if (!setName) {  					setName = true;  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  			else if (control.MouseX > nameRight && control.MouseX <= Right) {  				if (setName) {  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					setName = false;  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  		}  		else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  			if (editAreaXFlag) {  				SetCursorPos (control);  				mouseFlag = true;  			}  		}  		if (mouseFlag) {  			control.SetPrevMouseInputLeft ();  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	{  		ChatMode = eChatMode.Personal;  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length <= 0) {  			setName = true;  		}  		else {  			setName = PersonalChatName == "";  			if (!setName) {  				DX.SetKeyInputString (""' commentHandle);  			}  		}  	}  	break;  case eChatMode.Personal:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			if (network.Params.User.UserName == Const.SERVER_ID) {  				ChatMode = eChatMode.System;  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  	}  	break;  case eChatMode.System:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				ChatMode = eChatMode.All;  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			ChatMode = eChatMode.All;  		}  	}  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	{  		ChatMode = eChatMode.Personal;  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length <= 0) {  			setName = true;  		}  		else {  			setName = PersonalChatName == "";  			if (!setName) {  				DX.SetKeyInputString (""' commentHandle);  			}  		}  	}  	break;  case eChatMode.Personal:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			if (network.Params.User.UserName == Const.SERVER_ID) {  				ChatMode = eChatMode.System;  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  	}  	break;  case eChatMode.System:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				ChatMode = eChatMode.All;  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			ChatMode = eChatMode.All;  		}  	}  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	{  		ChatMode = eChatMode.Personal;  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length <= 0) {  			setName = true;  		}  		else {  			setName = PersonalChatName == "";  			if (!setName) {  				DX.SetKeyInputString (""' commentHandle);  			}  		}  	}  	break;  case eChatMode.Personal:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			if (network.Params.User.UserName == Const.SERVER_ID) {  				ChatMode = eChatMode.System;  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  	}  	break;  case eChatMode.System:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				ChatMode = eChatMode.All;  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			ChatMode = eChatMode.All;  		}  	}  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (setName) {  	setName = false;  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	if (get.Length > 0) {  		PersonalChatName = get.ToString ();  	}  	else if (PersonalChatName == "") {  		if (network.Params.User.UserName == Const.SERVER_ID) {  			ChatMode = eChatMode.System;  		}  		else {  			ChatMode = eChatMode.All;  		}  	}  	DX.SetKeyInputString (""' commentHandle);  }  else {  	if (network.Params.User.UserName == Const.SERVER_ID) {  		ChatMode = eChatMode.System;  	}  	else {  		ChatMode = eChatMode.All;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (setName) {  	setName = false;  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	if (get.Length > 0) {  		PersonalChatName = get.ToString ();  	}  	else if (PersonalChatName == "") {  		ChatMode = eChatMode.All;  	}  	DX.SetKeyInputString (""' commentHandle);  }  else {  	ChatMode = eChatMode.All;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (control.IsMouseClickedLeftNow ()) {  	if (editAreaYFlag) {  		if (ChatMode == eChatMode.Personal) {  			if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  				if (!setName) {  					setName = true;  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  			else if (control.MouseX > nameRight && control.MouseX <= Right) {  				if (setName) {  					StringBuilder get = new StringBuilder (1024);  					DX.GetKeyInputString (get' commentHandle);  					if (get.Length > 0) {  						PersonalChatName = get.ToString ();  					}  					setName = false;  					DX.SetKeyInputString (""' commentHandle);  				}  				else {  					SetCursorPos (control);  				}  				mouseFlag = true;  			}  		}  		else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  			if (editAreaXFlag) {  				SetCursorPos (control);  				mouseFlag = true;  			}  		}  		if (mouseFlag) {  			control.SetPrevMouseInputLeft ();  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (editAreaYFlag) {  	if (ChatMode == eChatMode.Personal) {  		if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  			if (!setName) {  				setName = true;  			}  			else {  				SetCursorPos (control);  			}  			mouseFlag = true;  		}  		else if (control.MouseX > nameRight && control.MouseX <= Right) {  			if (setName) {  				StringBuilder get = new StringBuilder (1024);  				DX.GetKeyInputString (get' commentHandle);  				if (get.Length > 0) {  					PersonalChatName = get.ToString ();  				}  				setName = false;  				DX.SetKeyInputString (""' commentHandle);  			}  			else {  				SetCursorPos (control);  			}  			mouseFlag = true;  		}  	}  	else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  		if (editAreaXFlag) {  			SetCursorPos (control);  			mouseFlag = true;  		}  	}  	if (mouseFlag) {  		control.SetPrevMouseInputLeft ();  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (ChatMode == eChatMode.Personal) {  	if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  		if (!setName) {  			setName = true;  		}  		else {  			SetCursorPos (control);  		}  		mouseFlag = true;  	}  	else if (control.MouseX > nameRight && control.MouseX <= Right) {  		if (setName) {  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			setName = false;  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			SetCursorPos (control);  		}  		mouseFlag = true;  	}  }  else if (ChatMode == eChatMode.All || ChatMode == eChatMode.System) {  	if (editAreaXFlag) {  		SetCursorPos (control);  		mouseFlag = true;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (control.MouseX >= modeRight && control.MouseX <= nameRight) {  	if (!setName) {  		setName = true;  	}  	else {  		SetCursorPos (control);  	}  	mouseFlag = true;  }  else if (control.MouseX > nameRight && control.MouseX <= Right) {  	if (setName) {  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			PersonalChatName = get.ToString ();  		}  		setName = false;  		DX.SetKeyInputString (""' commentHandle);  	}  	else {  		SetCursorPos (control);  	}  	mouseFlag = true;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (control.MouseX > nameRight && control.MouseX <= Right) {  	if (setName) {  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length > 0) {  			PersonalChatName = get.ToString ();  		}  		setName = false;  		DX.SetKeyInputString (""' commentHandle);  	}  	else {  		SetCursorPos (control);  	}  	mouseFlag = true;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: if (setName) {  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	if (get.Length > 0) {  		PersonalChatName = get.ToString ();  	}  	setName = false;  	DX.SetKeyInputString (""' commentHandle);  }  else {  	SetCursorPos (control);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: while (cursorCount > 800) {  	cursorCount -= 800;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: while (cursorCount > 800) {  	cursorCount -= 800;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following statement contains a magic number: cursorCount -= 800;  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,SetCursorPos,The following statement contains a magic number: while (cursor <= len) {  	int tmpCursorDotPos = DX.GetDrawStringWidth (tmp' cursor) - logFontSize / 4;  	if (tmpCursorDotPos > control.MouseX - left) {  		check = true;  		break;  	}  	cursor++;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  	DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 100);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' Top - 5' Right + 5' b' DX.GetColor (50' 50' 50)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidComment) {  	DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  	DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Right' Bottom);  	switch (ChatMode) {  	case eChatMode.All:  		if (IsValidCustomSendMessageCommand) {  			Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			if (RoomIndex >= 0) {  				Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  			else {  				Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  			}  		}  		break;  	case eChatMode.Personal:  		Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  		if (setName) {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  		}  		else {  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  			DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  			DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  			DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  			DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  			DX.SetDrawArea (Left' b' Right' Bottom);  		}  		break;  	case eChatMode.System:  		Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  		break;  	}  	StringBuilder get = new StringBuilder (1024);  	DX.GetKeyInputString (get' commentHandle);  	string tmp = get.ToString ();  	int cursorPos = DX.GetKeyInputCursorPosition (commentHandle);  	int cursorDotPos = DX.GetDrawStringWidth (tmp' cursorPos);  	int len = Utility.GetDrawStringWidth (tmp);  	bool drawCursor = (int)(cursorCount / 400) % 2 == 0;  	int left = InputLeft;  	int width = Right - left;  	if (len <= width) {  		DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.SetDrawArea (left' b' Right' Bottom);  		int slide = -len + width;  		if (len != prevStrLen) {  			if (len > prevStrLen) {  				int sub = len - prevStrLen;  				minCursorDotPos += sub;  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  			else {  				if (0 > -slide - minCursorDotPos) {  					minCursorDotPos = -slide;  				}  			}  		}  		if (minCursorDotPos >= 0) {  			if (cursorDotPos > len - minCursorDotPos) {  				if (cursorDotPos == len) {  					minCursorDotPos = -1;  				}  				else if (minCursorDotPos > len - cursorDotPos) {  					minCursorDotPos = len - cursorDotPos;  				}  				slide = -cursorDotPos + width;  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else if (cursorDotPos > -slide - minCursorDotPos) {  				int slide2 = -slide - minCursorDotPos;  				DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  		else {  			if (slide + cursorDotPos >= 0) {  				DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  			}  			else {  				DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  				DX.SetDrawAreaFull ();  				DX.DrawIMEInputString (left' b' commentHandle);  				if (drawCursor) {  					DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  				}  				if (minCursorDotPos < -slide - cursorDotPos) {  					minCursorDotPos = -slide - cursorDotPos;  				}  			}  		}  	}  	prevStrLen = len;  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left - 5' b - 1' Right + 5' Bottom + 1' DX.GetColor (164' 188' 188)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 180);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left' b' Left + 4 * logFontSize' Bottom' DX.GetColor (38' 48' 48)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidCustomSendMessageCommand) {  	Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  else {  	if (RoomIndex >= 0) {  		Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidCustomSendMessageCommand) {  	Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  else {  	if (RoomIndex >= 0) {  		Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (IsValidCustomSendMessageCommand) {  	Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  else {  	if (RoomIndex >= 0) {  		Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (RoomIndex >= 0) {  	Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  else {  	Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (RoomIndex >= 0) {  	Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  else {  	Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (setName) {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  }  else {  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  	DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  	DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  	DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  	DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  	DX.SetDrawArea (Left' b' Right' Bottom);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (len <= width) {  	DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.SetDrawArea (left' b' Right' Bottom);  	int slide = -len + width;  	if (len != prevStrLen) {  		if (len > prevStrLen) {  			int sub = len - prevStrLen;  			minCursorDotPos += sub;  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  		else {  			if (0 > -slide - minCursorDotPos) {  				minCursorDotPos = -slide;  			}  		}  	}  	if (minCursorDotPos >= 0) {  		if (cursorDotPos > len - minCursorDotPos) {  			if (cursorDotPos == len) {  				minCursorDotPos = -1;  			}  			else if (minCursorDotPos > len - cursorDotPos) {  				minCursorDotPos = len - cursorDotPos;  			}  			slide = -cursorDotPos + width;  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else if (cursorDotPos > -slide - minCursorDotPos) {  			int slide2 = -slide - minCursorDotPos;  			DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  	else {  		if (slide + cursorDotPos >= 0) {  			DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  		}  		else {  			DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  			DX.SetDrawAreaFull ();  			DX.DrawIMEInputString (left' b' commentHandle);  			if (drawCursor) {  				DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  			}  			if (minCursorDotPos < -slide - cursorDotPos) {  				minCursorDotPos = -slide - cursorDotPos;  			}  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos' b' left + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (minCursorDotPos >= 0) {  	if (cursorDotPos > len - minCursorDotPos) {  		if (cursorDotPos == len) {  			minCursorDotPos = -1;  		}  		else if (minCursorDotPos > len - cursorDotPos) {  			minCursorDotPos = len - cursorDotPos;  		}  		slide = -cursorDotPos + width;  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else if (cursorDotPos > -slide - minCursorDotPos) {  		int slide2 = -slide - minCursorDotPos;  		DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  else {  	if (slide + cursorDotPos >= 0) {  		DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  	}  	else {  		DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  		DX.SetDrawAreaFull ();  		DX.DrawIMEInputString (left' b' commentHandle);  		if (drawCursor) {  			DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  		}  		if (minCursorDotPos < -slide - cursorDotPos) {  			minCursorDotPos = -slide - cursorDotPos;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > len - minCursorDotPos) {  	if (cursorDotPos == len) {  		minCursorDotPos = -1;  	}  	else if (minCursorDotPos > len - cursorDotPos) {  		minCursorDotPos = len - cursorDotPos;  	}  	slide = -cursorDotPos + width;  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (cursorDotPos > -slide - minCursorDotPos) {  	int slide2 = -slide - minCursorDotPos;  	DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + cursorDotPos - slide2' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - slide2' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + cursorDotPos - slide2' b' left + cursorDotPos - slide2 + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (slide + cursorDotPos >= 0) {  	DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left + slide + cursorDotPos' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  }  else {  	DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  	DX.SetDrawAreaFull ();  	DX.DrawIMEInputString (left' b' commentHandle);  	if (drawCursor) {  		DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  	}  	if (minCursorDotPos < -slide - cursorDotPos) {  		minCursorDotPos = -slide - cursorDotPos;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left + slide' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left + slide + cursorDotPos' b' left + slide + cursorDotPos + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawString (left - cursorDotPos' b' tmp' DX.GetColor (255' 255' 255));  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (drawCursor) {  	DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: DX.DrawBox (left' b' left + 2' Bottom - 2' DX.GetColor (255' 255' 255)' DX.TRUE);  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: if (!NotDrawWindowFlag) {  	int n = (Height - LOG_FONT_SIZE - 2) / (LOG_FONT_SIZE + 2);  	int y = Height - (LOG_FONT_SIZE + 2) * 2 - 2 + (log.Count >= n ? 0 : (log.Count - n) * (LOG_FONT_SIZE + 2));  	for (int i = log.Count; --i >= 0;) {  		if (String.IsNullOrWhiteSpace (log [i].Item3)) {  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		else {  			DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  			DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  			DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  		}  		y -= LOG_FONT_SIZE + 2;  		if (y < 0) {  			break;  		}  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: for (int i = log.Count; --i >= 0;) {  	if (String.IsNullOrWhiteSpace (log [i].Item3)) {  		DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  	}  	else {  		DX.DrawString (Left + x1' Top + y' log [i].Item3' log [i].Item1);  		DX.DrawString (Left + x2' Top + y' ":"' log [i].Item1);  		DX.DrawString (Left + x3' Top + y' log [i].Item2' log [i].Item1);  	}  	y -= LOG_FONT_SIZE + 2;  	if (y < 0) {  		break;  	}  }  
Magic Number,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following statement contains a magic number: y -= LOG_FONT_SIZE + 2;  
Missing Default,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,UpdateLog,The following switch statement is missing a default case: switch (ChatMode) {  case eChatMode.All:  	{  		ChatMode = eChatMode.Personal;  		StringBuilder get = new StringBuilder (1024);  		DX.GetKeyInputString (get' commentHandle);  		if (get.Length <= 0) {  			setName = true;  		}  		else {  			setName = PersonalChatName == "";  			if (!setName) {  				DX.SetKeyInputString (""' commentHandle);  			}  		}  	}  	break;  case eChatMode.Personal:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				if (network.Params.User.UserName == Const.SERVER_ID) {  					ChatMode = eChatMode.System;  				}  				else {  					ChatMode = eChatMode.All;  				}  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			if (network.Params.User.UserName == Const.SERVER_ID) {  				ChatMode = eChatMode.System;  			}  			else {  				ChatMode = eChatMode.All;  			}  		}  	}  	break;  case eChatMode.System:  	{  		if (setName) {  			setName = false;  			StringBuilder get = new StringBuilder (1024);  			DX.GetKeyInputString (get' commentHandle);  			if (get.Length > 0) {  				PersonalChatName = get.ToString ();  			}  			else if (PersonalChatName == "") {  				ChatMode = eChatMode.All;  			}  			DX.SetKeyInputString (""' commentHandle);  		}  		else {  			ChatMode = eChatMode.All;  		}  	}  	break;  }  
Missing Default,Log,LogControl,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\LogControl\LogControl.cs,DrawLog,The following switch statement is missing a default case: switch (ChatMode) {  case eChatMode.All:  	if (IsValidCustomSendMessageCommand) {  		Utility.DrawCenterString (CustomSendMessageMode' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  	}  	else {  		if (RoomIndex >= 0) {  			Utility.DrawCenterString ("ルーム"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  		else {  			Utility.DrawCenterString ("ロビー"' Left + 2 * logFontSize' b' DX.GetColor (Param.AllColor.R' Param.AllColor.G' Param.AllColor.B));  		}  	}  	break;  case eChatMode.Personal:  	Utility.DrawCenterString ("個人"' Left + 2 * logFontSize' b' DX.GetColor (Param.PersonalColor.R' Param.PersonalColor.G' Param.PersonalColor.B));  	if (setName) {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 220);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (140' 120' 140)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom);  	}  	else {  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 120);  		DX.DrawBox (Left + 4 * logFontSize + 3' b' Left + 3 + 10 * logFontSize' Bottom' DX.GetColor (32' 32' 20)' DX.TRUE);  		DX.SetDrawBlendMode (DX.DX_BLENDMODE_NOBLEND' 0);  		DX.SetDrawArea (Left' b' Left + 3 + 10 * logFontSize' Bottom);  		DX.DrawString (Left + 4 * logFontSize + 5' b' PersonalChatName' DX.GetColor (255' 255' 255));  		DX.SetDrawArea (Left' b' Right' Bottom);  	}  	break;  case eChatMode.System:  	Utility.DrawCenterString ("システム"' Left + 2 * logFontSize' b' DX.GetColor (Param.SystemColor.R' Param.SystemColor.G' Param.SystemColor.B));  	break;  }  
