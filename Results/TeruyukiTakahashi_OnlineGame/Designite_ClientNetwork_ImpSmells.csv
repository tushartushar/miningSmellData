Implementation smell,Namespace,Class,File,Method,Description
Long Method,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The method has 169 lines of code.
Long Method,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The method has 365 lines of code.
Complex Method,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,Cyclomatic complexity of the method is 36
Complex Method,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,Cyclomatic complexity of the method is 155
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The length of the statement  "			//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName " is 200.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The length of the statement  "			//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP? " is 142.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The length of the statement  "					Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode)); " is 120.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The length of the statement  "		DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE); " is 127.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The length of the statement  "	//	DX.DrawStringToHandle( 0' 75' checkClientUpdateCount.ToString( "F2" )' control.COLOR_WHITE' control.GetFont( FontDefines.FONT_SIZE_20 ) ); " is 141.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,RecvFileData,The length of the statement  "	//			control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 135.
Long Statement,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,RecvFileData,The length of the statement  "	//	control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 133.
Empty Catch Block,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,CheckClientUpdate,The method has an empty catch block.
Empty Catch Block,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The method has an empty catch block.
Empty Catch Block,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The method has an empty catch block.
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ClientNetwork,The following statement contains a magic number: endCount = 4000;  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,OnConnectToMainServer,The following statement contains a magic number: GettingIPListCount = 1000;  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost) {  	ConnectedToHost = CheckConnection (control);  	if (ConnectedToHost && !CancelToConnect) {  		ParseMessages (control);  		SendData (control' Params);  		RecvData (control' Params);  		if (Params.IsValidUDPHandle) {  			SendDataUDP (control' Params);  			RecvDataUDP (control' Params);  		}  		SendFileData (control);  		if (ClientUpdated) {  			if (!showEndFlag) {  				showEndFlag = true;  				CancelToConnect = true;  				control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  				control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  				control.KeyValidity = false;  			}  		}  		if (!ConnectToMainServer) {  			checkClientUpdateCount -= control.MilliSecond;  			if (checkClientUpdateCount < 0) {  				CheckClientUpdate ();  			}  		}  		if (FileRecieving) {  			drawFileRecievingCount += control.MilliSecond;  			if (drawFileRecievingCount > 1000000) {  				drawFileRecievingCount -= 1000000;  			}  		}  	}  	else {  		if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  			if (CancelToConnect) {  				control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			}  			else {  				control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  			}  		}  		DX.CloseNetWork (Params.TCPHandle);  		if (Params.IsValidUDPHandle) {  			DX.DeleteUDPSocket (Params.UDPHandle);  		}  		LoggedIn = false;  		LoggingOut = false;  		LoggingIn = false;  		ConnectedToHost = false;  		ConnectingToHost = false;  		WaitToConnectToHost = false;  		CancelToConnect = false;  		Params.UDPHandle = -1;  		CheckingClientUpdate = false;  		ChangingSuspendCheckPingFlag = false;  		InitRecvInfo ();  		InitSendInfo ();  		if (gettingIPList) {  			OnConnectToMainServer ();  		}  		else if (gettingIPListPrevConnectedServerFlag) {  			OnConnect ();  			gettingIPListPrevConnectedServerFlag = false;  		}  		else {  			gettingIPListNotShowMessageFlag = false;  		}  	}  	if (ConnectedToHost && gettingIPList) {  		if (!gettingIPListSendMessageFlag) {  			AddSendData ("getIP");  			gettingIPListSendMessageFlag = true;  		}  	}  }  else {  	if (ConnectingToHost) {  		if (CancelToConnect) {  			CancelConnect ();  		}  		else {  			ConnectedToHost = DX.GetNetWorkAcceptState (Params.TCPHandle) == 1;  			ConnectingToHost = !ConnectedToHost;  			if (ConnectedToHost) {  				if (!gettingIPListNotShowMessageFlag) {  					control.AddMessage2 ("サーバーに接続しました．"' Const.SYSTEM_ID);  				}  				if (!gettingIPList) {  					gettingIPListNotShowMessageFlag = false;  				}  				if (!ConnectToMainServer) {  					CheckClientUpdate ();  				}  				GetRoomInfo ();  			}  			else if (gettingIPList) {  				GettingIPListCount -= control.MilliSecond;  				if (GettingIPListCount <= 0) {  					gettingIPList = false;  					CancelToConnect = true;  					GotIPListFunc ();  					if (gettingIPListPrevConnectedServerFlag) {  						OnConnect ();  						gettingIPListPrevConnectedServerFlag = false;  					}  					else {  						gettingIPListNotShowMessageFlag = false;  					}  				}  			}  		}  	}  	else if (WaitToConnectToHost) {  		WaitToConnectToHost = false;  		DX.IPDATA ip = new DX.IPDATA ();  		int port;  		if (ConnectToMainServer) {  			ip.d1 = Params.MainHostIP1;  			ip.d2 = Params.MainHostIP2;  			ip.d3 = Params.MainHostIP3;  			ip.d4 = Params.MainHostIP4;  			port = Params.MainHostPort;  		}  		else {  			ip.d1 = Params.HostIP1;  			ip.d2 = Params.HostIP2;  			ip.d3 = Params.HostIP3;  			ip.d4 = Params.HostIP4;  			port = Params.HostPort;  		}  		Params.TCPHandle = DX.ConnectNetWork_ASync (ip' port);  		ConnectingToHost = true;  		//	control.AddMessage2( "サーバー接続を開始しました．"' Const.SYSTEM_ID );  	}  	else if (GettingIPList) {  		GettingIPList = false;  	}  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  		endCount -= control.MilliSecond;  		if (endCount < 0) {  			if (!endFlag) {  				endFlag = true;  				RestartLauncherFunc ();  			}  		}  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost) {  	ConnectedToHost = CheckConnection (control);  	if (ConnectedToHost && !CancelToConnect) {  		ParseMessages (control);  		SendData (control' Params);  		RecvData (control' Params);  		if (Params.IsValidUDPHandle) {  			SendDataUDP (control' Params);  			RecvDataUDP (control' Params);  		}  		SendFileData (control);  		if (ClientUpdated) {  			if (!showEndFlag) {  				showEndFlag = true;  				CancelToConnect = true;  				control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  				control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  				control.KeyValidity = false;  			}  		}  		if (!ConnectToMainServer) {  			checkClientUpdateCount -= control.MilliSecond;  			if (checkClientUpdateCount < 0) {  				CheckClientUpdate ();  			}  		}  		if (FileRecieving) {  			drawFileRecievingCount += control.MilliSecond;  			if (drawFileRecievingCount > 1000000) {  				drawFileRecievingCount -= 1000000;  			}  		}  	}  	else {  		if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  			if (CancelToConnect) {  				control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			}  			else {  				control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  			}  		}  		DX.CloseNetWork (Params.TCPHandle);  		if (Params.IsValidUDPHandle) {  			DX.DeleteUDPSocket (Params.UDPHandle);  		}  		LoggedIn = false;  		LoggingOut = false;  		LoggingIn = false;  		ConnectedToHost = false;  		ConnectingToHost = false;  		WaitToConnectToHost = false;  		CancelToConnect = false;  		Params.UDPHandle = -1;  		CheckingClientUpdate = false;  		ChangingSuspendCheckPingFlag = false;  		InitRecvInfo ();  		InitSendInfo ();  		if (gettingIPList) {  			OnConnectToMainServer ();  		}  		else if (gettingIPListPrevConnectedServerFlag) {  			OnConnect ();  			gettingIPListPrevConnectedServerFlag = false;  		}  		else {  			gettingIPListNotShowMessageFlag = false;  		}  	}  	if (ConnectedToHost && gettingIPList) {  		if (!gettingIPListSendMessageFlag) {  			AddSendData ("getIP");  			gettingIPListSendMessageFlag = true;  		}  	}  }  else {  	if (ConnectingToHost) {  		if (CancelToConnect) {  			CancelConnect ();  		}  		else {  			ConnectedToHost = DX.GetNetWorkAcceptState (Params.TCPHandle) == 1;  			ConnectingToHost = !ConnectedToHost;  			if (ConnectedToHost) {  				if (!gettingIPListNotShowMessageFlag) {  					control.AddMessage2 ("サーバーに接続しました．"' Const.SYSTEM_ID);  				}  				if (!gettingIPList) {  					gettingIPListNotShowMessageFlag = false;  				}  				if (!ConnectToMainServer) {  					CheckClientUpdate ();  				}  				GetRoomInfo ();  			}  			else if (gettingIPList) {  				GettingIPListCount -= control.MilliSecond;  				if (GettingIPListCount <= 0) {  					gettingIPList = false;  					CancelToConnect = true;  					GotIPListFunc ();  					if (gettingIPListPrevConnectedServerFlag) {  						OnConnect ();  						gettingIPListPrevConnectedServerFlag = false;  					}  					else {  						gettingIPListNotShowMessageFlag = false;  					}  				}  			}  		}  	}  	else if (WaitToConnectToHost) {  		WaitToConnectToHost = false;  		DX.IPDATA ip = new DX.IPDATA ();  		int port;  		if (ConnectToMainServer) {  			ip.d1 = Params.MainHostIP1;  			ip.d2 = Params.MainHostIP2;  			ip.d3 = Params.MainHostIP3;  			ip.d4 = Params.MainHostIP4;  			port = Params.MainHostPort;  		}  		else {  			ip.d1 = Params.HostIP1;  			ip.d2 = Params.HostIP2;  			ip.d3 = Params.HostIP3;  			ip.d4 = Params.HostIP4;  			port = Params.HostPort;  		}  		Params.TCPHandle = DX.ConnectNetWork_ASync (ip' port);  		ConnectingToHost = true;  		//	control.AddMessage2( "サーバー接続を開始しました．"' Const.SYSTEM_ID );  	}  	else if (GettingIPList) {  		GettingIPList = false;  	}  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  		endCount -= control.MilliSecond;  		if (endCount < 0) {  			if (!endFlag) {  				endFlag = true;  				RestartLauncherFunc ();  			}  		}  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost) {  	ConnectedToHost = CheckConnection (control);  	if (ConnectedToHost && !CancelToConnect) {  		ParseMessages (control);  		SendData (control' Params);  		RecvData (control' Params);  		if (Params.IsValidUDPHandle) {  			SendDataUDP (control' Params);  			RecvDataUDP (control' Params);  		}  		SendFileData (control);  		if (ClientUpdated) {  			if (!showEndFlag) {  				showEndFlag = true;  				CancelToConnect = true;  				control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  				control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  				control.KeyValidity = false;  			}  		}  		if (!ConnectToMainServer) {  			checkClientUpdateCount -= control.MilliSecond;  			if (checkClientUpdateCount < 0) {  				CheckClientUpdate ();  			}  		}  		if (FileRecieving) {  			drawFileRecievingCount += control.MilliSecond;  			if (drawFileRecievingCount > 1000000) {  				drawFileRecievingCount -= 1000000;  			}  		}  	}  	else {  		if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  			if (CancelToConnect) {  				control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			}  			else {  				control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  			}  		}  		DX.CloseNetWork (Params.TCPHandle);  		if (Params.IsValidUDPHandle) {  			DX.DeleteUDPSocket (Params.UDPHandle);  		}  		LoggedIn = false;  		LoggingOut = false;  		LoggingIn = false;  		ConnectedToHost = false;  		ConnectingToHost = false;  		WaitToConnectToHost = false;  		CancelToConnect = false;  		Params.UDPHandle = -1;  		CheckingClientUpdate = false;  		ChangingSuspendCheckPingFlag = false;  		InitRecvInfo ();  		InitSendInfo ();  		if (gettingIPList) {  			OnConnectToMainServer ();  		}  		else if (gettingIPListPrevConnectedServerFlag) {  			OnConnect ();  			gettingIPListPrevConnectedServerFlag = false;  		}  		else {  			gettingIPListNotShowMessageFlag = false;  		}  	}  	if (ConnectedToHost && gettingIPList) {  		if (!gettingIPListSendMessageFlag) {  			AddSendData ("getIP");  			gettingIPListSendMessageFlag = true;  		}  	}  }  else {  	if (ConnectingToHost) {  		if (CancelToConnect) {  			CancelConnect ();  		}  		else {  			ConnectedToHost = DX.GetNetWorkAcceptState (Params.TCPHandle) == 1;  			ConnectingToHost = !ConnectedToHost;  			if (ConnectedToHost) {  				if (!gettingIPListNotShowMessageFlag) {  					control.AddMessage2 ("サーバーに接続しました．"' Const.SYSTEM_ID);  				}  				if (!gettingIPList) {  					gettingIPListNotShowMessageFlag = false;  				}  				if (!ConnectToMainServer) {  					CheckClientUpdate ();  				}  				GetRoomInfo ();  			}  			else if (gettingIPList) {  				GettingIPListCount -= control.MilliSecond;  				if (GettingIPListCount <= 0) {  					gettingIPList = false;  					CancelToConnect = true;  					GotIPListFunc ();  					if (gettingIPListPrevConnectedServerFlag) {  						OnConnect ();  						gettingIPListPrevConnectedServerFlag = false;  					}  					else {  						gettingIPListNotShowMessageFlag = false;  					}  				}  			}  		}  	}  	else if (WaitToConnectToHost) {  		WaitToConnectToHost = false;  		DX.IPDATA ip = new DX.IPDATA ();  		int port;  		if (ConnectToMainServer) {  			ip.d1 = Params.MainHostIP1;  			ip.d2 = Params.MainHostIP2;  			ip.d3 = Params.MainHostIP3;  			ip.d4 = Params.MainHostIP4;  			port = Params.MainHostPort;  		}  		else {  			ip.d1 = Params.HostIP1;  			ip.d2 = Params.HostIP2;  			ip.d3 = Params.HostIP3;  			ip.d4 = Params.HostIP4;  			port = Params.HostPort;  		}  		Params.TCPHandle = DX.ConnectNetWork_ASync (ip' port);  		ConnectingToHost = true;  		//	control.AddMessage2( "サーバー接続を開始しました．"' Const.SYSTEM_ID );  	}  	else if (GettingIPList) {  		GettingIPList = false;  	}  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  		endCount -= control.MilliSecond;  		if (endCount < 0) {  			if (!endFlag) {  				endFlag = true;  				RestartLauncherFunc ();  			}  		}  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost) {  	ConnectedToHost = CheckConnection (control);  	if (ConnectedToHost && !CancelToConnect) {  		ParseMessages (control);  		SendData (control' Params);  		RecvData (control' Params);  		if (Params.IsValidUDPHandle) {  			SendDataUDP (control' Params);  			RecvDataUDP (control' Params);  		}  		SendFileData (control);  		if (ClientUpdated) {  			if (!showEndFlag) {  				showEndFlag = true;  				CancelToConnect = true;  				control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  				control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  				control.KeyValidity = false;  			}  		}  		if (!ConnectToMainServer) {  			checkClientUpdateCount -= control.MilliSecond;  			if (checkClientUpdateCount < 0) {  				CheckClientUpdate ();  			}  		}  		if (FileRecieving) {  			drawFileRecievingCount += control.MilliSecond;  			if (drawFileRecievingCount > 1000000) {  				drawFileRecievingCount -= 1000000;  			}  		}  	}  	else {  		if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  			if (CancelToConnect) {  				control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			}  			else {  				control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  			}  		}  		DX.CloseNetWork (Params.TCPHandle);  		if (Params.IsValidUDPHandle) {  			DX.DeleteUDPSocket (Params.UDPHandle);  		}  		LoggedIn = false;  		LoggingOut = false;  		LoggingIn = false;  		ConnectedToHost = false;  		ConnectingToHost = false;  		WaitToConnectToHost = false;  		CancelToConnect = false;  		Params.UDPHandle = -1;  		CheckingClientUpdate = false;  		ChangingSuspendCheckPingFlag = false;  		InitRecvInfo ();  		InitSendInfo ();  		if (gettingIPList) {  			OnConnectToMainServer ();  		}  		else if (gettingIPListPrevConnectedServerFlag) {  			OnConnect ();  			gettingIPListPrevConnectedServerFlag = false;  		}  		else {  			gettingIPListNotShowMessageFlag = false;  		}  	}  	if (ConnectedToHost && gettingIPList) {  		if (!gettingIPListSendMessageFlag) {  			AddSendData ("getIP");  			gettingIPListSendMessageFlag = true;  		}  	}  }  else {  	if (ConnectingToHost) {  		if (CancelToConnect) {  			CancelConnect ();  		}  		else {  			ConnectedToHost = DX.GetNetWorkAcceptState (Params.TCPHandle) == 1;  			ConnectingToHost = !ConnectedToHost;  			if (ConnectedToHost) {  				if (!gettingIPListNotShowMessageFlag) {  					control.AddMessage2 ("サーバーに接続しました．"' Const.SYSTEM_ID);  				}  				if (!gettingIPList) {  					gettingIPListNotShowMessageFlag = false;  				}  				if (!ConnectToMainServer) {  					CheckClientUpdate ();  				}  				GetRoomInfo ();  			}  			else if (gettingIPList) {  				GettingIPListCount -= control.MilliSecond;  				if (GettingIPListCount <= 0) {  					gettingIPList = false;  					CancelToConnect = true;  					GotIPListFunc ();  					if (gettingIPListPrevConnectedServerFlag) {  						OnConnect ();  						gettingIPListPrevConnectedServerFlag = false;  					}  					else {  						gettingIPListNotShowMessageFlag = false;  					}  				}  			}  		}  	}  	else if (WaitToConnectToHost) {  		WaitToConnectToHost = false;  		DX.IPDATA ip = new DX.IPDATA ();  		int port;  		if (ConnectToMainServer) {  			ip.d1 = Params.MainHostIP1;  			ip.d2 = Params.MainHostIP2;  			ip.d3 = Params.MainHostIP3;  			ip.d4 = Params.MainHostIP4;  			port = Params.MainHostPort;  		}  		else {  			ip.d1 = Params.HostIP1;  			ip.d2 = Params.HostIP2;  			ip.d3 = Params.HostIP3;  			ip.d4 = Params.HostIP4;  			port = Params.HostPort;  		}  		Params.TCPHandle = DX.ConnectNetWork_ASync (ip' port);  		ConnectingToHost = true;  		//	control.AddMessage2( "サーバー接続を開始しました．"' Const.SYSTEM_ID );  	}  	else if (GettingIPList) {  		GettingIPList = false;  	}  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  		endCount -= control.MilliSecond;  		if (endCount < 0) {  			if (!endFlag) {  				endFlag = true;  				RestartLauncherFunc ();  			}  		}  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost && !CancelToConnect) {  	ParseMessages (control);  	SendData (control' Params);  	RecvData (control' Params);  	if (Params.IsValidUDPHandle) {  		SendDataUDP (control' Params);  		RecvDataUDP (control' Params);  	}  	SendFileData (control);  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  	}  	if (!ConnectToMainServer) {  		checkClientUpdateCount -= control.MilliSecond;  		if (checkClientUpdateCount < 0) {  			CheckClientUpdate ();  		}  	}  	if (FileRecieving) {  		drawFileRecievingCount += control.MilliSecond;  		if (drawFileRecievingCount > 1000000) {  			drawFileRecievingCount -= 1000000;  		}  	}  }  else {  	if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  		if (CancelToConnect) {  			control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  		}  		else {  			control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  			control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  		}  	}  	DX.CloseNetWork (Params.TCPHandle);  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	LoggedIn = false;  	LoggingOut = false;  	LoggingIn = false;  	ConnectedToHost = false;  	ConnectingToHost = false;  	WaitToConnectToHost = false;  	CancelToConnect = false;  	Params.UDPHandle = -1;  	CheckingClientUpdate = false;  	ChangingSuspendCheckPingFlag = false;  	InitRecvInfo ();  	InitSendInfo ();  	if (gettingIPList) {  		OnConnectToMainServer ();  	}  	else if (gettingIPListPrevConnectedServerFlag) {  		OnConnect ();  		gettingIPListPrevConnectedServerFlag = false;  	}  	else {  		gettingIPListNotShowMessageFlag = false;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost && !CancelToConnect) {  	ParseMessages (control);  	SendData (control' Params);  	RecvData (control' Params);  	if (Params.IsValidUDPHandle) {  		SendDataUDP (control' Params);  		RecvDataUDP (control' Params);  	}  	SendFileData (control);  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  	}  	if (!ConnectToMainServer) {  		checkClientUpdateCount -= control.MilliSecond;  		if (checkClientUpdateCount < 0) {  			CheckClientUpdate ();  		}  	}  	if (FileRecieving) {  		drawFileRecievingCount += control.MilliSecond;  		if (drawFileRecievingCount > 1000000) {  			drawFileRecievingCount -= 1000000;  		}  	}  }  else {  	if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  		if (CancelToConnect) {  			control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  		}  		else {  			control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  			control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  		}  	}  	DX.CloseNetWork (Params.TCPHandle);  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	LoggedIn = false;  	LoggingOut = false;  	LoggingIn = false;  	ConnectedToHost = false;  	ConnectingToHost = false;  	WaitToConnectToHost = false;  	CancelToConnect = false;  	Params.UDPHandle = -1;  	CheckingClientUpdate = false;  	ChangingSuspendCheckPingFlag = false;  	InitRecvInfo ();  	InitSendInfo ();  	if (gettingIPList) {  		OnConnectToMainServer ();  	}  	else if (gettingIPListPrevConnectedServerFlag) {  		OnConnect ();  		gettingIPListPrevConnectedServerFlag = false;  	}  	else {  		gettingIPListNotShowMessageFlag = false;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ConnectedToHost && !CancelToConnect) {  	ParseMessages (control);  	SendData (control' Params);  	RecvData (control' Params);  	if (Params.IsValidUDPHandle) {  		SendDataUDP (control' Params);  		RecvDataUDP (control' Params);  	}  	SendFileData (control);  	if (ClientUpdated) {  		if (!showEndFlag) {  			showEndFlag = true;  			CancelToConnect = true;  			control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  			control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  			control.KeyValidity = false;  		}  	}  	if (!ConnectToMainServer) {  		checkClientUpdateCount -= control.MilliSecond;  		if (checkClientUpdateCount < 0) {  			CheckClientUpdate ();  		}  	}  	if (FileRecieving) {  		drawFileRecievingCount += control.MilliSecond;  		if (drawFileRecievingCount > 1000000) {  			drawFileRecievingCount -= 1000000;  		}  	}  }  else {  	if (!ClientUpdated && !gettingIPListNotShowMessageFlag) {  		if (CancelToConnect) {  			control.AddMessage2 ("サーバーとの接続を切りました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  		}  		else {  			control.AddMessage2 ("サーバーとの接続が切れました．"' Const.SYSTEM_ID' control.COLOR_RED);  			control.AddMessage2 (lostNetworkLength + "byte."' Const.SYSTEM_ID' control.COLOR_ORANGE);  		}  	}  	DX.CloseNetWork (Params.TCPHandle);  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	LoggedIn = false;  	LoggingOut = false;  	LoggingIn = false;  	ConnectedToHost = false;  	ConnectingToHost = false;  	WaitToConnectToHost = false;  	CancelToConnect = false;  	Params.UDPHandle = -1;  	CheckingClientUpdate = false;  	ChangingSuspendCheckPingFlag = false;  	InitRecvInfo ();  	InitSendInfo ();  	if (gettingIPList) {  		OnConnectToMainServer ();  	}  	else if (gettingIPListPrevConnectedServerFlag) {  		OnConnect ();  		gettingIPListPrevConnectedServerFlag = false;  	}  	else {  		gettingIPListNotShowMessageFlag = false;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ClientUpdated) {  	if (!showEndFlag) {  		showEndFlag = true;  		CancelToConnect = true;  		control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  		control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  		control.KeyValidity = false;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (!showEndFlag) {  	showEndFlag = true;  	CancelToConnect = true;  	control.AddMessage2 ("クライアントが更新されています．"' Const.SYSTEM_ID);  	control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  	control.KeyValidity = false;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (FileRecieving) {  	drawFileRecievingCount += control.MilliSecond;  	if (drawFileRecievingCount > 1000000) {  		drawFileRecievingCount -= 1000000;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (FileRecieving) {  	drawFileRecievingCount += control.MilliSecond;  	if (drawFileRecievingCount > 1000000) {  		drawFileRecievingCount -= 1000000;  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (drawFileRecievingCount > 1000000) {  	drawFileRecievingCount -= 1000000;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (drawFileRecievingCount > 1000000) {  	drawFileRecievingCount -= 1000000;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: drawFileRecievingCount -= 1000000;  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (ClientUpdated) {  	if (!showEndFlag) {  		showEndFlag = true;  		CancelToConnect = true;  		control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  		control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  		control.KeyValidity = false;  	}  	endCount -= control.MilliSecond;  	if (endCount < 0) {  		if (!endFlag) {  			endFlag = true;  			RestartLauncherFunc ();  		}  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: if (!showEndFlag) {  	showEndFlag = true;  	CancelToConnect = true;  	control.AddMessage2 ("クライアントファイルが更新されています．"' Const.SYSTEM_ID);  	control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  	control.KeyValidity = false;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Update,The following statement contains a magic number: control.AddMessage2 ((endCount / 1000).ToString ("F2") + "秒後にランチャーを起動します．"' Const.SYSTEM_ID);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: while (RecvDataList.Count > 0) {  	var data = RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "login":  		//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!LoggedIn) {  					break;  				}  				if (split [2] != Params.User.UserName) {  					control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  				}  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 10:  				if (!LoggingIn) {  					LogOut ();  					break;  				}  				Params.User.UserName = split [2];  				control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  				if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  					Params.User.UserID = Params.User.UserName;  					Params.Guest = true;  					control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  				}  				else {  					Params.Guest = false;  				}  				LoggedIn = true;  				LoggingIn = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  				}  				if (split [2] == Const.MAIN_SERVER_ID) {  					Params.UDPHandle = -1;  				}  				else {  					Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  					AddSendData ("UDPHandle"' Params.UDPHandle + "");  					RecievedFileNum = 0;  					RecieveFileNum = -1;  					downloadFilePath.Clear ();  					AddSendData ("calcPingReq");  				}  				break;  			case 11:  				if (UserLoggedIn != null) {  					UserLoggedIn (split [2]);  				}  				break;  			case 1:  				control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  				LoggedIn = true;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case 2:  				control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -3:  				control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -4:  				control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			case -1:  			case -2:  			default:  				control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingIn = false;  				if (UserFailedLogIn != null) {  					UserFailedLogIn ();  				}  				break;  			}  		}  		break;  	case "gameInfo":  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		//受信  Files  		{  			RecieveFileNum = (split.Length - 1) / 2;  			RecieveFileSize = 0;  			for (int i = 0' n = split.Length / 2; i < n; i++) {  				RecieveFileSize += long.Parse (split [i * 2 + 2]);  				downloadFilePath.Add (split [i * 2 + 1]);  			}  			RecievedFileNum = 0;  			RecievedFileSize = 0;  			AddSendData ("gameData");  			if (RecieveFileNum > 0) {  				try {  					CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  				}  				catch {  				}  			}  		}  		break;  	case "gameData":  		//受信	result( -1…error )  		{  			FileUpdated = true;  		}  		break;  	case "logout":  		//受信  null or 1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split.Length == 1) {  				control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  				LoggedIn = false;  				LoggingOut = false;  			}  			else {  				if (split [1] == Params.User.UserName) {  					control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  					LoggedIn = false;  					LoggingOut = false;  					if (Params.IsValidUDPHandle) {  						DX.DeleteUDPSocket (Params.UDPHandle);  						Params.UDPHandle = -1;  					}  				}  				else {  					control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  				}  				if (UserLoggedOut != null) {  					UserLoggedOut (split [1]);  				}  			}  		}  		break;  	case "disconnected":  		//受信  1…UserName  		{  			if (!LoggedIn) {  				break;  			}  			if (split [1] == Const.MAIN_SERVER_ID) {  				break;  			}  			control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			if (DisconnectedFunc != null) {  				DisconnectedFunc (split [1]);  			}  		}  		break;  	case "setupUDP":  		//受信  1…server's udp recv port' 2…server's udp send port  		{  			int recv = int.Parse (split [1]);  			int send = int.Parse (split [2]);  			if (recv == -1 || send == -1) {  				control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  				OffConnect ();  				break;  			}  			Params.UDPRecvPort = send;  			Params.UDPSendPort = recv;  		}  		break;  	case "get":  		//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "sendRoomInfo":  		//受信  1…state(-1…start' -2…userData' 0…end)  		//受信  1…Connected Number' 2…Logged In Number  		//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  		//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == 0) {  					if (RoomUpdated != null) {  						RoomUpdated ();  					}  				}  				else if (state == -2) {  					LobbyPlayers.Clear ();  				}  				else {  					Rooms.Clear ();  				}  			}  			else if (split.Length == 3) {  				ConnectedNumber = int.Parse (split [1]);  				LoggedInNumber = int.Parse (split [2]);  			}  			else if (split.Length == 4) {  				string id = split [1];  				if (id == Const.MAIN_SERVER_ID) {  					break;  				}  				string name = split [2];  				bool guest = bool.Parse (split [3]);  				string add = id + "\t" + name + "\t" + guest;  				LobbyPlayers.Add (add);  			}  			else {  				int room = int.Parse (split [1]);  				int game = int.Parse (split [2]);  				int min = int.Parse (split [3]);  				int max = int.Parse (split [4]);  				int now = int.Parse (split [5]);  				string creator = split [6];  				bool ready = bool.Parse (split [7]);  				bool canEnter = bool.Parse (split [8]);  				bool needUDP = bool.Parse (split [9]);  				bool need3DContents = bool.Parse (split [10]);  				bool onlyWindowMode = bool.Parse (split [11]);  				Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  			}  		}  		break;  	case "getSelectedPlayerInfo":  		//受信	1…data  		{  			if (GetLobbySelectedPlayerInfo != null) {  				List<string> info = new List<string> ();  				string tmp = "";  				foreach (var item in split [1].Split (';')) {  					if (item == "" && tmp != "") {  						tmp = tmp.TrimEnd ('\t');  						info.Add (tmp);  						tmp = "";  						continue;  					}  					tmp += item + "\t";  				}  				if (tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  				}  				GetLobbySelectedPlayerInfo (info);  			}  		}  		break;  	case "Ping":  		//受信  		{  			AddSendData ("Pong");  		}  		break;  	case "setPingInfo":  		//受信	1…UserID' 2…ping  		{  			if (split [1] == Params.User.UserID) {  				Params.Ping = double.Parse (split [2]);  			}  		}  		break;  	case "suspendCheckPingFlag":  		//受信	1…result(-1…error' other…flag)  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (!changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			case 1:  				if (changingSuspendCheckPingValue) {  					ChangingSuspendCheckPingFlag = false;  				}  				break;  			default:  				ChangingSuspendCheckPingFlag = false;  				break;  			}  		}  		break;  	case "gameCommand":  		flag = !(LoggedIn && Params.User.Room != -1);  		break;  	case "getIP":  		//受信	  		//送信	1…state(-1…start' 0…end)  		//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  		{  			if (split.Length == 2) {  				int state = int.Parse (split [1]);  				if (state == -1) {  					IPList.Clear ();  				}  				else {  					GotIPListFunc ();  				}  			}  			else {  				IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  			}  		}  		break;  	case "checkClientUpdate":  		//受信	1…result(-1…error)  		//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  		{  			if (split.Length == 2) {  				try {  					int result = int.Parse (split [1]);  					if (result == -1) {  						ClientUpdated = true;  						break;  					}  				}  				catch {  				}  			}  			ClientUpdated = (split.Length - 1) / 2 > 0;  			CheckingClientUpdate = false;  		}  		break;  	case "clientUpdate":  		//受信	result( -1…error )  		{  			ClientUpdated = true;  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	RecvDataList.RemoveAt (0);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (split [0]) {  case "login":  	//受信  1…result(0…ok' 1…has logged in' 2…has logged in from another PC' 10…ok(set name)' 11…ok(send logged in UserName)' -1…unexpected error' -2…password error' -3…wrong password' -4…no id)' 2…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!LoggedIn) {  				break;  			}  			if (split [2] != Params.User.UserName) {  				control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  			}  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 10:  			if (!LoggingIn) {  				LogOut ();  				break;  			}  			Params.User.UserName = split [2];  			control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  			if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  				Params.User.UserID = Params.User.UserName;  				Params.Guest = true;  				control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  			}  			else {  				Params.Guest = false;  			}  			LoggedIn = true;  			LoggingIn = false;  			if (Params.IsValidUDPHandle) {  				DX.DeleteUDPSocket (Params.UDPHandle);  			}  			if (split [2] == Const.MAIN_SERVER_ID) {  				Params.UDPHandle = -1;  			}  			else {  				Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  				AddSendData ("UDPHandle"' Params.UDPHandle + "");  				RecievedFileNum = 0;  				RecieveFileNum = -1;  				downloadFilePath.Clear ();  				AddSendData ("calcPingReq");  			}  			break;  		case 11:  			if (UserLoggedIn != null) {  				UserLoggedIn (split [2]);  			}  			break;  		case 1:  			control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  			LoggedIn = true;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case 2:  			control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -3:  			control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -4:  			control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		case -1:  		case -2:  		default:  			control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingIn = false;  			if (UserFailedLogIn != null) {  				UserFailedLogIn ();  			}  			break;  		}  	}  	break;  case "gameInfo":  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	//受信  Files  	{  		RecieveFileNum = (split.Length - 1) / 2;  		RecieveFileSize = 0;  		for (int i = 0' n = split.Length / 2; i < n; i++) {  			RecieveFileSize += long.Parse (split [i * 2 + 2]);  			downloadFilePath.Add (split [i * 2 + 1]);  		}  		RecievedFileNum = 0;  		RecievedFileSize = 0;  		AddSendData ("gameData");  		if (RecieveFileNum > 0) {  			try {  				CSUtility.FileControl.DeleteDirectory (FolderInfo.GetGameFolder ("DATA"));  			}  			catch {  			}  		}  	}  	break;  case "gameData":  	//受信	result( -1…error )  	{  		FileUpdated = true;  	}  	break;  case "logout":  	//受信  null or 1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split.Length == 1) {  			control.AddMessage2 ("ログインしていません．"' Const.SYSTEM_ID' control.COLOR_RED);  			LoggedIn = false;  			LoggingOut = false;  		}  		else {  			if (split [1] == Params.User.UserName) {  				control.AddMessage2 ("ログアウトしました．"' Const.SYSTEM_ID);  				LoggedIn = false;  				LoggingOut = false;  				if (Params.IsValidUDPHandle) {  					DX.DeleteUDPSocket (Params.UDPHandle);  					Params.UDPHandle = -1;  				}  			}  			else {  				control.AddMessage2 (split [1] + "がログアウトしました．"' Const.SYSTEM_ID);  			}  			if (UserLoggedOut != null) {  				UserLoggedOut (split [1]);  			}  		}  	}  	break;  case "disconnected":  	//受信  1…UserName  	{  		if (!LoggedIn) {  			break;  		}  		if (split [1] == Const.MAIN_SERVER_ID) {  			break;  		}  		control.AddMessage2 (split [1] + "との接続が切れました．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  		if (DisconnectedFunc != null) {  			DisconnectedFunc (split [1]);  		}  	}  	break;  case "setupUDP":  	//受信  1…server's udp recv port' 2…server's udp send port  	{  		int recv = int.Parse (split [1]);  		int send = int.Parse (split [2]);  		if (recv == -1 || send == -1) {  			control.AddMessage2 ("UDPの設定時にエラーが発生しました．"' Const.SYSTEM_ID' control.COLOR_RED);  			OffConnect ();  			break;  		}  		Params.UDPRecvPort = send;  		Params.UDPSendPort = recv;  	}  	break;  case "get":  	//受信  1～…data (0…Registered UserID' 1…Connected UserIP' 2…LoggedIn UserID' 3…RoomIndex)  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "sendRoomInfo":  	//受信  1…state(-1…start' -2…userData' 0…end)  	//受信  1…Connected Number' 2…Logged In Number  	//受信  1…UserID' 2…UserName' 3…Guest?//' 4…data  	//受信  1…RoomIndex' 2…GameIndex' 3…MinPlayerNumber' 4…MaxPlayerNumber' 5…NowPlayerNumber' 6…Create UserName' 7…ready?' 8…canEnter?' 9…need UDP?  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == 0) {  				if (RoomUpdated != null) {  					RoomUpdated ();  				}  			}  			else if (state == -2) {  				LobbyPlayers.Clear ();  			}  			else {  				Rooms.Clear ();  			}  		}  		else if (split.Length == 3) {  			ConnectedNumber = int.Parse (split [1]);  			LoggedInNumber = int.Parse (split [2]);  		}  		else if (split.Length == 4) {  			string id = split [1];  			if (id == Const.MAIN_SERVER_ID) {  				break;  			}  			string name = split [2];  			bool guest = bool.Parse (split [3]);  			string add = id + "\t" + name + "\t" + guest;  			LobbyPlayers.Add (add);  		}  		else {  			int room = int.Parse (split [1]);  			int game = int.Parse (split [2]);  			int min = int.Parse (split [3]);  			int max = int.Parse (split [4]);  			int now = int.Parse (split [5]);  			string creator = split [6];  			bool ready = bool.Parse (split [7]);  			bool canEnter = bool.Parse (split [8]);  			bool needUDP = bool.Parse (split [9]);  			bool need3DContents = bool.Parse (split [10]);  			bool onlyWindowMode = bool.Parse (split [11]);  			Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  		}  	}  	break;  case "getSelectedPlayerInfo":  	//受信	1…data  	{  		if (GetLobbySelectedPlayerInfo != null) {  			List<string> info = new List<string> ();  			string tmp = "";  			foreach (var item in split [1].Split (';')) {  				if (item == "" && tmp != "") {  					tmp = tmp.TrimEnd ('\t');  					info.Add (tmp);  					tmp = "";  					continue;  				}  				tmp += item + "\t";  			}  			if (tmp != "") {  				tmp = tmp.TrimEnd ('\t');  				info.Add (tmp);  			}  			GetLobbySelectedPlayerInfo (info);  		}  	}  	break;  case "Ping":  	//受信  	{  		AddSendData ("Pong");  	}  	break;  case "setPingInfo":  	//受信	1…UserID' 2…ping  	{  		if (split [1] == Params.User.UserID) {  			Params.Ping = double.Parse (split [2]);  		}  	}  	break;  case "suspendCheckPingFlag":  	//受信	1…result(-1…error' other…flag)  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (!changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		case 1:  			if (changingSuspendCheckPingValue) {  				ChangingSuspendCheckPingFlag = false;  			}  			break;  		default:  			ChangingSuspendCheckPingFlag = false;  			break;  		}  	}  	break;  case "gameCommand":  	flag = !(LoggedIn && Params.User.Room != -1);  	break;  case "getIP":  	//受信	  	//送信	1…state(-1…start' 0…end)  	//送信	1…ip1' 2…ip2' 3…ip3' 4…ip4  	{  		if (split.Length == 2) {  			int state = int.Parse (split [1]);  			if (state == -1) {  				IPList.Clear ();  			}  			else {  				GotIPListFunc ();  			}  		}  		else {  			IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  		}  	}  	break;  case "checkClientUpdate":  	//受信	1…result(-1…error)  	//受信　1' 2…(fileName1' size1)' 3' 4…(fileName2' size2)' …  	{  		if (split.Length == 2) {  			try {  				int result = int.Parse (split [1]);  				if (result == -1) {  					ClientUpdated = true;  					break;  				}  			}  			catch {  			}  		}  		ClientUpdated = (split.Length - 1) / 2 > 0;  		CheckingClientUpdate = false;  	}  	break;  case "clientUpdate":  	//受信	result( -1…error )  	{  		ClientUpdated = true;  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (!LoggedIn) {  		break;  	}  	if (split [2] != Params.User.UserName) {  		control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  	}  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 10:  	if (!LoggingIn) {  		LogOut ();  		break;  	}  	Params.User.UserName = split [2];  	control.AddMessage2 ("ログインに成功しました．"' Const.SYSTEM_ID' control.COLOR_GREEN);  	if (Params.User.UserName.StartsWith (Const.GUEST_ID)) {  		Params.User.UserID = Params.User.UserName;  		Params.Guest = true;  		control.AddMessage2 ("ID及び名前は「" + Params.User.UserID + "」です．"' Const.SYSTEM_ID' control.COLOR_YELLOW);  	}  	else {  		Params.Guest = false;  	}  	LoggedIn = true;  	LoggingIn = false;  	if (Params.IsValidUDPHandle) {  		DX.DeleteUDPSocket (Params.UDPHandle);  	}  	if (split [2] == Const.MAIN_SERVER_ID) {  		Params.UDPHandle = -1;  	}  	else {  		Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  		AddSendData ("UDPHandle"' Params.UDPHandle + "");  		RecievedFileNum = 0;  		RecieveFileNum = -1;  		downloadFilePath.Clear ();  		AddSendData ("calcPingReq");  	}  	break;  case 11:  	if (UserLoggedIn != null) {  		UserLoggedIn (split [2]);  	}  	break;  case 1:  	control.AddMessage2 ("すでにログインしています．"' Const.SYSTEM_ID' control.COLOR_ORANGE);  	LoggedIn = true;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case 2:  	control.AddMessage2 ("別のパソコンからすでにログインされています．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -3:  	control.AddMessage2 ("パスワードが違います．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -4:  	control.AddMessage2 ("登録されていないIDです．"' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  case -1:  case -2:  default:  	control.AddMessage2 ("ログイン時に予期せぬエラーが発生しました．コード：" + result' Const.SYSTEM_ID' control.COLOR_RED);  	LoggedIn = false;  	LoggingIn = false;  	if (UserFailedLogIn != null) {  		UserFailedLogIn ();  	}  	break;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split [2] != Params.User.UserName) {  	control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split [2] != Params.User.UserName) {  	control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: control.AddMessage2 (split [2] + "がログインしました．"' Const.SYSTEM_ID' control.COLOR_BLUE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (UserLoggedIn != null) {  	UserLoggedIn (split [2]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: UserLoggedIn (split [2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: Params.User.UserName = split [2];  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split [2] == Const.MAIN_SERVER_ID) {  	Params.UDPHandle = -1;  }  else {  	Params.UDPHandle = DX.MakeUDPSocket (Params.UDPRecvPort);  	AddSendData ("UDPHandle"' Params.UDPHandle + "");  	RecievedFileNum = 0;  	RecieveFileNum = -1;  	downloadFilePath.Clear ();  	AddSendData ("calcPingReq");  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (UserLoggedIn != null) {  	UserLoggedIn (split [2]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: UserLoggedIn (split [2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileNum = (split.Length - 1) / 2;  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: for (int i = 0' n = split.Length / 2; i < n; i++) {  	RecieveFileSize += long.Parse (split [i * 2 + 2]);  	downloadFilePath.Add (split [i * 2 + 1]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileSize += long.Parse (split [i * 2 + 2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: RecieveFileSize += long.Parse (split [i * 2 + 2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: downloadFilePath.Add (split [i * 2 + 1]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == 0) {  		if (RoomUpdated != null) {  			RoomUpdated ();  		}  	}  	else if (state == -2) {  		LobbyPlayers.Clear ();  	}  	else {  		Rooms.Clear ();  	}  }  else if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (state == 0) {  	if (RoomUpdated != null) {  		RoomUpdated ();  	}  }  else if (state == -2) {  	LobbyPlayers.Clear ();  }  else {  	Rooms.Clear ();  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (state == -2) {  	LobbyPlayers.Clear ();  }  else {  	Rooms.Clear ();  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 3) {  	ConnectedNumber = int.Parse (split [1]);  	LoggedInNumber = int.Parse (split [2]);  }  else if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: LoggedInNumber = int.Parse (split [2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 4) {  	string id = split [1];  	if (id == Const.MAIN_SERVER_ID) {  		break;  	}  	string name = split [2];  	bool guest = bool.Parse (split [3]);  	string add = id + "\t" + name + "\t" + guest;  	LobbyPlayers.Add (add);  }  else {  	int room = int.Parse (split [1]);  	int game = int.Parse (split [2]);  	int min = int.Parse (split [3]);  	int max = int.Parse (split [4]);  	int now = int.Parse (split [5]);  	string creator = split [6];  	bool ready = bool.Parse (split [7]);  	bool canEnter = bool.Parse (split [8]);  	bool needUDP = bool.Parse (split [9]);  	bool need3DContents = bool.Parse (split [10]);  	bool onlyWindowMode = bool.Parse (split [11]);  	Rooms.Add (new RoomInfo (room' game' min' max' now' creator' ready' canEnter' needUDP' need3DContents' onlyWindowMode));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split [1] == Params.User.UserID) {  	Params.Ping = double.Parse (split [2]);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: Params.Ping = double.Parse (split [2]);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	int state = int.Parse (split [1]);  	if (state == -1) {  		IPList.Clear ();  	}  	else {  		GotIPListFunc ();  	}  }  else {  	IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: IPList.Add (String.Join ("."' split [1]' split [2]' split [3]' split [4]));  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: if (split.Length == 2) {  	try {  		int result = int.Parse (split [1]);  		if (result == -1) {  			ClientUpdated = true;  			break;  		}  	}  	catch {  	}  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,ParseMessages,The following statement contains a magic number: ClientUpdated = (split.Length - 1) / 2 > 0;  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawStringToHandle (0' 60' State' control.COLOR_RED' control.GetFont (FontDefines.FONT_SIZE_20));  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: if (!FileChecking && FileRecieving) {  	if (processRate == null) {  		processRate = new DrawHelper.ProcessRate ();  	}  	processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  	DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: processRate.Draw (RecieveFileSizeRate' 0' GameControl.SHeight - 100' GameControl.SWidth' 50);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,Draw,The following statement contains a magic number: DX.DrawBox (0' GameControl.SHeight - 100' GameControl.SWidth' GameControl.SHeight - 50' DX.GetColor (255' 255' 255)' DX.FALSE);  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,CheckConnection,The following statement contains a magic number: if (control.LostNetworkHandles.Contains (Params.TCPHandle)) {  	control.LostNetworkHandles.Remove (Params.TCPHandle);  	if (control.LostNetworkDataLength.ContainsKey (Params.TCPHandle)) {  		lostNetworkLength = control.LostNetworkDataLength [Params.TCPHandle];  		control.LostNetworkDataLength.Remove (Params.TCPHandle);  	}  	else {  		lostNetworkLength = -2;  	}  	return false;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,CheckConnection,The following statement contains a magic number: if (control.LostNetworkDataLength.ContainsKey (Params.TCPHandle)) {  	lostNetworkLength = control.LostNetworkDataLength [Params.TCPHandle];  	control.LostNetworkDataLength.Remove (Params.TCPHandle);  }  else {  	lostNetworkLength = -2;  }  
Magic Number,Client,ClientNetwork,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\ClientNetwork\ClientNetwork.cs,CheckConnection,The following statement contains a magic number: lostNetworkLength = -2;  
