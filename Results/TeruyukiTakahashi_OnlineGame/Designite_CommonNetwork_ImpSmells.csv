Implementation smell,Namespace,Class,File,Method,Description
Long Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The method has 166 lines of code.
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,Cyclomatic complexity of the method is 19
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileData,Cyclomatic complexity of the method is 10
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileLargeData,Cyclomatic complexity of the method is 13
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelSendFileData,Cyclomatic complexity of the method is 19
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelFileSend,Cyclomatic complexity of the method is 13
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,AddSendFileData,Cyclomatic complexity of the method is 8
Complex Method,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,AddSendFileData2,Cyclomatic complexity of the method is 8
Long Parameter List,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelSendFileData,The method has 9 parameters.
Long Parameter List,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelFileSend,The method has 6 parameters.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SplitNetworkSendFileData,The length of the statement  "		ret.Add (new NetworkSendFileData (data.SendIndex' data.FilePath' data.DestDirectory' data.Ticks' data.SplitData (i)' n' i)); " is 124.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The length of the statement  "					//	RecvFileData( control' TCPHandle' user.NextDataInfo.RecievedFileFragment.Where( item => item.SendIndex == recv.SendIndex ) ); " is 128.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The length of the statement  "										control.AddMessage2 ("データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName (path) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED); " is 128.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The length of the statement  "										RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "1")' TCPHandle' new CheckDataLife ())); " is 149.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The length of the statement  "					RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "-1")' TCPHandle' new CheckDataLife ())); " is 150.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvFileData,The length of the statement  "	//			control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 135.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvFileData,The length of the statement  "	//	control.AddMessage2( "データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName( path ) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED ); " is 133.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,UpdateNetwork,The length of the statement  "			//control.AddMessage2( "メッセージの破棄．\n" + RecvDataList[0].Item1.UserID + ":" + RecvDataList[0].Item1.Message' Const.SYSTEM_ID ); " is 125.
Long Statement,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,UpdateNetwork,The length of the statement  "			//control.AddMessage2( "メッセージの破棄．\n" + RecvDataUDPList[0].Item1.UserID + ":" + RecvDataUDPList[0].Item1.Message' Const.SYSTEM_ID ); " is 131.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvDataUDP,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelSendFileData,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelSendFileData,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelFileDownload,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelFileSend,The method has an empty catch block.
Empty Catch Block,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CancelFileSend,The method has an empty catch block.
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IPToInt,The following statement contains a magic number: return ip.d1 + (ip.d2 << 8) + (ip.d3 << 16) + (ip.d4 << 24);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IPToInt,The following statement contains a magic number: return ip.d1 + (ip.d2 << 8) + (ip.d3 << 16) + (ip.d4 << 24);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IPToInt,The following statement contains a magic number: return ip.d1 + (ip.d2 << 8) + (ip.d3 << 16) + (ip.d4 << 24);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IntToIP,The following statement contains a magic number: ip.d2 = (byte)((ipInt >> 8) & 0xff);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IntToIP,The following statement contains a magic number: ip.d3 = (byte)((ipInt >> 16) & 0xff);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,IntToIP,The following statement contains a magic number: ip.d4 = (byte)((ipInt >> 24) & 0xff);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: while (true) {  	int TCPHandle = user.TCPHandle;  	if (user.NextDataInfo.NextIsHeader) {  		int len = DX.GetNetWorkDataLength (TCPHandle);  		if (len < networkSendDataHeaderSize) {  			return;  		}  		NetworkSendDataHeader header;  		byte[] data = new byte[networkSendDataHeaderSize];  		unsafe {  			fixed (byte* buf = data) {  				DX.NetWorkRecv (TCPHandle' buf' networkSendDataHeaderSize);  				IntPtr ptr = Marshal.AllocHGlobal (networkSendDataHeaderSize);  				try {  					Marshal.Copy (data' 0' ptr' networkSendDataHeaderSize);  					header = (NetworkSendDataHeader)Marshal.PtrToStructure (ptr' typeof(NetworkSendDataHeader));  				}  				finally {  					if (IntPtr.Zero != ptr) {  						Marshal.FreeHGlobal (ptr);  					}  				}  			}  		}  		if (header.Key == Const.SEND_DATA_KEY) {  			user.NextDataInfo.NextIsHeader = false;  			user.NextDataInfo.NextDataSize = header.Size;  			user.NextDataInfo.NextIsMessage = header.NextIsMessage;  		}  		else {  			control.AddMessage2 ("データの受信に失敗(TCP/IP)．ヘッダー情報の破損．" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  		}  	}  	if (!user.NextDataInfo.NextIsHeader) {  		int len = DX.GetNetWorkDataLength (TCPHandle);  		if (len < user.NextDataInfo.NextDataSize) {  			return;  		}  		user.NextDataInfo.NextIsHeader = true;  		byte[] data = new byte[user.NextDataInfo.NextDataSize];  		unsafe {  			fixed (byte* buf = data) {  				DX.NetWorkRecv (TCPHandle' buf' user.NextDataInfo.NextDataSize);  			}  		}  		if (user.NextDataInfo.NextIsMessage) {  			try {  				NetworkSendData recv = DeserializeNetworkSendData (data);  				string[] split = recv.Message.Split ('\t');  				if (split [0] == "cancelFileDownload") {  					CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  				}  				else {  					RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' TCPHandle' new CheckDataLife ()));  				}  			}  			catch (Exception e) {  				control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  			}  		}  		else {  			try {  				NetworkSendFileData recv = DeserializeNetworkSendFileData (data);  				GetRecvFileSize (user.NextDataInfo.NextDataSize' recv);  				user.NextDataInfo.RecievingFileMaxIndex = recv.MaxIndex;  				user.NextDataInfo.RecievingFileIndex = recv.Index;  				//user.NextDataInfo.RecievedFileFragment.Add( recv );  				//if( recv.MaxIndex > 1 )  				//{  				//	if( user.NextDataInfo.RecievedFileFragment.Count( item => item.SendIndex == recv.SendIndex ) < recv.MaxIndex )  				//	{  				//		continue;  				//	}  				//}  				//try  				//{  				//	RecvFileData( control' TCPHandle' user.NextDataInfo.RecievedFileFragment.Where( item => item.SendIndex == recv.SendIndex ) );  				//}  				//catch  				//{  				//	throw;  				//}  				//finally  				//{  				//	user.NextDataInfo.RecievedFileFragment.RemoveAll( item => item.SendIndex == recv.SendIndex );  				//	control.ResetElapsedTime( );  				//}  				try {  					if (user.NextDataInfo.RecievedFileInfo.ContainsKey (recv.SendIndex)) {  						var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  						rfi.RecievedCount++;  						if (!rfi.Error && rfi.Updated) {  							rfi.Append (recv.Data);  						}  					}  					else {  						string path = GetDestDirectory (recv.DestDirectory) + "\\" + Path.GetFileName (recv.FilePath);  						NetworkRecvFileInfo rfi = new NetworkRecvFileInfo (path' recv);  						user.NextDataInfo.RecievedFileInfo.Add (recv.SendIndex' rfi);  						bool write = false;  						if (File.Exists (path)) {  							long ticks = File.GetLastWriteTime (path).Ticks;  							if (ticks >= recv.Ticks) {  								rfi.Updated = false;  							}  							else {  								try {  									File.Delete (path);  								}  								catch {  									control.AddMessage2 ("データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName (path) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED);  									RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "1")' TCPHandle' new CheckDataLife ()));  									RecvFileFailed = true;  									rfi.EndWrite ();  									rfi.Error = true;  									try {  										File.Delete (rfi.FilePath);  									}  									catch {  									}  									CancelFileDownload (recv.SendIndex);  								}  								if (!RecvFileFailed) {  									write = true;  								}  							}  						}  						else {  							write = true;  						}  						if (write) {  							rfi.StartWrite ();  							rfi.Append (recv.Data);  						}  					}  				}  				catch {  					var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  					rfi.EndWrite ();  					rfi.Error = true;  					try {  						File.Delete (rfi.FilePath);  					}  					catch {  					}  					CancelFileDownload (recv.SendIndex);  					throw;  				}  				finally {  					if (user.NextDataInfo.RecievedFileInfo [recv.SendIndex].RecievedCount >= recv.MaxIndex) {  						user.NextDataInfo.RecievedFileInfo [recv.SendIndex].EndWrite ();  						RecvFileData (control' TCPHandle' user.NextDataInfo.RecievedFileInfo [recv.SendIndex]);  						user.NextDataInfo.RecievedFileInfo.Remove (recv.SendIndex);  					}  				}  			}  			catch (Exception e) {  				control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  				RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "-1")' TCPHandle' new CheckDataLife ()));  				RecvFileFailed = true;  			}  		}  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: if (!user.NextDataInfo.NextIsHeader) {  	int len = DX.GetNetWorkDataLength (TCPHandle);  	if (len < user.NextDataInfo.NextDataSize) {  		return;  	}  	user.NextDataInfo.NextIsHeader = true;  	byte[] data = new byte[user.NextDataInfo.NextDataSize];  	unsafe {  		fixed (byte* buf = data) {  			DX.NetWorkRecv (TCPHandle' buf' user.NextDataInfo.NextDataSize);  		}  	}  	if (user.NextDataInfo.NextIsMessage) {  		try {  			NetworkSendData recv = DeserializeNetworkSendData (data);  			string[] split = recv.Message.Split ('\t');  			if (split [0] == "cancelFileDownload") {  				CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  			}  			else {  				RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' TCPHandle' new CheckDataLife ()));  			}  		}  		catch (Exception e) {  			control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  		}  	}  	else {  		try {  			NetworkSendFileData recv = DeserializeNetworkSendFileData (data);  			GetRecvFileSize (user.NextDataInfo.NextDataSize' recv);  			user.NextDataInfo.RecievingFileMaxIndex = recv.MaxIndex;  			user.NextDataInfo.RecievingFileIndex = recv.Index;  			//user.NextDataInfo.RecievedFileFragment.Add( recv );  			//if( recv.MaxIndex > 1 )  			//{  			//	if( user.NextDataInfo.RecievedFileFragment.Count( item => item.SendIndex == recv.SendIndex ) < recv.MaxIndex )  			//	{  			//		continue;  			//	}  			//}  			//try  			//{  			//	RecvFileData( control' TCPHandle' user.NextDataInfo.RecievedFileFragment.Where( item => item.SendIndex == recv.SendIndex ) );  			//}  			//catch  			//{  			//	throw;  			//}  			//finally  			//{  			//	user.NextDataInfo.RecievedFileFragment.RemoveAll( item => item.SendIndex == recv.SendIndex );  			//	control.ResetElapsedTime( );  			//}  			try {  				if (user.NextDataInfo.RecievedFileInfo.ContainsKey (recv.SendIndex)) {  					var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  					rfi.RecievedCount++;  					if (!rfi.Error && rfi.Updated) {  						rfi.Append (recv.Data);  					}  				}  				else {  					string path = GetDestDirectory (recv.DestDirectory) + "\\" + Path.GetFileName (recv.FilePath);  					NetworkRecvFileInfo rfi = new NetworkRecvFileInfo (path' recv);  					user.NextDataInfo.RecievedFileInfo.Add (recv.SendIndex' rfi);  					bool write = false;  					if (File.Exists (path)) {  						long ticks = File.GetLastWriteTime (path).Ticks;  						if (ticks >= recv.Ticks) {  							rfi.Updated = false;  						}  						else {  							try {  								File.Delete (path);  							}  							catch {  								control.AddMessage2 ("データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName (path) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED);  								RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "1")' TCPHandle' new CheckDataLife ()));  								RecvFileFailed = true;  								rfi.EndWrite ();  								rfi.Error = true;  								try {  									File.Delete (rfi.FilePath);  								}  								catch {  								}  								CancelFileDownload (recv.SendIndex);  							}  							if (!RecvFileFailed) {  								write = true;  							}  						}  					}  					else {  						write = true;  					}  					if (write) {  						rfi.StartWrite ();  						rfi.Append (recv.Data);  					}  				}  			}  			catch {  				var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  				rfi.EndWrite ();  				rfi.Error = true;  				try {  					File.Delete (rfi.FilePath);  				}  				catch {  				}  				CancelFileDownload (recv.SendIndex);  				throw;  			}  			finally {  				if (user.NextDataInfo.RecievedFileInfo [recv.SendIndex].RecievedCount >= recv.MaxIndex) {  					user.NextDataInfo.RecievedFileInfo [recv.SendIndex].EndWrite ();  					RecvFileData (control' TCPHandle' user.NextDataInfo.RecievedFileInfo [recv.SendIndex]);  					user.NextDataInfo.RecievedFileInfo.Remove (recv.SendIndex);  				}  			}  		}  		catch (Exception e) {  			control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  			RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "-1")' TCPHandle' new CheckDataLife ()));  			RecvFileFailed = true;  		}  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: if (user.NextDataInfo.NextIsMessage) {  	try {  		NetworkSendData recv = DeserializeNetworkSendData (data);  		string[] split = recv.Message.Split ('\t');  		if (split [0] == "cancelFileDownload") {  			CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  		}  		else {  			RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' TCPHandle' new CheckDataLife ()));  		}  	}  	catch (Exception e) {  		control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  	}  }  else {  	try {  		NetworkSendFileData recv = DeserializeNetworkSendFileData (data);  		GetRecvFileSize (user.NextDataInfo.NextDataSize' recv);  		user.NextDataInfo.RecievingFileMaxIndex = recv.MaxIndex;  		user.NextDataInfo.RecievingFileIndex = recv.Index;  		//user.NextDataInfo.RecievedFileFragment.Add( recv );  		//if( recv.MaxIndex > 1 )  		//{  		//	if( user.NextDataInfo.RecievedFileFragment.Count( item => item.SendIndex == recv.SendIndex ) < recv.MaxIndex )  		//	{  		//		continue;  		//	}  		//}  		//try  		//{  		//	RecvFileData( control' TCPHandle' user.NextDataInfo.RecievedFileFragment.Where( item => item.SendIndex == recv.SendIndex ) );  		//}  		//catch  		//{  		//	throw;  		//}  		//finally  		//{  		//	user.NextDataInfo.RecievedFileFragment.RemoveAll( item => item.SendIndex == recv.SendIndex );  		//	control.ResetElapsedTime( );  		//}  		try {  			if (user.NextDataInfo.RecievedFileInfo.ContainsKey (recv.SendIndex)) {  				var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  				rfi.RecievedCount++;  				if (!rfi.Error && rfi.Updated) {  					rfi.Append (recv.Data);  				}  			}  			else {  				string path = GetDestDirectory (recv.DestDirectory) + "\\" + Path.GetFileName (recv.FilePath);  				NetworkRecvFileInfo rfi = new NetworkRecvFileInfo (path' recv);  				user.NextDataInfo.RecievedFileInfo.Add (recv.SendIndex' rfi);  				bool write = false;  				if (File.Exists (path)) {  					long ticks = File.GetLastWriteTime (path).Ticks;  					if (ticks >= recv.Ticks) {  						rfi.Updated = false;  					}  					else {  						try {  							File.Delete (path);  						}  						catch {  							control.AddMessage2 ("データの受信に失敗(TCP/IP)．ファイルデータ(" + Path.GetFileName (path) + ")への書き込み失敗．"' Const.SYSTEM_ID' control.COLOR_RED);  							RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "1")' TCPHandle' new CheckDataLife ()));  							RecvFileFailed = true;  							rfi.EndWrite ();  							rfi.Error = true;  							try {  								File.Delete (rfi.FilePath);  							}  							catch {  							}  							CancelFileDownload (recv.SendIndex);  						}  						if (!RecvFileFailed) {  							write = true;  						}  					}  				}  				else {  					write = true;  				}  				if (write) {  					rfi.StartWrite ();  					rfi.Append (recv.Data);  				}  			}  		}  		catch {  			var rfi = user.NextDataInfo.RecievedFileInfo [recv.SendIndex];  			rfi.EndWrite ();  			rfi.Error = true;  			try {  				File.Delete (rfi.FilePath);  			}  			catch {  			}  			CancelFileDownload (recv.SendIndex);  			throw;  		}  		finally {  			if (user.NextDataInfo.RecievedFileInfo [recv.SendIndex].RecievedCount >= recv.MaxIndex) {  				user.NextDataInfo.RecievedFileInfo [recv.SendIndex].EndWrite ();  				RecvFileData (control' TCPHandle' user.NextDataInfo.RecievedFileInfo [recv.SendIndex]);  				user.NextDataInfo.RecievedFileInfo.Remove (recv.SendIndex);  			}  		}  	}  	catch (Exception e) {  		control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  		RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (new NetworkSendData (""' "failedFileRecv"' "-1")' TCPHandle' new CheckDataLife ()));  		RecvFileFailed = true;  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: try {  	NetworkSendData recv = DeserializeNetworkSendData (data);  	string[] split = recv.Message.Split ('\t');  	if (split [0] == "cancelFileDownload") {  		CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  	}  	else {  		RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' TCPHandle' new CheckDataLife ()));  	}  }  catch (Exception e) {  	control.AddMessage2 ("データの受信に失敗(TCP/IP)．\n" + e.Message + "\n" + user.User.UserID' Const.SYSTEM_ID' control.COLOR_RED);  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: if (split [0] == "cancelFileDownload") {  	CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  }  else {  	RecvDataList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' TCPHandle' new CheckDataLife ()));  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvData,The following statement contains a magic number: CancelSendFileData (control' user' int.Parse (split [1])' split [2]);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvDataUDP,The following statement contains a magic number: while (DX.CheckNetWorkRecvUDP (UDPHandle) == DX.TRUE) {  	//unsafe  	//{  	//	byte[] data = new byte[UDP_MAX_SIZE];  	//	DX.IPDATA ip;  	//	DX.IPDATA* tmp = &ip;  	//	fixed ( byte* buf = data )  	//	{  	//		DX.NetWorkRecvUDP( UDPHandle' tmp' null' buf' UDP_MAX_SIZE' DX.FALSE );  	//	}  	//	NetworkSendData recv = DeserializeNetworkSendData( data );  	//	if ( recv == null )  	//	{  	//		control.AddMessage2( "データの受信に失敗(UDP)．メッセージデータの破損．"' Const.SYSTEM_ID );  	//		continue;  	//	}  	//	RecvDataUDPList.Add( new Tuple<NetworkSendData' int>( recv' IPToInt( ip ) ) );  	//}  	unsafe {  		byte[] data = new byte[Const.UDP_MAX_SIZE];  		int result;  		fixed (byte* buf = data) {  			result = DX.NetWorkRecvUDP (UDPHandle' null' null' buf' Const.UDP_MAX_SIZE' DX.FALSE);  		}  		if (result < 0) {  			if (result == -3) {  				break;  			}  			//control.AddMessage2( "データの受信に失敗(UDP)．エラーコード:" + result' Const.SYSTEM_ID' control.COLOR_RED );  			continue;  		}  		try {  			NetworkSendData recv = DeserializeNetworkSendData (data);  			RecvDataUDPList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' -1' new CheckDataLife ()));  		}  		catch//( Exception e )  		 {  			//control.AddMessage2( "データの受信に失敗(UDP)．\n" + e.Message' Const.SYSTEM_ID' control.COLOR_RED );  		}  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvDataUDP,The following statement contains a magic number: unsafe {  	byte[] data = new byte[Const.UDP_MAX_SIZE];  	int result;  	fixed (byte* buf = data) {  		result = DX.NetWorkRecvUDP (UDPHandle' null' null' buf' Const.UDP_MAX_SIZE' DX.FALSE);  	}  	if (result < 0) {  		if (result == -3) {  			break;  		}  		//control.AddMessage2( "データの受信に失敗(UDP)．エラーコード:" + result' Const.SYSTEM_ID' control.COLOR_RED );  		continue;  	}  	try {  		NetworkSendData recv = DeserializeNetworkSendData (data);  		RecvDataUDPList.Add (new Tuple<NetworkSendData' int' CheckDataLife> (recv' -1' new CheckDataLife ()));  	}  	catch//( Exception e )  	 {  		//control.AddMessage2( "データの受信に失敗(UDP)．\n" + e.Message' Const.SYSTEM_ID' control.COLOR_RED );  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvDataUDP,The following statement contains a magic number: if (result < 0) {  	if (result == -3) {  		break;  	}  	//control.AddMessage2( "データの受信に失敗(UDP)．エラーコード:" + result' Const.SYSTEM_ID' control.COLOR_RED );  	continue;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,RecvDataUDP,The following statement contains a magic number: if (result == -3) {  	break;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileLargeData,The following statement contains a magic number: foreach (var key in dataSizeList.OrderBy (d => d.Value).Select (d => d.Key)) {  	var list = SendFileLargeDataList [key];  	if (dataLen >= Const.TCP_MAX_SIZE) {  		return;  	}  	for (int i = list.Count; --i >= 0;) {  		var items = list [i];  		int num = 0;  		foreach (var item in items.GetData ()) {  			byte[] data = GetSerializedObject (item);  			if (data == null) {  				control.AddMessage2 ("データの送信に失敗(TCP/IP)．メッセージデータの破損．"' Const.SYSTEM_ID);  				continue;  			}  			int size = data.Length;  			NetworkSendDataHeader header = new NetworkSendDataHeader ();  			header.Key = Const.SEND_DATA_KEY;  			header.Size = size;  			header.NextIsMessage = false;  			IntPtr ptr = Marshal.AllocHGlobal (networkSendDataHeaderSize);  			try {  				Marshal.StructureToPtr (header' ptr' false);  				byte[] packet = new byte[networkSendDataHeaderSize];  				Marshal.Copy (ptr' packet' 0' networkSendDataHeaderSize);  				unsafe {  					fixed (void* buf = packet) {  						DX.NetWorkSend (key' buf' networkSendDataHeaderSize);  					}  				}  			}  			finally {  				if (IntPtr.Zero != ptr) {  					Marshal.FreeHGlobal (ptr);  				}  			}  			unsafe {  				fixed (byte* buf = data) {  					if (DX.NetWorkSend (key' buf' size) == -1) {  						control.AddMessage2 ("ファイルの送信に失敗．" + item.FilePath' Const.SYSTEM_ID);  					}  					//DX.NetWorkSend( item.Item2' buf' size );  				}  			}  			dataLen += size;  			num++;  			if (dataLen >= Const.TCP_MAX_SIZE / 5) {  				break;  			}  		}  		items.AddSkip (num);  		if (items.IsEnd) {  			items.Dispose ();  			list.RemoveAt (i);  		}  	}  	if (list.Count <= 0) {  		deleteList.Add (key);  		continue;  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileLargeData,The following statement contains a magic number: for (int i = list.Count; --i >= 0;) {  	var items = list [i];  	int num = 0;  	foreach (var item in items.GetData ()) {  		byte[] data = GetSerializedObject (item);  		if (data == null) {  			control.AddMessage2 ("データの送信に失敗(TCP/IP)．メッセージデータの破損．"' Const.SYSTEM_ID);  			continue;  		}  		int size = data.Length;  		NetworkSendDataHeader header = new NetworkSendDataHeader ();  		header.Key = Const.SEND_DATA_KEY;  		header.Size = size;  		header.NextIsMessage = false;  		IntPtr ptr = Marshal.AllocHGlobal (networkSendDataHeaderSize);  		try {  			Marshal.StructureToPtr (header' ptr' false);  			byte[] packet = new byte[networkSendDataHeaderSize];  			Marshal.Copy (ptr' packet' 0' networkSendDataHeaderSize);  			unsafe {  				fixed (void* buf = packet) {  					DX.NetWorkSend (key' buf' networkSendDataHeaderSize);  				}  			}  		}  		finally {  			if (IntPtr.Zero != ptr) {  				Marshal.FreeHGlobal (ptr);  			}  		}  		unsafe {  			fixed (byte* buf = data) {  				if (DX.NetWorkSend (key' buf' size) == -1) {  					control.AddMessage2 ("ファイルの送信に失敗．" + item.FilePath' Const.SYSTEM_ID);  				}  				//DX.NetWorkSend( item.Item2' buf' size );  			}  		}  		dataLen += size;  		num++;  		if (dataLen >= Const.TCP_MAX_SIZE / 5) {  			break;  		}  	}  	items.AddSkip (num);  	if (items.IsEnd) {  		items.Dispose ();  		list.RemoveAt (i);  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileLargeData,The following statement contains a magic number: foreach (var item in items.GetData ()) {  	byte[] data = GetSerializedObject (item);  	if (data == null) {  		control.AddMessage2 ("データの送信に失敗(TCP/IP)．メッセージデータの破損．"' Const.SYSTEM_ID);  		continue;  	}  	int size = data.Length;  	NetworkSendDataHeader header = new NetworkSendDataHeader ();  	header.Key = Const.SEND_DATA_KEY;  	header.Size = size;  	header.NextIsMessage = false;  	IntPtr ptr = Marshal.AllocHGlobal (networkSendDataHeaderSize);  	try {  		Marshal.StructureToPtr (header' ptr' false);  		byte[] packet = new byte[networkSendDataHeaderSize];  		Marshal.Copy (ptr' packet' 0' networkSendDataHeaderSize);  		unsafe {  			fixed (void* buf = packet) {  				DX.NetWorkSend (key' buf' networkSendDataHeaderSize);  			}  		}  	}  	finally {  		if (IntPtr.Zero != ptr) {  			Marshal.FreeHGlobal (ptr);  		}  	}  	unsafe {  		fixed (byte* buf = data) {  			if (DX.NetWorkSend (key' buf' size) == -1) {  				control.AddMessage2 ("ファイルの送信に失敗．" + item.FilePath' Const.SYSTEM_ID);  			}  			//DX.NetWorkSend( item.Item2' buf' size );  		}  	}  	dataLen += size;  	num++;  	if (dataLen >= Const.TCP_MAX_SIZE / 5) {  		break;  	}  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,SendFileLargeData,The following statement contains a magic number: if (dataLen >= Const.TCP_MAX_SIZE / 5) {  	break;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: foreach (var item in password + id) {  	ret ^= (item << n) ^ k;  	n = (int)((n + m++) % 63);  	k = (m * 1237 + n * 311) % 0x212a6c2;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: foreach (var item in password + id) {  	ret ^= (item << n) ^ k;  	n = (int)((n + m++) % 63);  	k = (m * 1237 + n * 311) % 0x212a6c2;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: foreach (var item in password + id) {  	ret ^= (item << n) ^ k;  	n = (int)((n + m++) % 63);  	k = (m * 1237 + n * 311) % 0x212a6c2;  }  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: n = (int)((n + m++) % 63);  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: k = (m * 1237 + n * 311) % 0x212a6c2;  
Magic Number,CommonNetwork,Network,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\CommonNetwork\Network.cs,CreateHash,The following statement contains a magic number: k = (m * 1237 + n * 311) % 0x212a6c2;  
