Implementation smell,Namespace,Class,File,Method,Description
Long Method,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The method has 231 lines of code.
Long Method,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The method has 324 lines of code.
Complex Method,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,Cyclomatic complexity of the method is 115
Complex Method,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,Cyclomatic complexity of the method is 18
Complex Method,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,Cyclomatic complexity of the method is 170
Complex Method,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,Cyclomatic complexity of the method is 18
Long Parameter List,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,Update,The method has 9 parameters.
Long Parameter List,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,AddSystemMessage,The method has 5 parameters.
Long Parameter List,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,AddSystemMessage,The method has 5 parameters.
Long Parameter List,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,AddSystemMessage,The method has 6 parameters.
Long Parameter List,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,AddSystemMessage,The method has 5 parameters.
Long Parameter List,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Update,The method has 9 parameters.
Long Parameter List,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,AddSystemMessage,The method has 5 parameters.
Long Parameter List,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,AddSystemMessage,The method has 5 parameters.
Long Parameter List,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,AddSystemMessage,The method has 6 parameters.
Long Parameter List,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,AddSystemMessage,The method has 5 parameters.
Long Statement,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The length of the statement  "			//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName " is 150.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The length of the statement  "			//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName " is 150.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,StartGame,The length of the statement  "		GameStateManagement.LoadingScreen2.Load (control' true' true' option.DrawFunc' option.FinishedAction' null' Factory.GetGameScreen ()); " is 134.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,StartGame,The length of the statement  "		GameStateManagement.LoadingScreen3.Load (control' true' null' option.FinishedAction' option.UpdateTotalIndexNum' option.UpdateClass' Factory.GetGameScreen ()); " is 159.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE); " is 184.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "	DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE); " is 184.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "	Utility.DrawCenterStringToHandle (str' GameControl.SWidth / 2 + SlideCenterX' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40)); " is 152.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "			Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30)); " is 222.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "			Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30)); " is 163.
Long Statement,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The length of the statement  "	DrawHelper.DrawStringToHandleArrageRightEx (serverState' GameControl.SWidth - 5' 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_25)); " is 172.
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,InitScreen,The following statement contains a magic number: endCount = 500;  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = id;  					user.UserName = name;  					Factory.Players.Add (new GamePlayer (user));  					PlayerEntered (control' client' id' name);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					GetRoomMember (client' null);  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					GetRoomMember (client' new GamePlayer (user' ready));  				}  				break;  			default:  				if (!ExitFlag) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (Disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!Disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  				}  				break;  			default:  				if (!Disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					Disconnected = true;  				}  				break;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = id;  				user.UserName = name;  				Factory.Players.Add (new GamePlayer (user));  				PlayerEntered (control' client' id' name);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				GetRoomMember (client' null);  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				GetRoomMember (client' new GamePlayer (user' ready));  			}  			break;  		default:  			if (!ExitFlag) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (Disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!Disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  			}  			break;  		default:  			if (!Disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				Disconnected = true;  			}  			break;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		if (!ExitFlag) {  			ExitFlag = true;  			control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		if (!ExitFlag) {  			ExitFlag = true;  			control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	//control.AddMessage2( "部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED );  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = id;  		user.UserName = name;  		Factory.Players.Add (new GamePlayer (user));  		PlayerEntered (control' client' id' name);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = id;  		user.UserName = name;  		Factory.Players.Add (new GamePlayer (user));  		PlayerEntered (control' client' id' name);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = id;  		user.UserName = name;  		Factory.Players.Add (new GamePlayer (user));  		PlayerEntered (control' client' id' name);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = id;  	user.UserName = name;  	Factory.Players.Add (new GamePlayer (user));  	PlayerEntered (control' client' id' name);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = id;  	user.UserName = name;  	Factory.Players.Add (new GamePlayer (user));  	PlayerEntered (control' client' id' name);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		GetRoomMember (client' null);  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		GetRoomMember (client' new GamePlayer (user' ready));  	}  	break;  default:  	if (!ExitFlag) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		GetRoomMember (client' null);  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		GetRoomMember (client' new GamePlayer (user' ready));  	}  	break;  default:  	if (!ExitFlag) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		GetRoomMember (client' null);  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		GetRoomMember (client' new GamePlayer (user' ready));  	}  	break;  default:  	if (!ExitFlag) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		GetRoomMember (client' null);  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		GetRoomMember (client' new GamePlayer (user' ready));  	}  	break;  default:  	if (!ExitFlag) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		GetRoomMember (client' null);  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		GetRoomMember (client' new GamePlayer (user' ready));  	}  	break;  default:  	if (!ExitFlag) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	GetRoomMember (client' null);  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	GetRoomMember (client' new GamePlayer (user' ready));  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	GetRoomMember (client' null);  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	GetRoomMember (client' new GamePlayer (user' ready));  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	GetRoomMember (client' null);  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	GetRoomMember (client' new GamePlayer (user' ready));  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	GetRoomMember (client' null);  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	GetRoomMember (client' new GamePlayer (user' ready));  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: user.UserID = split [3];  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: user.UserName = split [4];  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	break;  case -3:  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	break;  case -3:  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!Disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!Disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!Disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!Disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (Disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!Disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_RED);  	}  	break;  default:  	if (!Disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		Disconnected = true;  	}  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	if (client.Params.User.UserID == id) {  		control.AddMessage2 ("退室します．"' Const.ROOM_ID);  		ExitFlag = true;  		Factory.Players.Clear ();  	}  	else {  		Factory.Players.RemoveAll (p => p.Player.UserID == id);  		PlayerLeaved (control' client' id' name);  	}  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	if (client.Params.User.UserID == id) {  		control.AddMessage2 ("退室します．"' Const.ROOM_ID);  		ExitFlag = true;  		Factory.Players.Clear ();  	}  	else {  		Factory.Players.RemoveAll (p => p.Player.UserID == id);  		PlayerLeaved (control' client' id' name);  	}  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case -1:  	control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseTCPIPMessages,The following statement contains a magic number: ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (Disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				//disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (Disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			//disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	//disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (result) {  case -1:  	control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  	break;  }  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,MainGameScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\GameBase.cs,ParseUDPMessages,The following statement contains a magic number: ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,InitScreen,The following statement contains a magic number: endCount = 800;  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: while (client.RecvDataList.Count > 0) {  	var data = client.RecvDataList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "get":  		//受信  1～…data  		{  			foreach (var item in split.Skip (1)) {  				control.AddMessage2 (item' Const.SERVER_ID' false);  			}  		}  		break;  	case "deleteRoom":  		//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					if (!ExitFlag) {  						ExitFlag = true;  						control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "enterRoom":  		//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					PlayerEntered (control' client' id' name);  					if (client.Params.User.UserID != id) {  						client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  					}  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "getRoomMember":  		//受信  1…result(0…start)' 2…RoomIndex  		//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room != room) {  					break;  				}  				if (split.Length == 3) {  					Factory.Players.Clear ();  				}  				else {  					UserData user = new UserData ();  					user.Room = room;  					user.UserID = split [3];  					user.UserName = split [4];  					bool ready = bool.Parse (split [5]);  					Factory.Players.Add (new GamePlayer (user' ready));  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "readyToStart":  		//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  		{  			int result = int.Parse (split [3]);  			int room = int.Parse (split [1]);  			switch (result) {  			case 0:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' false);  				}  				break;  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				if (client.Params.User.Room == room) {  					SetReady (client' split [2]' true);  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "cancelReadyToStart":  		//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  		{  			CancelingStartGame = false;  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				OnStartFlag = false;  				if (GameCancelSucceeded != null) {  					GameCancelSucceeded ();  				}  				break;  			case -1:  			case -2:  			case -3:  				if (GameCancelFailed != null) {  					GameCancelFailed ();  				}  				break;  			}  		}  		break;  	case "allReadyToStart":  		//受信  1…RoomIndex  		{  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [1]);  			if (client.Params.User.Room == room) {  				OnStartFlag = true;  			}  		}  		break;  	case "endGame":  		//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				break;  			case -3:  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "leaveRoom":  	case "exitRoom":  		//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  		{  			int result = int.Parse (split [1]);  			switch (result) {  			case 0:  			case 1:  				if (disconnected || ExitFlag) {  					break;  				}  				int room = int.Parse (split [2]);  				if (client.Params.User.Room == room) {  					string id = split [3];  					string name = split [4];  					if (client.Params.User.UserID == id) {  						control.AddMessage2 ("退室します．"' Const.ROOM_ID);  						ExitFlag = true;  						Factory.Players.Clear ();  					}  					else {  						Factory.Players.RemoveAll (p => p.Player.UserID == id);  						PlayerLeaved (control' client' id' name);  					}  				}  				break;  			case -1:  				if (!ExitFlag) {  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -2:  				if (!ExitFlag) {  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					ExitFlag = true;  				}  				break;  			case -3:  				if (!disconnected) {  					control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  				}  				break;  			default:  				if (!disconnected) {  					control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  					disconnected = true;  				}  				break;  			}  		}  		break;  	case "failedFileRecv":  		//受信  1…code  		{  			if (!disconnected) {  				int code = int.Parse (split [1]);  				if (code == 1) {  					control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  					control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  				}  				disconnected = true;  			}  		}  		break;  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected || ExitFlag) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (split [0]) {  case "get":  	//受信  1～…data  	{  		foreach (var item in split.Skip (1)) {  			control.AddMessage2 (item' Const.SERVER_ID' false);  		}  	}  	break;  case "deleteRoom":  	//受信  1…result(0…ok' -1…not exist' -2…not room creator' -3…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				if (!ExitFlag) {  					ExitFlag = true;  					control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "enterRoom":  	//受信  1…result(0…ok' 1…ok(ready)' -1…not exist' -2…full' -3…started' -4…entered' -5…error' -6…refused' -7…need UDP)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				PlayerEntered (control' client' id' name);  				if (client.Params.User.UserID != id) {  					client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  				}  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "getRoomMember":  	//受信  1…result(0…start)' 2…RoomIndex  	//受信  1…result(0…ok' -1…not exist' -2…not entered' -3…error)' 2…RoomIndex' 3…UserID' 4…UserName' 5…ready?  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room != room) {  				break;  			}  			if (split.Length == 3) {  				Factory.Players.Clear ();  			}  			else {  				UserData user = new UserData ();  				user.Room = room;  				user.UserID = split [3];  				user.UserName = split [4];  				bool ready = bool.Parse (split [5]);  				Factory.Players.Add (new GamePlayer (user' ready));  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "readyToStart":  	//受信  1…RoomIndex' 2…UserID' 3…result(0…not ready' 1…ready' -1…not exist' -2…not entered' -3…error)  	{  		int result = int.Parse (split [3]);  		int room = int.Parse (split [1]);  		switch (result) {  		case 0:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' false);  			}  			break;  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			if (client.Params.User.Room == room) {  				SetReady (client' split [2]' true);  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "cancelReadyToStart":  	//受信	1…result(0…ok' -1…not exist' -2…not entered' -3…error)  	{  		CancelingStartGame = false;  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			OnStartFlag = false;  			if (GameCancelSucceeded != null) {  				GameCancelSucceeded ();  			}  			break;  		case -1:  		case -2:  		case -3:  			if (GameCancelFailed != null) {  				GameCancelFailed ();  			}  			break;  		}  	}  	break;  case "allReadyToStart":  	//受信  1…RoomIndex  	{  		if (disconnected || ExitFlag) {  			break;  		}  		int room = int.Parse (split [1]);  		if (client.Params.User.Room == room) {  			OnStartFlag = true;  		}  	}  	break;  case "endGame":  	//受信  1…result(0…ok' -1…not exist' -2…not creator' -3…not started' -4…error)' 2…RoomIndex  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			break;  		case -3:  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "leaveRoom":  case "exitRoom":  	//受信  1…result(0…ok' 1…changed room host ' -1…not exist' -2…not entered' -4…error)' 2…RoomIndex' 3…UserID' 4…UserName  	{  		int result = int.Parse (split [1]);  		switch (result) {  		case 0:  		case 1:  			if (disconnected || ExitFlag) {  				break;  			}  			int room = int.Parse (split [2]);  			if (client.Params.User.Room == room) {  				string id = split [3];  				string name = split [4];  				if (client.Params.User.UserID == id) {  					control.AddMessage2 ("退室します．"' Const.ROOM_ID);  					ExitFlag = true;  					Factory.Players.Clear ();  				}  				else {  					Factory.Players.RemoveAll (p => p.Player.UserID == id);  					PlayerLeaved (control' client' id' name);  				}  			}  			break;  		case -1:  			if (!ExitFlag) {  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -2:  			if (!ExitFlag) {  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				ExitFlag = true;  			}  			break;  		case -3:  			if (!disconnected) {  				control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  			}  			break;  		default:  			if (!disconnected) {  				control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  				disconnected = true;  			}  			break;  		}  	}  	break;  case "failedFileRecv":  	//受信  1…code  	{  		if (!disconnected) {  			int code = int.Parse (split [1]);  			if (code == 1) {  				control.AddMessage2 ("サーバーのファイルが更新されています．"' Const.SYSTEM_ID' control.COLOR_RED);  				control.AddMessage2 ("クライアントを再起動てください．"' Const.SYSTEM_ID' control.COLOR_RED);  			}  			disconnected = true;  		}  	}  	break;  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected || ExitFlag) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		if (!ExitFlag) {  			ExitFlag = true;  			control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		if (!ExitFlag) {  			ExitFlag = true;  			control.AddMessage2 ("部屋が削除されました．"' Const.ROOM_ID' control.COLOR_RED);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	control.AddMessage2 ("部屋作成者ではありません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("部屋削除時にエラー場発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		PlayerEntered (control' client' id' name);  		if (client.Params.User.UserID != id) {  			client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  		}  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		PlayerEntered (control' client' id' name);  		if (client.Params.User.UserID != id) {  			client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  		}  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		PlayerEntered (control' client' id' name);  		if (client.Params.User.UserID != id) {  			client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  		}  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("入室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	PlayerEntered (control' client' id' name);  	if (client.Params.User.UserID != id) {  		client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  	}  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	PlayerEntered (control' client' id' name);  	if (client.Params.User.UserID != id) {  		client.AddSendData ("getRoomMember"' client.Params.User.Room.ToString ());  	}  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		Factory.Players.Clear ();  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		Factory.Players.Add (new GamePlayer (user' ready));  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		Factory.Players.Clear ();  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		Factory.Players.Add (new GamePlayer (user' ready));  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		Factory.Players.Clear ();  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		Factory.Players.Add (new GamePlayer (user' ready));  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		Factory.Players.Clear ();  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		Factory.Players.Add (new GamePlayer (user' ready));  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room != room) {  		break;  	}  	if (split.Length == 3) {  		Factory.Players.Clear ();  	}  	else {  		UserData user = new UserData ();  		user.Room = room;  		user.UserID = split [3];  		user.UserName = split [4];  		bool ready = bool.Parse (split [5]);  		Factory.Players.Add (new GamePlayer (user' ready));  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("メンバー取得時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	Factory.Players.Clear ();  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	Factory.Players.Add (new GamePlayer (user' ready));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	Factory.Players.Clear ();  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	Factory.Players.Add (new GamePlayer (user' ready));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	Factory.Players.Clear ();  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	Factory.Players.Add (new GamePlayer (user' ready));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 3) {  	Factory.Players.Clear ();  }  else {  	UserData user = new UserData ();  	user.Room = room;  	user.UserID = split [3];  	user.UserName = split [4];  	bool ready = bool.Parse (split [5]);  	Factory.Players.Add (new GamePlayer (user' ready));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: user.UserID = split [3];  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: user.UserName = split [4];  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' false);  	}  	break;  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' true);  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' false);  	}  	break;  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' true);  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' false);  	}  	break;  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' true);  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' false);  	}  	break;  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	if (client.Params.User.Room == room) {  		SetReady (client' split [2]' true);  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	SetReady (client' split [2]' false);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: SetReady (client' split [2]' false);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	SetReady (client' split [2]' true);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: SetReady (client' split [2]' true);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	OnStartFlag = false;  	if (GameCancelSucceeded != null) {  		GameCancelSucceeded ();  	}  	break;  case -1:  case -2:  case -3:  	if (GameCancelFailed != null) {  		GameCancelFailed ();  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	OnStartFlag = false;  	if (GameCancelSucceeded != null) {  		GameCancelSucceeded ();  	}  	break;  case -1:  case -2:  case -3:  	if (GameCancelFailed != null) {  		GameCancelFailed ();  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	break;  case -3:  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	break;  case -3:  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("ゲーム終了時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case 0:  case 1:  	if (disconnected || ExitFlag) {  		break;  	}  	int room = int.Parse (split [2]);  	if (client.Params.User.Room == room) {  		string id = split [3];  		string name = split [4];  		if (client.Params.User.UserID == id) {  			control.AddMessage2 ("退室します．"' Const.ROOM_ID);  			ExitFlag = true;  			Factory.Players.Clear ();  		}  		else {  			Factory.Players.RemoveAll (p => p.Player.UserID == id);  			PlayerLeaved (control' client' id' name);  		}  	}  	break;  case -1:  	if (!ExitFlag) {  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -2:  	if (!ExitFlag) {  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		ExitFlag = true;  	}  	break;  case -3:  	if (!disconnected) {  		control.AddMessage2 ("すでに開始しています．"' Const.ROOM_ID' control.COLOR_ORANGE);  	}  	break;  default:  	if (!disconnected) {  		control.AddMessage2 ("退室時にエラーが発生しました．"' Const.ROOM_ID' control.COLOR_RED);  		disconnected = true;  	}  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	if (client.Params.User.UserID == id) {  		control.AddMessage2 ("退室します．"' Const.ROOM_ID);  		ExitFlag = true;  		Factory.Players.Clear ();  	}  	else {  		Factory.Players.RemoveAll (p => p.Player.UserID == id);  		PlayerLeaved (control' client' id' name);  	}  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (client.Params.User.Room == room) {  	string id = split [3];  	string name = split [4];  	if (client.Params.User.UserID == id) {  		control.AddMessage2 ("退室します．"' Const.ROOM_ID);  		ExitFlag = true;  		Factory.Players.Clear ();  	}  	else {  		Factory.Players.RemoveAll (p => p.Player.UserID == id);  		PlayerLeaved (control' client' id' name);  	}  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: switch (result) {  case -1:  	control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following statement contains a magic number: ParseGameCommand (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: while (client.RecvDataUDPList.Count > 0) {  	var data = client.RecvDataUDPList [0];  	Network.NetworkSendData nsd = data.Item1;  	string[] split = nsd.Message.Split ('\t');  	bool flag = true;  	switch (split [0]) {  	case "gameCommand":  		//受信  1…UserID' 2…UserName' 3～…command  		//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  		{  			if (disconnected) {  				break;  			}  			if (split.Length == 2) {  				int result = int.Parse (split [1]);  				switch (result) {  				case -1:  					control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				case -2:  					control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				default:  					control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  					break;  				}  				disconnected = true;  			}  			else {  				ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  			}  		}  		break;  	default:  		flag = false;  		break;  	}  	if (!flag) {  		break;  	}  	client.RecvDataUDPList.RemoveAt (0);  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (split [0]) {  case "gameCommand":  	//受信  1…UserID' 2…UserName' 3～…command  	//受信(error)  1…result( -1…not exist' -2…not entered' -3…error )  	{  		if (disconnected) {  			break;  		}  		if (split.Length == 2) {  			int result = int.Parse (split [1]);  			switch (result) {  			case -1:  				control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			case -2:  				control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			default:  				control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  				break;  			}  			disconnected = true;  		}  		else {  			ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  		}  	}  	break;  default:  	flag = false;  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: if (split.Length == 2) {  	int result = int.Parse (split [1]);  	switch (result) {  	case -1:  		control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	case -2:  		control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	default:  		control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  		break;  	}  	disconnected = true;  }  else {  	ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: switch (result) {  case -1:  	control.AddMessage2 ("部屋が存在しません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  case -2:  	control.AddMessage2 ("入室していません．"' Const.ROOM_ID' control.COLOR_RED);  	break;  default:  	control.AddMessage2 ("ゲームメッセージ送信に失敗しました．"' Const.ROOM_ID' control.COLOR_RED);  	break;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseUDPMessages,The following statement contains a magic number: ParseGameCommandUDP (client' split [1]' split [2]' split.Skip (3).ToArray ());  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: while (drawDotCount >= 1000) {  	drawDotCount -= 1000;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: drawDotCount -= 1000;  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.SetDrawBlendMode (DX.DX_BLENDMODE_ALPHA' 80);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_PURPLE' DX.TRUE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DX.DrawBox ((GameControl.SWidth - drawWidth - 80) / 2 + SlideCenterX' y - 70' (GameControl.SWidth + drawWidth + 80) / 2 + SlideCenterX' y + height + 10' control.COLOR_WHITE' DX.FALSE);  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (str' GameControl.SWidth / 2 + SlideCenterX' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (str' GameControl.SWidth / 2 + SlideCenterX' y - 55' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_40));  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: foreach (var item in Factory.Players) {  	if (item.Ready) {  		Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	else {  		Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	int width = Utility.GetDrawStringWidthToHandle (item.Player.UserName' control.GetFont (FontDefines.FONT_SIZE_30));  	if (width > drawWidth) {  		drawWidth = width;  	}  	y += 35;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: foreach (var item in Factory.Players) {  	if (item.Ready) {  		Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	else {  		Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	int width = Utility.GetDrawStringWidthToHandle (item.Player.UserName' control.GetFont (FontDefines.FONT_SIZE_30));  	if (width > drawWidth) {  		drawWidth = width;  	}  	y += 35;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: foreach (var item in Factory.Players) {  	if (item.Ready) {  		Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	else {  		Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  	}  	int width = Utility.GetDrawStringWidthToHandle (item.Player.UserName' control.GetFont (FontDefines.FONT_SIZE_30));  	if (width > drawWidth) {  		drawWidth = width;  	}  	y += 35;  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: if (item.Ready) {  	Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  }  else {  	Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: if (item.Ready) {  	Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  }  else {  	Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  }  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (item.Player.UserName + "  待機中" + String.Join (""' Enumerable.Repeat ("."' dot))' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_GREEN' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: Utility.DrawCenterStringToHandle (item.Player.UserName' GameControl.SWidth / 2 + SlideCenterX' y' control.COLOR_WHITE' control.GetFont (FontDefines.FONT_SIZE_30));  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: y += 35;  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DrawHelper.DrawStringToHandleArrageRightEx (serverState' GameControl.SWidth - 5' 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_25));  
Magic Number,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,Draw,The following statement contains a magic number: DrawHelper.DrawStringToHandleArrageRightEx (serverState' GameControl.SWidth - 5' 40' control.COLOR_GRAY1' control.COLOR_ORANGE' control.GetFont (FontDefines.FONT_SIZE_25));  
Duplicate Code,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The method contains a code clone-set at the following line numbers (starting from the method definition): ((135' 162)' (247' 274))
Missing Default,GameBase,RoomScreen,C:\repos\TeruyukiTakahashi_OnlineGame\Projects\OnlineGame\GameBase\RoomBase.cs,ParseTCPIPMessages,The following switch statement is missing a default case: switch (result) {  case 0:  	OnStartFlag = false;  	if (GameCancelSucceeded != null) {  		GameCancelSucceeded ();  	}  	break;  case -1:  case -2:  case -3:  	if (GameCancelFailed != null) {  		GameCancelFailed ();  	}  	break;  }  
