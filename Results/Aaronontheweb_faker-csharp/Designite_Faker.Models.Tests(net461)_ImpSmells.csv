Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Faker.Models.Tests,TypeTableExtensions,D:\research\architectureSmells\repos\Aaronontheweb_faker-csharp\tests\Faker.Models.Tests\TypeTableSpecs.cs,TypeSelectorListsEqual,The length of the statement  "            return ReferenceEquals(set1' set2) || set1.OrderBy(x => x.GetHashCode()).SequenceEqual(set2.OrderBy(x => x.GetHashCode())' SelectorComparer); " is 141.
Long Statement,Faker.Models.Tests,RegisterSelectorBeforeAnyClones,D:\research\architectureSmells\repos\Aaronontheweb_faker-csharp\tests\Faker.Models.Tests\TypeTableSpecs.cs,Post,The length of the statement  "                    .Label($"Expected actual and model to share same state for{Selector.TargetType}; Actual(Count={_arg2.CountSelectors(Selector.TargetType)})' Model(Count={_arg3.Original.CountSelectors(Selector.TargetType)}]"); " is 208.
Long Statement,Faker.Models.Tests,RegisterSelectorOnClone,D:\research\architectureSmells\repos\Aaronontheweb_faker-csharp\tests\Faker.Models.Tests\TypeTableSpecs.cs,Post,The length of the statement  "                   .Label($"Expected clone to increase selector count for  [{_selector.GetType()}] and original to stay same; but clone had [old: {_actualCount}'new: {_arg2.CountSelectors(_selector.TargetType)}] and original had [old:' {_modelCount}' new: {_arg3.Selectors[_selector.TargetType].Count}]."); " is 287.
Long Statement,Faker.Models.Tests,RegisterSelectorOnOriginal,D:\research\architectureSmells\repos\Aaronontheweb_faker-csharp\tests\Faker.Models.Tests\TypeTableSpecs.cs,Post,The length of the statement  "                   .Label($"Expected original to increase selector count for  [{_selector.GetType()}] and clone to stay same; but clone had [old: {_actualCount}'new: {_arg2.CountSelectors(_selector.TargetType)}] and original had [old:' {_modelCount}' new: {_arg3.Selectors[_selector.TargetType].Count}' mutations: {_arg3.OriginalMutations}]."); " is 325.
Magic Number,Faker.Models.Tests,FakerGenerators,D:\research\architectureSmells\repos\Aaronontheweb_faker-csharp\tests\Faker.Models.Tests\FakerGenerators.cs,TypeTable,The following statement contains a magic number: Func<TypeTable> generator = () =>              {                  var table = new TypeTable(Faker.Generators.Booleans.Bool());                  var selectors = AvailableSelectors.GetRandomSelection(Generators.Numbers.Int(0' 10));                  foreach(var selector in selectors)                      table.AddSelector(selector);                  return table;              };
