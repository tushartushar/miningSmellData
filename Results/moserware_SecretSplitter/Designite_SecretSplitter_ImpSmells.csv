Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Moserware.Security.Cryptography,OpenPgp,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,DecryptSingleFile,Cyclomatic complexity of the method is 8
Complex Method,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpOldFormatPacketHeader,Cyclomatic complexity of the method is 8
Complex Method,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,TransformBlock,Cyclomatic complexity of the method is 9
Long Parameter List,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Moserware.Security.Cryptography,SplitSecret,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\SecretSplitter.cs,SplitSecret,The method has 5 parameters. Parameters: shareType' threshold' irreduciblePolynomial' allCoefficients' passPhrase
Long Identifier,Moserware.Security.Cryptography,OpenPgp,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,DecryptSingleFile,The length of the parameter encryptedIntegrityProtectedData is 31.
Long Identifier,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,,The length of the parameter _CurrentEncryptedFeedbackRegisterPosition is 41.
Long Statement,Moserware.Algebra,FiniteFieldPoint,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\FiniteFieldPoint.cs,ToString,The length of the statement  "            var prefixedPointBytes = Enumerable.Range(0' expectedByteCount - pointBytes.Length).Select(ix => (byte)0).Concat(pointBytes); " is 125.
Long Statement,Moserware.Security.Cryptography,OpenPgpStringToKeySpecifier,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ReadFrom,The length of the statement  "                case OpenPgpStringToKeySpecifierId.IteratedAndSalted: return new IteratedAndSaltedOpenPgpStringToKeySpecifier(inputStream); " is 123.
Long Statement,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,AddCipher,The length of the statement  "            var newCipher = new OpenPgpSymmetricCipher(id' name' () => { var sa = cipherFactory(); sa.KeySize = keySize; return sa; }); " is 123.
Long Statement,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ComputeHash,The length of the statement  "                for (int octectsLeftToHash = octetsToHashCount; (octectsLeftToHash > 0) || !hasDoneFirstIteration; octectsLeftToHash -= maxOctetsPerIteration) { " is 144.
Long Statement,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ComputeHash,The length of the statement  "                        int currentContextBytesToHash = hasDoneFirstIteration ? Math.Min(octectsLeftToHash' maxOctetsPerIteration) : maxOctetsPerIteration; " is 131.
Long Statement,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,GetNextEncryptedFeedbackByte,The length of the statement  "                if (_UnderlyingTransform.TransformBlock(_FeedbackRegister' 0' _FeedbackRegister.Length' _EncryptedFeedbackRegister' 0) != _EncryptedFeedbackRegister.Length) { " is 158.
Long Statement,Moserware.Security.Cryptography,SecretCombiner,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\SecretCombiner.cs,Combine,The length of the statement  "            return Combine(Regex.Matches(allShares' SecretShare.RegexPattern).OfType<Match>().Select(m => SecretShare.Parse(m.Value))' DefaultDiffuser); " is 140.
Long Statement,Moserware.Security.Cryptography,SecretCombiner,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\SecretCombiner.cs,Combine,The length of the statement  "            return Combine(allShares.Select(share => Regex.Match(share' SecretShare.RegexPattern).Value).Select(SecretShare.Parse)' diffuser); " is 130.
Long Statement,Moserware.Security.Cryptography,SecretSplitter,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\SecretSplitter.cs,GetRandomPolynomials,The length of the statement  "                yield return new FiniteFieldPolynomial(irreduciblePolynomial' randomCoefficientBytes.ToBigIntegerFromLittleEndianUnsignedBytes()); " is 130.
Virtual Method Call from Constructor,Moserware.Security.Cryptography,CompressedDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,CompressedDataOpenPgpPacket,The constructor "CompressedDataOpenPgpPacket" calls a virtual method "Decompress".
Magic Number,Moserware.Algebra,FiniteFieldPoint,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\FiniteFieldPoint.cs,TryParse,The following statement contains a magic number: int polynomialDegree = yString.Length*4;
Magic Number,Moserware.Algebra,FiniteFieldPoint,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\FiniteFieldPoint.cs,TryParse,The following statement contains a magic number: var bigEndianBytes = new byte[yString.Length/2];
Magic Number,Moserware.Algebra,FiniteFieldPoint,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\FiniteFieldPoint.cs,TryParse,The following statement contains a magic number: bigEndianBytes[i/2] = Byte.Parse(yString.Substring(i' 2)' NumberStyles.HexNumber);
Magic Number,Moserware.Algebra,FiniteFieldPoint,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\FiniteFieldPoint.cs,TryParse,The following statement contains a magic number: bigEndianBytes[i/2] = Byte.Parse(yString.Substring(i' 2)' NumberStyles.HexNumber);
Magic Number,Moserware.Algebra,IrreduciblePolynomial,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\IrreduciblePolynomial.cs,IrreduciblePolynomial,The following statement contains a magic number: PolynomialValue =                      PolynomialValue.SetBit(                          _TermPowers[InnerTermsPerPolynomial*((degreeOfIrreduciblePolynomial/8) - 1) + i]);
Magic Number,Moserware.Algebra,IrreduciblePolynomial,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\IrreduciblePolynomial.cs,CreateOfByteSize,The following statement contains a magic number: return new IrreduciblePolynomial(byteSize*8);
Magic Number,Moserware.Algebra,IrreduciblePolynomial,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\IrreduciblePolynomial.cs,IsValidDegree,The following statement contains a magic number: return (8 <= degree) && (degree <= MaxDegree) && ((degree%8) == 0);
Magic Number,Moserware.Algebra,IrreduciblePolynomial,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Algebra\IrreduciblePolynomial.cs,IsValidDegree,The following statement contains a magic number: return (8 <= degree) && (degree <= MaxDegree) && ((degree%8) == 0);
Magic Number,Moserware.Security.Cryptography,HexadecimalPasswordGenerator,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\HexadecimalPasswordGenerator.cs,GeneratePasswordOfBitSize,The following statement contains a magic number: return GeneratePassword(bitSize/4);
Magic Number,Moserware.Security.Cryptography,HexadecimalPasswordGenerator,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\HexadecimalPasswordGenerator.cs,GeneratePassword,The following statement contains a magic number: int byteLength = (length + 1)/2;
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: firstLengthByte < 192
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: Length = ((firstLengthByte - 192) << 8) + secondLengthByte + 192;
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: Length = ((firstLengthByte - 192) << 8) + secondLengthByte + 192;
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: Length = ((firstLengthByte - 192) << 8) + secondLengthByte + 192;
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: (firstLengthByte >= 192) && (firstLengthByte <= 223)
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: (firstLengthByte >= 192) && (firstLengthByte <= 223)
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: firstLengthByte != 255
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpPacketHeader,The following statement contains a magic number: Length = OpenPgpScalarNumber.Read(inputStream' 4);
Magic Number,Moserware.Security.Cryptography,OpenPgpPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,WriteTo,The following statement contains a magic number: Length <= 191
Magic Number,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpOldFormatPacketHeader,The following statement contains a magic number: _TagId = (firstByte & ~OldHeaderHighBits) >> 2;
Magic Number,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpOldFormatPacketHeader,The following statement contains a magic number: lengthType == 3
Magic Number,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpOldFormatPacketHeader,The following statement contains a magic number: Length = (firstLengthOctet << 16) | secondLengthOctet;
Magic Number,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,WriteTo,The following statement contains a magic number: var firstByte = (byte) (OldHeaderHighBits | (TagId << 2));
Magic Number,Moserware.Security.Cryptography,OpenPgpOldFormatPacketHeader,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,WriteTo,The following statement contains a magic number: Length < 256
Magic Number,Moserware.Security.Cryptography,OpenPgpTimeField,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,Read,The following statement contains a magic number: return new OpenPgpTimeField(OpenPgpScalarNumber.Read(inputStream' 4));
Magic Number,Moserware.Security.Cryptography,SymmetricallyEncryptedIntegrityProtectedDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,GetDecryptedPackets,The following statement contains a magic number: var mdcStart = decrypted.Length - (1 + 1 + 20);
Magic Number,Moserware.Security.Cryptography,SymmetricallyEncryptedIntegrityProtectedDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,GetDecryptedPackets,The following statement contains a magic number: decrypted.SetLength(mdcStart + 2);
Magic Number,Moserware.Security.Cryptography,SymmetricallyEncryptedIntegrityProtectedDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,GetDecryptedPackets,The following statement contains a magic number: decrypted.SetLength(decrypted.Length - 2);
Magic Number,Moserware.Security.Cryptography,SymmetricallyEncryptedIntegrityProtectedDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,EncryptPackets,The following statement contains a magic number: mdcPacket.Header.Length = hasher.HashSize/8;
Magic Number,Moserware.Security.Cryptography,ModificationDetectionCodeOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ModificationDetectionCodeOpenPgpPacket,The following statement contains a magic number: var sha1Value = new byte[20];
Magic Number,Moserware.Security.Cryptography,ModificationDetectionCodeOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ModificationDetectionCodeOpenPgpPacket,The following statement contains a magic number: inputStream.Read(sha1Value' 0' 20) != 20
Magic Number,Moserware.Security.Cryptography,ModificationDetectionCodeOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ModificationDetectionCodeOpenPgpPacket,The following statement contains a magic number: inputStream.Read(sha1Value' 0' 20) != 20
Magic Number,Moserware.Security.Cryptography,LiteralDataOpenPgpPacket,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,WriteTo,The following statement contains a magic number: Header.Length += 4;
Magic Number,Moserware.Security.Cryptography,StreamExtensions,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,CopySubsetTo,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,Moserware.Security.Cryptography,SimpleOpenPgpStringToKeySpecifier,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,HashToKey,The following statement contains a magic number: return HashAlgorithm.ComputeHash(null' passphrase' cipher.KeySizeInBits / 8);
Magic Number,Moserware.Security.Cryptography,SaltedOpenPgpStringToKeySpecifier,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,HashToKey,The following statement contains a magic number: return HashAlgorithm.ComputeHash(Salt' passphrase' cipher.KeySizeInBits/8);
Magic Number,Moserware.Security.Cryptography,IteratedAndSaltedOpenPgpStringToKeySpecifier,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,HashToKey,The following statement contains a magic number: return HashAlgorithm.ComputeHash(Salt' passphrase' cipher.KeySizeInBits / 8' Count);
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(7' "AES128"' 128' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(7' "AES128"' 128' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(8' "AES192"' 192' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(8' "AES192"' 192' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(9' "AES256"' 256' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpSymmetricCipher,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpSymmetricCipher,The following statement contains a magic number: AddCipher(9' "AES256"' 256' () => new RijndaelManaged());
Magic Number,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpHashAlgorithm,The following statement contains a magic number: add(2' () => new SHA1CryptoServiceProvider());
Magic Number,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpHashAlgorithm,The following statement contains a magic number: add(8' () => new SHA256CryptoServiceProvider());
Magic Number,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpHashAlgorithm,The following statement contains a magic number: add(9' () => new SHA384CryptoServiceProvider());
Magic Number,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpHashAlgorithm,The following statement contains a magic number: add(10' () => new SHA512CryptoServiceProvider());
Magic Number,Moserware.Security.Cryptography,OpenPgpHashAlgorithm,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,ComputeHash,The following statement contains a magic number: var hashSizeInOctets = firstHashContext.HashSize/8;
Magic Number,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpCfbTransform,The following statement contains a magic number: int feedbackSizeInBytes = algorithm.BlockSize / 8;
Magic Number,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpCfbTransform,The following statement contains a magic number: _PrefixBytes = new byte[feedbackSizeInBytes + 2];
Magic Number,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpCfbTransform,The following statement contains a magic number: _PrefixBytes[_PrefixBytes.Length - 2] = _PrefixBytes[_PrefixBytes.Length - 4];
Magic Number,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpCfbTransform,The following statement contains a magic number: _PrefixBytes[_PrefixBytes.Length - 2] = _PrefixBytes[_PrefixBytes.Length - 4];
Magic Number,Moserware.Security.Cryptography,OpenPgpCfbTransform,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\OpenPgp.cs,OpenPgpCfbTransform,The following statement contains a magic number: _PrefixBytes[_PrefixBytes.Length - 1] = _PrefixBytes[_PrefixBytes.Length - 3];
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerBytesWithLeastSignificantWordFirstUsing16BitMsbFirstWords,The following statement contains a magic number: bool isOddNumberOfBytes = bigEndianBytes.Length % 2 != 0;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerBytesWithLeastSignificantWordFirstUsing16BitMsbFirstWords,The following statement contains a magic number: wordByteOffset < 2
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerBytesWithLeastSignificantWordFirstUsing16BitMsbFirstWords,The following statement contains a magic number: result[bigEndianBytes.Length - 2] = result[bigEndianBytes.Length - 1];
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerFromLeastSignificantWordsFirstWith16BitMsbFirstWords,The following statement contains a magic number: bool hasBytePadding = actualBytes % 2 == 1;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerFromLeastSignificantWordsFirstWith16BitMsbFirstWords,The following statement contains a magic number: wordBytes[wordBytes.Length - 1] = wordBytes[wordBytes.Length - 2];
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerFromLeastSignificantWordsFirstWith16BitMsbFirstWords,The following statement contains a magic number: wordBytes[wordBytes.Length - 2] = 0;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,GetBigIntegerFromLeastSignificantWordsFirstWith16BitMsbFirstWords,The following statement contains a magic number: ixByteInWord < 2
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncipherBlock,The following statement contains a magic number: v[0] += (((v[1] << 4) ^ (v[1] >> 5)) + v[1]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncipherBlock,The following statement contains a magic number: v[0] += (((v[1] << 4) ^ (v[1] >> 5)) + v[1]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncipherBlock,The following statement contains a magic number: v[1] += (((v[0] << 4) ^ (v[0] >> 5)) + v[0]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncipherBlock,The following statement contains a magic number: v[1] += (((v[0] << 4) ^ (v[0] >> 5)) + v[0]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,DecipherBlock,The following statement contains a magic number: v[1] -= (((v[0] << 4) ^ (v[0] >> 5)) + v[0]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,DecipherBlock,The following statement contains a magic number: v[1] -= (((v[0] << 4) ^ (v[0] >> 5)) + v[0]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,DecipherBlock,The following statement contains a magic number: v[0] -= (((v[1] << 4) ^ (v[1] >> 5)) + v[1]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,DecipherBlock,The following statement contains a magic number: v[0] -= (((v[1] << 4) ^ (v[1] >> 5)) + v[1]) ^ sum;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: UInt32[] v = new UInt32[2];
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: const int wordsPerBlock = 2;
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: v[i] = ((UInt32)data[(idx + (4 * i)) % len]) << 24 |                         ((UInt32)data[(idx + (4 * i) + 1) % len]) << 16 |                         ((UInt32)data[(idx + (4 * i) + 2) % len]) << 8 |                         ((UInt32)data[(idx + (4 * i) + 3) % len]);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 0) % len] = (byte)(v[i] >> 24);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 0) % len] = (byte)(v[i] >> 24);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 1) % len] = (byte)((v[i] >> 16) & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 1) % len] = (byte)((v[i] >> 16) & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 2) % len] = (byte)((v[i] >> 8) & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 2) % len] = (byte)((v[i] >> 8) & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 2) % len] = (byte)((v[i] >> 8) & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 3) % len] = (byte)(v[i] & 0xff);
Magic Number,Moserware.Security.Cryptography,XteaDiffuser,C:\research\architectureSmells\repos\moserware_SecretSplitter\SecretSplitter\Security\Cryptography\Diffuser.cs,EncodeSlice,The following statement contains a magic number: data[(idx + (4 * i) + 3) % len] = (byte)(v[i] & 0xff);
