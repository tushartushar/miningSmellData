Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,UnitTests.Security.Cryptography,OpenPgpTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\OpenPgpTests.cs,,The length of the parameter _HelloWorldExampleIteratedAndSaltedS2K is 38.
Long Statement,UnitTests.Security.Cryptography,SecretCombinerTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretCombinerTests.cs,DiffuserTests,The length of the statement  "            string combinedHello123 = SecretCombiner.Combine(new[] { "1-11feca4d8f9a7665"' "2-f95cfd12cbce92fd" }).RecoveredTextString; " is 123.
Long Statement,UnitTests.Security.Cryptography,SecretCombinerTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretCombinerTests.cs,DiffuserTests,The length of the statement  "            string combinedHello1234 = SecretCombiner.Combine(new[] { "1-4676885abc0af6104e"' "2-a3b1297294d04fc9c5" }).RecoveredTextString; " is 128.
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var firstByteCutoff = new BigInteger(127).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n128 = new BigInteger(128).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n130 = new BigInteger(130).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n255 = new BigInteger(255).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n256 = new BigInteger(256).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n257 = new BigInteger(257).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Numerics,BigIntegerExtensionsTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Numerics\BigIntegerExtensionsTests.cs,ToUnsignedBytesLeastSignificantByteFirstTest,The following statement contains a magic number: var n258 = new BigInteger(258).ToUnsignedLittleEndianBytes();
Magic Number,UnitTests.Algebra,FiniteFieldPointTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPointTests.cs,ParseTests,The following statement contains a magic number: Assert.AreEqual(new BigInteger(2)' p.X.PolynomialValue);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var rijndaelPoly = new IrreduciblePolynomial(8);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var a = new FiniteFieldPolynomial(rijndaelPoly' 6' 4' 1' 0);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var a = new FiniteFieldPolynomial(rijndaelPoly' 6' 4' 1' 0);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var b = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var b = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: var b = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: i < 255
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,BasicTests,The following statement contains a magic number: Assert.AreEqual(255' vals.Count);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var rijndaelPoly = new IrreduciblePolynomial(8);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var a = new FiniteFieldPolynomial(rijndaelPoly' 6' 4' 1' 0);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var a = new FiniteFieldPolynomial(rijndaelPoly' 6' 4' 1' 0);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var expectedInverse = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var expectedInverse = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Algebra,FiniteFieldPolynomialTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Algebra\FiniteFieldPolynomialTests.cs,TestInverse,The following statement contains a magic number: var expectedInverse = new FiniteFieldPolynomial(rijndaelPoly' 7' 6' 3' 1);
Magic Number,UnitTests.Security.Cryptography,SecretSplitterTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretSplitterTests.cs,TestSplits,The following statement contains a magic number: var splits = SecretSplitter.SplitMessage(helloWorld' 2' 3);
Magic Number,UnitTests.Security.Cryptography,SecretSplitterTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretSplitterTests.cs,TestSplits,The following statement contains a magic number: var splits = SecretSplitter.SplitMessage(helloWorld' 2' 3);
Magic Number,UnitTests.Security.Cryptography,SecretSplitterTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretSplitterTests.cs,TestSplits,The following statement contains a magic number: var recovered = SecretCombiner.Combine(splits.Take(2)).RecoveredTextString;
Magic Number,UnitTests.Security.Cryptography,SecretSplitterTests,C:\research\architectureSmells\repos\moserware_SecretSplitter\UnitTests\Security\Cryptography\SecretSplitterTests.cs,TestSplits,The following statement contains a magic number: i < 10
