Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The method has 566 lines of code.
Long Method,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The method has 273 lines of code.
Long Method,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The method has 287 lines of code.
Long Method,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The method has 216 lines of code.
Long Method,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The method has 477 lines of code.
Complex Method,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Decrypt,Cyclomatic complexity of the method is 10
Complex Method,Shadowsocks.Model,Configuration,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Configuration.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Shadowsocks.Controller,UpdateChecker,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UpdateChecker.cs,http_DownloadStringCompleted,Cyclomatic complexity of the method is 8
Complex Method,Shadowsocks.Controller,PACServer,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PACServer.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,Cyclomatic complexity of the method is 9
Long Parameter List,Shadowsocks.Encryption,EncryptorInfo,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\EncryptorBase.cs,EncryptorInfo,The method has 6 parameters. Parameters: innerLibName' keySize' saltSize' nonceSize' tagSize' type
Long Parameter List,Shadowsocks.Encryption,EncryptorInfo,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\EncryptorBase.cs,EncryptorInfo,The method has 5 parameters. Parameters: keySize' saltSize' nonceSize' tagSize' type
Long Parameter List,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,cipher_update,The method has 5 parameters. Parameters: ctx' input' ilen' output' olen
Long Parameter List,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,cipher_auth_encrypt,The method has 11 parameters. Parameters: ctx' iv' iv_len' ad' ad_len' input' ilen' output' olen' tag' tag_len
Long Parameter List,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,cipher_auth_decrypt,The method has 11 parameters. Parameters: ctx' iv' iv_len' ad' ad_len' input' ilen' output' olen' tag' tag_len
Long Parameter List,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,hkdf,The method has 8 parameters. Parameters: salt' salt_len' ikm' ikm_len' info' info_len' okm' okm_len
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_aead_chacha20poly1305_ietf_encrypt,The method has 9 parameters. Parameters: c' clen_p' m' mlen' ad' adlen' nsec' npub' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_aead_chacha20poly1305_ietf_decrypt,The method has 9 parameters. Parameters: m' mlen_p' nsec' c' clen' ad' adlen' npub' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_aead_aes256gcm_encrypt,The method has 9 parameters. Parameters: c' clen_p' m' mlen' ad' adlen' nsec' npub' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_aead_aes256gcm_decrypt,The method has 9 parameters. Parameters: m' mlen_p' nsec' c' clen' ad' adlen' npub' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_stream_salsa20_xor_ic,The method has 6 parameters. Parameters: c' m' mlen' n' ic' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_stream_chacha20_xor_ic,The method has 6 parameters. Parameters: c' m' mlen' n' ic' k
Long Parameter List,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,crypto_stream_chacha20_ietf_xor_ic,The method has 6 parameters. Parameters: c' m' mlen' n' ic' k
Long Parameter List,Shadowsocks.Proxy,DirectConnect,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\DirectConnect.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,DirectConnect,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\DirectConnect.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,HttpProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\HttpProxy.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,HttpProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\HttpProxy.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,IProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\IProxy.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,IProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\IProxy.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Controller,Logging,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Logging.cs,Debug,The method has 5 parameters. Parameters: local' remote' len' header' tailer
Long Parameter List,Shadowsocks.Util.Sockets,LineReader,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\LineReader.cs,LineReader,The method has 8 parameters. Parameters: socket' onLineRead' onException' onFinish' encoding' delimiter' maxLineBytes' state
Long Parameter List,Shadowsocks.Util.Sockets,LineReader,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\LineReader.cs,IndexOf,The method has 6 parameters. Parameters: haystack' index' length' needle' offsetTable' charTable
Long Parameter List,Shadowsocks.Util.Sockets,WrappedSocket,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\WrappedSocket.cs,BeginSend,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.Util.Sockets,WrappedSocket,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\WrappedSocket.cs,BeginReceive,The method has 6 parameters. Parameters: buffer' offset' size' socketFlags' callback' state
Long Parameter List,Shadowsocks.View,Win32,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,UpdateLayeredWindow,The method has 9 parameters. Parameters: hwnd' hdcDst' pptDst' psize' hdcSrc' pprSrc' crKey' pblend' dwFlags
Long Statement,Shadowsocks.Proxy,HttpProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\HttpProxy.cs,HttpRequestSendCallback,The length of the statement  "                new LineReader(_remote' OnLineRead' OnException' OnFinish' Encoding.UTF8' HTTP_CRLF' 1024' new FakeAsyncResult(ar' state)); " is 123.
Long Statement,Shadowsocks.Controller,AvailabilityStatistics,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\AvailabilityStatistics.cs,UpdateSpeed,The length of the statement  "                    $"{id}: current/max inbound {inboundSpeed}/{inR.Max()} KiB/s' current/max outbound {outboundSpeed}/{outR.Max()} KiB/s"); " is 120.
Long Statement,Shadowsocks.Controller,AvailabilityStatistics,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\AvailabilityStatistics.cs,ping_Completed,The length of the statement  "            Logging.Debug($"Ping {server.FriendlyName()} {e.RoundtripTime.Count} times' {(100 - record.PackageLoss * 100)}% packages loss' min {record.MinResponse} ms' max {record.MaxResponse} ms' avg {record.AverageResponse} ms"); " is 219.
Long Statement,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,Start,The length of the statement  "                _udpSocket.BeginReceiveFrom(udpState.buffer' 0' udpState.buffer.Length' 0' ref udpState.remoteEndPoint' new AsyncCallback(RecvFromCallback)' udpState); " is 151.
Long Statement,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,RecvFromCallback,The length of the statement  "                    socket.BeginReceiveFrom(state.buffer' 0' state.buffer.Length' 0' ref state.remoteEndPoint' new AsyncCallback(RecvFromCallback)' state); " is 135.
Long Statement,Shadowsocks.Controller,UDPRelay,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Handle,The length of the statement  "                handler = new UDPHandler(socket' _controller.GetAServer(IStrategyCallerType.UDP' remoteEndPoint' null/*TODO: fix this*/)' remoteEndPoint); " is 138.
Long Statement,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Receive,The length of the statement  "                _remote?.BeginReceiveFrom(_buffer' 0' _buffer.Length' 0' ref remoteEndPoint' new AsyncCallback(RecvFromCallback)' null); " is 120.
Long Statement,Shadowsocks.Controller,ShadowsocksController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\ShadowsocksController.cs,Reload,The length of the statement  "            // http://stackoverflow.com/questions/10235093/socket-doesnt-close-after-application-exits-if-a-launched-process-is-open " is 120.
Long Statement,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The length of the statement  "                    -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) + " is 128.
Long Statement,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The length of the statement  "                Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score)); " is 127.
Long Statement,Shadowsocks.Util.ProcessManagement,ThreadUtil,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\ProcessManagement\ThreadUtil.cs,GetCommandLine,The length of the statement  "            using (var searcher = new ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process WHERE ProcessId = " + process.Id)) " is 124.
Long Statement,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,SetIEProxy,The length of the statement  "                    ? $"global {proxyServer} <local>;localhost;127.*;10.*;172.16.*;172.17.*;172.18.*;172.19.*;172.20.*;172.21.*;172.22.*;172.23.*;172.24.*;172.25.*;172.26.*;172.27.*;172.28.*;172.29.*;172.30.*;172.31.*;172.32.*;192.168.*" " is 217.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.PluginTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.RemarksTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.IPTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.ServerPortTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.PasswordTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.EncryptionSelect.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 149.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.TimeoutTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.PluginOptionsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 157.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.ShowPasswdCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel5.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 152.
Long Statement,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The length of the statement  "            this.factorNum.Font = new System.Drawing.Font("Segoe UI"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The length of the statement  "            this.multiply.Font = new System.Drawing.Font("Segoe UI"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 144.
Long Statement,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The length of the statement  "            this.valueLabel.Font = new System.Drawing.Font("Microsoft YaHei"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.50485F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.50485F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.50485F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.50485F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 17.21683F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 16.76375F)); " is 122.
Long Statement,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("微软雅黑"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(134))); " is 133.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea(); " is 135.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend(); " is 126.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series(); " is 126.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series(); " is 126.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            this.LogMessageTextBox.Font = new System.Drawing.Font("Consolas"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            this.TopMostCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 150.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            this.WrapTextCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 151.
Long Statement,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,controller_Errored,The length of the statement  "            MessageBox.Show(e.GetException().ToString()' String.Format(I18N.GetString("Shadowsocks Error: {0}")' e.GetException().Message)); " is 128.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,UpdateTrayIcon,The length of the statement  "                              String.Format(I18N.GetString("Running: Port {0}")' config.localPort))  // this feedback is very important because they need to know Shadowsocks is running " is 154.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                    this.updateFromGFWListItem = CreateMenuItem("Update Local PAC from GFWList"' new EventHandler(this.UpdatePACFromGFWListItem_Click))' " is 132.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                    this.editGFWUserRuleItem = CreateMenuItem("Edit User Rule for GFWList..."' new EventHandler(this.EditUserRuleFileForGFWListItem_Click))' " is 136.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                    this.secureLocalPacUrlToggleItem = CreateMenuItem("Secure Local PAC"' new EventHandler(this.SecureLocalPacUrlToggleItem_Click))' " is 128.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                    this.VerboseLoggingToggleItem = CreateMenuItem( "Verbose Logging"' new EventHandler(this.VerboseLoggingToggleItem_Click) )' " is 123.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                        this.autoCheckUpdatesToggleItem = CreateMenuItem("Check for Updates at Startup"' new EventHandler(this.autoCheckUpdatesToggleItem_Click))' " is 138.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,LoadMenu,The length of the statement  "                        this.checkPreReleaseToggleItem = CreateMenuItem("Check Pre-release Version"' new EventHandler(this.checkPreReleaseToggleItem_Click))' " is 133.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,updateChecker_CheckUpdateCompleted,The length of the statement  "                ShowBalloonTip(String.Format(I18N.GetString("Shadowsocks {0} Update Found")' updateChecker.LatestVersionNumber + updateChecker.LatestVersionSuffix)' I18N.GetString("Click here to update")' ToolTipIcon.Info' 5000); " is 213.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,UpdateServersMenu,The length of the statement  "                if (item.Tag != null && (item.Tag.ToString() == configuration.index.ToString() || item.Tag.ToString() == configuration.strategy)) " is 129.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The length of the statement  "                        Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2); " is 126.
Long Statement,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The length of the statement  "                            splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY); " is 138.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyAddrLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyServerTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyPortLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyPortTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyTypeComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyTimeoutTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyTimeoutLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 154.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 70F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 30F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 21.95122F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 21.95122F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 21.95122F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 34.14634F)); " is 122.
Long Statement,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The length of the statement  "            this.ProxyNotificationLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Left | System.Windows.Forms.AnchorStyles.Right))); " is 159.
Long Statement,Shadowsocks.View,PerPixelAlphaForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,SetBitmap,The length of the statement  "                Win32.UpdateLayeredWindow(Handle' screenDc' ref topPos' ref size' memDc' ref pointSource' 0' ref blend' Win32.ULW_ALPHA); " is 121.
Long Statement,Shadowsocks.View,PerPixelAlphaForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,SetBitmap,The length of the statement  "                    //Windows.DeleteObject(hBitmap); // The documentation says that we have to use the Windows.DeleteObject... but since there is no such method I use the normal DeleteObject from Win32 GDI and it's working fine without any resource leak. " is 234.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea(); " is 135.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend(); " is 126.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series(); " is 126.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Series series2 = new System.Windows.Forms.DataVisualization.Charting.Series(); " is 126.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.Windows.Forms.DataVisualization.Charting.Series series3 = new System.Windows.Forms.DataVisualization.Charting.Series(); " is 126.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.PingCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' this.bindingConfiguration' "Ping"' true)); " is 121.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.chartModeSelector.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.label8.Font = new System.Drawing.Font("Microsoft YaHei"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.dataCollectionMinutesNum.DataBindings.Add(new System.Windows.Forms.Binding("Value"' this.bindingConfiguration' "DataCollectionMinutes"' true)); " is 148.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.StatisticsEnabledCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' this.bindingConfiguration' "StatisticsEnabled"' true)); " is 147.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.choiceKeptMinutesNum.DataBindings.Add(new System.Windows.Forms.Binding("Value"' this.bindingConfiguration' "ChoiceKeptMinutes"' true)); " is 140.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.byHourOfDayCheckBox.DataBindings.Add(new System.Windows.Forms.Binding("Checked"' this.bindingConfiguration' "ByHourOfDay"' true)); " is 135.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.repeatTimesNum.DataBindings.Add(new System.Windows.Forms.Binding("Value"' this.bindingConfiguration' "RepeatTimesNum"' true)); " is 131.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.label6.Font = new System.Drawing.Font("Microsoft YaHei"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 149.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.serverSelector.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.CancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.OKButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Microsoft YaHei"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,Shadowsocks,Program,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Program.cs,CurrentDomain_UnhandledException,The length of the statement  "                    $"{I18N.GetString("Unexpected error' shadowsocks will exit. Please report to")} https://github.com/shadowsocks/shadowsocks-windows/issues {Environment.NewLine}{errMsg}"' " is 169.
Long Statement,Shadowsocks,Program,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Program.cs,Application_ThreadException,The length of the statement  "                    $"{I18N.GetString("Unexpected error' shadowsocks will exit. Please report to")} https://github.com/shadowsocks/shadowsocks-windows/issues {Environment.NewLine}{errorMsg}"' " is 171.
Complex Conditional,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,HotkeyDown,The conditional expression  "(keyvalue >= Keys.PageUp && keyvalue <= Keys.Down) ||                      (keyvalue >= Keys.A && keyvalue <= Keys.Z) ||                      (keyvalue >= Keys.F1 && keyvalue <= Keys.F12)"  is complex.
Empty Catch Block,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,MbedTLS,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Encryption,Sodium,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Sodium.cs,Sodium,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,RecvFromCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,RecvFromCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,RecvFromCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,Logging,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Logging.cs,WriteToLogFile,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,RecvFromCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,RecvFromCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Close,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Close,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,PACServer,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PACServer.cs,SendCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ProxyConnectCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ConnectCallback,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller.Service,Sip003Plugin,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Sip003Plugin.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Controller.Service,Sip003Plugin,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Sip003Plugin.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Util.Sockets,SocketUtil,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\SocketUtil.cs,FullClose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Util.Sockets,SocketUtil,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\SocketUtil.cs,FullClose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Util.Sockets,SocketUtil,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\SocketUtil.cs,FullClose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Util.Sockets,SocketUtil,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\SocketUtil.cs,FullClose,The method has an empty catch block.
Empty Catch Block,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,Read,The method has an empty catch block.
Empty Catch Block,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,UpdateContent,The method has an empty catch block.
Magic Number,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Encrypt,The following statement contains a magic number: if (! _tcpRequestSent) {                  _tcpRequestSent = true;                  // The first TCP request                  int encAddrBufLength;                  byte[] encAddrBufBytes = new byte[AddrBufLength + tagLen * 2 + CHUNK_LEN_BYTES];                  byte[] addrBytes = _encCircularBuffer.Get(AddrBufLength);                  ChunkEncrypt(addrBytes' AddrBufLength' encAddrBufBytes' out encAddrBufLength);                  Debug.Assert(encAddrBufLength == AddrBufLength + tagLen * 2 + CHUNK_LEN_BYTES);                  Array.Copy(encAddrBufBytes' 0' outbuf' outlength' encAddrBufLength);                  outlength += encAddrBufLength;                  Logging.Debug($"_tcpRequestSent outlength {outlength}");              }
Magic Number,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Encrypt,The following statement contains a magic number: if (! _tcpRequestSent) {                  _tcpRequestSent = true;                  // The first TCP request                  int encAddrBufLength;                  byte[] encAddrBufBytes = new byte[AddrBufLength + tagLen * 2 + CHUNK_LEN_BYTES];                  byte[] addrBytes = _encCircularBuffer.Get(AddrBufLength);                  ChunkEncrypt(addrBytes' AddrBufLength' encAddrBufBytes' out encAddrBufLength);                  Debug.Assert(encAddrBufLength == AddrBufLength + tagLen * 2 + CHUNK_LEN_BYTES);                  Array.Copy(encAddrBufBytes' 0' outbuf' outlength' encAddrBufLength);                  outlength += encAddrBufLength;                  Logging.Debug($"_tcpRequestSent outlength {outlength}");              }
Magic Number,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Encrypt,The following statement contains a magic number: while (true) {                  uint bufSize = (uint)_encCircularBuffer.Size;                  if (bufSize <= 0) return;                  var chunklength = (int)Math.Min(bufSize' CHUNK_LEN_MASK);                  byte[] chunkBytes = _encCircularBuffer.Get(chunklength);                  int encChunkLength;                  byte[] encChunkBytes = new byte[chunklength + tagLen * 2 + CHUNK_LEN_BYTES];                  ChunkEncrypt(chunkBytes' chunklength' encChunkBytes' out encChunkLength);                  Debug.Assert(encChunkLength == chunklength + tagLen * 2 + CHUNK_LEN_BYTES);                  Buffer.BlockCopy(encChunkBytes' 0' outbuf' outlength' encChunkLength);                  outlength += encChunkLength;                  Logging.Debug("chunks enc outlength " + outlength);                  // check if we have enough space for outbuf                  if (outlength + TCPHandler.ChunkOverheadSize > TCPHandler.BufferSize) {                      Logging.Debug("enc outbuf almost full' giving up");                      return;                  }                  bufSize = (uint)_encCircularBuffer.Size;                  if (bufSize <= 0) {                      Logging.Debug("No more data to encrypt' leaving");                      return;                  }              }
Magic Number,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Encrypt,The following statement contains a magic number: while (true) {                  uint bufSize = (uint)_encCircularBuffer.Size;                  if (bufSize <= 0) return;                  var chunklength = (int)Math.Min(bufSize' CHUNK_LEN_MASK);                  byte[] chunkBytes = _encCircularBuffer.Get(chunklength);                  int encChunkLength;                  byte[] encChunkBytes = new byte[chunklength + tagLen * 2 + CHUNK_LEN_BYTES];                  ChunkEncrypt(chunkBytes' chunklength' encChunkBytes' out encChunkLength);                  Debug.Assert(encChunkLength == chunklength + tagLen * 2 + CHUNK_LEN_BYTES);                  Buffer.BlockCopy(encChunkBytes' 0' outbuf' outlength' encChunkLength);                  outlength += encChunkLength;                  Logging.Debug("chunks enc outlength " + outlength);                  // check if we have enough space for outbuf                  if (outlength + TCPHandler.ChunkOverheadSize > TCPHandler.BufferSize) {                      Logging.Debug("enc outbuf almost full' giving up");                      return;                  }                  bufSize = (uint)_encCircularBuffer.Size;                  if (bufSize <= 0) {                      Logging.Debug("No more data to encrypt' leaving");                      return;                  }              }
Magic Number,Shadowsocks.Encryption.AEAD,AEADEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADEncryptor.cs,Decrypt,The following statement contains a magic number: while (true) {                  bufSize = _decCircularBuffer.Size;                  // check if we have any data                  if (bufSize <= 0) {                      Logging.Debug("No data in _decCircularBuffer");                      return;                  }                    // first get chunk length                  if (bufSize <= CHUNK_LEN_BYTES + tagLen) {                      // so we only have chunk length and its tag?                      return;                  }                    #region Chunk Decryption                    byte[] encLenBytes = _decCircularBuffer.Peek(CHUNK_LEN_BYTES + tagLen);                  uint decChunkLenLength = 0;                  byte[] decChunkLenBytes = new byte[CHUNK_LEN_BYTES];                  // try to dec chunk len                  cipherDecrypt(encLenBytes' CHUNK_LEN_BYTES + (uint)tagLen' decChunkLenBytes' ref decChunkLenLength);                  Debug.Assert(decChunkLenLength == CHUNK_LEN_BYTES);                  // finally we get the real chunk len                  ushort chunkLen = (ushort) IPAddress.NetworkToHostOrder((short)BitConverter.ToUInt16(decChunkLenBytes' 0));                  if (chunkLen > CHUNK_LEN_MASK)                  {                      // we get invalid chunk                      Logging.Error($"Invalid chunk length: {chunkLen}");                      throw new CryptoErrorException();                  }                  Logging.Debug("Get the real chunk len:" + chunkLen);                  bufSize = _decCircularBuffer.Size;                  if (bufSize < CHUNK_LEN_BYTES + tagLen /* we haven't remove them */+ chunkLen + tagLen) {                      Logging.Debug("No more data to decrypt one chunk");                      return;                  }                  IncrementNonce(false);                    // we have enough data to decrypt one chunk                  // drop chunk len and its tag from buffer                  _decCircularBuffer.Skip(CHUNK_LEN_BYTES + tagLen);                  byte[] encChunkBytes = _decCircularBuffer.Get(chunkLen + tagLen);                  byte[] decChunkBytes = new byte[chunkLen];                  uint decChunkLen = 0;                  cipherDecrypt(encChunkBytes' chunkLen + (uint)tagLen' decChunkBytes' ref decChunkLen);                  Debug.Assert(decChunkLen == chunkLen);                  IncrementNonce(false);                    #endregion                    // output to outbuf                  Buffer.BlockCopy(decChunkBytes' 0' outbuf' outlength' (int) decChunkLen);                  outlength += (int)decChunkLen;                  Logging.Debug("aead dec outlength " + outlength);                  if (outlength + 100 > TCPHandler.BufferSize)                  {                      Logging.Debug("dec outbuf almost full' giving up");                      return;                  }                  bufSize = _decCircularBuffer.Size;                  // check if we already done all of them                  if (bufSize <= 0) {                      Logging.Debug("No data in _decCircularBuffer' already all done");                      return;                  }              }
Magic Number,Shadowsocks.Encryption.AEAD,AEADMbedTLSEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\AEAD\AEADMbedTLSEncryptor.cs,CipherSetKey,The following statement contains a magic number: int ret = MbedTLS.cipher_setkey(ctx' key' keyLen * 8'                  isEncrypt ? MbedTLS.MBEDTLS_ENCRYPT : MbedTLS.MBEDTLS_DECRYPT);
Magic Number,Shadowsocks.Encryption,MbedTLS,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\MbedTLS.cs,MD5,The following statement contains a magic number: byte[] output = new byte[16];
Magic Number,Shadowsocks.Encryption.Stream,StreamMbedTLSEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Stream\StreamMbedTLSEncryptor.cs,initCipher,The following statement contains a magic number: if (MbedTLS.cipher_setkey(ctx' realkey' keyLen * 8'                  isEncrypt ? MbedTLS.MBEDTLS_ENCRYPT : MbedTLS.MBEDTLS_DECRYPT) != 0 )                  throw new System.Exception("Cannot set mbed TLS cipher key");
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,Server,The following statement contains a magic number: server_port = 8388;
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,ParseLegacyURL,The following statement contains a magic number: try              {                  details = DetailsParser.Match(Encoding.UTF8.GetString(Convert.FromBase64String(                  base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '='))));              }              catch (FormatException)              {                  return null;              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,ParseLegacyURL,The following statement contains a magic number: try              {                  details = DetailsParser.Match(Encoding.UTF8.GetString(Convert.FromBase64String(                  base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '='))));              }              catch (FormatException)              {                  return null;              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,ParseLegacyURL,The following statement contains a magic number: try              {                  details = DetailsParser.Match(Encoding.UTF8.GetString(Convert.FromBase64String(                  base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '='))));              }              catch (FormatException)              {                  return null;              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Server,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Server.cs,GetServers,The following statement contains a magic number: foreach (string serverUrl in serverUrls)              {                  string _serverUrl = serverUrl.Trim();                  if (!_serverUrl.BeginWith("ss://"' StringComparison.InvariantCultureIgnoreCase))                  {                      continue;                  }                    Server legacyServer = ParseLegacyURL(serverUrl);                  if (legacyServer != null)   //legacy                  {                      servers.Add(legacyServer);                  }                  else   //SIP002                  {                      Uri parsedUrl;                      try                      {                          parsedUrl = new Uri(serverUrl);                      }                      catch (UriFormatException)                      {                          continue;                      }                      Server server = new Server                      {                          remarks = parsedUrl.GetComponents(UriComponents.Fragment' UriFormat.Unescaped)'                          server = parsedUrl.GetComponents(UriComponents.Host' UriFormat.Unescaped)'                          server_port = parsedUrl.Port'                      };                        // parse base64 UserInfo                      string rawUserInfo = parsedUrl.GetComponents(UriComponents.UserInfo' UriFormat.Unescaped);                      string base64 = rawUserInfo.Replace('-'' '+').Replace('_'' '/');    // Web-safe base64 to normal base64                      string userInfo = "";                      try                      {                          userInfo = Encoding.UTF8.GetString(Convert.FromBase64String(                          base64.PadRight(base64.Length + (4 - base64.Length % 4) % 4' '=')));                      }                      catch (FormatException)                      {                          continue;                      }                      string[] userInfoParts = userInfo.Split(new char[] { ':' }' 2);                      if (userInfoParts.Length != 2)                      {                          continue;                      }                      server.method = userInfoParts[0];                      server.password = userInfoParts[1];                        NameValueCollection queryParameters = HttpUtility.ParseQueryString(parsedUrl.Query);                      string[] pluginParts = HttpUtility.UrlDecode(queryParameters["plugin"] ?? "").Split(new[] { ';' }' 2);                      if (pluginParts.Length > 0)                      {                          server.plugin = pluginParts[0] ?? "";                      }                        if (pluginParts.Length > 1)                      {                          server.plugin_opts = pluginParts[1] ?? "";                      }                        servers.Add(server);                  }              }
Magic Number,Shadowsocks.Model,Configuration,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Configuration.cs,Load,The following statement contains a magic number: try              {                  string configContent = File.ReadAllText(CONFIG_FILE);                  Configuration config = JsonConvert.DeserializeObject<Configuration>(configContent);                  config.isDefault = false;                    if (config.configs == null)                      config.configs = new List<Server>();                  if (config.configs.Count == 0)                      config.configs.Add(GetDefaultServer());                  if (config.localPort == 0)                      config.localPort = 1080;                  if (config.index == -1 && config.strategy == null)                      config.index = 0;                  if (config.logViewer == null)                      config.logViewer = new LogViewerConfig();                  if (config.proxy == null)                      config.proxy = new ProxyConfig();                  if (config.hotkey == null)                      config.hotkey = new HotkeyConfig();                    config.proxy.CheckConfig();                    return config;              }              catch (Exception e)              {                  if (!(e is FileNotFoundException))                      Logging.LogUsefulException(e);                  return new Configuration                  {                      index = 0'                      isDefault = true'                      localPort = 1080'                      autoCheckUpdate = true'                      configs = new List<Server>()                      {                          GetDefaultServer()                      }'                      logViewer = new LogViewerConfig()'                      proxy = new ProxyConfig()'                      hotkey = new HotkeyConfig()                  };              }
Magic Number,Shadowsocks.Model,Configuration,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Configuration.cs,Load,The following statement contains a magic number: try              {                  string configContent = File.ReadAllText(CONFIG_FILE);                  Configuration config = JsonConvert.DeserializeObject<Configuration>(configContent);                  config.isDefault = false;                    if (config.configs == null)                      config.configs = new List<Server>();                  if (config.configs.Count == 0)                      config.configs.Add(GetDefaultServer());                  if (config.localPort == 0)                      config.localPort = 1080;                  if (config.index == -1 && config.strategy == null)                      config.index = 0;                  if (config.logViewer == null)                      config.logViewer = new LogViewerConfig();                  if (config.proxy == null)                      config.proxy = new ProxyConfig();                  if (config.hotkey == null)                      config.hotkey = new HotkeyConfig();                    config.proxy.CheckConfig();                    return config;              }              catch (Exception e)              {                  if (!(e is FileNotFoundException))                      Logging.LogUsefulException(e);                  return new Configuration                  {                      index = 0'                      isDefault = true'                      localPort = 1080'                      autoCheckUpdate = true'                      configs = new List<Server>()                      {                          GetDefaultServer()                      }'                      logViewer = new LogViewerConfig()'                      proxy = new ProxyConfig()'                      hotkey = new HotkeyConfig()                  };              }
Magic Number,Shadowsocks.Model,Configuration,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Configuration.cs,CheckPort,The following statement contains a magic number: if (port <= 0 || port > 65535)                  throw new ArgumentException(I18N.GetString("Port out of range"));
Magic Number,Shadowsocks.Model,Configuration,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Model\Configuration.cs,CheckLocalPort,The following statement contains a magic number: if (port == 8123)                  throw new ArgumentException(I18N.GetString("Port can't be 8123"));
Magic Number,Shadowsocks.Proxy,HttpProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\HttpProxy.cs,HttpRequestSendCallback,The following statement contains a magic number: try              {                  _remote.EndSend(ar);                    // start line read                  new LineReader(_remote' OnLineRead' OnException' OnFinish' Encoding.UTF8' HTTP_CRLF' 1024' new FakeAsyncResult(ar' state));              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,HttpProxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\HttpProxy.cs,OnLineRead,The following statement contains a magic number: if (_respondLineCount == 0)              {                  var m = HttpRespondHeaderRegex.Match(line);                  if (m.Success)                  {                      var resultCode = m.Groups[2].Value;                      if ("200" != resultCode)                      {                          return true;                      }                      _established = true;                  }              }              else              {                  if (line.IsNullOrEmpty())                  {                      return true;                  }              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: if (dep != null)              {                  // is a domain name' we will leave it to server                    atyp = 3; // DOMAINNAME                  var enc = Encoding.UTF8;                  var hostByteCount = enc.GetByteCount(dep.Host);                    request = new byte[4 + 1/*length byte*/ + hostByteCount + 2];                  request[4] = (byte)hostByteCount;                  enc.GetBytes(dep.Host' 0' dep.Host.Length' request' 5);                    port = dep.Port;              }              else              {                  switch (DestEndPoint.AddressFamily)                  {                      case AddressFamily.InterNetwork:                          request = new byte[4 + 4 + 2];                          atyp = 1; // IP V4 address                          break;                      case AddressFamily.InterNetworkV6:                          request = new byte[4 + 16 + 2];                          atyp = 4; // IP V6 address                          break;                      default:                          throw new Exception(I18N.GetString("Proxy request failed"));                  }                  port = ((IPEndPoint) DestEndPoint).Port;                  var addr = ((IPEndPoint)DestEndPoint).Address.GetAddressBytes();                  Array.Copy(addr' 0' request' 4' request.Length - 4 - 2);              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: request[0] = 5;
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: request[2] = 0;
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: request[3] = atyp;
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: request[request.Length - 2] = (byte) ((port >> 8) & 0xff);
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,BeginConnectDest,The following statement contains a magic number: request[request.Length - 2] = (byte) ((port >> 8) & 0xff);
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,ConnectCallback,The following statement contains a magic number: try              {                  _remote.EndConnect(ar);                    _remote.SetSocketOption(SocketOptionLevel.Tcp' SocketOptionName.NoDelay' true);                    byte[] handshake = {5' 1' 0};                  _remote.BeginSend(handshake' 0' handshake.Length' 0' Socks5HandshakeSendCallback' state);              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5HandshakeSendCallback,The following statement contains a magic number: try              {                  _remote.EndSend(ar);                    _remote.BeginReceive(_receiveBuffer' 0' 2' 0' Socks5HandshakeReceiveCallback' state);              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5HandshakeReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 2)                  {                      if (_receiveBuffer[0] != 5 || _receiveBuffer[1] != 0)                      {                          ex = new Exception(I18N.GetString("Proxy handshake failed"));                      }                  }                  else                  {                      ex = new Exception(I18N.GetString("Proxy handshake failed"));                  }              }              catch (Exception ex2)              {                  ex = ex2;              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5HandshakeReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 2)                  {                      if (_receiveBuffer[0] != 5 || _receiveBuffer[1] != 0)                      {                          ex = new Exception(I18N.GetString("Proxy handshake failed"));                      }                  }                  else                  {                      ex = new Exception(I18N.GetString("Proxy handshake failed"));                  }              }              catch (Exception ex2)              {                  ex = ex2;              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5RequestSendCallback,The following statement contains a magic number: try              {                  _remote.EndSend(ar);                    _remote.BeginReceive(_receiveBuffer' 0' 4' 0' Socks5ReplyReceiveCallback' state);              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Proxy,Socks5Proxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Proxy\Socks5Proxy.cs,Socks5ReplyReceiveCallback,The following statement contains a magic number: try              {                  var bytesRead = _remote.EndReceive(ar);                  if (bytesRead >= 4)                  {                      if (_receiveBuffer[0] == 5 && _receiveBuffer[1] == 0)                      {                          // 跳过剩下的reply                          switch (_receiveBuffer[3]) // atyp                          {                              case 1:                                  state.BytesToRead = 4 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 4 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              case 4:                                  state.BytesToRead = 16 + 2;                                  _remote.BeginReceive(_receiveBuffer' 0' 16 + 2' 0' Socks5ReplyReceiveCallback2' state);                                  break;                              default:                                  state.ex = new Exception(I18N.GetString("Proxy request failed"));                                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));                                  break;                          }                      }                      else                      {                          state.ex = new Exception(I18N.GetString("Proxy request failed"));                          state.Callback?.Invoke(new FakeAsyncResult(ar' state));                      }                  }                  else                  {                      state.ex = new Exception(I18N.GetString("Proxy request failed"));                      state.Callback?.Invoke(new FakeAsyncResult(ar' state));                  }              }              catch (Exception ex)              {                  state.ex = ex;                  state.Callback?.Invoke(new FakeAsyncResult(ar' state));              }
Magic Number,Shadowsocks.Controller,AvailabilityStatistics,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\AvailabilityStatistics.cs,ping_Completed,The following statement contains a magic number: Logging.Debug($"Ping {server.FriendlyName()} {e.RoundtripTime.Count} times' {(100 - record.PackageLoss * 100)}% packages loss' min {record.MinResponse} ms' max {record.MaxResponse} ms' avg {record.AverageResponse} ms");
Magic Number,Shadowsocks.Controller,AvailabilityStatistics,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\AvailabilityStatistics.cs,ping_Completed,The following statement contains a magic number: Logging.Debug($"Ping {server.FriendlyName()} {e.RoundtripTime.Count} times' {(100 - record.PackageLoss * 100)}% packages loss' min {record.MinResponse} ms' max {record.MaxResponse} ms' avg {record.AverageResponse} ms");
Magic Number,Shadowsocks.Controller,AvailabilityStatistics,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\AvailabilityStatistics.cs,GetSpeedInKiBPerSecond,The following statement contains a magic number: var result = (int)(bytes / seconds) / 1024;
Magic Number,Shadowsocks.Controller,FileManager,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\FileManager.cs,UncompressFile,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,Start,The following statement contains a magic number: try              {                  // Create a TCP/IP socket.                  _tcpSocket = new Socket(AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);                  _udpSocket = new Socket(AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);                  _tcpSocket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                  _udpSocket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                  IPEndPoint localEndPoint = null;                  localEndPoint = _shareOverLAN                      ? new IPEndPoint(IPAddress.Any' _config.localPort)                      : new IPEndPoint(IPAddress.Loopback' _config.localPort);                    // Bind the socket to the local endpoint and listen for incoming connections.                  _tcpSocket.Bind(localEndPoint);                  _udpSocket.Bind(localEndPoint);                  _tcpSocket.Listen(1024);                    // Start an asynchronous socket to listen for connections.                  Logging.Info("Shadowsocks started");                  _tcpSocket.BeginAccept(new AsyncCallback(AcceptCallback)' _tcpSocket);                  UDPState udpState = new UDPState();                  udpState.socket = _udpSocket;                  _udpSocket.BeginReceiveFrom(udpState.buffer' 0' udpState.buffer.Length' 0' ref udpState.remoteEndPoint' new AsyncCallback(RecvFromCallback)' udpState);              }              catch (SocketException)              {                  _tcpSocket.Close();                  throw;              }
Magic Number,Shadowsocks.Controller,Listener,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\Listener.cs,AcceptCallback,The following statement contains a magic number: try              {                  Socket conn = listener.EndAccept(ar);                    byte[] buf = new byte[4096];                  object[] state = new object[] {                      conn'                      buf                  };                    conn.BeginReceive(buf' 0' buf.Length' 0'                      new AsyncCallback(ReceiveCallback)' state);              }              catch (ObjectDisposedException)              {              }              catch (Exception e)              {                  Logging.LogUsefulException(e);              }              finally              {                  try                  {                      listener.BeginAccept(                          new AsyncCallback(AcceptCallback)'                          listener);                  }                  catch (ObjectDisposedException)                  {                      // do nothing                  }                  catch (Exception e)                  {                      Logging.LogUsefulException(e);                  }              }
Magic Number,Shadowsocks.Controller,UDPRelay,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Handle,The following statement contains a magic number: if (length < 4)              {                  return false;              }
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Send,The following statement contains a magic number: byte[] dataIn = new byte[length - 3];
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Send,The following statement contains a magic number: Array.Copy(data' 3' dataIn' 0' length - 3);
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Send,The following statement contains a magic number: Array.Copy(data' 3' dataIn' 0' length - 3);
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Send,The following statement contains a magic number: byte[] dataOut = new byte[65536];
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,Send,The following statement contains a magic number: encryptor.EncryptUDP(dataIn' length - 3' dataOut' out outlen);
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,RecvFromCallback,The following statement contains a magic number: try                  {                      if (_remote == null) return;                      EndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any' 0);                      int bytesRead = _remote.EndReceiveFrom(ar' ref remoteEndPoint);                        byte[] dataOut = new byte[bytesRead];                      int outlen;                        IEncryptor encryptor = EncryptorFactory.GetEncryptor(_server.method' _server.password);                      encryptor.DecryptUDP(_buffer' bytesRead' dataOut' out outlen);                        byte[] sendBuf = new byte[outlen + 3];                      Array.Copy(dataOut' 0' sendBuf' 3' outlen);                        Logging.Debug(_localEndPoint' _remoteEndPoint' outlen' "UDP Relay");                      _local?.SendTo(sendBuf' outlen + 3' 0' _localEndPoint);                        Receive();                  }                  catch (ObjectDisposedException)                  {                      // TODO: handle the ObjectDisposedException                  }                  catch (Exception)                  {                      // TODO: need more think about handle other Exceptions' or should remove this catch().                  }                  finally                  {                      // No matter success or failed' we keep receiving                    }
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,RecvFromCallback,The following statement contains a magic number: try                  {                      if (_remote == null) return;                      EndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any' 0);                      int bytesRead = _remote.EndReceiveFrom(ar' ref remoteEndPoint);                        byte[] dataOut = new byte[bytesRead];                      int outlen;                        IEncryptor encryptor = EncryptorFactory.GetEncryptor(_server.method' _server.password);                      encryptor.DecryptUDP(_buffer' bytesRead' dataOut' out outlen);                        byte[] sendBuf = new byte[outlen + 3];                      Array.Copy(dataOut' 0' sendBuf' 3' outlen);                        Logging.Debug(_localEndPoint' _remoteEndPoint' outlen' "UDP Relay");                      _local?.SendTo(sendBuf' outlen + 3' 0' _localEndPoint);                        Receive();                  }                  catch (ObjectDisposedException)                  {                      // TODO: handle the ObjectDisposedException                  }                  catch (Exception)                  {                      // TODO: need more think about handle other Exceptions' or should remove this catch().                  }                  finally                  {                      // No matter success or failed' we keep receiving                    }
Magic Number,Shadowsocks.Controller,UDPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\UDPRelay.cs,RecvFromCallback,The following statement contains a magic number: try                  {                      if (_remote == null) return;                      EndPoint remoteEndPoint = new IPEndPoint(IPAddress.Any' 0);                      int bytesRead = _remote.EndReceiveFrom(ar' ref remoteEndPoint);                        byte[] dataOut = new byte[bytesRead];                      int outlen;                        IEncryptor encryptor = EncryptorFactory.GetEncryptor(_server.method' _server.password);                      encryptor.DecryptUDP(_buffer' bytesRead' dataOut' out outlen);                        byte[] sendBuf = new byte[outlen + 3];                      Array.Copy(dataOut' 0' sendBuf' 3' outlen);                        Logging.Debug(_localEndPoint' _remoteEndPoint' outlen' "UDP Relay");                      _local?.SendTo(sendBuf' outlen + 3' 0' _localEndPoint);                        Receive();                  }                  catch (ObjectDisposedException)                  {                      // TODO: handle the ObjectDisposedException                  }                  catch (Exception)                  {                      // TODO: need more think about handle other Exceptions' or should remove this catch().                  }                  finally                  {                      // No matter success or failed' we keep receiving                    }
Magic Number,Shadowsocks.Controller,PACServer,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PACServer.cs,UpdateConfiguration,The following statement contains a magic number: if (config.secureLocalPac)              {                  var rd = new byte[32];                  RNG.GetBytes(rd);                  PacSecret = $"&secret={Convert.ToBase64String(rd)}";              }              else              {                  PacSecret = "";              }
Magic Number,Shadowsocks.Controller,PACServer,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PACServer.cs,Handle,The following statement contains a magic number: try              {                  string request = Encoding.UTF8.GetString(firstPacket' 0' length);                  string[] lines = request.Split('\r'' '\n');                  bool hostMatch = false' pathMatch = false' useSocks = false;                  bool secretMatch = PacSecret.IsNullOrEmpty();                  foreach (string line in lines)                  {                      string[] kv = line.Split(new char[] { ':' }' 2);                      if (kv.Length == 2)                      {                          if (kv[0] == "Host")                          {                              if (kv[1].Trim() == ((IPEndPoint)socket.LocalEndPoint).ToString())                              {                                  hostMatch = true;                              }                          }                          //else if (kv[0] == "User-Agent")                          //{                          //    // we need to drop connections when changing servers                          //    if (kv[1].IndexOf("Chrome") >= 0)                          //    {                          //        useSocks = true;                          //    }                          //}                      }                      else if (kv.Length == 1)                      {                          if (line.IndexOf("pac"' StringComparison.Ordinal) >= 0)                          {                              pathMatch = true;                          }                          if (!secretMatch)                          {                              if(line.IndexOf(PacSecret' StringComparison.Ordinal) >= 0)                              {                                  secretMatch = true;                              }                          }                      }                  }                  if (hostMatch && pathMatch)                  {                      if (!secretMatch)                      {                          socket.Close(); // Close immediately                      }                      else                      {                          SendResponse(firstPacket' length' socket' useSocks);                      }                      return true;                  }                  return false;              }              catch (ArgumentException)              {                  return false;              }
Magic Number,Shadowsocks.Controller,PACServer,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PACServer.cs,Handle,The following statement contains a magic number: try              {                  string request = Encoding.UTF8.GetString(firstPacket' 0' length);                  string[] lines = request.Split('\r'' '\n');                  bool hostMatch = false' pathMatch = false' useSocks = false;                  bool secretMatch = PacSecret.IsNullOrEmpty();                  foreach (string line in lines)                  {                      string[] kv = line.Split(new char[] { ':' }' 2);                      if (kv.Length == 2)                      {                          if (kv[0] == "Host")                          {                              if (kv[1].Trim() == ((IPEndPoint)socket.LocalEndPoint).ToString())                              {                                  hostMatch = true;                              }                          }                          //else if (kv[0] == "User-Agent")                          //{                          //    // we need to drop connections when changing servers                          //    if (kv[1].IndexOf("Chrome") >= 0)                          //    {                          //        useSocks = true;                          //    }                          //}                      }                      else if (kv.Length == 1)                      {                          if (line.IndexOf("pac"' StringComparison.Ordinal) >= 0)                          {                              pathMatch = true;                          }                          if (!secretMatch)                          {                              if(line.IndexOf(PacSecret' StringComparison.Ordinal) >= 0)                              {                                  secretMatch = true;                              }                          }                      }                  }                  if (hostMatch && pathMatch)                  {                      if (!secretMatch)                      {                          socket.Close(); // Close immediately                      }                      else                      {                          SendResponse(firstPacket' length' socket' useSocks);                      }                      return true;                  }                  return false;              }              catch (ArgumentException)              {                  return false;              }
Magic Number,Shadowsocks.Controller,TCPRelay,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,Handle,The following statement contains a magic number: if (socket.ProtocolType != ProtocolType.Tcp                  || (length < 2 || firstPacket[0] != 5))                  return false;
Magic Number,Shadowsocks.Controller,TCPRelay,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,Handle,The following statement contains a magic number: if (socket.ProtocolType != ProtocolType.Tcp                  || (length < 2 || firstPacket[0] != 5))                  return false;
Magic Number,Shadowsocks.Controller,TCPRelay,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,Handle,The following statement contains a magic number: lock (Handlers)              {                  Handlers.Add(handler);                  DateTime now = DateTime.Now;                  if (now - _lastSweepTime > TimeSpan.FromSeconds(1))                  {                      _lastSweepTime = now;                      foreach (TCPHandler handler1 in Handlers)                          if (now - handler1.lastActivity > TimeSpan.FromSeconds(900))                              handlersToClose.Add(handler1);                  }              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,TCPHandler,The following statement contains a magic number: _proxyTimeout = config.proxy.proxyTimeout * 1000;
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,TCPHandler,The following statement contains a magic number: _serverTimeout = config.GetCurrentServer().timeout * 1000;
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeReceive,The following statement contains a magic number: try              {                  int bytesRead = _firstPacketLength;                  if (bytesRead > 1)                  {                      byte[] response = { 5' 0 };                      if (_firstPacket[0] != 5)                      {                          // reject socks 4                          response = new byte[] { 0' 91 };                          Logging.Error("socks 5 protocol error");                      }                      _connection.BeginSend(response' 0' response.Length' SocketFlags.None'                          HandshakeSendCallback' null);                  }                  else                      Close();              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeReceive,The following statement contains a magic number: try              {                  int bytesRead = _firstPacketLength;                  if (bytesRead > 1)                  {                      byte[] response = { 5' 0 };                      if (_firstPacket[0] != 5)                      {                          // reject socks 4                          response = new byte[] { 0' 91 };                          Logging.Error("socks 5 protocol error");                      }                      _connection.BeginSend(response' 0' response.Length' SocketFlags.None'                          HandshakeSendCallback' null);                  }                  else                      Close();              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeReceive,The following statement contains a magic number: try              {                  int bytesRead = _firstPacketLength;                  if (bytesRead > 1)                  {                      byte[] response = { 5' 0 };                      if (_firstPacket[0] != 5)                      {                          // reject socks 4                          response = new byte[] { 0' 91 };                          Logging.Error("socks 5 protocol error");                      }                      _connection.BeginSend(response' 0' response.Length' SocketFlags.None'                          HandshakeSendCallback' null);                  }                  else                      Close();              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeSendCallback,The following statement contains a magic number: try              {                  _connection.EndSend(ar);                    // +-----+-----+-------+------+----------+----------+                  // | VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |                  // +-----+-----+-------+------+----------+----------+                  // |  1  |  1  | X'00' |  1   | Variable |    2     |                  // +-----+-----+-------+------+----------+----------+                  // Skip first 3 bytes' and read 2 more bytes to analysis the address.                  // 2 more bytes is designed if address is domain then we don't need to read once more to get the addr length.                  // TODO validate                  _connection.BeginReceive(_connetionRecvBuffer' 0' 3 + ADDR_ATYP_LEN + 1' SocketFlags.None'                      HandshakeReceive2Callback' null);              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeReceive2Callback,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                  if (bytesRead >= 5)                  {                      _command = _connetionRecvBuffer[1];                      if (_command != CMD_CONNECT && _command != CMD_UDP_ASSOC)                      {                          Logging.Debug("Unsupported CMD=" + _command);                          Close();                      }                      else                      {                          if (_command == CMD_CONNECT)                          {                              byte[] response = { 5' 0' 0' 1' 0' 0' 0' 0' 0' 0 };                              _connection.BeginSend(response' 0' response.Length' SocketFlags.None'                                  ResponseCallback' null);                          }                          else if (_command == CMD_UDP_ASSOC)                          {                              ReadAddress(HandleUDPAssociate);                          }                      }                  }                  else                  {                      Logging.Debug(                          "failed to recv data in Shadowsocks.Controller.TCPHandler.handshakeReceive2Callback()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandshakeReceive2Callback,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                  if (bytesRead >= 5)                  {                      _command = _connetionRecvBuffer[1];                      if (_command != CMD_CONNECT && _command != CMD_UDP_ASSOC)                      {                          Logging.Debug("Unsupported CMD=" + _command);                          Close();                      }                      else                      {                          if (_command == CMD_CONNECT)                          {                              byte[] response = { 5' 0' 0' 1' 0' 0' 0' 0' 0' 0 };                              _connection.BeginSend(response' 0' response.Length' SocketFlags.None'                                  ResponseCallback' null);                          }                          else if (_command == CMD_UDP_ASSOC)                          {                              ReadAddress(HandleUDPAssociate);                          }                      }                  }                  else                  {                      Logging.Debug(                          "failed to recv data in Shadowsocks.Controller.TCPHandler.handshakeReceive2Callback()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: int atyp = _connetionRecvBuffer[3];
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: switch (atyp)              {                  case ATYP_IPv4: // IPv4 address' 4 bytes                      ReadAddress(4 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  case ATYP_DOMAIN: // domain name' length + str                      int len = _connetionRecvBuffer[4];                      ReadAddress(len + ADDR_PORT_LEN' onSuccess);                      break;                  case ATYP_IPv6: // IPv6 address' 16 bytes                      ReadAddress(16 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  default:                      Logging.Debug("Unsupported ATYP=" + atyp);                      Close();                      break;              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: switch (atyp)              {                  case ATYP_IPv4: // IPv4 address' 4 bytes                      ReadAddress(4 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  case ATYP_DOMAIN: // domain name' length + str                      int len = _connetionRecvBuffer[4];                      ReadAddress(len + ADDR_PORT_LEN' onSuccess);                      break;                  case ATYP_IPv6: // IPv6 address' 16 bytes                      ReadAddress(16 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  default:                      Logging.Debug("Unsupported ATYP=" + atyp);                      Close();                      break;              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: switch (atyp)              {                  case ATYP_IPv4: // IPv4 address' 4 bytes                      ReadAddress(4 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  case ATYP_DOMAIN: // domain name' length + str                      int len = _connetionRecvBuffer[4];                      ReadAddress(len + ADDR_PORT_LEN' onSuccess);                      break;                  case ATYP_IPv6: // IPv6 address' 16 bytes                      ReadAddress(16 + ADDR_PORT_LEN - 1' onSuccess);                      break;                  default:                      Logging.Debug("Unsupported ATYP=" + atyp);                      Close();                      break;              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: Array.Copy(_connetionRecvBuffer' 3' _connetionRecvBuffer' 0' ADDR_ATYP_LEN + 1);
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: _connection.BeginReceive(_connetionRecvBuffer' 2' RecvSize - 2' SocketFlags.None' OnAddressFullyRead'                  new object[] { bytesRemain' onSuccess });
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,ReadAddress,The following statement contains a magic number: _connection.BeginReceive(_connetionRecvBuffer' 2' RecvSize - 2' SocketFlags.None' OnAddressFullyRead'                  new object[] { bytesRemain' onSuccess });
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following statement contains a magic number: try              {                  int bytesRead = _connection.EndReceive(ar);                    var states = (object[])ar.AsyncState;                    int bytesRemain = (int)states[0];                  var onSuccess = (Action)states[1];                    if (bytesRead >= bytesRemain)                  {                      _firstPacketLength = bytesRead + 2;                        int atyp = _connetionRecvBuffer[0];                        string dstAddr = "Unknown";                      int dstPort = -1;                      switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }                        if (_config.isVerboseLogging)                      {                          Logging.Info($"connect to {dstAddr}:{dstPort}");                      }                        _destEndPoint = SocketUtil.GetEndPoint(dstAddr' dstPort);                        onSuccess.Invoke(); /* StartConnect() */                  }                  else                  {                      Logging.Debug("failed to recv data in Shadowsocks.Controller.TCPHandler.OnAddressFullyRead()");                      Close();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);                  Close();              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: byte[] response = new byte[4 + address.Length + ADDR_PORT_LEN];
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: response[0] = 5;
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: switch (endPoint.AddressFamily)              {                  case AddressFamily.InterNetwork:                      response[3] = ATYP_IPv4;                      break;                  case AddressFamily.InterNetworkV6:                      response[3] = ATYP_IPv6;                      break;              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: switch (endPoint.AddressFamily)              {                  case AddressFamily.InterNetwork:                      response[3] = ATYP_IPv4;                      break;                  case AddressFamily.InterNetworkV6:                      response[3] = ATYP_IPv6;                      break;              }
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: address.CopyTo(response' 4);
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: response[response.Length - 2] = (byte)((port >> 8) & 0xFF);
Magic Number,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following statement contains a magic number: response[response.Length - 2] = (byte)((port >> 8) & 0xFF);
Magic Number,Shadowsocks.Controller,PrivoxyRunner,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PrivoxyRunner.cs,KillProcess,The following statement contains a magic number: try              {                  p.CloseMainWindow();                  p.WaitForExit(100);                  if (!p.HasExited)                  {                      p.Kill();                      p.WaitForExit();                  }              }              catch (Exception e)              {                  Logging.LogUsefulException(e);              }
Magic Number,Shadowsocks.Controller,PrivoxyRunner,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\PrivoxyRunner.cs,GetFreePort,The following statement contains a magic number: int defaultPort = 8123;
Magic Number,Shadowsocks.Controller,ShadowsocksController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\ShadowsocksController.cs,ShadowsocksController,The following statement contains a magic number: StartTrafficStatistics(61);
Magic Number,Shadowsocks.Controller,ShadowsocksController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\ShadowsocksController.cs,ReleaseMemory,The following statement contains a magic number: while (true)              {                  Utils.ReleaseMemory(false);                  Thread.Sleep(30 * 1000);              }
Magic Number,Shadowsocks.Controller,ShadowsocksController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\ShadowsocksController.cs,ReleaseMemory,The following statement contains a magic number: while (true)              {                  Utils.ReleaseMemory(false);                  Thread.Sleep(30 * 1000);              }
Magic Number,Shadowsocks.Controller,ShadowsocksController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\ShadowsocksController.cs,TrafficStatistics,The following statement contains a magic number: while (true)              {                  previous = trafficPerSecondQueue.Last();                  current = new TrafficPerSecond();                                    current.inboundCounter = InboundCounter;                  current.outboundCounter = OutboundCounter;                  current.inboundIncreasement = current.inboundCounter - previous.inboundCounter;                  current.outboundIncreasement = current.outboundCounter - previous.outboundCounter;                    trafficPerSecondQueue.Enqueue(current);                  if (trafficPerSecondQueue.Count > queueMaxSize)                      trafficPerSecondQueue.Dequeue();                    TrafficChanged?.Invoke(this' new EventArgs());                    Thread.Sleep(1000);              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ReloadServers,The following statement contains a magic number: foreach (var server in _controller.GetCurrentConfiguration().configs)              {                  if (!newServerStatus.ContainsKey(server))                  {                      var status = new ServerStatus();                      status.server = server;                      status.lastFailure = DateTime.MinValue;                      status.lastRead = DateTime.Now;                      status.lastWrite = DateTime.Now;                      status.latency = new TimeSpan(0' 0' 0' 0' 10);                      status.lastTimeDetectLatency = DateTime.Now;                      newServerStatus[server] = status;                  }                  else                  {                      // update settings for existing server                      newServerStatus[server].server = server;                  }              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: foreach (var status in servers)              {                  // all of failure' latency' (lastread - lastwrite) normalized to 1000' then                  // 100 * failure - 2 * latency - 0.5 * (lastread - lastwrite)                  status.score =                      100 * 1000 * Math.Min(5 * 60' (now - status.lastFailure).TotalSeconds)                      -2 * 5 * (Math.Min(2000' status.latency.TotalMilliseconds) / (1 + (now - status.lastTimeDetectLatency).TotalSeconds / 30 / 10) +                      -0.5 * 200 * Math.Min(5' (status.lastRead - status.lastWrite).TotalSeconds));                  Logging.Debug(String.Format("server: {0} latency:{1} score: {2}"' status.server.FriendlyName()' status.latency' status.score));              }
Magic Number,Shadowsocks.Controller.Strategy,HighAvailabilityStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\HighAvailabilityStrategy.cs,ChooseNewServer,The following statement contains a magic number: if (max != null)              {                  if (_currentServer == null || max.score - _currentServer.score > 200)                  {                      _currentServer = max;                      Logging.Info($"HA switching to server: {_currentServer.server.FriendlyName()}");                  }              }
Magic Number,Shadowsocks.Controller.Strategy,StatisticsStrategy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Strategy\StatisticsStrategy.cs,ChooseNewServer,The following statement contains a magic number: try              {                  var serversWithStatistics = (from server in servers                      let id = server.Identifier()                      where _filteredStatistics.ContainsKey(id)                      let score = GetScore(server.Identifier()' _filteredStatistics[server.Identifier()])                      where score != null                      select new                      {                          server'                          score                      }).ToArray();                    if (serversWithStatistics.Length < 2)                  {                      LogWhenEnabled("no enough statistics data or all factors in calculations are 0");                      return;                  }                    var bestResult = serversWithStatistics                      .Aggregate((server1' server2) => server1.score > server2.score ? server1 : server2);                    LogWhenEnabled($"Switch to server: {bestResult.server.FriendlyName()} by statistics: score {bestResult.score}");                  _currentServer = bestResult.server;              }              catch (Exception e)              {                  Logging.LogUsefulException(e);              }
Magic Number,Shadowsocks.Util.Sockets,LineReader,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Sockets\LineReader.cs,MakeCharTable,The following statement contains a magic number: const int ALPHABET_SIZE = 256;
Magic Number,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,ParseQueryStr,The following statement contains a magic number: if (userSettingsArr[2] == "(null)") _userSettings.BypassList = null;              else _userSettings.BypassList = userSettingsArr[2];
Magic Number,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,ParseQueryStr,The following statement contains a magic number: if (userSettingsArr[2] == "(null)") _userSettings.BypassList = null;              else _userSettings.BypassList = userSettingsArr[2];
Magic Number,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,ParseQueryStr,The following statement contains a magic number: if (userSettingsArr[3] == "(null)") _userSettings.PacUrl = null;              else _userSettings.PacUrl = userSettingsArr[3];
Magic Number,Shadowsocks.Util.SystemProxy,Sysproxy,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\SystemProxy\Sysproxy.cs,ParseQueryStr,The following statement contains a magic number: if (userSettingsArr[3] == "(null)") _userSettings.PacUrl = null;              else _userSettings.PacUrl = userSettingsArr[3];
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,UnGzip,The following statement contains a magic number: byte[] buffer = new byte[1024];
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= P * 990)                  return (bytes / (double)E).ToString("F5") + "EiB";
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= T * 990)                  return (bytes / (double)P).ToString("F5") + "PiB";
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= G * 990)                  return (bytes / (double)T).ToString("F5") + "TiB";
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= M * 990)              {                  return (bytes / (double)G).ToString("F4") + "GiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= M * 100)              {                  return (bytes / (double)M).ToString("F1") + "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= M * 10)              {                  return (bytes / (double)M).ToString("F2") + "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes >= K * 990)              {                  return (bytes / (double)M).ToString("F3") + "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,FormatBytes,The following statement contains a magic number: if (bytes > K * 2)              {                  return (bytes / (double)K).ToString("F1") + "KiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "KiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "KiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "KiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "MiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "GiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "GiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "GiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "TiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "TiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,GetBandwidthScale,The following statement contains a magic number: if (f > 1024)              {                  f = f / 1024;                  scale <<= 10;                  unit = "TiB";              }
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,IsWinVistaOrHigher,The following statement contains a magic number: return Environment.OSVersion.Version.Major > 5;
Magic Number,Shadowsocks.Util,Utils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\Util.cs,IsSupportedRuntimeVersion,The following statement contains a magic number: const int minSupportedRelease = 394802;
Magic Number,Shadowsocks.Util,ViewUtils,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Util\ViewUtils.cs,SetNotifyIconText,The following statement contains a magic number: if (text.Length >= 128)                  throw new ArgumentOutOfRangeException("Text limited to 127 characters");
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PluginOptionsLabel' 0' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PluginTextBox' 1' 5);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.RemarksTextBox' 1' 8);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.RemarksLabel' 0' 8);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PasswordLabel' 0' 2);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PasswordTextBox' 1' 2);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.EncryptionLabel' 0' 4);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.EncryptionSelect' 1' 4);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.TimeoutLabel' 0' 9);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.TimeoutTextBox' 1' 9);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PluginLabel' 0' 5);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.PluginOptionsTextBox' 1' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ShowPasswdCheckBox' 1' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(8' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(8' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(267' 243);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(267' 243);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsLabel.Location = new System.Drawing.Point(6' 166);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsLabel.Location = new System.Drawing.Point(6' 166);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsLabel.Size = new System.Drawing.Size(89' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsLabel.Size = new System.Drawing.Size(89' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsLabel.TabIndex = 15;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.Location = new System.Drawing.Point(101' 135);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.Location = new System.Drawing.Point(101' 135);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.MaxLength = 256;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginTextBox.TabIndex = 4;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.Location = new System.Drawing.Point(101' 189);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.Location = new System.Drawing.Point(101' 189);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.MaxLength = 32;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksTextBox.TabIndex = 6;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksLabel.Location = new System.Drawing.Point(48' 193);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksLabel.Location = new System.Drawing.Point(48' 193);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksLabel.Size = new System.Drawing.Size(47' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksLabel.Size = new System.Drawing.Size(47' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.RemarksLabel.TabIndex = 9;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPLabel.Location = new System.Drawing.Point(36' 10);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPLabel.Location = new System.Drawing.Point(36' 10);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPLabel.Size = new System.Drawing.Size(59' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPLabel.Size = new System.Drawing.Size(59' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortLabel.Location = new System.Drawing.Point(24' 37);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortLabel.Location = new System.Drawing.Point(24' 37);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortLabel.Size = new System.Drawing.Size(71' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortLabel.Size = new System.Drawing.Size(71' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordLabel.Location = new System.Drawing.Point(42' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordLabel.Location = new System.Drawing.Point(42' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordLabel.Size = new System.Drawing.Size(53' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordLabel.Size = new System.Drawing.Size(53' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordLabel.TabIndex = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPTextBox.Location = new System.Drawing.Point(101' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPTextBox.Location = new System.Drawing.Point(101' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPTextBox.MaxLength = 512;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.IPTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortTextBox.Location = new System.Drawing.Point(101' 33);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortTextBox.Location = new System.Drawing.Point(101' 33);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortTextBox.MaxLength = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerPortTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.Location = new System.Drawing.Point(101' 60);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.Location = new System.Drawing.Point(101' 60);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.MaxLength = 256;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PasswordTextBox.TabIndex = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionLabel.Location = new System.Drawing.Point(30' 113);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionLabel.Location = new System.Drawing.Point(30' 113);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionLabel.TabIndex = 8;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.ItemHeight = 12;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.Location = new System.Drawing.Point(101' 109);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.Location = new System.Drawing.Point(101' 109);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.Size = new System.Drawing.Size(160' 20);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.Size = new System.Drawing.Size(160' 20);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.EncryptionSelect.TabIndex = 3;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutLabel.Location = new System.Drawing.Point(18' 220);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutLabel.Location = new System.Drawing.Point(18' 220);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutLabel.TabIndex = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.Location = new System.Drawing.Point(101' 216);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.Location = new System.Drawing.Point(101' 216);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.MaxLength = 5;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.TimeoutTextBox.TabIndex = 7;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginLabel.Location = new System.Drawing.Point(54' 139);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginLabel.Location = new System.Drawing.Point(54' 139);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginLabel.Size = new System.Drawing.Size(41' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginLabel.Size = new System.Drawing.Size(41' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginLabel.TabIndex = 12;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.Location = new System.Drawing.Point(101' 162);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.Location = new System.Drawing.Point(101' 162);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.MaxLength = 256;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.Size = new System.Drawing.Size(160' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.PluginOptionsTextBox.TabIndex = 5;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowPasswdCheckBox.Location = new System.Drawing.Point(101' 87);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowPasswdCheckBox.Location = new System.Drawing.Point(101' 87);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowPasswdCheckBox.Size = new System.Drawing.Size(102' 16);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowPasswdCheckBox.Size = new System.Drawing.Size(102' 16);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowPasswdCheckBox.TabIndex = 16;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(207' 187);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point(207' 187);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.TabIndex = 15;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Margin = new System.Windows.Forms.Padding(3' 3' 0' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Margin = new System.Windows.Forms.Padding(3' 3' 0' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.TabIndex = 16;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Location = new System.Drawing.Point(86' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Location = new System.Drawing.Point(86' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DeleteButton.TabIndex = 11;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Location = new System.Drawing.Point(0' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.TabIndex = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerGroupBox.Location = new System.Drawing.Point(178' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerGroupBox.Margin = new System.Windows.Forms.Padding(12' 0' 0' 0);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerGroupBox.Size = new System.Drawing.Size(278' 281);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerGroupBox.Size = new System.Drawing.Size(278' 281);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServersListBox.ItemHeight = 12;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServersListBox.Size = new System.Drawing.Size(166' 148);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServersListBox.Size = new System.Drawing.Size(166' 148);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ServersListBox.TabIndex = 9;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.tableLayoutPanel6' 0' 2);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.tableLayoutPanel3' 1' 2);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Location = new System.Drawing.Point(12' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Location = new System.Drawing.Point(12' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.RowCount = 3;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(456' 377);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(456' 377);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.TabIndex = 7;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Location = new System.Drawing.Point(0' 345);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Size = new System.Drawing.Size(166' 32);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Size = new System.Drawing.Size(166' 32);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.TabIndex = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Location = new System.Drawing.Point(86' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Location = new System.Drawing.Point(86' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Margin = new System.Windows.Forms.Padding(3' 6' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveDownButton.TabIndex = 14;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Location = new System.Drawing.Point(0' 6);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.MoveUpButton.TabIndex = 13;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Location = new System.Drawing.Point(260' 281);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Location = new System.Drawing.Point(260' 281);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Padding = new System.Windows.Forms.Padding(3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Size = new System.Drawing.Size(196' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Size = new System.Drawing.Size(196' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.TabIndex = 9;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Location = new System.Drawing.Point(77' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Location = new System.Drawing.Point(77' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.MaxLength = 10;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Size = new System.Drawing.Size(113' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Size = new System.Drawing.Size(113' 21);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.TabIndex = 8;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Location = new System.Drawing.Point(6' 26);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Location = new System.Drawing.Point(6' 26);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.TabIndex = 3;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new System.Drawing.Point(297' 348);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Location = new System.Drawing.Point(297' 348);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Margin = new System.Windows.Forms.Padding(3' 3' 0' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(159' 26);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Size = new System.Drawing.Size(159' 26);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.TabIndex = 8;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.ColumnCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Location = new System.Drawing.Point(0' 281);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.RowCount = 2;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(166' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Size = new System.Drawing.Size(166' 64);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.TabIndex = 8;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Location = new System.Drawing.Point(0' 38);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Margin = new System.Windows.Forms.Padding(0' 6' 3' 3);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.Size = new System.Drawing.Size(80' 23);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.DuplicateButton.TabIndex = 12;
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(574' 398);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(574' 398);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ConfigForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ConfigForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.DecimalPlaces = 2;
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Increment = new decimal(new int[] {              1'              0'              0'              131072});
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Location = new System.Drawing.Point(236' 0);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Minimum = new decimal(new int[] {              1000'              0'              0'              -2147418112});
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Minimum = new decimal(new int[] {              1000'              0'              0'              -2147418112});
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Size = new System.Drawing.Size(86' 34);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.Size = new System.Drawing.Size(86' 34);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.factorNum.TabIndex = 6;
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Location = new System.Drawing.Point(202' 2);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Location = new System.Drawing.Point(202' 2);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Size = new System.Drawing.Size(26' 28);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.Size = new System.Drawing.Size(26' 28);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.multiply.TabIndex = 2;
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Location = new System.Drawing.Point(5' 2);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Location = new System.Drawing.Point(5' 2);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Size = new System.Drawing.Size(26' 28);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.Size = new System.Drawing.Size(26' 28);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.plus.TabIndex = 3;
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.valueLabel.Location = new System.Drawing.Point(39' 6);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.valueLabel.Location = new System.Drawing.Point(39' 6);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.valueLabel.Size = new System.Drawing.Size(118' 24);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.valueLabel.Size = new System.Drawing.Size(118' 24);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.valueLabel.TabIndex = 7;
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(322' 34);
Magic Number,Shadowsocks.View,CalculationControl,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\CalculationControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(322' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,HotkeyDown,The following statement contains a magic number: if (e.Modifiers != 0)              {                  // XXX: Hotkey parsing depends on the sequence' more specifically' ModifierKeysConverter.                  // Windows key is reserved by operating system' we deny this key.                  if (e.Control)                  {                      sb.Append("Ctrl+");                  }                  if (e.Alt)                  {                      sb.Append("Alt+");                  }                  if (e.Shift)                  {                      sb.Append("Shift+");                  }                    Keys keyvalue = (Keys) e.KeyValue;                  if ((keyvalue >= Keys.PageUp && keyvalue <= Keys.Down) ||                      (keyvalue >= Keys.A && keyvalue <= Keys.Z) ||                      (keyvalue >= Keys.F1 && keyvalue <= Keys.F12))                  {                      sb.Append(e.KeyCode);                  }                  else if (keyvalue >= Keys.D0 && keyvalue <= Keys.D9)                  {                      sb.Append('D').Append((char) e.KeyValue);                  }                  else if (keyvalue >= Keys.NumPad0 && keyvalue <= Keys.NumPad9)                  {                      sb.Append("NumPad").Append((char) (e.KeyValue - 48));                  }              }
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(flowLayoutPanel1' 2);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: flowLayoutPanel1.Location = new System.Drawing.Point(0' 205);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: flowLayoutPanel1.Padding = new System.Windows.Forms.Padding(0' 0' 16' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: flowLayoutPanel1.Size = new System.Drawing.Size(475' 43);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: flowLayoutPanel1.Size = new System.Drawing.Size(475' 43);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: flowLayoutPanel1.TabIndex = 6;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(333' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(333' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(204' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(204' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegisterAll.Location = new System.Drawing.Point(75' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegisterAll.Location = new System.Drawing.Point(75' 9);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegisterAll.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegisterAll.Size = new System.Drawing.Size(123' 31);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegisterAll.TabIndex = 2;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.SwitchAllowLanLabel' 0' 2);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ShowLogsLabel' 0' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ServerMoveUpLabel' 0' 4);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ServerMoveDownLabel' 0' 5);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(flowLayoutPanel1' 0' 6);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.SwitchAllowLanTextBox' 1' 2);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ShowLogsTextBox' 1' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ServerMoveUpTextBox' 1' 4);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ServerMoveDownTextBox' 1' 5);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 7;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(491' 248);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(491' 248);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyLabel.Location = new System.Drawing.Point(50' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyLabel.Size = new System.Drawing.Size(147' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyLabel.Size = new System.Drawing.Size(147' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Location = new System.Drawing.Point(8' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Location = new System.Drawing.Point(8' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Size = new System.Drawing.Size(189' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeLabel.Size = new System.Drawing.Size(189' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Location = new System.Drawing.Point(33' 68);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Location = new System.Drawing.Point(33' 68);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Size = new System.Drawing.Size(164' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.Size = new System.Drawing.Size(164' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanLabel.TabIndex = 3;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Location = new System.Drawing.Point(107' 102);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Location = new System.Drawing.Point(107' 102);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Size = new System.Drawing.Size(90' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.Size = new System.Drawing.Size(90' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsLabel.TabIndex = 4;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Location = new System.Drawing.Point(128' 136);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Location = new System.Drawing.Point(128' 136);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Size = new System.Drawing.Size(69' 35);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.Size = new System.Drawing.Size(69' 35);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpLabel.TabIndex = 4;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Location = new System.Drawing.Point(106' 171);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Location = new System.Drawing.Point(106' 171);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Margin = new System.Windows.Forms.Padding(8' 0' 8' 0);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Size = new System.Drawing.Size(91' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.Size = new System.Drawing.Size(91' 34);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownLabel.TabIndex = 4;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Location = new System.Drawing.Point(208' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Location = new System.Drawing.Point(208' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchSystemProxyTextBox.TabIndex = 7;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Location = new System.Drawing.Point(208' 37);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Location = new System.Drawing.Point(208' 37);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchProxyModeTextBox.TabIndex = 8;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Location = new System.Drawing.Point(208' 71);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Location = new System.Drawing.Point(208' 71);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.SwitchAllowLanTextBox.TabIndex = 10;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Location = new System.Drawing.Point(208' 105);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Location = new System.Drawing.Point(208' 105);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowLogsTextBox.TabIndex = 11;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Location = new System.Drawing.Point(208' 139);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Location = new System.Drawing.Point(208' 139);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveUpTextBox.TabIndex = 12;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Location = new System.Drawing.Point(208' 174);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Location = new System.Drawing.Point(208' 174);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Margin = new System.Windows.Forms.Padding(3' 3' 16' 3);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.Size = new System.Drawing.Size(276' 25);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ServerMoveDownTextBox.TabIndex = 13;
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(491' 248);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(491' 248);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.Font = new System.Drawing.Font("微软雅黑"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(134)));
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,Shadowsocks.View,HotkeySettingsForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\HotkeySettingsForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4' 5' 4' 5);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,UpdateTrafficChart,The following statement contains a magic number: if (maxSpeed > 0)              {                  lastMaxSpeed -= lastMaxSpeed / 32;                  maxSpeed = Math.Max(minScale' Math.Max(maxSpeed' lastMaxSpeed));                  lastMaxSpeed = maxSpeed;              }              else              {                  maxSpeed = lastMaxSpeed = minScale;              }
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitContent,The following statement contains a magic number: using (StreamReader reader = new StreamReader(new FileStream(filename'                       FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))              {                  if (reader.BaseStream.Length > BACK_OFFSET)                  {                      reader.BaseStream.Seek(-BACK_OFFSET' SeekOrigin.End);                      reader.ReadLine();                  }                    string line = "";                  StringBuilder appendText = new StringBuilder(1024);                  while ((line = reader.ReadLine()) != null)                      appendText.Append(line + Environment.NewLine);                    LogMessageTextBox.AppendText(appendText.ToString());                  LogMessageTextBox.ScrollToCaret();                    lastOffset = reader.BaseStream.Position;              }
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,UpdateContent,The following statement contains a magic number: try              {                  using (StreamReader reader = new StreamReader(new FileStream(filename'                           FileMode.Open' FileAccess.Read' FileShare.ReadWrite)))                  {                      reader.BaseStream.Seek(lastOffset' SeekOrigin.Begin);                        string line = "";                      bool changed = false;                      StringBuilder appendText = new StringBuilder(128);                      while ((line = reader.ReadLine()) != null)                      {                          changed = true;                          appendText.Append(line + Environment.NewLine);                      }                        if (changed)                      {                          LogMessageTextBox.AppendText(appendText.ToString());                          LogMessageTextBox.ScrollToCaret();                      }                        lastOffset = reader.BaseStream.Position;                  }              }              catch (FileNotFoundException)              {              }
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,LogForm_Load,The following statement contains a magic number: timer.Interval = 100;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.LogMessageTextBox.MaxLength = 2147483647;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.LogMessageTextBox.Size = new System.Drawing.Size(378' 74);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.LogMessageTextBox.Size = new System.Drawing.Size(378' 74);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.WrapTextMenuItem.Index = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostMenuItem.Index = 3;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.MenuItemSeparater.Index = 4;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ShowToolbarMenuItem.Index = 5;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostCheckBox.Location = new System.Drawing.Point(249' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostCheckBox.Location = new System.Drawing.Point(249' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostCheckBox.Size = new System.Drawing.Size(72' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostCheckBox.Size = new System.Drawing.Size(72' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.TopMostCheckBox.TabIndex = 3;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ChangeFontButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ChangeFontButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ChangeFontButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ChangeFontButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ChangeFontButton.TabIndex = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.CleanLogsButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.CleanLogsButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.CleanLogsButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.CleanLogsButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.WrapTextCheckBox.Location = new System.Drawing.Point(165' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.WrapTextCheckBox.Location = new System.Drawing.Point(165' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.WrapTextCheckBox.Size = new System.Drawing.Size(78' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.WrapTextCheckBox.Size = new System.Drawing.Size(78' 23);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(384' 161);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(384' 161);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ToolbarFlowLayoutPanel.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ToolbarFlowLayoutPanel.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ToolbarFlowLayoutPanel.Size = new System.Drawing.Size(378' 29);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ToolbarFlowLayoutPanel.Size = new System.Drawing.Size(378' 29);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ToolbarFlowLayoutPanel.TabIndex = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(3' 38);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Location = new System.Drawing.Point(3' 38);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(378' 120);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(378' 120);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 74;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 3;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: chartArea1.AxisY.LabelAutoFitMaxFontSize = 8;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series1.BorderWidth = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series1.Color = System.Drawing.Color.FromArgb(255' 128' 0);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series1.Color = System.Drawing.Color.FromArgb(255' 128' 0);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series2.BorderWidth = 2;
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series2.Color = System.Drawing.Color.FromArgb(128' 128' 255);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series2.Color = System.Drawing.Color.FromArgb(128' 128' 255);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: series2.Color = System.Drawing.Color.FromArgb(128' 128' 255);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.trafficChart.Size = new System.Drawing.Size(378' 42);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.trafficChart.Size = new System.Drawing.Size(378' 42);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(384' 161);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(384' 161);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(400' 200);
Magic Number,Shadowsocks.View,LogForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\LogForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(400' 200);
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,MenuViewController,The following statement contains a magic number: if (config.isDefault)              {                  _isFirstRun = true;                  ShowConfigForm();              }              else if(config.autoCheckUpdate)              {                  _isStartupChecking = true;                  updateChecker.CheckUpdate(config' 3000);              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,UpdateTrayIcon,The following statement contains a magic number: if (dpi < 97)              {                  // dpi = 96;                  icon_baseBitmap = Resources.ss16;              }              else if (dpi < 121)              {                  // dpi = 120;                  icon_baseBitmap = Resources.ss20;              }              else              {                  icon_baseBitmap = Resources.ss24;              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,UpdateTrayIcon,The following statement contains a magic number: if (dpi < 97)              {                  // dpi = 96;                  icon_baseBitmap = Resources.ss16;              }              else if (dpi < 121)              {                  // dpi = 120;                  icon_baseBitmap = Resources.ss20;              }              else              {                  icon_baseBitmap = Resources.ss24;              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,getTrayIconByState,The following statement contains a magic number: for (int x = 0; x < iconCopy.Width; x++)              {                  for (int y = 0; y < iconCopy.Height; y++)                  {                      Color color = originIcon.GetPixel(x' y);                      if (color.A != 0)                      {                          if (!enabled)                          {                              Color flyBlue = Color.FromArgb(192' 192' 192);                              // Multiply with flyBlue                              int red = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                              int blue = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                          else if (global)                          {                              Color flyBlue = Color.FromArgb(25' 125' 191);                              // Multiply with flyBlue                              int red   = color.R * flyBlue.R / 255;                              int green = color.G * flyBlue.G / 255;                               int blue  = color.B * flyBlue.B / 255;                              iconCopy.SetPixel(x' y' Color.FromArgb(color.A' red' green' blue));                          }                      }                      else                      {                          iconCopy.SetPixel(x' y' Color.FromArgb(color.A' color.R' color.G' color.B));                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,controller_UpdatePACFromGFWListError,The following statement contains a magic number: ShowBalloonTip(I18N.GetString("Failed to update PAC file")' e.GetException().Message' ToolTipIcon.Error' 5000);
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,controller_UpdatePACFromGFWListCompleted,The following statement contains a magic number: ShowBalloonTip(I18N.GetString("Shadowsocks")' result' ToolTipIcon.Info' 1000);
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,updateChecker_CheckUpdateCompleted,The following statement contains a magic number: if (updateChecker.NewVersionFound)              {                  ShowBalloonTip(String.Format(I18N.GetString("Shadowsocks {0} Update Found")' updateChecker.LatestVersionNumber + updateChecker.LatestVersionSuffix)' I18N.GetString("Click here to update")' ToolTipIcon.Info' 5000);              }              else if (!_isStartupChecking)              {                  ShowBalloonTip(I18N.GetString("Shadowsocks")' I18N.GetString("No update is available")' ToolTipIcon.Info' 5000);              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,updateChecker_CheckUpdateCompleted,The following statement contains a magic number: if (updateChecker.NewVersionFound)              {                  ShowBalloonTip(String.Format(I18N.GetString("Shadowsocks {0} Update Found")' updateChecker.LatestVersionNumber + updateChecker.LatestVersionSuffix)' I18N.GetString("Click here to update")' ToolTipIcon.Info' 5000);              }              else if (!_isStartupChecking)              {                  ShowBalloonTip(I18N.GetString("Shadowsocks")' I18N.GetString("No update is available")' ToolTipIcon.Info' 5000);              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,CheckUpdateForFirstRun,The following statement contains a magic number: updateChecker.CheckUpdate(config' 3000);
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens)              {                  using (Bitmap fullImage = new Bitmap(screen.Bounds.Width'                                                  screen.Bounds.Height))                  {                      using (Graphics g = Graphics.FromImage(fullImage))                      {                          g.CopyFromScreen(screen.Bounds.X'                                           screen.Bounds.Y'                                           0' 0'                                           fullImage.Size'                                           CopyPixelOperation.SourceCopy);                      }                      int maxTry = 10;                      for (int i = 0; i < maxTry; i++)                      {                          int marginLeft = (int)((double)fullImage.Width * i / 2.5 / maxTry);                          int marginTop = (int)((double)fullImage.Height * i / 2.5 / maxTry);                          Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2);                          Bitmap target = new Bitmap(screen.Bounds.Width' screen.Bounds.Height);                            double imageScale = (double)screen.Bounds.Width / (double)cropRect.Width;                          using (Graphics g = Graphics.FromImage(target))                          {                              g.DrawImage(fullImage' new Rectangle(0' 0' target.Width' target.Height)'                                              cropRect'                                              GraphicsUnit.Pixel);                          }                          var source = new BitmapLuminanceSource(target);                          var bitmap = new BinaryBitmap(new HybridBinarizer(source));                          QRCodeReader reader = new QRCodeReader();                          var result = reader.decode(bitmap);                          if (result != null)                          {                              var success = controller.AddServerBySSURL(result.Text);                              QRCodeSplashForm splash = new QRCodeSplashForm();                              if (success)                              {                                  splash.FormClosed += splash_FormClosed;                              }                              else if (result.Text.StartsWith("http://") || result.Text.StartsWith("https://"))                              {                                  _urlToOpen = result.Text;                                  splash.FormClosed += openURLFromQRCode;                              }                              else                              {                                  MessageBox.Show(I18N.GetString("Failed to decode QRCode"));                                  return;                              }                              double minX = Int32.MaxValue' minY = Int32.MaxValue' maxX = 0' maxY = 0;                              foreach (ResultPoint point in result.ResultPoints)                              {                                  minX = Math.Min(minX' point.X);                                  minY = Math.Min(minY' point.Y);                                  maxX = Math.Max(maxX' point.X);                                  maxY = Math.Max(maxY' point.Y);                              }                              minX /= imageScale;                              minY /= imageScale;                              maxX /= imageScale;                              maxY /= imageScale;                              // make it 20% larger                              double margin = (maxX - minX) * 0.20f;                              minX += -margin + marginLeft;                              maxX += margin + marginLeft;                              minY += -margin + marginTop;                              maxY += margin + marginTop;                              splash.Location = new Point(screen.Bounds.X' screen.Bounds.Y);                              // we need a panel because a window has a minimal size                              // TODO: test on high DPI                              splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY);                              splash.Size = new Size(fullImage.Width' fullImage.Height);                              splash.Show();                              return;                          }                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens)              {                  using (Bitmap fullImage = new Bitmap(screen.Bounds.Width'                                                  screen.Bounds.Height))                  {                      using (Graphics g = Graphics.FromImage(fullImage))                      {                          g.CopyFromScreen(screen.Bounds.X'                                           screen.Bounds.Y'                                           0' 0'                                           fullImage.Size'                                           CopyPixelOperation.SourceCopy);                      }                      int maxTry = 10;                      for (int i = 0; i < maxTry; i++)                      {                          int marginLeft = (int)((double)fullImage.Width * i / 2.5 / maxTry);                          int marginTop = (int)((double)fullImage.Height * i / 2.5 / maxTry);                          Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2);                          Bitmap target = new Bitmap(screen.Bounds.Width' screen.Bounds.Height);                            double imageScale = (double)screen.Bounds.Width / (double)cropRect.Width;                          using (Graphics g = Graphics.FromImage(target))                          {                              g.DrawImage(fullImage' new Rectangle(0' 0' target.Width' target.Height)'                                              cropRect'                                              GraphicsUnit.Pixel);                          }                          var source = new BitmapLuminanceSource(target);                          var bitmap = new BinaryBitmap(new HybridBinarizer(source));                          QRCodeReader reader = new QRCodeReader();                          var result = reader.decode(bitmap);                          if (result != null)                          {                              var success = controller.AddServerBySSURL(result.Text);                              QRCodeSplashForm splash = new QRCodeSplashForm();                              if (success)                              {                                  splash.FormClosed += splash_FormClosed;                              }                              else if (result.Text.StartsWith("http://") || result.Text.StartsWith("https://"))                              {                                  _urlToOpen = result.Text;                                  splash.FormClosed += openURLFromQRCode;                              }                              else                              {                                  MessageBox.Show(I18N.GetString("Failed to decode QRCode"));                                  return;                              }                              double minX = Int32.MaxValue' minY = Int32.MaxValue' maxX = 0' maxY = 0;                              foreach (ResultPoint point in result.ResultPoints)                              {                                  minX = Math.Min(minX' point.X);                                  minY = Math.Min(minY' point.Y);                                  maxX = Math.Max(maxX' point.X);                                  maxY = Math.Max(maxY' point.Y);                              }                              minX /= imageScale;                              minY /= imageScale;                              maxX /= imageScale;                              maxY /= imageScale;                              // make it 20% larger                              double margin = (maxX - minX) * 0.20f;                              minX += -margin + marginLeft;                              maxX += margin + marginLeft;                              minY += -margin + marginTop;                              maxY += margin + marginTop;                              splash.Location = new Point(screen.Bounds.X' screen.Bounds.Y);                              // we need a panel because a window has a minimal size                              // TODO: test on high DPI                              splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY);                              splash.Size = new Size(fullImage.Width' fullImage.Height);                              splash.Show();                              return;                          }                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens)              {                  using (Bitmap fullImage = new Bitmap(screen.Bounds.Width'                                                  screen.Bounds.Height))                  {                      using (Graphics g = Graphics.FromImage(fullImage))                      {                          g.CopyFromScreen(screen.Bounds.X'                                           screen.Bounds.Y'                                           0' 0'                                           fullImage.Size'                                           CopyPixelOperation.SourceCopy);                      }                      int maxTry = 10;                      for (int i = 0; i < maxTry; i++)                      {                          int marginLeft = (int)((double)fullImage.Width * i / 2.5 / maxTry);                          int marginTop = (int)((double)fullImage.Height * i / 2.5 / maxTry);                          Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2);                          Bitmap target = new Bitmap(screen.Bounds.Width' screen.Bounds.Height);                            double imageScale = (double)screen.Bounds.Width / (double)cropRect.Width;                          using (Graphics g = Graphics.FromImage(target))                          {                              g.DrawImage(fullImage' new Rectangle(0' 0' target.Width' target.Height)'                                              cropRect'                                              GraphicsUnit.Pixel);                          }                          var source = new BitmapLuminanceSource(target);                          var bitmap = new BinaryBitmap(new HybridBinarizer(source));                          QRCodeReader reader = new QRCodeReader();                          var result = reader.decode(bitmap);                          if (result != null)                          {                              var success = controller.AddServerBySSURL(result.Text);                              QRCodeSplashForm splash = new QRCodeSplashForm();                              if (success)                              {                                  splash.FormClosed += splash_FormClosed;                              }                              else if (result.Text.StartsWith("http://") || result.Text.StartsWith("https://"))                              {                                  _urlToOpen = result.Text;                                  splash.FormClosed += openURLFromQRCode;                              }                              else                              {                                  MessageBox.Show(I18N.GetString("Failed to decode QRCode"));                                  return;                              }                              double minX = Int32.MaxValue' minY = Int32.MaxValue' maxX = 0' maxY = 0;                              foreach (ResultPoint point in result.ResultPoints)                              {                                  minX = Math.Min(minX' point.X);                                  minY = Math.Min(minY' point.Y);                                  maxX = Math.Max(maxX' point.X);                                  maxY = Math.Max(maxY' point.Y);                              }                              minX /= imageScale;                              minY /= imageScale;                              maxX /= imageScale;                              maxY /= imageScale;                              // make it 20% larger                              double margin = (maxX - minX) * 0.20f;                              minX += -margin + marginLeft;                              maxX += margin + marginLeft;                              minY += -margin + marginTop;                              maxY += margin + marginTop;                              splash.Location = new Point(screen.Bounds.X' screen.Bounds.Y);                              // we need a panel because a window has a minimal size                              // TODO: test on high DPI                              splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY);                              splash.Size = new Size(fullImage.Width' fullImage.Height);                              splash.Show();                              return;                          }                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens)              {                  using (Bitmap fullImage = new Bitmap(screen.Bounds.Width'                                                  screen.Bounds.Height))                  {                      using (Graphics g = Graphics.FromImage(fullImage))                      {                          g.CopyFromScreen(screen.Bounds.X'                                           screen.Bounds.Y'                                           0' 0'                                           fullImage.Size'                                           CopyPixelOperation.SourceCopy);                      }                      int maxTry = 10;                      for (int i = 0; i < maxTry; i++)                      {                          int marginLeft = (int)((double)fullImage.Width * i / 2.5 / maxTry);                          int marginTop = (int)((double)fullImage.Height * i / 2.5 / maxTry);                          Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2);                          Bitmap target = new Bitmap(screen.Bounds.Width' screen.Bounds.Height);                            double imageScale = (double)screen.Bounds.Width / (double)cropRect.Width;                          using (Graphics g = Graphics.FromImage(target))                          {                              g.DrawImage(fullImage' new Rectangle(0' 0' target.Width' target.Height)'                                              cropRect'                                              GraphicsUnit.Pixel);                          }                          var source = new BitmapLuminanceSource(target);                          var bitmap = new BinaryBitmap(new HybridBinarizer(source));                          QRCodeReader reader = new QRCodeReader();                          var result = reader.decode(bitmap);                          if (result != null)                          {                              var success = controller.AddServerBySSURL(result.Text);                              QRCodeSplashForm splash = new QRCodeSplashForm();                              if (success)                              {                                  splash.FormClosed += splash_FormClosed;                              }                              else if (result.Text.StartsWith("http://") || result.Text.StartsWith("https://"))                              {                                  _urlToOpen = result.Text;                                  splash.FormClosed += openURLFromQRCode;                              }                              else                              {                                  MessageBox.Show(I18N.GetString("Failed to decode QRCode"));                                  return;                              }                              double minX = Int32.MaxValue' minY = Int32.MaxValue' maxX = 0' maxY = 0;                              foreach (ResultPoint point in result.ResultPoints)                              {                                  minX = Math.Min(minX' point.X);                                  minY = Math.Min(minY' point.Y);                                  maxX = Math.Max(maxX' point.X);                                  maxY = Math.Max(maxY' point.Y);                              }                              minX /= imageScale;                              minY /= imageScale;                              maxX /= imageScale;                              maxY /= imageScale;                              // make it 20% larger                              double margin = (maxX - minX) * 0.20f;                              minX += -margin + marginLeft;                              maxX += margin + marginLeft;                              minY += -margin + marginTop;                              maxY += margin + marginTop;                              splash.Location = new Point(screen.Bounds.X' screen.Bounds.Y);                              // we need a panel because a window has a minimal size                              // TODO: test on high DPI                              splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY);                              splash.Size = new Size(fullImage.Width' fullImage.Height);                              splash.Show();                              return;                          }                      }                  }              }
Magic Number,Shadowsocks.View,MenuViewController,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\MenuViewController.cs,ScanQRCodeItem_Click,The following statement contains a magic number: foreach (Screen screen in Screen.AllScreens)              {                  using (Bitmap fullImage = new Bitmap(screen.Bounds.Width'                                                  screen.Bounds.Height))                  {                      using (Graphics g = Graphics.FromImage(fullImage))                      {                          g.CopyFromScreen(screen.Bounds.X'                                           screen.Bounds.Y'                                           0' 0'                                           fullImage.Size'                                           CopyPixelOperation.SourceCopy);                      }                      int maxTry = 10;                      for (int i = 0; i < maxTry; i++)                      {                          int marginLeft = (int)((double)fullImage.Width * i / 2.5 / maxTry);                          int marginTop = (int)((double)fullImage.Height * i / 2.5 / maxTry);                          Rectangle cropRect = new Rectangle(marginLeft' marginTop' fullImage.Width - marginLeft * 2' fullImage.Height - marginTop * 2);                          Bitmap target = new Bitmap(screen.Bounds.Width' screen.Bounds.Height);                            double imageScale = (double)screen.Bounds.Width / (double)cropRect.Width;                          using (Graphics g = Graphics.FromImage(target))                          {                              g.DrawImage(fullImage' new Rectangle(0' 0' target.Width' target.Height)'                                              cropRect'                                              GraphicsUnit.Pixel);                          }                          var source = new BitmapLuminanceSource(target);                          var bitmap = new BinaryBitmap(new HybridBinarizer(source));                          QRCodeReader reader = new QRCodeReader();                          var result = reader.decode(bitmap);                          if (result != null)                          {                              var success = controller.AddServerBySSURL(result.Text);                              QRCodeSplashForm splash = new QRCodeSplashForm();                              if (success)                              {                                  splash.FormClosed += splash_FormClosed;                              }                              else if (result.Text.StartsWith("http://") || result.Text.StartsWith("https://"))                              {                                  _urlToOpen = result.Text;                                  splash.FormClosed += openURLFromQRCode;                              }                              else                              {                                  MessageBox.Show(I18N.GetString("Failed to decode QRCode"));                                  return;                              }                              double minX = Int32.MaxValue' minY = Int32.MaxValue' maxX = 0' maxY = 0;                              foreach (ResultPoint point in result.ResultPoints)                              {                                  minX = Math.Min(minX' point.X);                                  minY = Math.Min(minY' point.Y);                                  maxX = Math.Max(maxX' point.X);                                  maxY = Math.Max(maxY' point.Y);                              }                              minX /= imageScale;                              minY /= imageScale;                              maxX /= imageScale;                              maxY /= imageScale;                              // make it 20% larger                              double margin = (maxX - minX) * 0.20f;                              minX += -margin + marginLeft;                              maxX += margin + marginLeft;                              minY += -margin + marginTop;                              maxY += margin + marginTop;                              splash.Location = new Point(screen.Bounds.X' screen.Bounds.Y);                              // we need a panel because a window has a minimal size                              // TODO: test on high DPI                              splash.TargetRect = new Rectangle((int)minX + screen.Bounds.X' (int)minY + screen.Bounds.Y' (int)maxX - (int)minX' (int)maxY - (int)minY);                              splash.Size = new Size(fullImage.Width' fullImage.Height);                              splash.Show();                              return;                          }                      }                  }              }
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Location = new System.Drawing.Point(84' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Margin = new System.Windows.Forms.Padding(3' 3' 0' 0);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Margin = new System.Windows.Forms.Padding(3' 3' 0' 0);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.MyCancelButton.TabIndex = 13;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Margin = new System.Windows.Forms.Padding(3' 3' 3' 0);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(75' 23);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.TabIndex = 12;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this.UseProxyCheckBox' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.UseProxyCheckBox.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.UseProxyCheckBox.Location = new System.Drawing.Point(3' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.UseProxyCheckBox.Size = new System.Drawing.Size(78' 16);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.UseProxyCheckBox.Size = new System.Drawing.Size(78' 16);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyAddrLabel.Location = new System.Drawing.Point(3' 71);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyAddrLabel.Location = new System.Drawing.Point(3' 71);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyAddrLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyAddrLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyServerTextBox.Location = new System.Drawing.Point(74' 67);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyServerTextBox.Location = new System.Drawing.Point(74' 67);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyServerTextBox.MaxLength = 512;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyServerTextBox.Size = new System.Drawing.Size(142' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyServerTextBox.Size = new System.Drawing.Size(142' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Location = new System.Drawing.Point(222' 71);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Location = new System.Drawing.Point(222' 71);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortLabel.TabIndex = 2;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Location = new System.Drawing.Point(305' 67);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Location = new System.Drawing.Point(305' 67);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.MaxLength = 10;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Size = new System.Drawing.Size(58' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.Size = new System.Drawing.Size(58' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyPortTextBox.TabIndex = 3;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeLabel.Location = new System.Drawing.Point(3' 40);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeLabel.Location = new System.Drawing.Point(3' 40);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeLabel.Size = new System.Drawing.Size(65' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Location = new System.Drawing.Point(74' 36);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Location = new System.Drawing.Point(74' 36);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Margin = new System.Windows.Forms.Padding(3' 5' 3' 5);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Margin = new System.Windows.Forms.Padding(3' 5' 3' 5);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Margin = new System.Windows.Forms.Padding(3' 5' 3' 5);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Margin = new System.Windows.Forms.Padding(3' 5' 3' 5);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Size = new System.Drawing.Size(142' 20);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.Size = new System.Drawing.Size(142' 20);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTypeComboBox.TabIndex = 2;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutTextBox.Location = new System.Drawing.Point(305' 36);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutTextBox.Location = new System.Drawing.Point(305' 36);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutTextBox.Size = new System.Drawing.Size(58' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutTextBox.Size = new System.Drawing.Size(58' 21);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutTextBox.TabIndex = 3;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutLabel.Location = new System.Drawing.Point(222' 40);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutLabel.Location = new System.Drawing.Point(222' 40);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutLabel.Size = new System.Drawing.Size(77' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyTimeoutLabel.TabIndex = 4;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 4;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyPortTextBox' 3' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyPortTextBox' 3' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyTimeoutLabel' 2' 1);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyPortLabel' 2' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyPortLabel' 2' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyTimeoutTextBox' 3' 1);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyServerTextBox' 1' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyAddrLabel' 0' 2);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.ProxyNotificationLabel' 0' 3);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.flowLayoutPanel1' 0' 4);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(15' 15);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(15' 15);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 5;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(366' 177);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(366' 177);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 14;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this.ProxyNotificationLabel' 4);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyNotificationLabel.Location = new System.Drawing.Point(3' 111);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyNotificationLabel.Location = new System.Drawing.Point(3' 111);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyNotificationLabel.Size = new System.Drawing.Size(360' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyNotificationLabel.Size = new System.Drawing.Size(360' 12);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ProxyNotificationLabel.TabIndex = 5;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this.flowLayoutPanel1' 4);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Location = new System.Drawing.Point(204' 145);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Location = new System.Drawing.Point(204' 145);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(159' 29);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.Size = new System.Drawing.Size(159' 29);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.flowLayoutPanel1.TabIndex = 6;
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(448' 231);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(448' 231);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,ProxyForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\ProxyForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(12' 12' 12' 9);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,GenQR,The following statement contains a magic number: pictureBox1.SizeMode = maxD >= 7*blockSize ? PictureBoxSizeMode.Zoom : PictureBoxSizeMode.CenterImage;
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(10' 10);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Location = new System.Drawing.Point(10' 10);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(210' 210);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.Size = new System.Drawing.Size(210' 210);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.ItemHeight = 12;
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(224' 10);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Location = new System.Drawing.Point(224' 10);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(227' 208);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.Size = new System.Drawing.Size(227' 208);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.listBox1.TabIndex = 2;
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Location = new System.Drawing.Point(10' 227);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Location = new System.Drawing.Point(10' 227);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Size = new System.Drawing.Size(441' 21);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.Size = new System.Drawing.Size(441' 21);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxURL.TabIndex = 3;
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(457' 257);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(457' 257);
Magic Number,Shadowsocks.View,QRCodeForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeForm.cs,InitializeComponent,The following statement contains a magic number: this.Padding = new System.Windows.Forms.Padding(10);
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,QRCodeSplashForm_Load,The following statement contains a magic number: timer.Interval = (int)(ANIMATION_TIME * 1000 / ANIMATION_STEPS);
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,QRCodeSplashForm_Load,The following statement contains a magic number: pen = new Pen(Color.Red' 3);
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,QRCodeSplashForm_Load,The following statement contains a magic number: brush = new SolidBrush(Color.FromArgb(30' Color.Red));
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: double percent = (double)sw.ElapsedMilliseconds / 1000.0 / (double)ANIMATION_TIME;
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,QRCodeSplashForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,timer_Tick,The following statement contains a magic number: if (percent < 1)              {                  // ease out                  percent = 1 - Math.Pow((1 - percent)' 4);                  x = (int)(TargetRect.X * percent);                  y = (int)(TargetRect.Y * percent);                  w = (int)(TargetRect.Width * percent + this.Size.Width * (1 - percent));                  h = (int)(TargetRect.Height * percent + this.Size.Height * (1 - percent));                  //codeRectView.Location = new Point(x' y);                  //codeRectView.Size = new Size(w' h);                  pen.Color = Color.FromArgb((int)(255 * percent)' Color.Red);                  brush.Color = Color.FromArgb((int)(30 * percent)' Color.Red);                  g.Clear(Color.Transparent);                  g.FillRectangle(brush' x' y' w' h);                  g.DrawRectangle(pen' x' y' w' h);                  SetBitmap(bitmap);              }              else              {                  if (flashStep == 0)                  {                      timer.Interval = 100;                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      timer.Interval = 50;                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 1)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 2)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else if (flashStep == 3)                  {                      g.Clear(Color.Transparent);                      SetBitmap(bitmap);                  }                  else if (flashStep == 4)                  {                      g.FillRectangle(brush' x' y' w' h);                      g.DrawRectangle(pen' x' y' w' h);                      SetBitmap(bitmap);                  }                  else                  {                      sw.Stop();                      timer.Stop();                      pen.Dispose();                      brush.Dispose();                      bitmap.Dispose();                      this.Close();                  }                  flashStep++;              }
Magic Number,Shadowsocks.View,PerPixelAlphaForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\QRCodeSplashForm.cs,SetBitmap,The following statement contains a magic number: SetBitmap(bitmap' 255);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,LoadChartData,The following statement contains a magic number: var finalData = from dataGroup in dataGroups                              orderby dataGroup.Key                              select new                              {                                  dataGroup.First().Timestamp'                                  Speed = dataGroup.Max(data => data.MaxInboundSpeed) ?? 0'                                  Ping = (int) (dataGroup.Average(data => data.AverageResponse) ?? 0)'                                  PackageLossPercentage = (int) (dataGroup.Average(data => data.PackageLoss) ?? 0) * 100                              };
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: series2.YValuesPerPoint = 2;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: series3.BorderWidth = 5;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: series3.MarkerSize = 10;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Size = new System.Drawing.Size(978' 429);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.Size = new System.Drawing.Size(978' 429);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsChart.TabIndex = 2;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Location = new System.Drawing.Point(13' 54);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Location = new System.Drawing.Point(13' 54);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Size = new System.Drawing.Size(124' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.Size = new System.Drawing.Size(124' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.PingCheckBox.TabIndex = 5;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(9' 206);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(9' 206);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(167' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(167' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 8;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(286' 206);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(286' 206);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(87' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(87' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 9;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Location = new System.Drawing.Point(729' 188);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Location = new System.Drawing.Point(729' 188);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Padding = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Padding = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Padding = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Padding = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Size = new System.Drawing.Size(234' 103);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.Size = new System.Drawing.Size(234' 103);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.chartModeSelector.TabIndex = 3;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Location = new System.Drawing.Point(11' 61);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Location = new System.Drawing.Point(11' 61);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Size = new System.Drawing.Size(58' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.allMode.Size = new System.Drawing.Size(58' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Location = new System.Drawing.Point(11' 29);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Location = new System.Drawing.Point(11' 29);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Size = new System.Drawing.Size(73' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dayMode.Size = new System.Drawing.Size(73' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(978' 744);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.Size = new System.Drawing.Size(978' 744);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterDistance = 305;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.SplitterWidth = 10;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer1.TabIndex = 12;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(978' 305);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.Size = new System.Drawing.Size(978' 305);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterDistance = 384;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.SplitterWidth = 5;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer2.TabIndex = 7;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(9' 164);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Location = new System.Drawing.Point(9' 164);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(162' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.Size = new System.Drawing.Size(162' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label9.TabIndex = 20;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(286' 165);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Location = new System.Drawing.Point(286' 165);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(87' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.Size = new System.Drawing.Size(87' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label8.TabIndex = 19;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Increment = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Location = new System.Drawing.Point(177' 162);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Location = new System.Drawing.Point(177' 162);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Maximum = new decimal(new int[] {              120'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Size = new System.Drawing.Size(100' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Size = new System.Drawing.Size(100' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.TabIndex = 18;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.dataCollectionMinutesNum.Value = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Location = new System.Drawing.Point(13' 12);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Location = new System.Drawing.Point(13' 12);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Size = new System.Drawing.Size(189' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.Size = new System.Drawing.Size(189' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.StatisticsEnabledCheckBox.TabIndex = 17;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Increment = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Location = new System.Drawing.Point(177' 204);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Location = new System.Drawing.Point(177' 204);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Maximum = new decimal(new int[] {              120'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Size = new System.Drawing.Size(100' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Size = new System.Drawing.Size(100' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.TabIndex = 16;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.choiceKeptMinutesNum.Value = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Location = new System.Drawing.Point(13' 127);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Location = new System.Drawing.Point(13' 127);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Size = new System.Drawing.Size(180' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.Size = new System.Drawing.Size(180' 31);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.byHourOfDayCheckBox.TabIndex = 15;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Location = new System.Drawing.Point(34' 84);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Location = new System.Drawing.Point(34' 84);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Margin = new System.Windows.Forms.Padding(3' 4' 3' 4);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Maximum = new decimal(new int[] {              10'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Size = new System.Drawing.Size(99' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Size = new System.Drawing.Size(99' 34);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.TabIndex = 14;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.repeatTimesNum.Value = new decimal(new int[] {              4'              0'              0'              0});
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(139' 86);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(139' 86);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(201' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(201' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 13;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Size = new System.Drawing.Size(589' 305);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.Size = new System.Drawing.Size(589' 305);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.SplitterDistance = 42;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.splitContainer3.TabIndex = 6;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(5' 9);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(5' 9);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Margin = new System.Windows.Forms.Padding(5' 0' 5' 0);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(137' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(137' 27);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Size = new System.Drawing.Size(589' 262);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.calculationContainer.Size = new System.Drawing.Size(589' 262);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.serverSelector.Location = new System.Drawing.Point(729' 151);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.serverSelector.Location = new System.Drawing.Point(729' 151);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.serverSelector.Size = new System.Drawing.Size(233' 35);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.serverSelector.Size = new System.Drawing.Size(233' 35);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.serverSelector.TabIndex = 6;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButton.Location = new System.Drawing.Point(861' 370);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButton.Location = new System.Drawing.Point(861' 370);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButton.Size = new System.Drawing.Size(101' 41);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButton.Size = new System.Drawing.Size(101' 41);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelButton.TabIndex = 5;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(754' 370);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Location = new System.Drawing.Point(754' 370);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(101' 41);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.Size = new System.Drawing.Size(101' 41);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.OKButton.TabIndex = 4;
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(978' 744);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(978' 744);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(5' 10' 5' 10);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(1000' 800);
Magic Number,Shadowsocks.View,StatisticsStrategyConfigurationForm,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\View\StatisticsStrategyConfigurationForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(1000' 800);
Magic Number,Shadowsocks,Program,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Program.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: switch (e.Mode)              {                  case PowerModes.Resume:                      Logging.Info("os wake up");                      if (MainController != null)                      {                          System.Threading.Tasks.Task.Factory.StartNew(() =>                          {                              Thread.Sleep(10 * 1000);                              try                              {                                  MainController.Start();                                  Logging.Info("controller started");                              }                              catch (Exception ex)                              {                                  Logging.LogUsefulException(ex);                              }                          });                      }                      break;                  case PowerModes.Suspend:                      if (MainController != null)                      {                          MainController.Stop();                          Logging.Info("controller stopped");                      }                      Logging.Info("os suspend");                      break;              }
Magic Number,Shadowsocks,Program,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Program.cs,SystemEvents_PowerModeChanged,The following statement contains a magic number: switch (e.Mode)              {                  case PowerModes.Resume:                      Logging.Info("os wake up");                      if (MainController != null)                      {                          System.Threading.Tasks.Task.Factory.StartNew(() =>                          {                              Thread.Sleep(10 * 1000);                              try                              {                                  MainController.Start();                                  Logging.Info("controller started");                              }                              catch (Exception ex)                              {                                  Logging.LogUsefulException(ex);                              }                          });                      }                      break;                  case PowerModes.Suspend:                      if (MainController != null)                      {                          MainController.Stop();                          Logging.Info("controller stopped");                      }                      Logging.Info("os suspend");                      break;              }
Missing Default,Shadowsocks.Encryption.Stream,StreamSodiumEncryptor,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Encryption\Stream\StreamSodiumEncryptor.cs,cipherUpdate,The following switch statement is missing a default case: switch (_cipher)              {                  case CIPHER_SALSA20:                      ret = Sodium.crypto_stream_salsa20_xor_ic(sodiumBuf' sodiumBuf' (ulong)(padding + length)' iv' ic' _key);                      break;                  case CIPHER_CHACHA20:                      ret = Sodium.crypto_stream_chacha20_xor_ic(sodiumBuf' sodiumBuf' (ulong)(padding + length)' iv' ic' _key);                      break;                  case CIPHER_CHACHA20_IETF:                      ret = Sodium.crypto_stream_chacha20_ietf_xor_ic(sodiumBuf' sodiumBuf' (ulong)(padding + length)' iv' (uint)ic' _key);                      break;              }
Missing Default,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,OnAddressFullyRead,The following switch statement is missing a default case: switch (atyp)                      {                          case ATYP_IPv4: // IPv4 address' 4 bytes                              dstAddr = new IPAddress(_connetionRecvBuffer.Skip(1).Take(4).ToArray()).ToString();                              dstPort = (_connetionRecvBuffer[5] << 8) + _connetionRecvBuffer[6];                                _addrBufLength = ADDR_ATYP_LEN + 4 + ADDR_PORT_LEN;                              break;                          case ATYP_DOMAIN: // domain name' length + str                              int len = _connetionRecvBuffer[1];                              dstAddr = System.Text.Encoding.UTF8.GetString(_connetionRecvBuffer' 2' len);                              dstPort = (_connetionRecvBuffer[len + 2] << 8) + _connetionRecvBuffer[len + 3];                                _addrBufLength = ADDR_ATYP_LEN + 1 + len + ADDR_PORT_LEN;                              break;                          case ATYP_IPv6: // IPv6 address' 16 bytes                              dstAddr = $"[{new IPAddress(_connetionRecvBuffer.Skip(1).Take(16).ToArray())}]";                              dstPort = (_connetionRecvBuffer[17] << 8) + _connetionRecvBuffer[18];                                _addrBufLength = ADDR_ATYP_LEN + 16 + ADDR_PORT_LEN;                              break;                      }
Missing Default,Shadowsocks.Controller,TCPHandler,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Controller\Service\TCPRelay.cs,HandleUDPAssociate,The following switch statement is missing a default case: switch (endPoint.AddressFamily)              {                  case AddressFamily.InterNetwork:                      response[3] = ATYP_IPv4;                      break;                  case AddressFamily.InterNetworkV6:                      response[3] = ATYP_IPv6;                      break;              }
Missing Default,Shadowsocks,Program,C:\repos\shadowsocks_shadowsocks-csharp\shadowsocks-csharp\Program.cs,SystemEvents_PowerModeChanged,The following switch statement is missing a default case: switch (e.Mode)              {                  case PowerModes.Resume:                      Logging.Info("os wake up");                      if (MainController != null)                      {                          System.Threading.Tasks.Task.Factory.StartNew(() =>                          {                              Thread.Sleep(10 * 1000);                              try                              {                                  MainController.Start();                                  Logging.Info("controller started");                              }                              catch (Exception ex)                              {                                  Logging.LogUsefulException(ex);                              }                          });                      }                      break;                  case PowerModes.Suspend:                      if (MainController != null)                      {                          MainController.Stop();                          Logging.Info("controller stopped");                      }                      Logging.Info("os suspend");                      break;              }
