Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The length of the statement  "                progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds))); " is 229.
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
Magic Number,Catel.Examples.TaskCommand.ViewModels,MainViewModel,C:\repos\Catel_Catel.Examples\src\WPF\Catel.Examples.WPF.TaskCommand\ViewModels\MainViewModel.cs,LoadSomething,The following statement contains a magic number: try              {                  var rnd = new Random();                  var fast = rnd.Next(0' 10) > 5;                    for (percent = 0; percent < 100; percent++)                  {                      cancellationToken.ThrowIfCancellationRequested();                        // Reporting progress.                      progress.Report(new PercentProgress(percent' string.Format("Loading [{0}%]..."' percent)));                        // Simulating a long running process.                      var delayMilliseconds = rnd.Next(percent' percent + 50) < 50 || percent > 90                          ? rnd.Next(fast ? 1 : 100' fast ? 10 : 500)                          : rnd.Next(10' 100);                        await Task.Delay(delayMilliseconds' cancellationToken);                  }              }              catch (OperationCanceledException)              {                  isCanceled = true;              }              finally              {                  sw.Stop();                    // Reporting progress.                  progress.Report(new PercentProgress(percent' isCanceled ? string.Format("Loaded {0:D}%. Canceled after {1:F2}s."' percent' sw.Elapsed.TotalSeconds) : string.Format("Loaded {0:D}% in {1:F2}s."' percent' sw.Elapsed.TotalSeconds)));              }
