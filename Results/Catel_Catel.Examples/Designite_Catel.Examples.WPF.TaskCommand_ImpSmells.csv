Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The length of the statement  "			int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100); " is 147.
Long Statement,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The length of the statement  "		progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds))); " is 236.
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: try {  	var rnd = new Random ();  	bool fast = rnd.Next (0' 10) > 5;  	for (percents = 0; percents < 100; percents++) {  		cancellationToken.ThrowIfCancellationRequested ();  		// Reporting progress.  		progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  		// Simulating a long running process.  		int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  		await Task.Delay (delayMilliseconds' cancellationToken);  	}  } catch (OperationCanceledException) {  	isCanceled = true;  } finally {  	sw.Stop ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' isCanceled ? string.Format ("Loaded {0:D}%. Canceled after {1:F2}s."' percents' sw.Elapsed.TotalSeconds) : string.Format ("Loaded {0:D}% in {1:F2}s."' percents' sw.Elapsed.TotalSeconds)));  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
Magic Number,Catel.Examples.WPF.TaskCommand.ViewModels,MainWindowViewModel,F:\newReposMay17\Catel_Catel.Examples\src\NET\Catel.Examples.WPF.TaskCommand\ViewModels\MainWindowViewModel.cs,LoadSomething,The following statement contains a magic number: for (percents = 0; percents < 100; percents++) {  	cancellationToken.ThrowIfCancellationRequested ();  	// Reporting progress.  	progress.Report (new PercentProgress (percents' string.Format ("Loading [{0}%]..."' percents)));  	// Simulating a long running process.  	int delayMilliseconds = rnd.Next (percents' percents + 50) < 50 || percents > 90 ? rnd.Next (fast ? 1 : 100' fast ? 10 : 500) : rnd.Next (10' 100);  	await Task.Delay (delayMilliseconds' cancellationToken);  }  
