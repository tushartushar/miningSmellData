Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GeneratePastEventLogMessagesForConferenceManagement,The method has 5 parameters. Parameters: messageLogClient' messageLogName' conferenceManagementConnectionString' metadataProvider' serializer
Long Parameter List,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,MigrateEventSourcedAndGeneratePastEventLogs,The method has 8 parameters. Parameters: messageLogClient' messageLogName' originalEventStoreClient' originalEventStoreName' newEventStoreClient' newEventStoreName' metadataProvider' serializer
Long Identifier,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GeneratePastEventLogMessagesForConferenceManagement,The length of the parameter conferenceManagementConnectionString is 36.
Long Statement,MigrationToV2,ConferenceRegistrationMigrationDbContext,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\ConferenceRegistrationMigrationDbContext.cs,UpdateTables,The length of the statement  "            this.Database.ExecuteSqlCommand("IF COL_LENGTH('" + SchemaName + ".PricedOrders'' 'IsFreeOfCharge') IS NULL ALTER TABLE [" + SchemaName + "].[PricedOrders] ADD [IsFreeOfCharge] [bit] NOT NULL DEFAULT 0"); " is 204.
Long Statement,MigrationToV2,MigrationDbContext,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\MigrationDbContext.cs,TransferObject,The length of the statement  "            this.Database.ExecuteSqlCommand(string.Format(CultureInfo.InvariantCulture' TransferCommand' objectName' currentSchema' newSchema)); " is 132.
Long Statement,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GeneratePastEventLogMessagesForConferenceManagement,The length of the statement  "                // generate events in ascending order. If there is a conflict when saving (currently silently swallowed by AzureEventLogWriter)'  " is 128.
Long Statement,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,MigrateEventSourcedAndGeneratePastEventLogs,The length of the statement  "                    var messageId = migratedEntry.PartitionKey + "_" + migratedEntry.RowKey; //This is the message ID used in the past (deterministic). " is 131.
Long Statement,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GetAllEventSourcingEntries,The length of the statement  "                            // TODO: is there a better way to get the correct exception message instead of an OperationCancelledException in the consuming thread? " is 134.
Long Statement,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,RegenerateViewModels,The length of the statement  "            handlers.Add(new ConferenceViewModelGenerator(() => new ConferenceRegistrationDbContext(dbConnectionString)' commandBus)); " is 122.
Long Statement,MigrationToV2,WorkerRole,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\WorkerRole.cs,OnStart,The length of the statement  "                CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue("Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString")); " is 135.
Magic Number,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GeneratePastEventLogMessagesForConferenceManagement,The following statement contains a magic number: var eventCreationDate = new DateTime(2012' 04' 01' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,GeneratePastEventLogMessagesForConferenceManagement,The following statement contains a magic number: var eventCreationDate = new DateTime(2012' 04' 01' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,MigrateEventSourcedAndGeneratePastEventLogs,The following statement contains a magic number: foreach (var esEntry in this.GetAllEventSourcingEntries(originalEventStoreClient' originalEventStoreName))              {                  // Copies the original values from the stored entry                  var migratedEntry = Mapper.Map<EventTableServiceEntity>(esEntry);                    // get the metadata' as it was not stored in the event store                  var metadata = metadataProvider.GetMetadata(serializer.Deserialize<IVersionedEvent>(esEntry.Payload));                  migratedEntry.AssemblyName = metadata[StandardMetadata.AssemblyName];                  migratedEntry.FullName = metadata[StandardMetadata.FullName];                  migratedEntry.Namespace = metadata[StandardMetadata.Namespace];                  migratedEntry.TypeName = metadata[StandardMetadata.TypeName];                  migratedEntry.CreationDate = esEntry.Timestamp.ToString("o");                    if (currentEventStorePartitionKey == null)                  {                      currentEventStorePartitionKey = migratedEntry.PartitionKey;                      ++currentEventStoreCount;                  }                  else if (currentEventStorePartitionKey != migratedEntry.PartitionKey || ++currentEventStoreCount == 100)                  {                      retryPolicy.ExecuteAction(() => currentEventStoreContext.SaveChanges(SaveChangesOptions.Batch));                      currentEventStoreContext = newEventStoreClient.GetDataServiceContext();                      currentEventStorePartitionKey = migratedEntry.PartitionKey;                      currentEventStoreCount = 0;                  }                    currentEventStoreContext.AddObject(newEventStoreName' migratedEntry);                    const string RowKeyVersionLowerLimit = "0000000000";                  const string RowKeyVersionUpperLimit = "9999999999";                    if (migratedEntry.RowKey.CompareTo(RowKeyVersionLowerLimit) >= 0 &&                      migratedEntry.RowKey.CompareTo(RowKeyVersionUpperLimit) <= 0)                  {                      var messageId = migratedEntry.PartitionKey + "_" + migratedEntry.RowKey; //This is the message ID used in the past (deterministic).                      var logEntry = Mapper.Map<MessageLogEntity>(migratedEntry);                      logEntry.PartitionKey = esEntry.Timestamp.ToString("yyyMM");                      logEntry.RowKey = esEntry.Timestamp.Ticks.ToString("D20") + "_" + messageId;                      logEntry.MessageId = messageId;                      logEntry.CorrelationId = null;                      logEntry.Kind = StandardMetadata.EventKind;                        if (currentMessageLogPartitionKey == null)                      {                          currentMessageLogPartitionKey = logEntry.PartitionKey;                          ++currentMessageLogCount;                      }                      else if (currentMessageLogPartitionKey != logEntry.PartitionKey || ++currentMessageLogCount == 100)                      {                          retryPolicy.ExecuteAction(() => currentMessageLogContext.SaveChanges(SaveChangesOptions.Batch));                          currentMessageLogContext = messageLogClient.GetDataServiceContext();                          currentMessageLogPartitionKey = logEntry.PartitionKey;                          currentMessageLogCount = 0;                      }                        currentMessageLogContext.AddObject(messageLogName' logEntry);                  }              }
Magic Number,MigrationToV2,Migrator,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\Migrator.cs,MigrateEventSourcedAndGeneratePastEventLogs,The following statement contains a magic number: foreach (var esEntry in this.GetAllEventSourcingEntries(originalEventStoreClient' originalEventStoreName))              {                  // Copies the original values from the stored entry                  var migratedEntry = Mapper.Map<EventTableServiceEntity>(esEntry);                    // get the metadata' as it was not stored in the event store                  var metadata = metadataProvider.GetMetadata(serializer.Deserialize<IVersionedEvent>(esEntry.Payload));                  migratedEntry.AssemblyName = metadata[StandardMetadata.AssemblyName];                  migratedEntry.FullName = metadata[StandardMetadata.FullName];                  migratedEntry.Namespace = metadata[StandardMetadata.Namespace];                  migratedEntry.TypeName = metadata[StandardMetadata.TypeName];                  migratedEntry.CreationDate = esEntry.Timestamp.ToString("o");                    if (currentEventStorePartitionKey == null)                  {                      currentEventStorePartitionKey = migratedEntry.PartitionKey;                      ++currentEventStoreCount;                  }                  else if (currentEventStorePartitionKey != migratedEntry.PartitionKey || ++currentEventStoreCount == 100)                  {                      retryPolicy.ExecuteAction(() => currentEventStoreContext.SaveChanges(SaveChangesOptions.Batch));                      currentEventStoreContext = newEventStoreClient.GetDataServiceContext();                      currentEventStorePartitionKey = migratedEntry.PartitionKey;                      currentEventStoreCount = 0;                  }                    currentEventStoreContext.AddObject(newEventStoreName' migratedEntry);                    const string RowKeyVersionLowerLimit = "0000000000";                  const string RowKeyVersionUpperLimit = "9999999999";                    if (migratedEntry.RowKey.CompareTo(RowKeyVersionLowerLimit) >= 0 &&                      migratedEntry.RowKey.CompareTo(RowKeyVersionUpperLimit) <= 0)                  {                      var messageId = migratedEntry.PartitionKey + "_" + migratedEntry.RowKey; //This is the message ID used in the past (deterministic).                      var logEntry = Mapper.Map<MessageLogEntity>(migratedEntry);                      logEntry.PartitionKey = esEntry.Timestamp.ToString("yyyMM");                      logEntry.RowKey = esEntry.Timestamp.Ticks.ToString("D20") + "_" + messageId;                      logEntry.MessageId = messageId;                      logEntry.CorrelationId = null;                      logEntry.Kind = StandardMetadata.EventKind;                        if (currentMessageLogPartitionKey == null)                      {                          currentMessageLogPartitionKey = logEntry.PartitionKey;                          ++currentMessageLogCount;                      }                      else if (currentMessageLogPartitionKey != logEntry.PartitionKey || ++currentMessageLogCount == 100)                      {                          retryPolicy.ExecuteAction(() => currentMessageLogContext.SaveChanges(SaveChangesOptions.Batch));                          currentMessageLogContext = messageLogClient.GetDataServiceContext();                          currentMessageLogPartitionKey = logEntry.PartitionKey;                          currentMessageLogCount = 0;                      }                        currentMessageLogContext.AddObject(messageLogName' logEntry);                  }              }
Magic Number,MigrationToV2,WorkerRole,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\WorkerRole.cs,Run,The following statement contains a magic number: while (this.running)              {                  Trace.WriteLine("Running processor"' "Information");                  Thread.Sleep(TimeSpan.FromSeconds(10));              }
Magic Number,MigrationToV2,WorkerRole,C:\repos\mspnp_cqrs-journey\source\Migrations\MigrationToV2\WorkerRole.cs,OnStart,The following statement contains a magic number: var transferPeriod = TimeSpan.FromMinutes(5);
