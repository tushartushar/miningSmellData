Implementation smell,Namespace,Class,File,Method,Description
Long Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,The method has 101 lines of code.
Long Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The method has 119 lines of code.
Long Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The method has 191 lines of code.
Long Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The method has 160 lines of code.
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,IsClipRectsChanged,Cyclomatic complexity of the method is 10
Complex Method,WeifenLuo.WinFormsUI.Docking,ThemeBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\ThemeBase.cs,CleanUp,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,AnimateWindow,Cyclomatic complexity of the method is 15
Complex Method,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,Remove,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,SetStates,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,Cyclomatic complexity of the method is 22
Complex Method,WeifenLuo.WinFormsUI.Docking,DockDragHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,TestDrop,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\NestedPaneCollection.cs,SwitchPaneWithFirstChild,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,ValidateActiveContent,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,SetDockState,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,RefreshStateChange,Cyclomatic complexity of the method is 14
Complex Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,Cyclomatic complexity of the method is 11
Complex Method,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,Cyclomatic complexity of the method is 31
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_ToolWindow,Cyclomatic complexity of the method is 13
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTabStrip_Document,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,Cyclomatic complexity of the method is 11
Complex Method,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,RefreshChanges,Cyclomatic complexity of the method is 8
Complex Method,WeifenLuo.WinFormsUI.Docking,FocusManagerImpl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.FocusManager.cs,Activate,Cyclomatic complexity of the method is 9
Complex Method,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,Cyclomatic complexity of the method is 8
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DrawingRoutines,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DrawingRoutines.cs,SafelyDrawLinearGradient,The method has 5 parameters. Parameters: rectangle' startColor' endColor' mode' graphics
Long Parameter List,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetDockIcon,The method has 10 parameters. Parameters: maskArrow' layerArrow' maskWindow' layerWindow' maskBack' background' painting' maskCore' layerCore' separator
Long Parameter List,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,CombineFive,The method has 6 parameters. Parameters: five' bottom' center' left' right' top
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockPane,The method has 5 parameters. Parameters: content' previousPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,InternalConstruct,The method has 8 parameters. Parameters: content' dockState' flagBounds' floatWindowBounds' prevPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,IDockPaneFactory,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanelExtender.cs,CreateDockPane,The method has 5 parameters. Parameters: content' previousPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DefaultDockPaneFactory,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanelExtender.cs,CreateDockPane,The method has 5 parameters. Parameters: content' prevPane' alignment' proportion' show
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,SetBoundsCore,The method has 5 parameters. Parameters: x' y' width' height' specified
Long Parameter List,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,MergeNestedPanes,The method has 5 parameters. Parameters: nestedPanesFrom' nestedPanesTo' prevPane' alignment' proportion
Long Parameter List,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,Balance,The method has 5 parameters. Parameters: length' margin' input' lower' upper
Long Parameter List,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The method has 7 parameters. Parameters: graphics' rect' brushBegin' brushMiddle' brushEnd' penColor' glass
Long Parameter List,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The method has 6 parameters. Parameters: graphics' rect' brushBegin' brushEnd' penColor' glass
Long Parameter List,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The method has 5 parameters. Parameters: graphics' rect' brush' penColor' glass
Long Parameter List,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,FillRoundRectangle,The method has 7 parameters. Parameters: graphics' brush' x' y' width' height' radius
Long Parameter List,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRoundRectangle,The method has 7 parameters. Parameters: graphics' pen' x' y' width' height' radius
Long Parameter List,WeifenLuo.WinFormsUI.Docking,NativeMethods,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Win32\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndAfter' X' Y' Width' Height' flags
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,,The length of the parameter m_dummyControlPaintEventHandler is 31.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,,The length of the parameter ActiveAutoHideContentChangedEvent is 33.
Long Identifier,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,,The length of the parameter AutoHideActiveContentChangedEvent is 33.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DefaultPaneIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,,The length of the parameter _bitmapPaneDiamondHotSpotIndex is 30.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,,The length of the parameter IsActiveDocumentPaneChangedEvent is 32.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPanelExtender,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanelExtender.cs,,The length of the parameter m_dockPaneSplitterControlFactory is 32.
Long Identifier,WeifenLuo.WinFormsUI.Docking,DockPanelExtender,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanelExtender.cs,,The length of the parameter m_dockWindowSplitterControlFactory is 34.
Long Identifier,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,,The length of the parameter _ToolWindowTabSeperatorGapBottom is 32.
Long Identifier,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,,The length of the parameter m_imageButtonWindowListOverflow is 31.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "                return new Rectangle(RectangleTopLeft.Width' 0' Width - RectangleTopLeft.Width - RectangleTopRight.Width' RectangleTopLeft.Height); " is 131.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "                return new Rectangle(RectangleBottomLeft.Width' Height - RectangleBottomLeft.Height' Width - RectangleBottomLeft.Width - RectangleBottomRight.Width' RectangleBottomLeft.Height); " is 177.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "                return new Rectangle(0' RectangleTopLeft.Height' RectangleTopLeft.Width' Height - RectangleTopLeft.Height - RectangleBottomLeft.Height); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetTabStripRectangle,The length of the statement  "                return new Rectangle(Width - RectangleTopRight.Width' RectangleTopRight.Height' RectangleTopRight.Width' Height - RectangleTopRight.Height - RectangleBottomRight.Height); " is 170.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,ToScreen,The length of the statement  "            return new Rectangle(parent.PointToScreen(new Point(rectangle.Left' rectangle.Top))' new Size(rectangle.Width' rectangle.Height)); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,ThemeBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\ThemeBase.cs,ApplyTo,The length of the statement  "            _stripBefore[toolStrip] = new KeyValuePair<ToolStripRenderMode' ToolStripRenderer>(toolStrip.RenderMode' toolStrip.Renderer); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,ThemeBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\ThemeBase.cs,ApplyToToolStripManager,The length of the statement  "            _managerBefore = new KeyValuePair<ToolStripManagerRenderMode' ToolStripRenderer>(ToolStripManager.RenderMode' ToolStripManager.Renderer); " is 137.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The length of the statement  "                Rectangle rectHidden = new Rectangle(-rectDisplaying.Width' rectDisplaying.Y' rectDisplaying.Width' rectDisplaying.Height); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The length of the statement  "                    g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The length of the statement  "                    g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,AnimateWindow,The length of the statement  "                    Bounds = DockPanel.GetAutoHideWindowBounds(new Rectangle(-rectTarget.Width' -rectTarget.Height' rectTarget.Width' rectTarget.Height)); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The length of the statement  "                    ActivePane.Location = new Point(rectClient.Right - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Width' ActivePane.Location.Y); " is 144.
Long Statement,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The length of the statement  "                    ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Height); " is 146.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,Remove,The length of the statement  "                lastNestedDock.SetDisplayingStatus(true' statusPane.DisplayingPreviousPane' statusPane.DisplayingAlignment' statusPane.DisplayingProportion); " is 141.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "            this[0].NestedDockingStatus.SetDisplayingBounds(Container.DisplayingRectangle' Container.DisplayingRectangle' Rectangle.Empty); " is 127.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "                bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right); " is 129.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "                    rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "                    rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2); " is 139.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "                    rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2); " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The length of the statement  "                    rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2); " is 142.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,The length of the statement  "            bool hidingContent = (DockState == DockState.Hidden) || (DockState == DockState.Unknown) || DockHelper.IsDockStateAutoHide(DockState); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultPaneIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,HitTest,The length of the statement  "                    if (_bitmapPaneDiamondHotSpot.GetPixel(pt.X' pt.Y) == _bitmapPaneDiamondHotSpotIndex.GetPixel(_hotSpots[i].X' _hotSpots[i].Y)) " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,SetOutline,The length of the statement  "                        using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) })) " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelLeft.Location = new Point(rectDockArea.X + _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2); " is 135.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelRight.Location = new Point(rectDockArea.X + rectDockArea.Width - PanelRight.Width - _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2); " is 176.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelTop.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelTop.Width) / 2' rectDockArea.Y + _PanelIndicatorMargin); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelBottom.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelBottom.Width) / 2' rectDockArea.Y + rectDockArea.Height - PanelBottom.Height - _PanelIndicatorMargin); " is 179.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2); " is 179.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The length of the statement  "                        PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\NestedPaneCollection.cs,Add,The length of the statement  "            NestedPaneCollection oldNestedPanes = (pane.NestedPanesContainer == null) ? null : pane.NestedPanesContainer.NestedPanes; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,SetNestedDockingProportion,The length of the statement  "            NestedDockingStatus.SetStatus(NestedDockingStatus.NestedPanes' NestedDockingStatus.PreviousPane' NestedDockingStatus.Alignment' proportion); " is 140.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.ToolWindowGradient.ActiveCaptionGradient.LinearGradientMode; " is 142.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "                Color startColor = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.ToolWindowGradient.InactiveCaptionGradient.StartColor; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.ToolWindowGradient.InactiveCaptionGradient.LinearGradientMode; " is 144.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneCaption,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneCaption.cs,DrawCaption,The length of the statement  "            TextRenderer.DrawText(g' DockPane.CaptionText' TextFont' DrawHelper.RtlTransform(this' rectCaptionText)' colorText' TextFormat); " is 128.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ActiveDocumentPane"' dockPanel.Panes.IndexOf(dockPanel.ActiveDocumentPane).ToString(CultureInfo.InvariantCulture)); " is 144.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ActivePane"' dockPanel.Panes.IndexOf(dockPanel.ActivePane).ToString(CultureInfo.InvariantCulture)); " is 128.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("AutoHidePortion"' content.DockHandler.AutoHidePortion.ToString(CultureInfo.InvariantCulture)); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ActiveContent"' dockPanel.Contents.IndexOf(pane.ActiveContent).ToString(CultureInfo.InvariantCulture)); " is 132.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                        xmlOut.WriteAttributeString("PrevPane"' dockPanel.Panes.IndexOf(status.PreviousPane).ToString(CultureInfo.InvariantCulture)); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                    xmlOut.WriteAttributeString("ZOrderIndex"' fw.DockPanel.FloatWindows.IndexOf(fw).ToString(CultureInfo.InvariantCulture)); " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,SaveAsXml,The length of the statement  "                        xmlOut.WriteAttributeString("PrevPane"' dockPanel.Panes.IndexOf(status.PreviousPane).ToString(CultureInfo.InvariantCulture)); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].IndexPrevPane = Convert.ToInt32(xmlIn.GetAttribute("PrevPane")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].Alignment = (DockAlignment)dockAlignmentConverter.ConvertFrom(xmlIn.GetAttribute("Alignment")); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadDockWindows,The length of the statement  "                        dockWindows[i].NestedPanes[j].Proportion = Convert.ToDouble(xmlIn.GetAttribute("Proportion")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].IndexPrevPane = Convert.ToInt32(xmlIn.GetAttribute("PrevPane")' CultureInfo.InvariantCulture); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].Alignment = (DockAlignment)dockAlignmentConverter.ConvertFrom(xmlIn.GetAttribute("Alignment")); " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFloatWindows,The length of the statement  "                        floatWindows[i].NestedPanes[j].Proportion = Convert.ToDouble(xmlIn.GetAttribute("Proportion")' CultureInfo.InvariantCulture); " is 125.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanelStruct.DockLeftPortion = Convert.ToDouble(xmlIn.GetAttribute("DockLeftPortion")' CultureInfo.InvariantCulture); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanelStruct.DockRightPortion = Convert.ToDouble(xmlIn.GetAttribute("DockRightPortion")' CultureInfo.InvariantCulture); " is 122.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanelStruct.DockBottomPortion = Convert.ToDouble(xmlIn.GetAttribute("DockBottomPortion")' CultureInfo.InvariantCulture); " is 124.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanelStruct.IndexActiveDocumentPane = Convert.ToInt32(xmlIn.GetAttribute("ActiveDocumentPane")' CultureInfo.InvariantCulture); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                        DockPane prevPane = (indexPrevPane == -1) ? dw.NestedPanes.GetDefaultPreviousPane(pane) : dockPanel.Panes[indexPrevPane]; " is 121.
Long Statement,WeifenLuo.WinFormsUI.Docking,Persistor,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.Persistor.cs,LoadFromXml,The length of the statement  "                    dockPanel.Panes[i].ActiveContent = panes[i].IndexActiveContent == -1 ? null : dockPanel.Contents[panes[i].IndexActiveContent]; " is 126.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPaneStripBase.cs,OnMouseMove,The length of the statement  "            if (DockPane.DockPanel.AllowEndUserDocking && DockPane.AllowDockDragAndDrop && DockPane.ActiveContent.DockHandler.AllowEndUserDocking) " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPaneStripBase.cs,ToScreen,The length of the statement  "            return new Rectangle(parent.PointToScreen(new Point(rectangle.Left' rectangle.Top))' new Size(rectangle.Width' rectangle.Height)); " is 130.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,MeasureHeight_Document,The length of the statement  "            int height = Math.Max(TextFont.Height + DocumentTabGapTop + (PatchController.EnableHighDpi == true ? DocumentIconGapBottom : 0)' " is 128.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetMaxTabWidth_Document,The length of the statement  "            Size sizeText = TextRenderer.MeasureText(content.DockHandler.TabText' BoldFont' new Size(DocumentTabMaxWidth' height)' DocumentTextFormat); " is 139.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                        GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2); " is 134.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The length of the statement  "                    GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom); " is 120.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.ToolWindowGradient.ActiveTabGradient.LinearGradientMode; " is 138.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_ToolWindow,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.ToolWindowGradient.InactiveTabGradient.LinearGradientMode; " is 140.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.DocumentGradient.ActiveTabGradient.LinearGradientMode; " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,DrawTab_Document,The length of the statement  "                LinearGradientMode gradientMode = DockPane.DockPanel.Theme.Skin.DockPaneStripSkin.DocumentGradient.InactiveTabGradient.LinearGradientMode; " is 138.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The length of the statement  "            var workingArea = Screen.GetWorkingArea(ButtonWindowList.PointToScreen(new Point(ButtonWindowList.Width / 2' ButtonWindowList.Height / 2))); " is 140.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The length of the statement  "            var menu = new Rectangle(ButtonWindowList.PointToScreen(new Point(0' ButtonWindowList.Location.Y + ButtonWindowList.Height))' SelectMenu.Size); " is 143.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The length of the statement  "            var menuMargined = new Rectangle(menu.X - SelectMenuMargin' menu.Y - SelectMenuMargin' menu.Width + SelectMenuMargin' menu.Height + SelectMenuMargin); " is 150.
Long Statement,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The length of the statement  "                newPoint.Y = DrawHelper.Balance(SelectMenu.Size.Height' SelectMenuMargin' newPoint.Y' workingArea.Top' workingArea.Bottom); " is 123.
Long Statement,WeifenLuo.WinFormsUI.Docking,DefaultDockWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockWindow.cs,OnPaint,The length of the statement  "                e.Graphics.DrawRectangle(SystemPens.ControlDark' ClientRectangle.X' ClientRectangle.Y' ClientRectangle.Width - 1' ClientRectangle.Height - 1); " is 142.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,SetText,The length of the statement  "                Text = " ";	// use " " instead of string.Empty because the whole title bar will disappear when ControlBox is set to false. " is 122.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The length of the statement  "                        uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam); " is 136.
Long Statement,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The length of the statement  "                        uint result = Win32Helper.IsRunningOnMono ? Win32Helper.HitTestCaption(this) : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam); " is 167.
Long Statement,WeifenLuo.WinFormsUI.Docking,Win32Helper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\Win32Helper.cs,HitTestCaption,The length of the statement  "            var captionRectangle = new Rectangle(0' 0' control.Width' control.ClientRectangle.Top - control.PointToClient(control.Location).X); " is 131.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DragHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DragHandler.cs,OnPreFilterMessage,The conditional expression  "(m.Msg == (int)Win32.Msgs.WM_KEYDOWN || m.Msg == (int)Win32.Msgs.WM_KEYUP) &&                      ((int)m.WParam == (int)Keys.ControlKey || (int)m.WParam == (int)Keys.ShiftKey)"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,SetDockState,The conditional expression  "(Pane.DockWindow == null || Pane.DockWindow.Visible || Pane.IsHidden) && !Pane.IsAutoHide"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockStateAutoHide,The conditional expression  "dockState == DockState.DockLeftAutoHide ||                  dockState == DockState.DockRightAutoHide ||                  dockState == DockState.DockTopAutoHide ||                  dockState == DockState.DockBottomAutoHide"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DockHelper.cs,IsDockWindowState,The conditional expression  "state == DockState.DockTop || state == DockState.DockBottom || state == DockState.DockLeft ||                  state == DockState.DockRight || state == DockState.Document"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockOutlineBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockOutlineBase.cs,TestChange,The conditional expression  "m_floatWindowBounds != m_oldFloatWindowBounds ||                  m_dockTo != m_oldDockTo ||                  m_dock != m_oldDock ||                  m_contentIndex != m_oldContentIndex"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockPaneCaptionBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPaneCaptionBase.cs,OnMouseDown,The conditional expression  "e.Button == MouseButtons.Left &&                  DockPane.DockPanel.AllowEndUserDocking &&                  DockPane.AllowDockDragAndDrop &&                  DockPane.ActiveContent != null &&                  (!DockHelper.IsDockStateAutoHide(DockPane.DockState) || CanDragAutoHide)"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The conditional expression  "Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full"  is complex.
Complex Conditional,WeifenLuo.WinFormsUI.Docking,DockWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockWindow.cs,DockWindow,The conditional expression  "DockState == DockState.DockLeft || DockState == DockState.DockRight ||                  DockState == DockState.DockTop || DockState == DockState.DockBottom"  is complex.
Virtual Method Call from Constructor,WeifenLuo.WinFormsUI.Docking,SplitterOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,SplitterOutline,The constructor "SplitterOutline" calls a virtual method "Show".
Virtual Method Call from Constructor,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,DefaultDockOutline,The constructor "DefaultDockOutline" calls a virtual method "Show".
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,ShouldSerializeDefaultFloatWindowSize,The following statement contains a magic number: return DefaultFloatWindowSize != new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,ShouldSerializeDefaultFloatWindowSize,The following statement contains a magic number: return DefaultFloatWindowSize != new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,ResetDefaultFloatWindowSize,The following statement contains a magic number: DefaultFloatWindowSize = new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,ResetDefaultFloatWindowSize,The following statement contains a magic number: DefaultFloatWindowSize = new Size(300' 300);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockLeft || dockState == DockState.DockRight)              {                  int width = ClientRectangle.Width - DockPadding.Left - DockPadding.Right;                  int dockLeftSize = m_dockLeftPortion >= 1 ? (int)m_dockLeftPortion : (int)(width * m_dockLeftPortion);                  int dockRightSize = m_dockRightPortion >= 1 ? (int)m_dockRightPortion : (int)(width * m_dockRightPortion);                    if (dockLeftSize < MeasurePane.MinSize)                      dockLeftSize = MeasurePane.MinSize;                  if (dockRightSize < MeasurePane.MinSize)                      dockRightSize = MeasurePane.MinSize;                    if (dockLeftSize + dockRightSize > width - MeasurePane.MinSize)                  {                      int adjust = (dockLeftSize + dockRightSize) - (width - MeasurePane.MinSize);                      dockLeftSize -= adjust / 2;                      dockRightSize -= adjust / 2;                  }                    return dockState == DockState.DockLeft ? dockLeftSize : dockRightSize;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPanel,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,GetDockWindowSize,The following statement contains a magic number: if (dockState == DockState.DockTop || dockState == DockState.DockBottom)              {                  int height = ClientRectangle.Height - DockPadding.Top - DockPadding.Bottom;                  int dockTopSize = m_dockTopPortion >= 1 ? (int)m_dockTopPortion : (int)(height * m_dockTopPortion);                  int dockBottomSize = m_dockBottomPortion >= 1 ? (int)m_dockBottomPortion : (int)(height * m_dockBottomPortion);                    if (dockTopSize < MeasurePane.MinSize)                      dockTopSize = MeasurePane.MinSize;                  if (dockBottomSize < MeasurePane.MinSize)                      dockBottomSize = MeasurePane.MinSize;                    if (dockTopSize + dockBottomSize > height - MeasurePane.MinSize)                  {                      int adjust = (dockTopSize + dockBottomSize) - (height - MeasurePane.MinSize);                      dockTopSize -= adjust / 2;                      dockBottomSize -= adjust / 2;                  }                    return dockState == DockState.DockTop ? dockTopSize : dockBottomSize;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,SplitterOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.SplitterDragHandler.cs,SplitterOutline,The following statement contains a magic number: DragForm.Opacity = 0.7;
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DragForm,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DragForm.cs,OnPaint,The following statement contains a magic number: if (all.Width > 10 && all.Height > 10)              {                  var newLocation = new Point(all.Location.X + 5' all.Location.Y + 5);                  var newSize = new Size(all.Width - 10' all.Height - 10);                  var center = new Rectangle(newLocation' newSize);                  e.Graphics.FillRectangle(new SolidBrush(BackgroundColor.Value)' center);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideStripsAccessibleObject,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetChildCount,The following statement contains a magic number: return 4;
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideStripsAccessibleObject,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetChild,The following statement contains a magic number: switch (index)                  {                      case 0:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockTopAutoHide' this);                      case 1:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockBottomAutoHide' this);						                      case 2:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockLeftAutoHide' this);                      case 3:                      default:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockRightAutoHide' this);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideStripsAccessibleObject,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\AutoHideStripBase.cs,GetChild,The following statement contains a magic number: switch (index)                  {                      case 0:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockTopAutoHide' this);                      case 1:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockBottomAutoHide' this);						                      case 2:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockLeftAutoHide' this);                      case 3:                      default:                          return new AutoHideStripAccessibleObject(_strip' DockState.DockRightAutoHide' this);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < input.Height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < input.Width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(back))              {                  SolidBrush brush = new SolidBrush(background);                  SolidBrush brush2 = new SolidBrush(border.Value);                  gfx.FillRectangle(brush2' 0' 0' width' height);                  if (background != border.Value)                  {                      gfx.FillRectangle(brush' 1' 1' width - 2' height - 2);                  }                    gfx.DrawImageUnscaled(output' 0' 0);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetImage,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(back))              {                  SolidBrush brush = new SolidBrush(background);                  SolidBrush brush2 = new SolidBrush(border.Value);                  gfx.FillRectangle(brush2' 0' 0' width' height);                  if (background != border.Value)                  {                      gfx.FillRectangle(brush' 1' 1' width - 2' height - 2);                  }                    gfx.DrawImageUnscaled(output' 0' 0);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetBackground,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(back))              {                  SolidBrush brush = painting.GetBrush(innerBorder);                  SolidBrush brush2 = painting.GetBrush(outerBorder);                  gfx.FillRectangle(brush2' 0' 0' width' width);                  gfx.FillRectangle(brush' 1' 1' width - 2' width - 2);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetBackground,The following statement contains a magic number: using (Graphics gfx = Graphics.FromImage(back))              {                  SolidBrush brush = painting.GetBrush(innerBorder);                  SolidBrush brush2 = painting.GetBrush(outerBorder);                  gfx.FillRectangle(brush2' 0' 0' width' width);                  gfx.FillRectangle(brush' 1' 1' width - 2' width - 2);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,MaskImages,The following statement contains a magic number: unsafe              {                  for (int y = 0; y < height; y++)                  {                      byte* ptrMask = (byte*)bitsMask.Scan0 + y * bitsMask.Stride;                      byte* ptrInput = (byte*)bitsInput.Scan0 + y * bitsInput.Stride;                      byte* ptrOutput = (byte*)bitsOutput.Scan0 + y * bitsOutput.Stride;                      for (int x = 0; x < width; x++)                      {                          ptrOutput[4 * x] = ptrInput[4 * x];           // blue                          ptrOutput[4 * x + 1] = ptrInput[4 * x + 1];   // green                          ptrOutput[4 * x + 2] = ptrInput[4 * x + 2];   // red                          ptrOutput[4 * x + 3] = ptrMask[4 * x];        // alpha                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetDockImage,The following statement contains a magic number: var offset = (background.Width - icon.Width) / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,CombineFive,The following statement contains a magic number: var cell = (result.Width - bottom.Width) / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,CombineFive,The following statement contains a magic number: var offset = (cell - bottom.Width) / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,CombineFive,The following statement contains a magic number: using (var gfx = Graphics.FromImage(result))              {                  gfx.DrawImageUnscaled(top' cell' offset);                  gfx.DrawImageUnscaled(center' cell' cell);                  gfx.DrawImageUnscaled(bottom' cell' 2 * cell - offset);                  gfx.DrawImageUnscaled(left' offset' cell);                  gfx.DrawImageUnscaled(right' 2 * cell - offset' cell);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,CombineFive,The following statement contains a magic number: using (var gfx = Graphics.FromImage(result))              {                  gfx.DrawImageUnscaled(top' cell' offset);                  gfx.DrawImageUnscaled(center' cell' cell);                  gfx.DrawImageUnscaled(bottom' cell' 2 * cell - offset);                  gfx.DrawImageUnscaled(left' offset' cell);                  gfx.DrawImageUnscaled(right' 2 * cell - offset' cell);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ImageServiceHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\IImageService.cs,GetFiveBackground,The following statement contains a magic number: using (var input = GetLayerImage(innerBorder' mask.Width' painting))              {                  using (var gfx = Graphics.FromImage(input))                  {                      var pen = painting.GetPen(outerBorder);                      gfx.DrawLines(pen' new[]                      {                          new Point(36' 25)'new Point(36' 0)'                          new Point(75' 0)' new Point(75' 25)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(86' 36)' new Point(111' 36)'                          new Point(111' 75)' new Point(86' 75)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(75' 86)' new Point(75' 111)'                          new Point(36' 111)' new Point(36' 86)                      });                      gfx.DrawLines(pen' new[]                      {                          new Point(25' 75)' new Point(0' 75)'                          new Point(0' 36)' new Point(25' 36)                      });                      var pen2 = painting.GetPen(outerBorder' 2);                      gfx.DrawLine(pen2' new Point(36' 25)' new Point(25' 36));                      gfx.DrawLine(pen2' new Point(75' 25)' new Point(86' 36));                      gfx.DrawLine(pen2' new Point(86' 75)' new Point(75' 86));                      gfx.DrawLine(pen2' new Point(36' 86)' new Point(25' 75));                  }                    return MaskImages(input' mask);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,InertButtonBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\InertButtonBase.cs,OnPaint,The following statement contains a magic number: using (ImageAttributes imageAttributes = new ImageAttributes())              {                  ColorMap[] colorMap = new ColorMap[2];                  colorMap[0] = new ColorMap();                  colorMap[0].OldColor = Color.FromArgb(0' 0' 0);                  colorMap[0].NewColor = ForeColor;                  colorMap[1] = new ColorMap();                  colorMap[1].OldColor = Image.GetPixel(0' 0);                  colorMap[1].NewColor = Color.Transparent;                    imageAttributes.SetRemapTable(colorMap);                    e.Graphics.DrawImage(                     Image'                     new Rectangle(0' 0' Image.Width' Image.Height)'                     0' 0'                     Image.Width'                     Image.Height'                     GraphicsUnit.Pixel'                     imageAttributes);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,ThemeBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\ThemeBase.cs,Decompress,The following statement contains a magic number: using (MemoryStream originalFileStream = new MemoryStream(fileToDecompress))              {                  using (MemoryStream decompressedFileStream = new MemoryStream())                  {                      using (GZipStream decompressionStream = new GZipStream(originalFileStream' CompressionMode.Decompress))                      {                          //Copy the decompression stream into the output file.                          byte[] buffer = new byte[4096];                          int numRead;                          while ((numRead = decompressionStream.Read(buffer' 0' buffer.Length)) != 0)                          {                              decompressedFileStream.Write(buffer' 0' numRead);                          }                            return decompressedFileStream.ToArray();                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)              {                  Matrix matrixRotated = new Matrix();                  matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                      (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  g.Transform = matrixRotated;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)              {                  Matrix matrixRotated = new Matrix();                  matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                      (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  g.Transform = matrixRotated;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTabStrip,The following statement contains a magic number: if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)              {                  Matrix matrixRotated = new Matrix();                  matrixRotated.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                      (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  g.Transform = matrixRotated;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: using (Matrix matrixRotate = g.Transform)              {                  g.Transform = MatrixIdentity;                    // Draw the icon                  Rectangle rectImage = rectTabOrigin;                  rectImage.X += ImageGapLeft;                  rectImage.Y += ImageGapTop;                  int imageHeight = rectTabOrigin.Height - ImageGapTop - ImageGapBottom;                  int imageWidth = ImageWidth;                  if (imageHeight > ImageHeight)                      imageWidth = ImageWidth * (imageHeight / ImageHeight);                  rectImage.Height = imageHeight;                  rectImage.Width = imageWidth;                  rectImage = GetTransformedRectangle(dockState' rectImage);                    if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)                  {                      // The DockState is DockLeftAutoHide or DockRightAutoHide' so rotate the image 90 degrees to the right.                       Rectangle rectTransform = RtlTransform(rectImage' dockState);                      Point[] rotationPoints =                          {                               new Point(rectTransform.X + rectTransform.Width' rectTransform.Y)'                               new Point(rectTransform.X + rectTransform.Width' rectTransform.Y + rectTransform.Height)'                               new Point(rectTransform.X' rectTransform.Y)                          };                        using (Icon rotatedIcon = new Icon(((Form)content).Icon' 16' 16))                      {                          g.DrawImage(rotatedIcon.ToBitmap()' rotationPoints);                      }                  }                  else                  {                      // Draw the icon normally without any rotation.                      g.DrawIcon(((Form)content).Icon' RtlTransform(rectImage' dockState));                  }                    // Draw the text                  Rectangle rectText = rectTabOrigin;                  rectText.X += ImageGapLeft + imageWidth + ImageGapRight + TextGapLeft;                  rectText.Width -= ImageGapLeft + imageWidth + ImageGapRight + TextGapLeft;                  rectText = RtlTransform(GetTransformedRectangle(dockState' rectText)' dockState);                    Color textColor = DockPanel.Theme.Skin.AutoHideStripSkin.TabGradient.TextColor;                    if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)                      g.DrawString(content.DockHandler.TabText' TextFont' new SolidBrush(textColor)' rectText' StringFormatTabVertical);                  else                      g.DrawString(content.DockHandler.TabText' TextFont' new SolidBrush(textColor)' rectText' StringFormatTabHorizontal);                    // Set rotate back                  g.Transform = matrixRotate;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,DrawTab,The following statement contains a magic number: using (Matrix matrixRotate = g.Transform)              {                  g.Transform = MatrixIdentity;                    // Draw the icon                  Rectangle rectImage = rectTabOrigin;                  rectImage.X += ImageGapLeft;                  rectImage.Y += ImageGapTop;                  int imageHeight = rectTabOrigin.Height - ImageGapTop - ImageGapBottom;                  int imageWidth = ImageWidth;                  if (imageHeight > ImageHeight)                      imageWidth = ImageWidth * (imageHeight / ImageHeight);                  rectImage.Height = imageHeight;                  rectImage.Width = imageWidth;                  rectImage = GetTransformedRectangle(dockState' rectImage);                    if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)                  {                      // The DockState is DockLeftAutoHide or DockRightAutoHide' so rotate the image 90 degrees to the right.                       Rectangle rectTransform = RtlTransform(rectImage' dockState);                      Point[] rotationPoints =                          {                               new Point(rectTransform.X + rectTransform.Width' rectTransform.Y)'                               new Point(rectTransform.X + rectTransform.Width' rectTransform.Y + rectTransform.Height)'                               new Point(rectTransform.X' rectTransform.Y)                          };                        using (Icon rotatedIcon = new Icon(((Form)content).Icon' 16' 16))                      {                          g.DrawImage(rotatedIcon.ToBitmap()' rotationPoints);                      }                  }                  else                  {                      // Draw the icon normally without any rotation.                      g.DrawIcon(((Form)content).Icon' RtlTransform(rectImage' dockState));                  }                    // Draw the text                  Rectangle rectText = rectTabOrigin;                  rectText.X += ImageGapLeft + imageWidth + ImageGapRight + TextGapLeft;                  rectText.Width -= ImageGapLeft + imageWidth + ImageGapRight + TextGapLeft;                  rectText = RtlTransform(GetTransformedRectangle(dockState' rectText)' dockState);                    Color textColor = DockPanel.Theme.Skin.AutoHideStripSkin.TabGradient.TextColor;                    if (dockState == DockState.DockLeftAutoHide || dockState == DockState.DockRightAutoHide)                      g.DrawString(content.DockHandler.TabText' TextFont' new SolidBrush(textColor)' rectText' StringFormatTabVertical);                  else                      g.DrawString(content.DockHandler.TabText' TextFont' new SolidBrush(textColor)' rectText' StringFormatTabHorizontal);                    // Set rotate back                  g.Transform = matrixRotate;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts[0].X = (float)rect.X + (float)rect.Width / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: pts[0].Y = (float)rect.Y + (float)rect.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: using (var matrix = new Matrix())              {                  matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                                                 (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  matrix.TransformPoints(pts);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: using (var matrix = new Matrix())              {                  matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                                                 (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  matrix.TransformPoints(pts);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: using (var matrix = new Matrix())              {                  matrix.RotateAt(90' new PointF((float)rectTabStrip.X + (float)rectTabStrip.Height / 2'                                                 (float)rectTabStrip.Y + (float)rectTabStrip.Height / 2));                  matrix.TransformPoints(pts);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle((int)(pts[0].X - (float)rect.Height / 2 + .5F)'                  (int)(pts[0].Y - (float)rect.Width / 2 + .5F)'                  rect.Height' rect.Width);
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005AutoHideStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005AutoHideStrip.cs,GetTransformedRectangle,The following statement contains a magic number: return new Rectangle((int)(pts[0].X - (float)rect.Height / 2 + .5F)'                  (int)(pts[0].Y - (float)rect.Width / 2 + .5F)'                  rect.Height' rect.Width);
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnLayout,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                  {                      DockPadding.Right = 2;                      m_splitter.Dock = DockStyle.Right;                  }                  else if (DockState == DockState.DockRightAutoHide)                  {                      DockPadding.Left = 2;                      m_splitter.Dock = DockStyle.Left;                  }                  else if (DockState == DockState.DockTopAutoHide)                  {                      DockPadding.Bottom = 2;                      m_splitter.Dock = DockStyle.Bottom;                  }                  else if (DockState == DockState.DockBottomAutoHide)                  {                      DockPadding.Top = 2;                      m_splitter.Dock = DockStyle.Top;                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultAutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,OnPaint,The following statement contains a magic number: if (DockState == DockState.DockBottomAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 0' 1' ClientRectangle.Right' 1);                  else if (DockState == DockState.DockRightAutoHide)                      g.DrawLine(SystemPens.ControlLightLight' 1' 0' 1' ClientRectangle.Bottom);                  else if (DockState == DockState.DockTopAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' 0' ClientRectangle.Height - 2' ClientRectangle.Right' ClientRectangle.Height - 2);                      g.DrawLine(SystemPens.ControlDarkDark' 0' ClientRectangle.Height - 1' ClientRectangle.Right' ClientRectangle.Height - 1);                  }                  else if (DockState == DockState.DockLeftAutoHide)                  {                      g.DrawLine(SystemPens.ControlDark' ClientRectangle.Width - 2' 0' ClientRectangle.Width - 2' ClientRectangle.Bottom);                      g.DrawLine(SystemPens.ControlDarkDark' ClientRectangle.Width - 1' 0' ClientRectangle.Width - 1' ClientRectangle.Bottom);                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                      ActivePane.Location = new Point(rectClient.Right - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Width' ActivePane.Location.Y);                  else if (DockState == DockState.DockTopAutoHide)                      ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Height);
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,LayoutAnimateWindow,The following statement contains a magic number: if (DockState == DockState.DockLeftAutoHide)                      ActivePane.Location = new Point(rectClient.Right - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Width' ActivePane.Location.Y);                  else if (DockState == DockState.DockTopAutoHide)                      ActivePane.Location = new Point(ActivePane.Location.X' rectClient.Bottom - 2 - DockPanel.Theme.Measures.AutoHideSplitterSize - ActivePane.Height);
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,SetTimerMouseTrack,The following statement contains a magic number: if (hovertime <= 0)                      hovertime = 400;
Magic Number,WeifenLuo.WinFormsUI.Docking,AutoHideWindowControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.AutoHideWindow.cs,SetTimerMouseTrack,The following statement contains a magic number: m_timerMouseTrack.Interval = 2 * (int)hovertime;
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,Remove,The following statement contains a magic number: statusPane.SetDisplayingStatus(false' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)              {                  DockPane pane = this[i];                  NestedDockingStatus status = pane.NestedDockingStatus;                  DockPane prevPane = status.DisplayingPreviousPane;                  NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;                    Rectangle rect = statusPrev.PaneBounds;                  bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);                    Rectangle rectThis = rect;                  Rectangle rectPrev = rect;                  Rectangle rectSplitter = rect;                  if (status.DisplayingAlignment == DockAlignment.Left)                  {                      rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectThis.X + rectThis.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.X = rectSplitter.X + rectSplitter.Width;                      rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Right)                  {                      rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectPrev.X + rectPrev.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.X = rectSplitter.X + rectSplitter.Width;                      rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Top)                  {                      rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectThis.Y + rectThis.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.Y = rectSplitter.Y + rectSplitter.Height;                      rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;                  }                  else if (status.DisplayingAlignment == DockAlignment.Bottom)                  {                      rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectPrev.Y + rectPrev.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.Y = rectSplitter.Y + rectSplitter.Height;                      rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;                  }                  else                      rectThis = Rectangle.Empty;                    rectSplitter.Intersect(rect);                  rectThis.Intersect(rect);                  rectPrev.Intersect(rect);                  status.SetDisplayingBounds(rect' rectThis' rectSplitter);                  statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)              {                  DockPane pane = this[i];                  NestedDockingStatus status = pane.NestedDockingStatus;                  DockPane prevPane = status.DisplayingPreviousPane;                  NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;                    Rectangle rect = statusPrev.PaneBounds;                  bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);                    Rectangle rectThis = rect;                  Rectangle rectPrev = rect;                  Rectangle rectSplitter = rect;                  if (status.DisplayingAlignment == DockAlignment.Left)                  {                      rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectThis.X + rectThis.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.X = rectSplitter.X + rectSplitter.Width;                      rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Right)                  {                      rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectPrev.X + rectPrev.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.X = rectSplitter.X + rectSplitter.Width;                      rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Top)                  {                      rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectThis.Y + rectThis.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.Y = rectSplitter.Y + rectSplitter.Height;                      rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;                  }                  else if (status.DisplayingAlignment == DockAlignment.Bottom)                  {                      rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectPrev.Y + rectPrev.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.Y = rectSplitter.Y + rectSplitter.Height;                      rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;                  }                  else                      rectThis = Rectangle.Empty;                    rectSplitter.Intersect(rect);                  rectThis.Intersect(rect);                  rectPrev.Intersect(rect);                  status.SetDisplayingBounds(rect' rectThis' rectSplitter);                  statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)              {                  DockPane pane = this[i];                  NestedDockingStatus status = pane.NestedDockingStatus;                  DockPane prevPane = status.DisplayingPreviousPane;                  NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;                    Rectangle rect = statusPrev.PaneBounds;                  bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);                    Rectangle rectThis = rect;                  Rectangle rectPrev = rect;                  Rectangle rectSplitter = rect;                  if (status.DisplayingAlignment == DockAlignment.Left)                  {                      rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectThis.X + rectThis.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.X = rectSplitter.X + rectSplitter.Width;                      rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Right)                  {                      rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectPrev.X + rectPrev.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.X = rectSplitter.X + rectSplitter.Width;                      rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Top)                  {                      rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectThis.Y + rectThis.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.Y = rectSplitter.Y + rectSplitter.Height;                      rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;                  }                  else if (status.DisplayingAlignment == DockAlignment.Bottom)                  {                      rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectPrev.Y + rectPrev.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.Y = rectSplitter.Y + rectSplitter.Height;                      rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;                  }                  else                      rectThis = Rectangle.Empty;                    rectSplitter.Intersect(rect);                  rectThis.Intersect(rect);                  rectPrev.Intersect(rect);                  status.SetDisplayingBounds(rect' rectThis' rectSplitter);                  statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisibleNestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisibleNestedPaneCollection.cs,CalculateBounds,The following statement contains a magic number: for (int i=1; i<Count; i++)              {                  DockPane pane = this[i];                  NestedDockingStatus status = pane.NestedDockingStatus;                  DockPane prevPane = status.DisplayingPreviousPane;                  NestedDockingStatus statusPrev = prevPane.NestedDockingStatus;                    Rectangle rect = statusPrev.PaneBounds;                  bool bVerticalSplitter = (status.DisplayingAlignment == DockAlignment.Left || status.DisplayingAlignment == DockAlignment.Right);                    Rectangle rectThis = rect;                  Rectangle rectPrev = rect;                  Rectangle rectSplitter = rect;                  if (status.DisplayingAlignment == DockAlignment.Left)                  {                      rectThis.Width = (int)((double)rect.Width * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectThis.X + rectThis.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.X = rectSplitter.X + rectSplitter.Width;                      rectPrev.Width = rect.Width - rectThis.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Right)                  {                      rectPrev.Width = (rect.Width - (int)((double)rect.Width * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.X = rectPrev.X + rectPrev.Width;                      rectSplitter.Width = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.X = rectSplitter.X + rectSplitter.Width;                      rectThis.Width = rect.Width - rectPrev.Width - rectSplitter.Width;                  }                  else if (status.DisplayingAlignment == DockAlignment.Top)                  {                      rectThis.Height = (int)((double)rect.Height * status.DisplayingProportion) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectThis.Y + rectThis.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectPrev.Y = rectSplitter.Y + rectSplitter.Height;                      rectPrev.Height = rect.Height - rectThis.Height - rectSplitter.Height;                  }                  else if (status.DisplayingAlignment == DockAlignment.Bottom)                  {                      rectPrev.Height = (rect.Height - (int)((double)rect.Height * status.DisplayingProportion)) - (pane.DockPanel.Theme.Measures.SplitterSize / 2);                      rectSplitter.Y = rectPrev.Y + rectPrev.Height;                      rectSplitter.Height = pane.DockPanel.Theme.Measures.SplitterSize;                      rectThis.Y = rectSplitter.Y + rectSplitter.Height;                      rectThis.Height = rect.Height - rectPrev.Height - rectSplitter.Height;                  }                  else                      rectThis = Rectangle.Empty;                    rectSplitter.Intersect(rect);                  rectThis.Intersect(rect);                  rectPrev.Intersect(rect);                  status.SetDisplayingBounds(rect' rectThis' rectSplitter);                  statusPrev.SetDisplayingBounds(statusPrev.LogicalBounds' rectPrev' statusPrev.SplitterBounds);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxFloat.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockLeft.Width = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockRight.Width = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockTop.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: checkBoxDockBottom.Height = 24;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: Size = new System.Drawing.Size(160' 144);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockAreasEditorControl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockAreasEditor.cs,DockAreasEditorControl,The following statement contains a magic number: Size = new System.Drawing.Size(160' 144);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  bool samePane = (Pane == pane);                  if (!samePane)                      Pane = pane;                    int visiblePanes = 0;                  int convertedIndex = 0;                  while (visiblePanes <= contentIndex && convertedIndex < Pane.Contents.Count)                  {                      DockContent window = Pane.Contents[convertedIndex] as DockContent;                      if (window != null && !window.IsHidden)                          ++visiblePanes;                        ++convertedIndex;                  }                    contentIndex = Math.Min(Math.Max(0' convertedIndex - 1)' Pane.Contents.Count - 1);                    if (contentIndex == -1 || !samePane)                      pane.SetContentIndex(Content' contentIndex);                  else                  {                      DockContentCollection contents = pane.Contents;                      int oldIndex = contents.IndexOf(Content);                      int newIndex = contentIndex;                      if (oldIndex < newIndex)                      {                          newIndex += 1;                          if (newIndex > contents.Count - 1)                              newIndex = -1;                      }                      pane.SetContentIndex(Content' newIndex);                  }              }              else              {                  DockPane paneFrom = DockPanel.Theme.Extender.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);                  INestedPanesContainer container = pane.NestedPanesContainer;                  if (dockStyle == DockStyle.Left)                      paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);                    paneFrom.DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  bool samePane = (Pane == pane);                  if (!samePane)                      Pane = pane;                    int visiblePanes = 0;                  int convertedIndex = 0;                  while (visiblePanes <= contentIndex && convertedIndex < Pane.Contents.Count)                  {                      DockContent window = Pane.Contents[convertedIndex] as DockContent;                      if (window != null && !window.IsHidden)                          ++visiblePanes;                        ++convertedIndex;                  }                    contentIndex = Math.Min(Math.Max(0' convertedIndex - 1)' Pane.Contents.Count - 1);                    if (contentIndex == -1 || !samePane)                      pane.SetContentIndex(Content' contentIndex);                  else                  {                      DockContentCollection contents = pane.Contents;                      int oldIndex = contents.IndexOf(Content);                      int newIndex = contentIndex;                      if (oldIndex < newIndex)                      {                          newIndex += 1;                          if (newIndex > contents.Count - 1)                              newIndex = -1;                      }                      pane.SetContentIndex(Content' newIndex);                  }              }              else              {                  DockPane paneFrom = DockPanel.Theme.Extender.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);                  INestedPanesContainer container = pane.NestedPanesContainer;                  if (dockStyle == DockStyle.Left)                      paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);                    paneFrom.DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  bool samePane = (Pane == pane);                  if (!samePane)                      Pane = pane;                    int visiblePanes = 0;                  int convertedIndex = 0;                  while (visiblePanes <= contentIndex && convertedIndex < Pane.Contents.Count)                  {                      DockContent window = Pane.Contents[convertedIndex] as DockContent;                      if (window != null && !window.IsHidden)                          ++visiblePanes;                        ++convertedIndex;                  }                    contentIndex = Math.Min(Math.Max(0' convertedIndex - 1)' Pane.Contents.Count - 1);                    if (contentIndex == -1 || !samePane)                      pane.SetContentIndex(Content' contentIndex);                  else                  {                      DockContentCollection contents = pane.Contents;                      int oldIndex = contents.IndexOf(Content);                      int newIndex = contentIndex;                      if (oldIndex < newIndex)                      {                          newIndex += 1;                          if (newIndex > contents.Count - 1)                              newIndex = -1;                      }                      pane.SetContentIndex(Content' newIndex);                  }              }              else              {                  DockPane paneFrom = DockPanel.Theme.Extender.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);                  INestedPanesContainer container = pane.NestedPanesContainer;                  if (dockStyle == DockStyle.Left)                      paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);                    paneFrom.DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  bool samePane = (Pane == pane);                  if (!samePane)                      Pane = pane;                    int visiblePanes = 0;                  int convertedIndex = 0;                  while (visiblePanes <= contentIndex && convertedIndex < Pane.Contents.Count)                  {                      DockContent window = Pane.Contents[convertedIndex] as DockContent;                      if (window != null && !window.IsHidden)                          ++visiblePanes;                        ++convertedIndex;                  }                    contentIndex = Math.Min(Math.Max(0' convertedIndex - 1)' Pane.Contents.Count - 1);                    if (contentIndex == -1 || !samePane)                      pane.SetContentIndex(Content' contentIndex);                  else                  {                      DockContentCollection contents = pane.Contents;                      int oldIndex = contents.IndexOf(Content);                      int newIndex = contentIndex;                      if (oldIndex < newIndex)                      {                          newIndex += 1;                          if (newIndex > contents.Count - 1)                              newIndex = -1;                      }                      pane.SetContentIndex(Content' newIndex);                  }              }              else              {                  DockPane paneFrom = DockPanel.Theme.Extender.DockPaneFactory.CreateDockPane(Content' pane.DockState' true);                  INestedPanesContainer container = pane.NestedPanesContainer;                  if (dockStyle == DockStyle.Left)                      paneFrom.DockTo(container' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      paneFrom.DockTo(container' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      paneFrom.DockTo(container' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      paneFrom.DockTo(container' pane' DockAlignment.Bottom' 0.5);                    paneFrom.DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,DefaultDockOutline,The following statement contains a magic number: DragForm.Opacity = 0.5;
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                  {                      Rectangle rect = pane.DisplayingRectangle;                      if (dock == DockStyle.Right)                          rect.X += rect.Width / 2;                      if (dock == DockStyle.Bottom)                          rect.Y += rect.Height / 2;                      if (dock == DockStyle.Left || dock == DockStyle.Right)                          rect.Width -= rect.Width / 2;                      if (dock == DockStyle.Top || dock == DockStyle.Bottom)                          rect.Height -= rect.Height / 2;                      rect.Location = pane.PointToScreen(rect.Location);                        SetDragForm(rect);                  }                  else if (contentIndex == -1)                  {                      Rectangle rect = pane.DisplayingRectangle;                      rect.Location = pane.PointToScreen(rect.Location);                      SetDragForm(rect);                  }                  else                  {                      using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                      {                          RectangleF rectF = path.GetBounds();                          Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                          using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                          {                              path.Transform(matrix);                          }                          Region region = new Region(path);                          SetDragForm(rect' region);                      }                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                  {                      Rectangle rect = pane.DisplayingRectangle;                      if (dock == DockStyle.Right)                          rect.X += rect.Width / 2;                      if (dock == DockStyle.Bottom)                          rect.Y += rect.Height / 2;                      if (dock == DockStyle.Left || dock == DockStyle.Right)                          rect.Width -= rect.Width / 2;                      if (dock == DockStyle.Top || dock == DockStyle.Bottom)                          rect.Height -= rect.Height / 2;                      rect.Location = pane.PointToScreen(rect.Location);                        SetDragForm(rect);                  }                  else if (contentIndex == -1)                  {                      Rectangle rect = pane.DisplayingRectangle;                      rect.Location = pane.PointToScreen(rect.Location);                      SetDragForm(rect);                  }                  else                  {                      using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                      {                          RectangleF rectF = path.GetBounds();                          Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                          using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                          {                              path.Transform(matrix);                          }                          Region region = new Region(path);                          SetDragForm(rect' region);                      }                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                  {                      Rectangle rect = pane.DisplayingRectangle;                      if (dock == DockStyle.Right)                          rect.X += rect.Width / 2;                      if (dock == DockStyle.Bottom)                          rect.Y += rect.Height / 2;                      if (dock == DockStyle.Left || dock == DockStyle.Right)                          rect.Width -= rect.Width / 2;                      if (dock == DockStyle.Top || dock == DockStyle.Bottom)                          rect.Height -= rect.Height / 2;                      rect.Location = pane.PointToScreen(rect.Location);                        SetDragForm(rect);                  }                  else if (contentIndex == -1)                  {                      Rectangle rect = pane.DisplayingRectangle;                      rect.Location = pane.PointToScreen(rect.Location);                      SetDragForm(rect);                  }                  else                  {                      using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                      {                          RectangleF rectF = path.GetBounds();                          Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                          using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                          {                              path.Transform(matrix);                          }                          Region region = new Region(path);                          SetDragForm(rect' region);                      }                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DefaultDockOutline,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,SetOutline,The following statement contains a magic number: if (dock != DockStyle.Fill)                  {                      Rectangle rect = pane.DisplayingRectangle;                      if (dock == DockStyle.Right)                          rect.X += rect.Width / 2;                      if (dock == DockStyle.Bottom)                          rect.Y += rect.Height / 2;                      if (dock == DockStyle.Left || dock == DockStyle.Right)                          rect.Width -= rect.Width / 2;                      if (dock == DockStyle.Top || dock == DockStyle.Bottom)                          rect.Height -= rect.Height / 2;                      rect.Location = pane.PointToScreen(rect.Location);                        SetDragForm(rect);                  }                  else if (contentIndex == -1)                  {                      Rectangle rect = pane.DisplayingRectangle;                      rect.Location = pane.PointToScreen(rect.Location);                      SetDragForm(rect);                  }                  else                  {                      using (GraphicsPath path = pane.TabStripControl.GetOutline(contentIndex))                      {                          RectangleF rectF = path.GetBounds();                          Rectangle rect = new Rectangle((int)rectF.X' (int)rectF.Y' (int)rectF.Width' (int)rectF.Height);                          using (Matrix matrix = new Matrix(rect' new Point[] { new Point(0' 0)' new Point(rect.Width' 0)' new Point(0' rect.Height) }))                          {                              path.Transform(matrix);                          }                          Region region = new Region(path);                          SetDragForm(rect' region);                      }                  }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockLeft))                      {                          PanelLeft.Location = new Point(rectDockArea.X + _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2);                          PanelLeft.Visible = true;                          region.Union(PanelLeft.Bounds);                      }                      else                          PanelLeft.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockRight))                      {                          PanelRight.Location = new Point(rectDockArea.X + rectDockArea.Width - PanelRight.Width - _PanelIndicatorMargin' rectDockArea.Y + (rectDockArea.Height - PanelRight.Height) / 2);                          PanelRight.Visible = true;                          region.Union(PanelRight.Bounds);                      }                      else                          PanelRight.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockTop))                      {                          PanelTop.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelTop.Width) / 2' rectDockArea.Y + _PanelIndicatorMargin);                          PanelTop.Visible = true;                          region.Union(PanelTop.Bounds);                      }                      else                          PanelTop.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.DockBottom))                      {                          PanelBottom.Location = new Point(rectDockArea.X + (rectDockArea.Width - PanelBottom.Width) / 2' rectDockArea.Y + rectDockArea.Height - PanelBottom.Height - _PanelIndicatorMargin);                          PanelBottom.Visible = true;                          region.Union(PanelBottom.Bounds);                      }                      else                          PanelBottom.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.Document))                      {                          Rectangle rectDocumentWindow = RectangleToClient(DockPanel.RectangleToScreen(DockPanel.DocumentWindowBounds));                          PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2);                          PanelFill.Visible = true;                          region.Union(PanelFill.Bounds);                      }                      else                          PanelFill.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPanelIndicatorVisible(DockState.Document))                      {                          Rectangle rectDocumentWindow = RectangleToClient(DockPanel.RectangleToScreen(DockPanel.DocumentWindowBounds));                          PanelFill.Location = new Point(rectDocumentWindow.X + (rectDocumentWindow.Width - PanelFill.Width) / 2' rectDocumentWindow.Y + (rectDocumentWindow.Height - PanelFill.Height) / 2);                          PanelFill.Visible = true;                          region.Union(PanelFill.Bounds);                      }                      else                          PanelFill.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPaneDiamondVisible())                      {                          Rectangle rect = RectangleToClient(DockPane.RectangleToScreen(DockPane.ClientRectangle));                          PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2);                          PaneDiamond.Visible = true;                          using (GraphicsPath graphicsPath = PaneDiamond.DisplayingGraphicsPath.Clone() as GraphicsPath)                          {                              Point[] pts =                                  {                                      new Point(PaneDiamond.Left' PaneDiamond.Top)'                                      new Point(PaneDiamond.Right' PaneDiamond.Top)'                                      new Point(PaneDiamond.Left' PaneDiamond.Bottom)                                  };                              using (Matrix matrix = new Matrix(PaneDiamond.ClientRectangle' pts))                              {                                  graphicsPath.Transform(matrix);                              }                                region.Union(graphicsPath);                          }                      }                      else                          PaneDiamond.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,DockIndicator,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.DockDragHandler.cs,RefreshChanges,The following statement contains a magic number: if (ShouldPaneDiamondVisible())                      {                          Rectangle rect = RectangleToClient(DockPane.RectangleToScreen(DockPane.ClientRectangle));                          PaneDiamond.Location = new Point(rect.Left + (rect.Width - PaneDiamond.Width) / 2' rect.Top + (rect.Height - PaneDiamond.Height) / 2);                          PaneDiamond.Visible = true;                          using (GraphicsPath graphicsPath = PaneDiamond.DisplayingGraphicsPath.Clone() as GraphicsPath)                          {                              Point[] pts =                                  {                                      new Point(PaneDiamond.Left' PaneDiamond.Top)'                                      new Point(PaneDiamond.Right' PaneDiamond.Top)'                                      new Point(PaneDiamond.Left' PaneDiamond.Bottom)                                  };                              using (Matrix matrix = new Matrix(PaneDiamond.ClientRectangle' pts))                              {                                  graphicsPath.Transform(matrix);                              }                                region.Union(graphicsPath);                          }                      }                      else                          PaneDiamond.Visible = false;
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetStatus(null' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,NestedPaneCollection,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\NestedPaneCollection.cs,InternalRemove,The following statement contains a magic number: statusPane.SetDisplayingStatus(false' null' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' visibleState' false' Rectangle.Empty' null' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' DockState.Float' false' Rectangle.Empty' floatWindow.NestedPanes.GetDefaultPreviousPane(this)' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockPane,The following statement contains a magic number: InternalConstruct(content' DockState.Float' true' floatWindowBounds' null' DockAlignment.Right' 0.5' show);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: return DockTo(container' container.NestedPanes.GetDefaultPreviousPane(this)' alignment' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      if (c.DockHandler.DockState == DockState)                      {                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                      }                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      if (c.DockHandler.DockState == DockState)                      {                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                      }                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      if (c.DockHandler.DockState == DockState)                      {                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                      }                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPane,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPane.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  IDockContent activeContent = ActiveContent;                  for (int i = Contents.Count - 1; i >= 0; i--)                  {                      IDockContent c = Contents[i];                      if (c.DockHandler.DockState == DockState)                      {                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                      }                  }                  pane.ActiveContent = activeContent;              }              else              {                  if (dockStyle == DockStyle.Left)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Left' 0.5);                  else if (dockStyle == DockStyle.Right)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Right' 0.5);                  else if (dockStyle == DockStyle.Top)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Top' 0.5);                  else if (dockStyle == DockStyle.Bottom)                      DockTo(pane.NestedPanesContainer' pane' DockAlignment.Bottom' 0.5);                    DockState = pane.DockState;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPaneStripBase.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left)              {                  var dragSize = SystemInformation.DragSize;                  _dragBox = new Rectangle(new Point(e.X - (dragSize.Width / 2)'                                                  e.Y - (dragSize.Height / 2))' dragSize);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DockPaneStripBase,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPaneStripBase.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left)              {                  var dragSize = SystemInformation.DragSize;                  _dragBox = new Rectangle(new Point(e.X - (dragSize.Width / 2)'                                                  e.Y - (dragSize.Height / 2))' dragSize);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetOutline_Document,The following statement contains a magic number: rectTab.X -= rectTab.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: int x = rectTabStrip.X + rectTabStrip.Height / 2;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,CalculateTabs_Document,The following statement contains a magic number: if (!overflow)              {                  m_startDisplayingTab = 0;                  FirstDisplayingTab = 0;                  x = rectTabStrip.X + rectTabStrip.Height / 2;                  foreach (TabVS2005 tab in Tabs)                  {                      tab.TabX = x;                      x += tab.TabWidth;                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: int curveSize = 6;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (tab.Content == DockPane.ActiveContent || full || Tabs.IndexOf(tab) == FirstDisplayingTab)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Top' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right + rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Right + rect.Height / 2' rect.Bottom' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          // For some reason the next line draws a line that is not hidden like it is when drawing the tab strip on top.                          // It is not needed so it has been commented out.                          //GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left - rect.Height / 2' rect.Top);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Top' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left - rect.Height / 2' rect.Bottom);                          GraphicsPath.AddLine(rect.Left - rect.Height / 2' rect.Bottom' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }              // Draws the partial angle for non-active content              else              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2 + curveSize / 2' rect.Top + curveSize / 2);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Top' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Bottom - curveSize / 2);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2 - curveSize / 2' rect.Top + curveSize / 2);                      }                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (RightToLeft == RightToLeft.Yes)              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }                  else                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Right - rect.Height / 2 - curveSize / 2' rect.Top' rect.Left + curveSize / 2' rect.Top);                      GraphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  }              }              else              {                  if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                  {                      // Draws the bottom horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Bottom' rect.Right - curveSize / 2' rect.Bottom);                        // Drawing the rounded corner is not necessary. The path is automatically connected                      //GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom' curveSize' curveSize)' 90' -90);                  }                  else                  {                      // Draws the top horizontal line (short side)                      GraphicsPath.AddLine(rect.Left + rect.Height / 2 + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                        // Draws the rounded corner oppposite the angled side                      GraphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,GetTabOutline_Document,The following statement contains a magic number: if (Tabs.IndexOf(tab) != EndDisplayingTab &&                  (Tabs.IndexOf(tab) != Tabs.Count - 1 && Tabs[Tabs.IndexOf(tab) + 1].Content == DockPane.ActiveContent)                  && !full)              {                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Bottom - rect.Height / 2' rect.Left + rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Left' rect.Top + rect.Height / 2' rect.Left + rect.Height / 2' rect.Bottom);                      }                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                      {                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Bottom - rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Bottom - rect.Height / 2' rect.Right - rect.Height / 2' rect.Top);                      }                      else                      {                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Top + rect.Height / 2);                          GraphicsPath.AddLine(rect.Right' rect.Top + rect.Height / 2' rect.Right - rect.Height / 2' rect.Bottom);                      }                  }              }              else              {                  // Draw the vertical line opposite the angled side                  if (RightToLeft == RightToLeft.Yes)                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);                      else                          GraphicsPath.AddLine(rect.Left' rect.Top + curveSize / 2' rect.Left' rect.Bottom);                  }                  else                  {                      if (DockPane.DockPanel.DocumentTabStripLocation == DocumentTabStripLocation.Bottom)                          GraphicsPath.AddLine(rect.Right' rect.Bottom - curveSize / 2' rect.Right' rect.Top);                      else                          GraphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The following statement contains a magic number: var workingArea = Screen.GetWorkingArea(ButtonWindowList.PointToScreen(new Point(ButtonWindowList.Width / 2' ButtonWindowList.Height / 2)));
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005DockPaneStrip,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005DockPaneStrip.cs,WindowList_Click,The following statement contains a magic number: var workingArea = Screen.GetWorkingArea(ButtonWindowList.PointToScreen(new Point(ButtonWindowList.Width / 2' ButtonWindowList.Height / 2)));
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case (int)Win32.Msgs.WM_NCLBUTTONDOWN:                      {                          if (IsDisposed)                              return;                            uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION                          {                              Activate();                              m_dockPanel.BeginDrag(this);                          }                          else                              base.WndProc(ref m);                            return;                      }                  case (int)Win32.Msgs.WM_NCRBUTTONDOWN:                      {                          uint result = Win32Helper.IsRunningOnMono ? Win32Helper.HitTestCaption(this) : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2)	// HITTEST_CAPTION                          {                              DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                              if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                              {                                  theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                                  return;                              }                          }                            base.WndProc(ref m);                          return;                      }                  case (int)Win32.Msgs.WM_CLOSE:                      if (NestedPanes.Count == 0)                      {                          base.WndProc(ref m);                          return;                      }                      for (int i = NestedPanes.Count - 1; i >= 0; i--)                      {                          DockContentCollection contents = NestedPanes[i].Contents;                          for (int j = contents.Count - 1; j >= 0; j--)                          {                              IDockContent content = contents[j];                              if (content.DockHandler.DockState != DockState.Float)                                  continue;                                if (!content.DockHandler.CloseButton)                                  continue;                                if (content.DockHandler.HideOnClose)                                  content.DockHandler.Hide();                              else                                  content.DockHandler.Close();                          }                      }                      return;                  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK:                      {                          uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono                               ? Win32Helper.HitTestCaption(this)                              : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                            if (result != 2)	// HITTEST_CAPTION                          {                              base.WndProc(ref m);                              return;                          }                            DockPanel.SuspendLayout(true);                            // Restore to panel                          foreach (DockPane pane in NestedPanes)                          {                              if (pane.DockState != DockState.Float)                                  continue;                              pane.RestoreToPanel();                          }                              DockPanel.ResumeLayout(true' true);                          return;                      }                  case WM_CHECKDISPOSE:                      if (NestedPanes.Count == 0)                          Dispose();                      return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case (int)Win32.Msgs.WM_NCLBUTTONDOWN:                      {                          if (IsDisposed)                              return;                            uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION                          {                              Activate();                              m_dockPanel.BeginDrag(this);                          }                          else                              base.WndProc(ref m);                            return;                      }                  case (int)Win32.Msgs.WM_NCRBUTTONDOWN:                      {                          uint result = Win32Helper.IsRunningOnMono ? Win32Helper.HitTestCaption(this) : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2)	// HITTEST_CAPTION                          {                              DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                              if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                              {                                  theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                                  return;                              }                          }                            base.WndProc(ref m);                          return;                      }                  case (int)Win32.Msgs.WM_CLOSE:                      if (NestedPanes.Count == 0)                      {                          base.WndProc(ref m);                          return;                      }                      for (int i = NestedPanes.Count - 1; i >= 0; i--)                      {                          DockContentCollection contents = NestedPanes[i].Contents;                          for (int j = contents.Count - 1; j >= 0; j--)                          {                              IDockContent content = contents[j];                              if (content.DockHandler.DockState != DockState.Float)                                  continue;                                if (!content.DockHandler.CloseButton)                                  continue;                                if (content.DockHandler.HideOnClose)                                  content.DockHandler.Hide();                              else                                  content.DockHandler.Close();                          }                      }                      return;                  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK:                      {                          uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono                               ? Win32Helper.HitTestCaption(this)                              : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                            if (result != 2)	// HITTEST_CAPTION                          {                              base.WndProc(ref m);                              return;                          }                            DockPanel.SuspendLayout(true);                            // Restore to panel                          foreach (DockPane pane in NestedPanes)                          {                              if (pane.DockState != DockState.Float)                                  continue;                              pane.RestoreToPanel();                          }                              DockPanel.ResumeLayout(true' true);                          return;                      }                  case WM_CHECKDISPOSE:                      if (NestedPanes.Count == 0)                          Dispose();                      return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case (int)Win32.Msgs.WM_NCLBUTTONDOWN:                      {                          if (IsDisposed)                              return;                            uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION                          {                              Activate();                              m_dockPanel.BeginDrag(this);                          }                          else                              base.WndProc(ref m);                            return;                      }                  case (int)Win32.Msgs.WM_NCRBUTTONDOWN:                      {                          uint result = Win32Helper.IsRunningOnMono ? Win32Helper.HitTestCaption(this) : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2)	// HITTEST_CAPTION                          {                              DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                              if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                              {                                  theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                                  return;                              }                          }                            base.WndProc(ref m);                          return;                      }                  case (int)Win32.Msgs.WM_CLOSE:                      if (NestedPanes.Count == 0)                      {                          base.WndProc(ref m);                          return;                      }                      for (int i = NestedPanes.Count - 1; i >= 0; i--)                      {                          DockContentCollection contents = NestedPanes[i].Contents;                          for (int j = contents.Count - 1; j >= 0; j--)                          {                              IDockContent content = contents[j];                              if (content.DockHandler.DockState != DockState.Float)                                  continue;                                if (!content.DockHandler.CloseButton)                                  continue;                                if (content.DockHandler.HideOnClose)                                  content.DockHandler.Hide();                              else                                  content.DockHandler.Close();                          }                      }                      return;                  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK:                      {                          uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono                               ? Win32Helper.HitTestCaption(this)                              : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                            if (result != 2)	// HITTEST_CAPTION                          {                              base.WndProc(ref m);                              return;                          }                            DockPanel.SuspendLayout(true);                            // Restore to panel                          foreach (DockPane pane in NestedPanes)                          {                              if (pane.DockState != DockState.Float)                                  continue;                              pane.RestoreToPanel();                          }                              DockPanel.ResumeLayout(true' true);                          return;                      }                  case WM_CHECKDISPOSE:                      if (NestedPanes.Count == 0)                          Dispose();                      return;              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: if (dockStyle == DockStyle.Fill)              {                  for (int i = NestedPanes.Count - 1; i >= 0; i--)                  {                      DockPane paneFrom = NestedPanes[i];                      for (int j = paneFrom.Contents.Count - 1; j >= 0; j--)                      {                          IDockContent c = paneFrom.Contents[j];                          c.DockHandler.Pane = pane;                          if (contentIndex != -1)                              pane.SetContentIndex(c' contentIndex);                          c.DockHandler.Activate();                      }                  }              }              else              {                  DockAlignment alignment = DockAlignment.Left;                  if (dockStyle == DockStyle.Left)                      alignment = DockAlignment.Left;                  else if (dockStyle == DockStyle.Right)                      alignment = DockAlignment.Right;                  else if (dockStyle == DockStyle.Top)                      alignment = DockAlignment.Top;                  else if (dockStyle == DockStyle.Bottom)                      alignment = DockAlignment.Bottom;                    MergeNestedPanes(VisibleNestedPanes' pane.NestedPanesContainer.NestedPanes' pane' alignment' 0.5);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,DockTo,The following statement contains a magic number: MergeNestedPanes(VisibleNestedPanes' nestedPanesTo' prevPane' DockAlignment.Left' 0.5);
Magic Number,WeifenLuo.WinFormsUI.Docking,FocusManagerImpl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.FocusManager.cs,HookEventHandler,The following statement contains a magic number: Win32.Msgs msg = (Win32.Msgs)Marshal.ReadInt32(e.lParam' IntPtr.Size * 3);
Magic Number,WeifenLuo.WinFormsUI.Docking,FocusManagerImpl,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.FocusManager.cs,HookEventHandler,The following statement contains a magic number: if (msg == Win32.Msgs.WM_KILLFOCUS)                  {                      IntPtr wParam = Marshal.ReadIntPtr(e.lParam' IntPtr.Size * 2);                      DockPane pane = GetPaneFromHandle(wParam);                      if (pane == null)                          RefreshActiveWindow();                  }                  else if (msg == Win32.Msgs.WM_SETFOCUS || msg == Win32.Msgs.WM_MDIACTIVATE)                      RefreshActiveWindow();
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: int curveSize = 6;
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,DrawHelper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\DrawHelper.cs,GetRoundedCornerTab,The following statement contains a magic number: if (upCorner)              {                  graphicsPath.AddLine(rect.Left' rect.Bottom' rect.Left' rect.Top + curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Top' curveSize' curveSize)' 180' 90);                  graphicsPath.AddLine(rect.Left + curveSize / 2' rect.Top' rect.Right - curveSize / 2' rect.Top);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Top' curveSize' curveSize)' -90' 90);                  graphicsPath.AddLine(rect.Right' rect.Top + curveSize / 2' rect.Right' rect.Bottom);              }              else              {                  graphicsPath.AddLine(rect.Right' rect.Top' rect.Right' rect.Bottom - curveSize / 2);                  graphicsPath.AddArc(new Rectangle(rect.Right - curveSize' rect.Bottom - curveSize' curveSize' curveSize)' 0' 90);                  graphicsPath.AddLine(rect.Right - curveSize / 2' rect.Bottom' rect.Left + curveSize / 2' rect.Bottom);                  graphicsPath.AddArc(new Rectangle(rect.Left' rect.Bottom - curveSize' curveSize' curveSize)' 90' 90);                  graphicsPath.AddLine(rect.Left' rect.Bottom - curveSize / 2' rect.Left' rect.Top);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,Win32Helper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\Win32Helper.cs,MakeLong,The following statement contains a magic number: return (uint)((high << 16) + low);
Magic Number,WeifenLuo.WinFormsUI.Docking,Win32Helper,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\Helpers\Win32Helper.cs,HitTestCaption,The following statement contains a magic number: return captionRectangle.Contains(Control.MousePosition) ? (uint)2 : 0;
Magic Number,WeifenLuo.WinFormsUI.Docking,VS2005Theme,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VS2005Theme.cs,VS2005Theme,The following statement contains a magic number: Measures.SplitterSize = 4;
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled)              {                  bool isMenuDropDown = e.Item.Owner is MenuStrip;                  if (isMenuDropDown && e.Item.Pressed)                  {                      base.OnRenderMenuItemBackground(e);                  }                  else if (e.Item.Selected)                  {                      // Rect of item's content area.                      Rectangle contentRect = e.Item.ContentRectangle;                        // Fix item rect.                      Rectangle itemRect = isMenuDropDown                                               ? new Rectangle(                                                     contentRect.X + 2' contentRect.Y - 2'                                                     contentRect.Width - 5' contentRect.Height + 3)                                               : new Rectangle(                                                     contentRect.X' contentRect.Y - 1'                                                     contentRect.Width' contentRect.Height + 1);                        // Border pen and fill brush.                      Color pen = ColorTable.MenuItemBorder;                      Color brushBegin;                      Color brushEnd;                        if (isMenuDropDown)                      {                          brushBegin = ColorTable.MenuItemSelectedGradientBegin;                          brushEnd = ColorTable.MenuItemSelectedGradientEnd;                      }                      else                      {                          brushBegin = ColorTable.MenuItemSelected;                          brushEnd = Color.Empty;                      }                        DrawRectangle(e.Graphics' itemRect' brushBegin' brushEnd' pen' UseGlassOnMenuStrip);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled)              {                  bool isMenuDropDown = e.Item.Owner is MenuStrip;                  if (isMenuDropDown && e.Item.Pressed)                  {                      base.OnRenderMenuItemBackground(e);                  }                  else if (e.Item.Selected)                  {                      // Rect of item's content area.                      Rectangle contentRect = e.Item.ContentRectangle;                        // Fix item rect.                      Rectangle itemRect = isMenuDropDown                                               ? new Rectangle(                                                     contentRect.X + 2' contentRect.Y - 2'                                                     contentRect.Width - 5' contentRect.Height + 3)                                               : new Rectangle(                                                     contentRect.X' contentRect.Y - 1'                                                     contentRect.Width' contentRect.Height + 1);                        // Border pen and fill brush.                      Color pen = ColorTable.MenuItemBorder;                      Color brushBegin;                      Color brushEnd;                        if (isMenuDropDown)                      {                          brushBegin = ColorTable.MenuItemSelectedGradientBegin;                          brushEnd = ColorTable.MenuItemSelectedGradientEnd;                      }                      else                      {                          brushBegin = ColorTable.MenuItemSelected;                          brushEnd = Color.Empty;                      }                        DrawRectangle(e.Graphics' itemRect' brushBegin' brushEnd' pen' UseGlassOnMenuStrip);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled)              {                  bool isMenuDropDown = e.Item.Owner is MenuStrip;                  if (isMenuDropDown && e.Item.Pressed)                  {                      base.OnRenderMenuItemBackground(e);                  }                  else if (e.Item.Selected)                  {                      // Rect of item's content area.                      Rectangle contentRect = e.Item.ContentRectangle;                        // Fix item rect.                      Rectangle itemRect = isMenuDropDown                                               ? new Rectangle(                                                     contentRect.X + 2' contentRect.Y - 2'                                                     contentRect.Width - 5' contentRect.Height + 3)                                               : new Rectangle(                                                     contentRect.X' contentRect.Y - 1'                                                     contentRect.Width' contentRect.Height + 1);                        // Border pen and fill brush.                      Color pen = ColorTable.MenuItemBorder;                      Color brushBegin;                      Color brushEnd;                        if (isMenuDropDown)                      {                          brushBegin = ColorTable.MenuItemSelectedGradientBegin;                          brushEnd = ColorTable.MenuItemSelectedGradientEnd;                      }                      else                      {                          brushBegin = ColorTable.MenuItemSelected;                          brushEnd = Color.Empty;                      }                        DrawRectangle(e.Graphics' itemRect' brushBegin' brushEnd' pen' UseGlassOnMenuStrip);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderMenuItemBackground,The following statement contains a magic number: if (e.Item.Enabled)              {                  bool isMenuDropDown = e.Item.Owner is MenuStrip;                  if (isMenuDropDown && e.Item.Pressed)                  {                      base.OnRenderMenuItemBackground(e);                  }                  else if (e.Item.Selected)                  {                      // Rect of item's content area.                      Rectangle contentRect = e.Item.ContentRectangle;                        // Fix item rect.                      Rectangle itemRect = isMenuDropDown                                               ? new Rectangle(                                                     contentRect.X + 2' contentRect.Y - 2'                                                     contentRect.Width - 5' contentRect.Height + 3)                                               : new Rectangle(                                                     contentRect.X' contentRect.Y - 1'                                                     contentRect.Width' contentRect.Height + 1);                        // Border pen and fill brush.                      Color pen = ColorTable.MenuItemBorder;                      Color brushBegin;                      Color brushEnd;                        if (isMenuDropDown)                      {                          brushBegin = ColorTable.MenuItemSelectedGradientBegin;                          brushEnd = ColorTable.MenuItemSelectedGradientEnd;                      }                      else                      {                          brushBegin = ColorTable.MenuItemSelected;                          brushEnd = Color.Empty;                      }                        DrawRectangle(e.Graphics' itemRect' brushBegin' brushEnd' pen' UseGlassOnMenuStrip);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderStatusStripSizingGrip,The following statement contains a magic number: if (statusStrip != null)              {                  Rectangle sizeGripBounds = statusStrip.SizeGripBounds;                  if (!LayoutUtils.IsZeroWidthOrHeight(sizeGripBounds))                  {                      Rectangle[] whiteRectangles = new Rectangle[baseSizeGripRectangles.Length];                      Rectangle[] greyRectangles = new Rectangle[baseSizeGripRectangles.Length];                        for (int i = 0; i < baseSizeGripRectangles.Length; i++)                      {                          Rectangle baseRect = baseSizeGripRectangles[i];                          if (statusStrip.RightToLeft == RightToLeft.Yes)                          {                              baseRect.X = sizeGripBounds.Width - baseRect.X - baseRect.Width;                          }                          baseRect.Offset(sizeGripBounds.X' sizeGripBounds.Bottom - 12 /*height of pyramid (10px) + 2px padding from bottom*/);                          greyRectangles[i] = baseRect;                          if (statusStrip.RightToLeft == RightToLeft.Yes)                          {                              baseRect.Offset(1' -1);                          }                          else                          {                              baseRect.Offset(-1' -1);                          }                          whiteRectangles[i] = baseRect;                      }                        g.FillRectangles(_statusGripAccentBrush' whiteRectangles);                      g.FillRectangles(_statusGripBrush' greyRectangles);                  }              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: int numRectangles = (height - (GRIP_PADDING * 2)) / 4;
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: int numRectangles = (height - (GRIP_PADDING * 2)) / 4;
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderGrip,The following statement contains a magic number: if (numRectangles > 0)              {                  numRectangles++;                  // a MenuStrip starts its grip lower and has fewer grip rectangles.                  int yOffset = (toolStrip is MenuStrip) ? 2 : 0;                    Rectangle[] shadowRects = new Rectangle[numRectangles];                  int startY = GRIP_PADDING + 1 + yOffset;                  int startX = (width / 2);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i] = (toolStrip.Orientation == Orientation.Horizontal) ?                                          new Rectangle(startX' startY' 1' 1) :                                          new Rectangle(startY' startX' 1' 1);                        startY += 4;                  }                    // in RTL the GripLight rects should paint to the left of the GripDark rects.                  int xOffset = (rightToLeft) ? 2 : -2;                    if (rightToLeft)                  {                      // scoot over the rects in RTL so they fit within the bounds.                      for (int i = 0; i < numRectangles; i++)                      {                          shadowRects[i].Offset(-xOffset' 0);                      }                  }                    Brush b = _gripBrush;                  for (int i = 0; i < numRectangles - 1; i++)                  {                      g.FillRectangle(b' shadowRects[i]);                  }                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(xOffset' -2);                  }                    g.FillRectangles(b' shadowRects);                    for (int i = 0; i < numRectangles; i++)                  {                      shadowRects[i].Offset(-2 * xOffset' 0);                  }                    g.FillRectangles(b' shadowRects);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The following statement contains a magic number: RectangleF firstHalf = new RectangleF(                  rect.X' rect.Y'                   rect.Width' (float)rect.Height / 2);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The following statement contains a magic number: RectangleF secondHalf = new RectangleF(                  rect.X' rect.Y + (float)rect.Height / 2'                   rect.Width' (float)rect.Height / 2);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The following statement contains a magic number: RectangleF secondHalf = new RectangleF(                  rect.X' rect.Y + (float)rect.Height / 2'                   rect.Width' (float)rect.Height / 2);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,DrawRectangle,The following statement contains a magic number: if (glass)              {                  Brush glassBrush = new SolidBrush(Color.FromArgb(120' Color.White));                  graphics.FillRectangle(glassBrush' firstHalf);              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: if (radius >= (Math.Min(baseRect.Width' baseRect.Height)) / 2.0)                  return GetCapsule(baseRect);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 0' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Magic Number,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,GetCapsule,The following statement contains a magic number: try              {                  float diameter;                  if (baseRect.Width > baseRect.Height)                  {                      // return horizontal capsule                       diameter = baseRect.Height;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 90' 180);                      arc.X = baseRect.Right - diameter;                      path.AddArc(arc' 270' 180);                  }                  else if (baseRect.Width < baseRect.Height)                  {                      // return vertical capsule                       diameter = baseRect.Width;                      SizeF sizeF = new SizeF(diameter' diameter);                      arc = new RectangleF(baseRect.Location' sizeF);                      path.AddArc(arc' 180' 180);                      arc.Y = baseRect.Bottom - diameter;                      path.AddArc(arc' 0' 180);                  }                  else                  {                      // return circle                       path.AddEllipse(baseRect);                  }              }              catch              {                  path.AddEllipse(baseRect);              }              finally              {                  path.CloseFigure();              }
Duplicate Code,WeifenLuo.WinFormsUI.Docking,VisualStudioToolStripRenderer,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\VisualStudioToolStripRenderer.cs,OnRenderItemText,The method contains a code clone-set at the following line numbers (starting from the method definition): ((17' 43)' (47' 73))
Missing Default,WeifenLuo.WinFormsUI.Docking,MdiClientController,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockPanel.MdiClientController.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)                  {                      case (int)Win32.Msgs.WM_NCCALCSIZE:                          // If AutoScroll is set to false' hide the scrollbars when the control                          // calculates its non-client area.                          if (!AutoScroll)                          {                              if (!Win32Helper.IsRunningOnMono)                              {                                  NativeMethods.ShowScrollBar(m.HWnd' (int)Win32.ScrollBars.SB_BOTH' 0 /*false*/);                              }                          }                            break;                  }
Missing Default,WeifenLuo.WinFormsUI.Docking,DockContentHandler,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\DockContentHandler.cs,ResetAutoHidePortion,The following switch statement is missing a default case: switch (newState)              {                  case DockState.DockTop:                  case DockState.DockTopAutoHide:                      AutoHidePortion = DockPanel.DockTopPortion;                      break;                  case DockState.DockLeft:                  case DockState.DockLeftAutoHide:                      AutoHidePortion = DockPanel.DockLeftPortion;                      break;                  case DockState.DockBottom:                  case DockState.DockBottomAutoHide:                      AutoHidePortion = DockPanel.DockBottomPortion;                      break;                  case DockState.DockRight:                  case DockState.DockRightAutoHide:                      AutoHidePortion = DockPanel.DockRightPortion;                      break;              }
Missing Default,WeifenLuo.WinFormsUI.Docking,FloatWindow,C:\repos\dockpanelsuite_dockpanelsuite\WinFormsUI\Docking\FloatWindow.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case (int)Win32.Msgs.WM_NCLBUTTONDOWN:                      {                          if (IsDisposed)                              return;                            uint result = Win32Helper.IsRunningOnMono ? 0 : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2 && DockPanel.AllowEndUserDocking && this.AllowEndUserDocking)	// HITTEST_CAPTION                          {                              Activate();                              m_dockPanel.BeginDrag(this);                          }                          else                              base.WndProc(ref m);                            return;                      }                  case (int)Win32.Msgs.WM_NCRBUTTONDOWN:                      {                          uint result = Win32Helper.IsRunningOnMono ? Win32Helper.HitTestCaption(this) : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                          if (result == 2)	// HITTEST_CAPTION                          {                              DockPane theOnlyPane = (VisibleNestedPanes.Count == 1) ? VisibleNestedPanes[0] : null;                              if (theOnlyPane != null && theOnlyPane.ActiveContent != null)                              {                                  theOnlyPane.ShowTabPageContextMenu(this' PointToClient(Control.MousePosition));                                  return;                              }                          }                            base.WndProc(ref m);                          return;                      }                  case (int)Win32.Msgs.WM_CLOSE:                      if (NestedPanes.Count == 0)                      {                          base.WndProc(ref m);                          return;                      }                      for (int i = NestedPanes.Count - 1; i >= 0; i--)                      {                          DockContentCollection contents = NestedPanes[i].Contents;                          for (int j = contents.Count - 1; j >= 0; j--)                          {                              IDockContent content = contents[j];                              if (content.DockHandler.DockState != DockState.Float)                                  continue;                                if (!content.DockHandler.CloseButton)                                  continue;                                if (content.DockHandler.HideOnClose)                                  content.DockHandler.Hide();                              else                                  content.DockHandler.Close();                          }                      }                      return;                  case (int)Win32.Msgs.WM_NCLBUTTONDBLCLK:                      {                          uint result = !DoubleClickTitleBarToDock || Win32Helper.IsRunningOnMono                               ? Win32Helper.HitTestCaption(this)                              : NativeMethods.SendMessage(this.Handle' (int)Win32.Msgs.WM_NCHITTEST' 0' (uint)m.LParam);                            if (result != 2)	// HITTEST_CAPTION                          {                              base.WndProc(ref m);                              return;                          }                            DockPanel.SuspendLayout(true);                            // Restore to panel                          foreach (DockPane pane in NestedPanes)                          {                              if (pane.DockState != DockState.Float)                                  continue;                              pane.RestoreToPanel();                          }                              DockPanel.ResumeLayout(true' true);                          return;                      }                  case WM_CHECKDISPOSE:                      if (NestedPanes.Count == 0)                          Dispose();                      return;              }
