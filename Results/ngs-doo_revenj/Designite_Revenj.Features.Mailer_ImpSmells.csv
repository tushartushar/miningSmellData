Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Revenj.Features.Mailer.Serialization,SerializableMailMessage,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\Serialization\SerializableMailMessage.cs,SerializableMailMessage,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Features.Mailer.Serialization,SerializableMailMessage,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\Serialization\SerializableMailMessage.cs,GetMailMessage,Cyclomatic complexity of the method is 9
Long Statement,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The length of the statement  "				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() }; " is 130.
Empty Catch Block,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,QueueProcessor,The method has an empty catch block.
Empty Catch Block,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The method has an empty catch block.
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,QueueProcessor,The following statement contains a magic number: if (!int.TryParse(ConfigurationManager.AppSettings["MailBufferTimeout"]' out bt))  				bt = 30;
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,QueueProcessor,The following statement contains a magic number: if (!int.TryParse(ConfigurationManager.AppSettings["MailBufferCount"]' out BufferCount))  				BufferCount = 10;  			else if (BufferCount < 1)  				BufferCount = 1;
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,Start,The following statement contains a magic number: TraceSource.TraceEvent(TraceEventType.Start' 1011);
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,Stop,The following statement contains a magic number: TraceSource.TraceEvent(TraceEventType.Stop' 1011);
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The following statement contains a magic number: try  			{  				bool shouldRetry;  				lock (sync)  				{  					var notSent = Repository.Query(new NotSentSpecification()).ToList();  					if (notSent.Count > 0)  					{  						TraceSource.TraceEvent(  							TraceEventType.Verbose'  							1011'  							"Processing mail queue items ({0}): {1}"'  							notSent.Count'  							string.Join("' "' notSent.Select(it => it.URI)));  					}  					else TraceSource.TraceEvent(TraceEventType.Verbose' 1011' "Mail queue empty");  					shouldRetry = notSent.Any(it => !MailService.TrySend(it.URI));  				}  				if (shouldRetry)  					for (int i = 0; i < 10; i++)  					{  						if (!IsAlive)  							break;  						Thread.Sleep(TimeSpan.FromSeconds(6));  					}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 1011' "{0}"' ex);  				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() };  				try { Revenj.Features.Mailer.MailService.SendNow(mm); }  				catch (Exception sendEx)  				{  					mm.Body += Environment.NewLine + sendEx.ToString();  					try { MailService.TrySend(MailService.Queue(mm)); }  					catch { }  				}  				Stop();  			}
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The following statement contains a magic number: try  			{  				bool shouldRetry;  				lock (sync)  				{  					var notSent = Repository.Query(new NotSentSpecification()).ToList();  					if (notSent.Count > 0)  					{  						TraceSource.TraceEvent(  							TraceEventType.Verbose'  							1011'  							"Processing mail queue items ({0}): {1}"'  							notSent.Count'  							string.Join("' "' notSent.Select(it => it.URI)));  					}  					else TraceSource.TraceEvent(TraceEventType.Verbose' 1011' "Mail queue empty");  					shouldRetry = notSent.Any(it => !MailService.TrySend(it.URI));  				}  				if (shouldRetry)  					for (int i = 0; i < 10; i++)  					{  						if (!IsAlive)  							break;  						Thread.Sleep(TimeSpan.FromSeconds(6));  					}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 1011' "{0}"' ex);  				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() };  				try { Revenj.Features.Mailer.MailService.SendNow(mm); }  				catch (Exception sendEx)  				{  					mm.Body += Environment.NewLine + sendEx.ToString();  					try { MailService.TrySend(MailService.Queue(mm)); }  					catch { }  				}  				Stop();  			}
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The following statement contains a magic number: try  			{  				bool shouldRetry;  				lock (sync)  				{  					var notSent = Repository.Query(new NotSentSpecification()).ToList();  					if (notSent.Count > 0)  					{  						TraceSource.TraceEvent(  							TraceEventType.Verbose'  							1011'  							"Processing mail queue items ({0}): {1}"'  							notSent.Count'  							string.Join("' "' notSent.Select(it => it.URI)));  					}  					else TraceSource.TraceEvent(TraceEventType.Verbose' 1011' "Mail queue empty");  					shouldRetry = notSent.Any(it => !MailService.TrySend(it.URI));  				}  				if (shouldRetry)  					for (int i = 0; i < 10; i++)  					{  						if (!IsAlive)  							break;  						Thread.Sleep(TimeSpan.FromSeconds(6));  					}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 1011' "{0}"' ex);  				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() };  				try { Revenj.Features.Mailer.MailService.SendNow(mm); }  				catch (Exception sendEx)  				{  					mm.Body += Environment.NewLine + sendEx.ToString();  					try { MailService.TrySend(MailService.Queue(mm)); }  					catch { }  				}  				Stop();  			}
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The following statement contains a magic number: try  			{  				bool shouldRetry;  				lock (sync)  				{  					var notSent = Repository.Query(new NotSentSpecification()).ToList();  					if (notSent.Count > 0)  					{  						TraceSource.TraceEvent(  							TraceEventType.Verbose'  							1011'  							"Processing mail queue items ({0}): {1}"'  							notSent.Count'  							string.Join("' "' notSent.Select(it => it.URI)));  					}  					else TraceSource.TraceEvent(TraceEventType.Verbose' 1011' "Mail queue empty");  					shouldRetry = notSent.Any(it => !MailService.TrySend(it.URI));  				}  				if (shouldRetry)  					for (int i = 0; i < 10; i++)  					{  						if (!IsAlive)  							break;  						Thread.Sleep(TimeSpan.FromSeconds(6));  					}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 1011' "{0}"' ex);  				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() };  				try { Revenj.Features.Mailer.MailService.SendNow(mm); }  				catch (Exception sendEx)  				{  					mm.Body += Environment.NewLine + sendEx.ToString();  					try { MailService.TrySend(MailService.Queue(mm)); }  					catch { }  				}  				Stop();  			}
Magic Number,Revenj.Features.Mailer,QueueProcessor,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\QueueProcessor.cs,ProcessAll,The following statement contains a magic number: try  			{  				bool shouldRetry;  				lock (sync)  				{  					var notSent = Repository.Query(new NotSentSpecification()).ToList();  					if (notSent.Count > 0)  					{  						TraceSource.TraceEvent(  							TraceEventType.Verbose'  							1011'  							"Processing mail queue items ({0}): {1}"'  							notSent.Count'  							string.Join("' "' notSent.Select(it => it.URI)));  					}  					else TraceSource.TraceEvent(TraceEventType.Verbose' 1011' "Mail queue empty");  					shouldRetry = notSent.Any(it => !MailService.TrySend(it.URI));  				}  				if (shouldRetry)  					for (int i = 0; i < 10; i++)  					{  						if (!IsAlive)  							break;  						Thread.Sleep(TimeSpan.FromSeconds(6));  					}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 1011' "{0}"' ex);  				var mm = new System.Net.Mail.MailMessage(FromEmail' ToAdminEmail) { Subject = "Fatal error sending email"' Body = ex.ToString() };  				try { Revenj.Features.Mailer.MailService.SendNow(mm); }  				catch (Exception sendEx)  				{  					mm.Body += Environment.NewLine + sendEx.ToString();  					try { MailService.TrySend(MailService.Queue(mm)); }  					catch { }  				}  				Stop();  			}
Magic Number,Revenj.Features.Mailer,MailService,C:\repos\ngs-doo_revenj\csharp\Features\Revenj.Features.Mailer\MailService.cs,MailService,The following statement contains a magic number: if (!int.TryParse(ConfigurationManager.AppSettings["SmtpPort"]' out SmtpPort))  				SmtpPort = 25;
