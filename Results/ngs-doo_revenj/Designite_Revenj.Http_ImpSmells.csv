Implementation smell,Namespace,Class,File,Method,Description
Long Method,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The method has 132 lines of code.
Long Method,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The method has 143 lines of code.
Complex Method,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,Cyclomatic complexity of the method is 10
Complex Method,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,Cyclomatic complexity of the method is 10
Complex Method,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,HttpSocketServer,Cyclomatic complexity of the method is 14
Complex Method,Revenj.Http,RouteMatch,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteMatch.cs,CreateTemplateMatch,Cyclomatic complexity of the method is 10
Complex Method,Revenj.Http,Routes,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\Routes.cs,Routes,Cyclomatic complexity of the method is 16
Complex Method,Revenj.Http,UriPattern,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\UriPattern.cs,DynamicExtractMatch,Cyclomatic complexity of the method is 8
Long Parameter List,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,ProcessAllMessages,The method has 5 parameters. Parameters: request' ctx' principal' resetEvent' canReschedule
Long Parameter List,Revenj.Http,ThreadArgs,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,ThreadArgs,The method has 6 parameters. Parameters: request' context' resetEvent' auth' route' match
Long Parameter List,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The method has 7 parameters. Parameters: service' template' instance' isAsync' method' locator' serialization
Long Parameter List,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,Deserialize,The method has 5 parameters. Parameters: serialization' input' target' contentType' context
Long Parameter List,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,Serialize,The method has 5 parameters. Parameters: serialization' request' response' result' outputStream
Long Parameter List,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,Handle,The method has 5 parameters. Parameters: args' request' response' inputStream' outputStream
Long Identifier,Revenj.Http,UriPattern,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\UriPattern.cs,,The length of the parameter RegexMetaCharactersReplacements is 31.
Long Statement,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The length of the statement  "						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName); " is 161.
Complex Conditional,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The conditional expression  "buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T'"  is complex.
Complex Conditional,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,IsSamePrincipal,The conditional expression  "left.Identity != null && right.Identity != null  				&& left.Identity.Name == string.Empty  				&& right.Identity.Name == string.Empty"  is complex.
Complex Conditional,Revenj.Http,Routes,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\Routes.cs,Routes,The conditional expression  "t.IsClass && !t.IsAbstract && (t.IsPublic || t.IsNestedPublic)"  is complex.
Empty Catch Block,Revenj.Http,HttpListenerContex,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerContex.cs,ToString,The method has an empty catch block.
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,Run,The following statement contains a magic number: try  			{  				Listener.Start();  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				ThreadPool.SetMinThreads(32 + Environment.ProcessorCount * 3' 32 + Environment.ProcessorCount * 3);  				Console.WriteLine("Server running on:");  				foreach (var url in prefixes)  					Console.WriteLine(url);  				while (true)  				{  					try  					{  						var context = Listener.GetContext();  						ThreadPool.QueueUserWorkItem(ProcessMessageThread' context);  						context = null;  					}  					catch (HttpListenerException ex)  					{  						Console.WriteLine(ex.ToString());  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (HttpListenerException ex)  			{  				if (ex.Message == "Access is denied")  				{  					Console.WriteLine("Unable to start listener on specified port. Change port or grant access to it.");  					if (prefixes.Length == 1)  						Console.WriteLine("Permission can be allowed with: netsh http add urlacl url=" + prefixes[0] + " user=" + Environment.MachineName + "\\" + Environment.UserName);  					else  						Console.WriteLine("Use 'netsh http add urlacl' to give access permission");  				}  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Listener.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,ProcessMessageThread,The following statement contains a magic number: try  			{  				RouteHandler route;  				var routeMatch = Routes.Find(request.HttpMethod' request.RawUrl' request.Url.AbsolutePath' out route);  				if (routeMatch != null)  				{  					var match = routeMatch.Value;  					var auth = Authentication.TryAuthorize(context.Request.Headers["Authorization"]' context.Request.RawUrl' route);  					if (auth.Principal != null)  					{  						var ctx = new HttpListenerContex(request' response' match' auth.Principal);  						ThreadContext.Request = ctx;  						ThreadContext.Response = ctx;  						Thread.CurrentPrincipal = auth.Principal;  						using (var stream = route.Handle(match.OrderedArgs' ctx' ctx' context.Request.InputStream' LocalStream.Value))  						{  							var cms = stream as ChunkedMemoryStream;  							if (cms != null)  							{  								response.ContentLength64 = cms.Length;  								cms.CopyTo(response.OutputStream);  							}  							else if (stream != null)  							{  								if (stream.CanSeek)  									response.ContentLength64 = stream.Length;  								stream.CopyTo(response.OutputStream);  							}  							else  							{  								response.ContentType = null;  								response.ContentLength64 = 0;  							}  						}  					}  					else if (auth.SendAuthenticate)  					{  						context.Response.AddHeader("WWW-Authenticate"' MissingBasicAuth);  						ReturnError(response' (int)auth.ResponseCode' auth.Error);  					}  					else ReturnError(response' (int)auth.ResponseCode' auth.Error);  				}  				else  				{  					var unknownRoute = "Unknown route " + request.RawUrl + " on method " + request.HttpMethod;  					ReturnError(response' 404' unknownRoute);  				}  			}  			catch (SecurityException sex)  			{  				ReturnError(response' (int)HttpStatusCode.Forbidden' sex.Message);  			}  			catch (ActionNotSupportedException anse)  			{  				ReturnError(response' 404' anse.Message);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				ReturnError(response' 500' ex.Message);  			}  			finally  			{  				response.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,ProcessMessageThread,The following statement contains a magic number: try  			{  				RouteHandler route;  				var routeMatch = Routes.Find(request.HttpMethod' request.RawUrl' request.Url.AbsolutePath' out route);  				if (routeMatch != null)  				{  					var match = routeMatch.Value;  					var auth = Authentication.TryAuthorize(context.Request.Headers["Authorization"]' context.Request.RawUrl' route);  					if (auth.Principal != null)  					{  						var ctx = new HttpListenerContex(request' response' match' auth.Principal);  						ThreadContext.Request = ctx;  						ThreadContext.Response = ctx;  						Thread.CurrentPrincipal = auth.Principal;  						using (var stream = route.Handle(match.OrderedArgs' ctx' ctx' context.Request.InputStream' LocalStream.Value))  						{  							var cms = stream as ChunkedMemoryStream;  							if (cms != null)  							{  								response.ContentLength64 = cms.Length;  								cms.CopyTo(response.OutputStream);  							}  							else if (stream != null)  							{  								if (stream.CanSeek)  									response.ContentLength64 = stream.Length;  								stream.CopyTo(response.OutputStream);  							}  							else  							{  								response.ContentType = null;  								response.ContentLength64 = 0;  							}  						}  					}  					else if (auth.SendAuthenticate)  					{  						context.Response.AddHeader("WWW-Authenticate"' MissingBasicAuth);  						ReturnError(response' (int)auth.ResponseCode' auth.Error);  					}  					else ReturnError(response' (int)auth.ResponseCode' auth.Error);  				}  				else  				{  					var unknownRoute = "Unknown route " + request.RawUrl + " on method " + request.HttpMethod;  					ReturnError(response' 404' unknownRoute);  				}  			}  			catch (SecurityException sex)  			{  				ReturnError(response' (int)HttpStatusCode.Forbidden' sex.Message);  			}  			catch (ActionNotSupportedException anse)  			{  				ReturnError(response' 404' anse.Message);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				ReturnError(response' 500' ex.Message);  			}  			finally  			{  				response.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,ProcessMessageThread,The following statement contains a magic number: try  			{  				RouteHandler route;  				var routeMatch = Routes.Find(request.HttpMethod' request.RawUrl' request.Url.AbsolutePath' out route);  				if (routeMatch != null)  				{  					var match = routeMatch.Value;  					var auth = Authentication.TryAuthorize(context.Request.Headers["Authorization"]' context.Request.RawUrl' route);  					if (auth.Principal != null)  					{  						var ctx = new HttpListenerContex(request' response' match' auth.Principal);  						ThreadContext.Request = ctx;  						ThreadContext.Response = ctx;  						Thread.CurrentPrincipal = auth.Principal;  						using (var stream = route.Handle(match.OrderedArgs' ctx' ctx' context.Request.InputStream' LocalStream.Value))  						{  							var cms = stream as ChunkedMemoryStream;  							if (cms != null)  							{  								response.ContentLength64 = cms.Length;  								cms.CopyTo(response.OutputStream);  							}  							else if (stream != null)  							{  								if (stream.CanSeek)  									response.ContentLength64 = stream.Length;  								stream.CopyTo(response.OutputStream);  							}  							else  							{  								response.ContentType = null;  								response.ContentLength64 = 0;  							}  						}  					}  					else if (auth.SendAuthenticate)  					{  						context.Response.AddHeader("WWW-Authenticate"' MissingBasicAuth);  						ReturnError(response' (int)auth.ResponseCode' auth.Error);  					}  					else ReturnError(response' (int)auth.ResponseCode' auth.Error);  				}  				else  				{  					var unknownRoute = "Unknown route " + request.RawUrl + " on method " + request.HttpMethod;  					ReturnError(response' 404' unknownRoute);  				}  			}  			catch (SecurityException sex)  			{  				ReturnError(response' (int)HttpStatusCode.Forbidden' sex.Message);  			}  			catch (ActionNotSupportedException anse)  			{  				ReturnError(response' 404' anse.Message);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				ReturnError(response' 500' ex.Message);  			}  			finally  			{  				response.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,ProcessMessageThread,The following statement contains a magic number: try  			{  				RouteHandler route;  				var routeMatch = Routes.Find(request.HttpMethod' request.RawUrl' request.Url.AbsolutePath' out route);  				if (routeMatch != null)  				{  					var match = routeMatch.Value;  					var auth = Authentication.TryAuthorize(context.Request.Headers["Authorization"]' context.Request.RawUrl' route);  					if (auth.Principal != null)  					{  						var ctx = new HttpListenerContex(request' response' match' auth.Principal);  						ThreadContext.Request = ctx;  						ThreadContext.Response = ctx;  						Thread.CurrentPrincipal = auth.Principal;  						using (var stream = route.Handle(match.OrderedArgs' ctx' ctx' context.Request.InputStream' LocalStream.Value))  						{  							var cms = stream as ChunkedMemoryStream;  							if (cms != null)  							{  								response.ContentLength64 = cms.Length;  								cms.CopyTo(response.OutputStream);  							}  							else if (stream != null)  							{  								if (stream.CanSeek)  									response.ContentLength64 = stream.Length;  								stream.CopyTo(response.OutputStream);  							}  							else  							{  								response.ContentType = null;  								response.ContentLength64 = 0;  							}  						}  					}  					else if (auth.SendAuthenticate)  					{  						context.Response.AddHeader("WWW-Authenticate"' MissingBasicAuth);  						ReturnError(response' (int)auth.ResponseCode' auth.Error);  					}  					else ReturnError(response' (int)auth.ResponseCode' auth.Error);  				}  				else  				{  					var unknownRoute = "Unknown route " + request.RawUrl + " on method " + request.HttpMethod;  					ReturnError(response' 404' unknownRoute);  				}  			}  			catch (SecurityException sex)  			{  				ReturnError(response' (int)HttpStatusCode.Forbidden' sex.Message);  			}  			catch (ActionNotSupportedException anse)  			{  				ReturnError(response' 404' anse.Message);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				ReturnError(response' 500' ex.Message);  			}  			finally  			{  				response.Close();  			}
Magic Number,Revenj.Http,HttpListenerServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpListenerServer.cs,ReturnError,The following statement contains a magic number: try  			{  				response.StatusCode = status;  				response.ContentType = "text/plain; charset=\"utf-8\"";  				var bytes = Encoding.UTF8.GetBytes(message);  				response.ContentLength64 = bytes.Length;  				response.OutputStream.Write(bytes' 0' bytes.Length);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex);  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayNames[2] = ASCII.GetBytes("Wed");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayNames[3] = ASCII.GetBytes("Thu");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayNames[4] = ASCII.GetBytes("Fri");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayNames[5] = ASCII.GetBytes("Sat");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayNames[6] = ASCII.GetBytes("Sun");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[2] = ASCII.GetBytes("Mar");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[3] = ASCII.GetBytes("Apr");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[4] = ASCII.GetBytes("May");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[5] = ASCII.GetBytes("Jun");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[6] = ASCII.GetBytes("Jul");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[7] = ASCII.GetBytes("Aug");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[8] = ASCII.GetBytes("Sep");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[9] = ASCII.GetBytes("Oct");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[10] = ASCII.GetBytes("Nov");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: DateDayMonths[11] = ASCII.GetBytes("Dec");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: for (int i = 0; i < 10; i++)  				DateNumbers[i] = ASCII.GetBytes("0" + i);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: for (int i = 10; i < 100; i++)  				DateNumbers[i] = ASCII.GetBytes(i.ToString());
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,HttpSocketContext,The following statement contains a magic number: for (int i = 10; i < 100; i++)  				DateNumbers[i] = ASCII.GetBytes(i.ToString());
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: for (int i = 0; i < 406; i++)  				response[i] = ASCII.GetBytes(method + " " + (i + 100) + @"\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: for (int i = 0; i < 406; i++)  				response[i] = ASCII.GetBytes(method + " " + (i + 100) + @"\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[100] = ASCII.GetBytes(method + " 200 OK\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[101] = ASCII.GetBytes(method + " 201 Created\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[102] = ASCII.GetBytes(method + " 202 Accepted\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[104] = ASCII.GetBytes(method + " 204 No Content\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[202] = ASCII.GetBytes(method + " 302 Found\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[204] = ASCII.GetBytes(method + " 304 Not Modified\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[300] = ASCII.GetBytes(method + " 400 Bad Request\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[301] = ASCII.GetBytes(method + " 401 Unauthorized\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[303] = ASCII.GetBytes(method + " 403 Forbidden\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[304] = ASCII.GetBytes(method + " 404 Not Found\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[305] = ASCII.GetBytes(method + " 405 Method Not Allowed\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[306] = ASCII.GetBytes(method + " 406 Not Acceptable\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[308] = ASCII.GetBytes(method + " 408 Request Timeout\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[309] = ASCII.GetBytes(method + " 409 Conflict\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[311] = ASCII.GetBytes(method + " 411 Length Required\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[313] = ASCII.GetBytes(method + " 413 Request Entity Too Large\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[314] = ASCII.GetBytes(method + " 414 Request-URI Too Long\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[315] = ASCII.GetBytes(method + " 415 Unsupported Media Type\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[400] = ASCII.GetBytes(method + " 500 Internal Server Error\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[401] = ASCII.GetBytes(method + " 501 Not Implemented\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[403] = ASCII.GetBytes(method + " 503 Service Unavailable\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,SetupResponse,The following statement contains a magic number: response[405] = ASCII.GetBytes(method + " 505 HTTP Version Not Supported\r\n");
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadUntil,The following statement contains a magic number: do  			{  				for (int i = position; i < totalBytes; i++)  				{  					if (InputTemp[i] == match)  					{  						positionInTmp = i;  						return i;  					}  				}  				position = totalBytes;  				SocketError errorCode;  				var size = socket.Receive(InputTemp' totalBytes' InputTemp.Length - totalBytes' SocketFlags.None' out errorCode);  				if (errorCode == SocketError.Success && size > 0)  					totalBytes += size;  				else  				{  					if (retries == 0  						|| errorCode == SocketError.ConnectionReset  						|| errorCode == SocketError.ConnectionAborted) return -1;  					retries++;  				}  			} while (retries < 20 && totalBytes < InputTemp.Length);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadMethod,The following statement contains a magic number: if (len == 3)  			{  				if (buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T')  					return "GET";  				if (buf[0] == 'P' && buf[1] == 'U' && buf[2] == 'T')  					return "PUT";  			}  			else if (len == 4)  			{  				if (buf[0] == 'P' && buf[1] == 'O' && buf[2] == 'S' && buf[3] == 'T')  					return "POST";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 8] != 32)  			{  				HttpResponse = HttpResponse11;  				return null;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 8] != 32)  			{  				HttpResponse = HttpResponse11;  				return null;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 7] != (byte)'H') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 6] != (byte)'T') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 5] != (byte)'T') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 4] != (byte)'P') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 3] != (byte)'/') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (InputTemp[end - 2] != (byte)'1') return null;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (last == 48)  			{  				IsHttp10 = true;  				HttpResponse = HttpResponse10;  				return "HTTP/1.0";  			}  			else if (last == 49)  			{  				IsHttp10 = false;  				HttpResponse = HttpResponse11;  				return "HTTP/1.1";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadProtocol,The following statement contains a magic number: if (last == 48)  			{  				IsHttp10 = true;  				HttpResponse = HttpResponse10;  				return "HTTP/1.0";  			}  			else if (last == 49)  			{  				IsHttp10 = false;  				HttpResponse = HttpResponse11;  				return "HTTP/1.1";  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (methodEnd == -1)  			{  				match = null;  				route = null;  				if (!socket.Connected)  				{  					offsetInOutput = 0;  					return false;  				}  				else if (positionInTmp == 0)  				{  					if (offsetInOutput != 0)  					{  						socket.Send(OutputTemp' offsetInOutput' SocketFlags.None);  						offsetInOutput = 0;  						socket.Close();  						return false;  					}  					else return ReturnError(socket' 408);  				}  				else return ReturnError(socket' 505);  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (methodEnd == -1)  			{  				match = null;  				route = null;  				if (!socket.Connected)  				{  					offsetInOutput = 0;  					return false;  				}  				else if (positionInTmp == 0)  				{  					if (offsetInOutput != 0)  					{  						socket.Send(OutputTemp' offsetInOutput' SocketFlags.None);  						offsetInOutput = 0;  						socket.Close();  						return false;  					}  					else return ReturnError(socket' 408);  				}  				else return ReturnError(socket' 505);  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (rowEnd == -1 || rowEnd < 12)  			{  				match = null;  				route = null;  				return ReturnError(socket' 505);  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (rowEnd == -1 || rowEnd < 12)  			{  				match = null;  				route = null;  				return ReturnError(socket' 505);  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: HttpProtocolVersion = ReadProtocol(rowEnd - 2);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpProtocolVersion == null)  			{  				match = null;  				route = null;  				ReturnError(socket' 505' "Only HTTP/1.1 and HTTP/1.0 supported (partially)"' false);  				return false;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (route == null)  			{  				var unknownRoute = "Unknown route " + RawUrl + " on method " + HttpMethod;  				ReturnError(socket' 404' unknownRoute' false);  				return false;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: do  			{  				var start = rowEnd + 1;  				rowEnd = ReadUntil(socket' CR' start);  				if (rowEnd == start) break;  				else if (rowEnd == -1) return ReturnError(socket' 414);  				else  				{  					int i = start;  					for (; i < rowEnd; i++)  						if (InputTemp[i] == ':')  							break;  					if (i == rowEnd) return ReturnError(socket' 414);  					var nameBuf = TmpCharBuf;  					for (int x = start; x < i; x++)  						nameBuf[x - start] = Lower[InputTemp[x]];  					var name = KeyCache.Get(nameBuf' i - start);  					if (InputTemp[i + 1] == 32) i++;  					for (int x = i + 1; x < rowEnd; x++)  						nameBuf[x - i - 1] = (char)InputTemp[x];  					var value = ValueCache.Get(nameBuf' rowEnd - i - 1);  					if (RequestHeadersLength == RequestHeaders.Length)  					{  						var newHeaders = new HeaderPair[RequestHeaders.Length * 2];  						Array.Copy(RequestHeaders' newHeaders' RequestHeaders.Length);  						RequestHeaders = newHeaders;  					}  					RequestHeaders[RequestHeadersLength++] = new HeaderPair(name' value);  				}  				rowEnd++;  			} while (positionInTmp <= InputTemp.Length);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: do  			{  				var start = rowEnd + 1;  				rowEnd = ReadUntil(socket' CR' start);  				if (rowEnd == start) break;  				else if (rowEnd == -1) return ReturnError(socket' 414);  				else  				{  					int i = start;  					for (; i < rowEnd; i++)  						if (InputTemp[i] == ':')  							break;  					if (i == rowEnd) return ReturnError(socket' 414);  					var nameBuf = TmpCharBuf;  					for (int x = start; x < i; x++)  						nameBuf[x - start] = Lower[InputTemp[x]];  					var name = KeyCache.Get(nameBuf' i - start);  					if (InputTemp[i + 1] == 32) i++;  					for (int x = i + 1; x < rowEnd; x++)  						nameBuf[x - i - 1] = (char)InputTemp[x];  					var value = ValueCache.Get(nameBuf' rowEnd - i - 1);  					if (RequestHeadersLength == RequestHeaders.Length)  					{  						var newHeaders = new HeaderPair[RequestHeaders.Length * 2];  						Array.Copy(RequestHeaders' newHeaders' RequestHeaders.Length);  						RequestHeaders = newHeaders;  					}  					RequestHeaders[RequestHeadersLength++] = new HeaderPair(name' value);  				}  				rowEnd++;  			} while (positionInTmp <= InputTemp.Length);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: do  			{  				var start = rowEnd + 1;  				rowEnd = ReadUntil(socket' CR' start);  				if (rowEnd == start) break;  				else if (rowEnd == -1) return ReturnError(socket' 414);  				else  				{  					int i = start;  					for (; i < rowEnd; i++)  						if (InputTemp[i] == ':')  							break;  					if (i == rowEnd) return ReturnError(socket' 414);  					var nameBuf = TmpCharBuf;  					for (int x = start; x < i; x++)  						nameBuf[x - start] = Lower[InputTemp[x]];  					var name = KeyCache.Get(nameBuf' i - start);  					if (InputTemp[i + 1] == 32) i++;  					for (int x = i + 1; x < rowEnd; x++)  						nameBuf[x - i - 1] = (char)InputTemp[x];  					var value = ValueCache.Get(nameBuf' rowEnd - i - 1);  					if (RequestHeadersLength == RequestHeaders.Length)  					{  						var newHeaders = new HeaderPair[RequestHeaders.Length * 2];  						Array.Copy(RequestHeaders' newHeaders' RequestHeaders.Length);  						RequestHeaders = newHeaders;  					}  					RequestHeaders[RequestHeadersLength++] = new HeaderPair(name' value);  				}  				rowEnd++;  			} while (positionInTmp <= InputTemp.Length);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: do  			{  				var start = rowEnd + 1;  				rowEnd = ReadUntil(socket' CR' start);  				if (rowEnd == start) break;  				else if (rowEnd == -1) return ReturnError(socket' 414);  				else  				{  					int i = start;  					for (; i < rowEnd; i++)  						if (InputTemp[i] == ':')  							break;  					if (i == rowEnd) return ReturnError(socket' 414);  					var nameBuf = TmpCharBuf;  					for (int x = start; x < i; x++)  						nameBuf[x - start] = Lower[InputTemp[x]];  					var name = KeyCache.Get(nameBuf' i - start);  					if (InputTemp[i + 1] == 32) i++;  					for (int x = i + 1; x < rowEnd; x++)  						nameBuf[x - i - 1] = (char)InputTemp[x];  					var value = ValueCache.Get(nameBuf' rowEnd - i - 1);  					if (RequestHeadersLength == RequestHeaders.Length)  					{  						var newHeaders = new HeaderPair[RequestHeaders.Length * 2];  						Array.Copy(RequestHeaders' newHeaders' RequestHeaders.Length);  						RequestHeaders = newHeaders;  					}  					RequestHeaders[RequestHeadersLength++] = new HeaderPair(name' value);  				}  				rowEnd++;  			} while (positionInTmp <= InputTemp.Length);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: rowEnd += 2;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpMethod == "POST" || HttpMethod == "PUT")  			{  				int len = 0;  				var ct = GetRequestHeader("content-length");  				if (ct != null)  				{  					if (!int.TryParse(ct' out len)) return ReturnError(socket' 411);  					if (len > Limit) return ReturnError(socket' 413);  				}  				else return ReturnError(socket' 411);  				InputStream.Reset();  				var size = totalBytes - rowEnd;  				InputStream.Write(InputTemp' rowEnd' size);  				len -= size;  				var oldTimeout = socket.ReceiveTimeout;  				socket.ReceiveTimeout = 10000;  				while (len > 0)  				{  					size = socket.Receive(InputTemp' Math.Min(len' InputTemp.Length)' SocketFlags.None);  					if (size < 1) return ReturnError(socket' 408);  					InputStream.Write(InputTemp' 0' size);  					len -= size;  				}  				socket.ReceiveTimeout = oldTimeout;  				InputStream.Position = 0;  				rowEnd = totalBytes;  				totalBytes = 0;  			}  			else  			{  				Pipeline = rowEnd < totalBytes;  				if (Pipeline)  				{  					Buffer.BlockCopy(InputTemp' rowEnd' InputTemp' 0' totalBytes - rowEnd);  					totalBytes -= rowEnd;  				}  				else  				{  					totalBytes = 0;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpMethod == "POST" || HttpMethod == "PUT")  			{  				int len = 0;  				var ct = GetRequestHeader("content-length");  				if (ct != null)  				{  					if (!int.TryParse(ct' out len)) return ReturnError(socket' 411);  					if (len > Limit) return ReturnError(socket' 413);  				}  				else return ReturnError(socket' 411);  				InputStream.Reset();  				var size = totalBytes - rowEnd;  				InputStream.Write(InputTemp' rowEnd' size);  				len -= size;  				var oldTimeout = socket.ReceiveTimeout;  				socket.ReceiveTimeout = 10000;  				while (len > 0)  				{  					size = socket.Receive(InputTemp' Math.Min(len' InputTemp.Length)' SocketFlags.None);  					if (size < 1) return ReturnError(socket' 408);  					InputStream.Write(InputTemp' 0' size);  					len -= size;  				}  				socket.ReceiveTimeout = oldTimeout;  				InputStream.Position = 0;  				rowEnd = totalBytes;  				totalBytes = 0;  			}  			else  			{  				Pipeline = rowEnd < totalBytes;  				if (Pipeline)  				{  					Buffer.BlockCopy(InputTemp' rowEnd' InputTemp' 0' totalBytes - rowEnd);  					totalBytes -= rowEnd;  				}  				else  				{  					totalBytes = 0;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpMethod == "POST" || HttpMethod == "PUT")  			{  				int len = 0;  				var ct = GetRequestHeader("content-length");  				if (ct != null)  				{  					if (!int.TryParse(ct' out len)) return ReturnError(socket' 411);  					if (len > Limit) return ReturnError(socket' 413);  				}  				else return ReturnError(socket' 411);  				InputStream.Reset();  				var size = totalBytes - rowEnd;  				InputStream.Write(InputTemp' rowEnd' size);  				len -= size;  				var oldTimeout = socket.ReceiveTimeout;  				socket.ReceiveTimeout = 10000;  				while (len > 0)  				{  					size = socket.Receive(InputTemp' Math.Min(len' InputTemp.Length)' SocketFlags.None);  					if (size < 1) return ReturnError(socket' 408);  					InputStream.Write(InputTemp' 0' size);  					len -= size;  				}  				socket.ReceiveTimeout = oldTimeout;  				InputStream.Position = 0;  				rowEnd = totalBytes;  				totalBytes = 0;  			}  			else  			{  				Pipeline = rowEnd < totalBytes;  				if (Pipeline)  				{  					Buffer.BlockCopy(InputTemp' rowEnd' InputTemp' 0' totalBytes - rowEnd);  					totalBytes -= rowEnd;  				}  				else  				{  					totalBytes = 0;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpMethod == "POST" || HttpMethod == "PUT")  			{  				int len = 0;  				var ct = GetRequestHeader("content-length");  				if (ct != null)  				{  					if (!int.TryParse(ct' out len)) return ReturnError(socket' 411);  					if (len > Limit) return ReturnError(socket' 413);  				}  				else return ReturnError(socket' 411);  				InputStream.Reset();  				var size = totalBytes - rowEnd;  				InputStream.Write(InputTemp' rowEnd' size);  				len -= size;  				var oldTimeout = socket.ReceiveTimeout;  				socket.ReceiveTimeout = 10000;  				while (len > 0)  				{  					size = socket.Receive(InputTemp' Math.Min(len' InputTemp.Length)' SocketFlags.None);  					if (size < 1) return ReturnError(socket' 408);  					InputStream.Write(InputTemp' 0' size);  					len -= size;  				}  				socket.ReceiveTimeout = oldTimeout;  				InputStream.Position = 0;  				rowEnd = totalBytes;  				totalBytes = 0;  			}  			else  			{  				Pipeline = rowEnd < totalBytes;  				if (Pipeline)  				{  					Buffer.BlockCopy(InputTemp' rowEnd' InputTemp' 0' totalBytes - rowEnd);  					totalBytes -= rowEnd;  				}  				else  				{  					totalBytes = 0;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Parse,The following statement contains a magic number: if (HttpMethod == "POST" || HttpMethod == "PUT")  			{  				int len = 0;  				var ct = GetRequestHeader("content-length");  				if (ct != null)  				{  					if (!int.TryParse(ct' out len)) return ReturnError(socket' 411);  					if (len > Limit) return ReturnError(socket' 413);  				}  				else return ReturnError(socket' 411);  				InputStream.Reset();  				var size = totalBytes - rowEnd;  				InputStream.Write(InputTemp' rowEnd' size);  				len -= size;  				var oldTimeout = socket.ReceiveTimeout;  				socket.ReceiveTimeout = 10000;  				while (len > 0)  				{  					size = socket.Receive(InputTemp' Math.Min(len' InputTemp.Length)' SocketFlags.None);  					if (size < 1) return ReturnError(socket' 408);  					InputStream.Write(InputTemp' 0' size);  					len -= size;  				}  				socket.ReceiveTimeout = oldTimeout;  				InputStream.Position = 0;  				rowEnd = totalBytes;  				totalBytes = 0;  			}  			else  			{  				Pipeline = rowEnd < totalBytes;  				if (Pipeline)  				{  					Buffer.BlockCopy(InputTemp' rowEnd' InputTemp' 0' totalBytes - rowEnd);  					totalBytes -= rowEnd;  				}  				else  				{  					totalBytes = 0;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadUrl,The following statement contains a magic number: var end = rowEnd - 2 - HttpProtocolVersion.Length;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReadUrl,The following statement contains a magic number: for (int x = httpLen1; x < end; x++)  			{  				var tb = InputTemp[x];  				if (tb > 250)  				{  					RawUrl = UTF8.GetString(InputTemp' httpLen1' end - httpLen1);  					var askSign = RawUrl.IndexOf('?');  					var absolutePath = askSign == -1 ? RawUrl : RawUrl.Substring(0' askSign);  					return Routes.Find(HttpMethod' RawUrl' absolutePath' out handler);  				}  				charBuf[x - httpLen1] = (char)tb;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: var http = HttpResponse[responseCode - 100];
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: for (int x = 0; x < ResponseHeadersLength; x++)  			{  				var kv = ResponseHeaders[x];  				var val = kv.Key;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 58;  				OutputTemp[offset++] = 32;  				val = kv.Value;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 13;  				OutputTemp[offset++] = 10;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: for (int x = 0; x < ResponseHeadersLength; x++)  			{  				var kv = ResponseHeaders[x];  				var val = kv.Key;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 58;  				OutputTemp[offset++] = 32;  				val = kv.Value;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 13;  				OutputTemp[offset++] = 10;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: for (int x = 0; x < ResponseHeadersLength; x++)  			{  				var kv = ResponseHeaders[x];  				var val = kv.Key;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 58;  				OutputTemp[offset++] = 32;  				val = kv.Value;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 13;  				OutputTemp[offset++] = 10;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: for (int x = 0; x < ResponseHeadersLength; x++)  			{  				var kv = ResponseHeaders[x];  				var val = kv.Key;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 58;  				OutputTemp[offset++] = 32;  				val = kv.Value;  				for (int i = 0; i < val.Length; i++)  					OutputTemp[offset + i] = (byte)val[i];  				offset += val.Length;  				OutputTemp[offset++] = 13;  				OutputTemp[offset++] = 10;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: if (IsHttp10)  			{  				if (responseCode < 400 && "keep-alive".Equals(GetRequestHeader("connection")' StringComparison.OrdinalIgnoreCase))  				{  					keepAlive = true;  					Buffer.BlockCopy(ConnectionKeepAlive' 0' OutputTemp' offset' ConnectionKeepAlive.Length);  					offset += ConnectionKeepAlive.Length;  				}  				else  				{  					keepAlive = false;  					socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' false);  					Buffer.BlockCopy(ConnectionClose' 0' OutputTemp' offset' ConnectionClose.Length);  					offset += ConnectionClose.Length;  				}  			}  			else  			{  				if (responseCode >= 400 || "close".Equals(GetRequestHeader("connection")' StringComparison.OrdinalIgnoreCase))  				{  					keepAlive = false;  					socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' false);  					Buffer.BlockCopy(ConnectionClose' 0' OutputTemp' offset' ConnectionClose.Length);  					offset += ConnectionClose.Length;  				}  				else keepAlive = true;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: if (IsHttp10)  			{  				if (responseCode < 400 && "keep-alive".Equals(GetRequestHeader("connection")' StringComparison.OrdinalIgnoreCase))  				{  					keepAlive = true;  					Buffer.BlockCopy(ConnectionKeepAlive' 0' OutputTemp' offset' ConnectionKeepAlive.Length);  					offset += ConnectionKeepAlive.Length;  				}  				else  				{  					keepAlive = false;  					socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' false);  					Buffer.BlockCopy(ConnectionClose' 0' OutputTemp' offset' ConnectionClose.Length);  					offset += ConnectionClose.Length;  				}  			}  			else  			{  				if (responseCode >= 400 || "close".Equals(GetRequestHeader("connection")' StringComparison.OrdinalIgnoreCase))  				{  					keepAlive = false;  					socket.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.KeepAlive' false);  					Buffer.BlockCopy(ConnectionClose' 0' OutputTemp' offset' ConnectionClose.Length);  					offset += ConnectionClose.Length;  				}  				else keepAlive = true;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: if (cms != null)  			{  				offset = AddContentLength(cms.Length' offset);  				var len = offset + cms.Length;  				if (len < 4096)  				{  					cms.CopyTo(OutputTemp' offset);  					if (mustFlushResponse || len > 1024)  					{  						offsetInOutput = 0;  						socket.Send(OutputTemp' (int)len' SocketFlags.None);  					}  					else offsetInOutput = (int)len;  				}  				else  				{  					socket.Send(OutputTemp' offset' SocketFlags.Partial);  					cms.Send(socket);  					offsetInOutput = 0;  				}  				cms.Dispose();  			}  			else if (stream != null)  			{  				try  				{  					long len;  					if (ResponseLength != null)  						len = ResponseLength.Value;  					else if (stream.CanSeek)  						len = stream.Length;  					else  						throw new NotSupportedException("Chunked stream not implemented");  					offset = AddContentLength(len' offset);  					if (len + offset < OutputTemp.Length)  					{  						int pos = 0;  						int size = (int)len;  						do  						{  							pos += stream.Read(OutputTemp' pos + offset' size - pos);  						} while (pos < len);  						offset += size;  						if (mustFlushResponse)  						{  							socket.Send(OutputTemp' offset' SocketFlags.None);  							offsetInOutput = 0;  						}  						else offsetInOutput = offset;  					}  					else  					{  						int pos = 0;  						int size = (int)len;  						socket.Send(OutputTemp' offset' SocketFlags.Partial);  						do  						{  							pos = stream.Read(OutputTemp' 0' OutputTemp.Length);  							socket.Send(OutputTemp' pos' SocketFlags.None);  						} while (pos != 0);  						offsetInOutput = 0;  					}  				}  				finally  				{  					stream.Dispose();  				}  			}  			else  			{  				Buffer.BlockCopy(ZeroContentLength' 0' OutputTemp' offset' ZeroContentLength.Length);  				offset += ZeroContentLength.Length;  				if (mustFlushResponse)  				{  					socket.Send(OutputTemp' offset' SocketFlags.None);  					offsetInOutput = 0;  				}  				else offsetInOutput = offset;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Return,The following statement contains a magic number: if (cms != null)  			{  				offset = AddContentLength(cms.Length' offset);  				var len = offset + cms.Length;  				if (len < 4096)  				{  					cms.CopyTo(OutputTemp' offset);  					if (mustFlushResponse || len > 1024)  					{  						offsetInOutput = 0;  						socket.Send(OutputTemp' (int)len' SocketFlags.None);  					}  					else offsetInOutput = (int)len;  				}  				else  				{  					socket.Send(OutputTemp' offset' SocketFlags.Partial);  					cms.Send(socket);  					offsetInOutput = 0;  				}  				cms.Dispose();  			}  			else if (stream != null)  			{  				try  				{  					long len;  					if (ResponseLength != null)  						len = ResponseLength.Value;  					else if (stream.CanSeek)  						len = stream.Length;  					else  						throw new NotSupportedException("Chunked stream not implemented");  					offset = AddContentLength(len' offset);  					if (len + offset < OutputTemp.Length)  					{  						int pos = 0;  						int size = (int)len;  						do  						{  							pos += stream.Read(OutputTemp' pos + offset' size - pos);  						} while (pos < len);  						offset += size;  						if (mustFlushResponse)  						{  							socket.Send(OutputTemp' offset' SocketFlags.None);  							offsetInOutput = 0;  						}  						else offsetInOutput = offset;  					}  					else  					{  						int pos = 0;  						int size = (int)len;  						socket.Send(OutputTemp' offset' SocketFlags.Partial);  						do  						{  							pos = stream.Read(OutputTemp' 0' OutputTemp.Length);  							socket.Send(OutputTemp' pos' SocketFlags.None);  						} while (pos != 0);  						offsetInOutput = 0;  					}  				}  				finally  				{  					stream.Dispose();  				}  			}  			else  			{  				Buffer.BlockCopy(ZeroContentLength' 0' OutputTemp' offset' ZeroContentLength.Length);  				offset += ZeroContentLength.Length;  				if (mustFlushResponse)  				{  					socket.Send(OutputTemp' offset' SocketFlags.None);  					offsetInOutput = 0;  				}  				else offsetInOutput = offset;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReturnError,The following statement contains a magic number: var http = HttpResponse[status - 100];
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReturnError,The following statement contains a magic number: if (withHeaders)  			{  				for (int x = 0; x < ResponseHeadersLength; x++)  				{  					var kv = ResponseHeaders[x];  					offset += ASCII.GetBytes(kv.Key' 0' kv.Key.Length' OutputTemp' offset);  					OutputTemp[offset++] = 58;  					OutputTemp[offset++] = 32;  					offset += ASCII.GetBytes(kv.Value' 0' kv.Value.Length' OutputTemp' offset);  					OutputTemp[offset++] = 13;  					OutputTemp[offset++] = 10;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReturnError,The following statement contains a magic number: if (withHeaders)  			{  				for (int x = 0; x < ResponseHeadersLength; x++)  				{  					var kv = ResponseHeaders[x];  					offset += ASCII.GetBytes(kv.Key' 0' kv.Key.Length' OutputTemp' offset);  					OutputTemp[offset++] = 58;  					OutputTemp[offset++] = 32;  					offset += ASCII.GetBytes(kv.Value' 0' kv.Value.Length' OutputTemp' offset);  					OutputTemp[offset++] = 13;  					OutputTemp[offset++] = 10;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReturnError,The following statement contains a magic number: if (withHeaders)  			{  				for (int x = 0; x < ResponseHeadersLength; x++)  				{  					var kv = ResponseHeaders[x];  					offset += ASCII.GetBytes(kv.Key' 0' kv.Key.Length' OutputTemp' offset);  					OutputTemp[offset++] = 58;  					OutputTemp[offset++] = 32;  					offset += ASCII.GetBytes(kv.Value' 0' kv.Value.Length' OutputTemp' offset);  					OutputTemp[offset++] = 13;  					OutputTemp[offset++] = 10;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,ReturnError,The following statement contains a magic number: if (withHeaders)  			{  				for (int x = 0; x < ResponseHeadersLength; x++)  				{  					var kv = ResponseHeaders[x];  					offset += ASCII.GetBytes(kv.Key' 0' kv.Key.Length' OutputTemp' offset);  					OutputTemp[offset++] = 58;  					OutputTemp[offset++] = 32;  					offset += ASCII.GetBytes(kv.Value' 0' kv.Value.Length' OutputTemp' offset);  					OutputTemp[offset++] = 13;  					OutputTemp[offset++] = 10;  				}  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: var envTicks = Environment.TickCount / 1000;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddServerAndDate,The following statement contains a magic number: if (LastTicks != envTicks)  			{  				var date = DateTime.UtcNow;  				var ticks = date.Ticks / 10000000;  				var original = ticks;  				var sec = ticks % 60;  				ticks = ticks / 60;  				var min = ticks % 60;  				ticks = ticks / 60;  				var hour = ticks % 24;  				ticks = ticks / 24;  				var dayOfWeek = ticks % 7;  				var dayNameBuf = DateDayNames[dayOfWeek];  				var dayBuf = DateNumbers[date.Day];  				var monthBuf = DateDayMonths[date.Month - 1];  				var yearBuf1 = DateNumbers[date.Year / 100];  				var yearBuf2 = DateNumbers[date.Year % 100];  				var hourBuf = DateNumbers[hour];  				var minBuf = DateNumbers[min];  				var secBuf = DateNumbers[sec];  				Buffer.BlockCopy(DateNow' 0' OutputTemp' offset' 6);  				var start = offset + 6;  				OutputTemp[start] = dayNameBuf[0];  				OutputTemp[start + 1] = dayNameBuf[1];  				OutputTemp[start + 2] = dayNameBuf[2];  				OutputTemp[start + 3] = 44;  				OutputTemp[start + 4] = 32;  				OutputTemp[start + 5] = dayBuf[0];  				OutputTemp[start + 6] = dayBuf[1];  				OutputTemp[start + 7] = 32;  				OutputTemp[start + 8] = monthBuf[0];  				OutputTemp[start + 9] = monthBuf[1];  				OutputTemp[start + 10] = monthBuf[2];  				OutputTemp[start + 11] = 32;  				OutputTemp[start + 12] = yearBuf1[0];  				OutputTemp[start + 13] = yearBuf1[1];  				OutputTemp[start + 14] = yearBuf2[0];  				OutputTemp[start + 15] = yearBuf2[1];  				OutputTemp[start + 16] = 32;  				OutputTemp[start + 17] = hourBuf[0];  				OutputTemp[start + 18] = hourBuf[1];  				OutputTemp[start + 19] = 58;  				OutputTemp[start + 20] = minBuf[0];  				OutputTemp[start + 21] = minBuf[1];  				OutputTemp[start + 22] = 58;  				OutputTemp[start + 23] = secBuf[0];  				OutputTemp[start + 24] = secBuf[1];  				Buffer.BlockCopy(OutputTemp' start' TmpDateNow' 6' 25);  				LastTicks = envTicks;  				Buffer.BlockCopy(TmpDateNow' 31' OutputTemp' start + 25' TmpDateNow.Length - 31);  				Buffer.BlockCopy(ServerName' 0' OutputTemp' offset + TmpDateNow.Length' ServerName.Length);  				if (Monitor.TryEnter(ServerName))  				{  					var tdn = DateNow;  					DateNow = TmpDateNow;  					TmpDateNow = tdn;  					Monitor.Exit(ServerName);  				}  				return offset + DateNow.Length + ServerName.Length;  			}
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset] = 13;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset + 1] = 10;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset + 2] = 13;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset + 2] = 13;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset + 3] = 10;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: OutputTemp[offset + 3] = 10;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentLength,The following statement contains a magic number: return offset + 4;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Serialize,The following statement contains a magic number: var pos = 10 + offset;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = DateNumbers[rem];  				target[pos--] = num[1];  				target[pos--] = num[0];  				abs = div;  				if (abs == 0) break;  			} while (pos > offset);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = DateNumbers[rem];  				target[pos--] = num[1];  				target[pos--] = num[0];  				abs = div;  				if (abs == 0) break;  			} while (pos > offset);
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Serialize,The following statement contains a magic number: pos += ZeroOffset[num[0] - 48];
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,Serialize,The following statement contains a magic number: var len = offset + 10 - pos;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentType,The following statement contains a magic number: OutputTemp[offset] = 13;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentType,The following statement contains a magic number: OutputTemp[offset + 1] = 10;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddContentType,The following statement contains a magic number: return offset + 2;
Magic Number,Revenj.Http,HttpSocketContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketContext.cs,AddHeader,The following statement contains a magic number: if (ResponseHeadersLength == ResponseHeaders.Length)  			{  				var newHeaders = new HeaderPair[ResponseHeaders.Length * 2];  				Array.Copy(ResponseHeaders' newHeaders' ResponseHeaders.Length);  				ResponseHeaders = newHeaders;  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,HttpSocketServer,The following statement contains a magic number: if (endpoints.Count == 0)  			{  				Console.WriteLine("Http address not found in config. Starting IPv6 on all interfaces");  				endpoints.Add(new IPEndPoint(Socket.OSSupportsIPv6 ? IPAddress.IPv6Any : IPAddress.Any' 8999));  			}  			else if (endpoints.FindAll(it => it.AddressFamily == AddressFamily.InterNetwork).Count == endpoints.Count)  			{  				networkType = AddressFamily.InterNetwork;  			}  			else if (endpoints.FindAll(it => it.AddressFamily == AddressFamily.InterNetworkV6).Count != endpoints.Count)  			{  				throw new ConfigurationErrorsException(@"Unable to setup configuration for both IPv4 and IPv6. Use either only IPv4 or IPv6.   Please check settings: " + string.Join("' "' endpoints));  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,HttpSocketServer,The following statement contains a magic number: Requests = !string.IsNullOrEmpty(ca)  				? new BlockingCollection<RequestInfo>((int)Math.Log(int.Parse(ca)' 2))  				: new BlockingCollection<RequestInfo>();
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,Run,The following statement contains a magic number: try  			{  				var backlog = ConfigurationManager.AppSettings["Revenj.Backlog"];  				if (backlog != null)  					Socket.Listen(int.Parse(backlog));  				else  					Socket.Listen(10000);  				TraceSource.TraceEvent(TraceEventType.Start' 1002);  				var minth = ConfigurationManager.AppSettings["Revenj.MinThreads"];  				var maxth = ConfigurationManager.AppSettings["Revenj.MaxThreads"];  				var minThreads = !string.IsNullOrEmpty(minth) ? int.Parse(minth) : 128 + Environment.ProcessorCount * 3;  				var maxThreads = !string.IsNullOrEmpty(maxth) ? int.Parse(maxth) : 128 + Environment.ProcessorCount * 3;  				ThreadPool.SetMinThreads(minThreads' maxThreads);  				var socketLoops = ConfigurationManager.AppSettings["Revenj.SocketLoops"];  				var loops = !string.IsNullOrEmpty(socketLoops) ? int.Parse(socketLoops) : Environment.ProcessorCount;  				for (int i = 0; i < loops; i++)  				{  					var thread = new Thread(SocketLoop);  					thread.Name = "Socket loop: " + (i + 1);  					thread.Start();  				}  				var ctx = Context.Value;  				while (true)  				{  					try  					{  						var socket = Socket.Accept();  						if (socket.Connected)  						{  							socket.Blocking = true;  							socket.ReceiveTimeout = 1;  							if (!Requests.TryAdd(new RequestInfo(socket)))  							{  								ctx.ReturnError(socket' 503);  								Thread.Yield();  							}  						}  					}  					catch (SocketException ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5401' "{0}"' ex);  					}  				}  			}  			catch (Exception ex)  			{  				Console.WriteLine(ex.ToString());  				TraceSource.TraceEvent(TraceEventType.Error' 5402' "{0}"' ex);  				throw;  			}  			finally  			{  				TraceSource.TraceEvent(TraceEventType.Stop' 1002);  				Socket.Shutdown(SocketShutdown.Both);  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,HttpSocketServer,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpSocketServer.cs,LogError,The following statement contains a magic number: if (sex != null)  			{  				try { ctx.ReturnError(socket' (int)HttpStatusCode.Forbidden' sex.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else if (ans != null)  			{  				try { ctx.ReturnError(socket' 404' ans.Message' true); }  				catch (Exception e)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' e);  				}  			}  			else  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5403' "{0}"' ex);  				try { ctx.ReturnError(socket' 500' ex.Message' false); }  				catch (Exception ex2)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5404' "{0}"' ex2);  				}  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: var lamParams = new ParameterExpression[5];
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: lamParams[2] = Expression.Parameter(typeof(IResponseContext)' "response");
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: lamParams[3] = Expression.Parameter(typeof(Stream)' "input");
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: lamParams[4] = Expression.Parameter(typeof(ChunkedMemoryStream)' "output");
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: for (int i = 0; i < TotalParams; i++)  			{  				var mp = methodParams[i];  				if (mp.ParameterType == typeof(IRequestContext))  					expArgs[i] = lamParams[1];  				else if (mp.ParameterType == typeof(IResponseContext))  					expArgs[i] = lamParams[2];  				else if (i < TotalParams - 1 || !WithStream)  					expArgs[i] = Expression.ArrayIndex(lamParams[0]' Expression.Constant(argInd++));  				else  					expArgs[i] = lamParams[3];  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: for (int i = 0; i < TotalParams; i++)  			{  				var mp = methodParams[i];  				if (mp.ParameterType == typeof(IRequestContext))  					expArgs[i] = lamParams[1];  				else if (mp.ParameterType == typeof(IResponseContext))  					expArgs[i] = lamParams[2];  				else if (i < TotalParams - 1 || !WithStream)  					expArgs[i] = Expression.ArrayIndex(lamParams[0]' Expression.Constant(argInd++));  				else  					expArgs[i] = lamParams[3];  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: if (typeof(IHtmlView).IsAssignableFrom(method.ReturnType))  			{  				mce = Expression.Call(null' RenderFunc.Method' mce' lamParams[2]' lamParams[4]);  			}  			else if (!typeof(Stream).IsAssignableFrom(method.ReturnType) && method.ReturnType != typeof(void))  			{  				var ws = Expression.Constant(serialization);  				mce = Expression.Call(null' SerializeFunc.Method' ws' lamParams[1]' lamParams[2]' mce' lamParams[4]);  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: if (typeof(IHtmlView).IsAssignableFrom(method.ReturnType))  			{  				mce = Expression.Call(null' RenderFunc.Method' mce' lamParams[2]' lamParams[4]);  			}  			else if (!typeof(Stream).IsAssignableFrom(method.ReturnType) && method.ReturnType != typeof(void))  			{  				var ws = Expression.Constant(serialization);  				mce = Expression.Call(null' SerializeFunc.Method' ws' lamParams[1]' lamParams[2]' mce' lamParams[4]);  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: if (typeof(IHtmlView).IsAssignableFrom(method.ReturnType))  			{  				mce = Expression.Call(null' RenderFunc.Method' mce' lamParams[2]' lamParams[4]);  			}  			else if (!typeof(Stream).IsAssignableFrom(method.ReturnType) && method.ReturnType != typeof(void))  			{  				var ws = Expression.Constant(serialization);  				mce = Expression.Call(null' SerializeFunc.Method' ws' lamParams[1]' lamParams[2]' mce' lamParams[4]);  			}
Magic Number,Revenj.Http,RouteHandler,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\RouteHandler.cs,RouteHandler,The following statement contains a magic number: if (typeof(IHtmlView).IsAssignableFrom(method.ReturnType))  			{  				mce = Expression.Call(null' RenderFunc.Method' mce' lamParams[2]' lamParams[4]);  			}  			else if (!typeof(Stream).IsAssignableFrom(method.ReturnType) && method.ReturnType != typeof(void))  			{  				var ws = Expression.Constant(serialization);  				mce = Expression.Call(null' SerializeFunc.Method' ws' lamParams[1]' lamParams[2]' mce' lamParams[4]);  			}
Magic Number,Revenj.Http,HttpAuth,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpAuth.cs,TryAuthorize,The following statement contains a magic number: if (splt.Length != 2)  				return AuthorizeOrError.Unauthorized("Invalid authorization header."' false);
Magic Number,Revenj.Http,HttpAuth,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\HttpAuth.cs,TryAuthorize,The following statement contains a magic number: if (cred.Length != 2)  				return AuthorizeOrError.Unauthorized("Invalid authorization header content."' false);
Magic Number,Revenj.Http,UriPattern,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Http\UriPattern.cs,GetTokens,The following statement contains a magic number: foreach (Match match in EscapePattern.Matches(template))  			{  				var token = match.Value;  				token = token.Substring(1' token.Length - 2).TrimStart('*');  				if (!tokens.Contains(token))  					tokens.Add(token);  			}
