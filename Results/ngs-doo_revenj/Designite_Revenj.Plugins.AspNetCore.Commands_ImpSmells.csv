Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,Cyclomatic complexity of the method is 10
Complex Method,Revenj.Plugins.AspNetCore.Commands,CrudMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CrudMiddleware.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,Cyclomatic complexity of the method is 22
Complex Method,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,Cyclomatic complexity of the method is 23
Long Parameter List,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Search,The method has 5 parameters. Parameters: domainObject' doType' specType' spec' context
Long Parameter List,Revenj.Plugins.AspNetCore.Commands,Utility,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Utility.cs,ParseObject,The method has 6 parameters. Parameters: serializer' maybeType' data' canCreate' locator' context
Long Statement,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Persist,The length of the statement  "			var array = Utility.ParseObject(Serialization' rootType.MakeArrayType()' context.Request.Body' false' Locator' context); " is 120.
Long Statement,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,OlapCube,The length of the statement  "				return Utility.WriteError(context.Response' "At least one dimension or fact must be specified"' HttpStatusCode.BadRequest); " is 123.
Long Statement,Revenj.Plugins.AspNetCore.Commands,CrudMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CrudMiddleware.cs,Create,The length of the statement  "				return Utility.WriteError(context.Response' $"{rootType.FullName} is not an aggregate root"' HttpStatusCode.BadRequest); " is 120.
Long Statement,Revenj.Plugins.AspNetCore.Commands,CrudMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CrudMiddleware.cs,Update,The length of the statement  "				return Utility.WriteError(context.Response' $"{rootType.FullName} is not an aggregate root"' HttpStatusCode.BadRequest); " is 120.
Long Statement,Revenj.Plugins.AspNetCore.Commands,CrudMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CrudMiddleware.cs,Delete,The length of the statement  "				return Utility.WriteError(context.Response' $"{rootType.FullName} is not an aggregate root"' HttpStatusCode.BadRequest); " is 120.
Long Statement,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,OlapCube,The length of the statement  "				return Utility.WriteError(context.Response' "At least one dimension or fact must be specified"' HttpStatusCode.BadRequest); " is 123.
Long Statement,Revenj.Plugins.AspNetCore.Commands,Utility,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Utility.cs,CheckCube,The length of the statement  "			var findImpl = type.GetInterfaces().FirstOrDefault(it => it.IsGenericType && it.GetGenericTypeDefinition() == typeof(IOlapCubeQuery<>)); " is 136.
Long Statement,Revenj.Plugins.AspNetCore.Commands,Utility,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Utility.cs,ParseGenericSpecification,The length of the statement  "				var arg = ParseObject(serializer' typeof(Dictionary<string' List<KeyValuePair<int' TFormat>>>)' data' true' null' context); " is 123.
Long Statement,Revenj.Plugins.AspNetCore.Commands,Utility,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Utility.cs,ParseGenericSpecification,The length of the statement  "				specArg["URI"] = new List<KeyValuePair<int' TFormat>>(new[] { new KeyValuePair<int' TFormat>(1' genSer.Serialize("1001")) }); " is 125.
Magic Number,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "POST":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Insert' name.Substring(8)' context);  					if (name.StartsWith("execute/"' StringComparison.OrdinalIgnoreCase))  						return Execute(name.Substring(8)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeFromGet(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "PUT":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Update' name.Substring(8)' context);  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeWithBody(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "POST":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Insert' name.Substring(8)' context);  					if (name.StartsWith("execute/"' StringComparison.OrdinalIgnoreCase))  						return Execute(name.Substring(8)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeFromGet(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "PUT":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Update' name.Substring(8)' context);  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeWithBody(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "POST":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Insert' name.Substring(8)' context);  					if (name.StartsWith("execute/"' StringComparison.OrdinalIgnoreCase))  						return Execute(name.Substring(8)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeFromGet(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "PUT":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Update' name.Substring(8)' context);  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeWithBody(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "POST":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Insert' name.Substring(8)' context);  					if (name.StartsWith("execute/"' StringComparison.OrdinalIgnoreCase))  						return Execute(name.Substring(8)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeFromGet(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "PUT":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Update' name.Substring(8)' context);  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeWithBody(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,CommandsMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\CommandsMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "POST":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Insert' name.Substring(8)' context);  					if (name.StartsWith("execute/"' StringComparison.OrdinalIgnoreCase))  						return Execute(name.Substring(8)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeFromGet(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "PUT":  					if (name.StartsWith("persist/"' StringComparison.OrdinalIgnoreCase))  						return Persist(MethodEnum.Update' name.Substring(8)' context);  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  						return OlapCubeWithBody(name.Substring(5)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,DomainMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\DomainMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("find/"' StringComparison.OrdinalIgnoreCase))  						return Find(name.Substring(5)' context);  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchBody(name.Substring(7)' context);  					if (name.StartsWith("search-generic/"' StringComparison.OrdinalIgnoreCase))  						return SearchGeneric(name.Substring(15)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return Count(name.Substring(6)' context);  					if (name.StartsWith("count-generic/"' StringComparison.OrdinalIgnoreCase))  						return CountGeneric(name.Substring(14)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromBody(name.Substring(7)' context);  					if (name.StartsWith("exists-generic/"' StringComparison.OrdinalIgnoreCase))  						return ExistsGeneric(name.Substring(15)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("search/"' StringComparison.OrdinalIgnoreCase))  						return SearchFromGet(name.Substring(7)' context);  					if (name.StartsWith("count/"' StringComparison.OrdinalIgnoreCase))  						return CountFromGet(name.Substring(6)' context);  					if (name.StartsWith("exists/"' StringComparison.OrdinalIgnoreCase))  						return ExistsFromGet(name.Substring(6)' context);  					if (name.StartsWith("check/"' StringComparison.OrdinalIgnoreCase))  						return Check(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "POST":  					if (name.StartsWith("submit/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return Submit(name.Substring(7)' context);  						if (ind != name.Length)  							return SubmitAggregate(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("queue/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 6);  						if (ind == -1)  							return Queue(name.Substring(6)' context);  						if (ind != name.Length)  							return QueueAggregate(name.Substring(6' ind - 6)' name.Substring(ind + 1)' context);  					}    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Revenj.Plugins.AspNetCore.Commands,ReportingMiddleware,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\Middleware\ReportingMiddleware.cs,Handle,The following statement contains a magic number: switch (context.Request.Method)  			{  				case "PUT":  					if (name.StartsWith("report/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 7);  						if (ind == -1)  							return PopulateReport(name.Substring(7)' context);  						if (ind != name.Length)  							return CreateReport(name.Substring(7' ind - 7)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1 && ind != name.Length)  							return OlapCubeFromBody(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("history/"' StringComparison.OrdinalIgnoreCase))  						return GetHistory(name.Substring(8)' context);  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var specification = name.Substring(ind2 + 1);  								return SearchTemplaterWithSpecification(file' domainObject' specification' context);  							}  						}  					}  					if (name.StartsWith("templater-generic/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 19);  						if (ind != -1 && ind != name.Length)  							return SearchTemplaterWithGenericSpecification(name.Substring(18' ind - 18)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQuery(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				case "GET":  					if (name.StartsWith("olap/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind = name.IndexOf('/'' 5);  						if (ind != -1)  							return OlapCubeGet(name.Substring(5' ind - 5)' name.Substring(ind + 1)' context);  					}  					if (name.StartsWith("templater/"' StringComparison.OrdinalIgnoreCase))  					{  						var ind1 = name.IndexOf('/'' 10);  						if (ind1 != -1 && ind1 != name.Length)  						{  							var ind2 = name.IndexOf('/'' ind1 + 1);  							if (ind2 != -1 && ind2 != name.Length)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1' ind2 - ind1 - 1);  								var uri = name.Substring(ind2 + 1);  								return FindTemplater(file' domainObject' uri' context);  							}  							else if (ind2 == -1)  							{  								var file = name.Substring(10' ind1 - 10);  								var domainObject = name.Substring(ind1 + 1);  								return SearchTemplater(file' domainObject' context);  							}  						}  					}  					if (name.StartsWith("query/"' StringComparison.OrdinalIgnoreCase))  						return EvaluateQueryWithoutArguments(name.Substring(6)' context);    					return Utility.WriteError(context.Response' "Unknown route"' HttpStatusCode.NotFound);  				default:  					return Utility.WriteError(context.Response' "Unsuported method type"' HttpStatusCode.MethodNotAllowed);  			}
Magic Number,Microsoft.AspNetCore.Hosting,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/RestApplication.svc")'  				app => app.Run(async context => await rest.Handle(context' 20)));
Magic Number,Microsoft.AspNetCore.Hosting,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Crud.svc")'  				app => app.Run(async context => await crud.Handle(context' 9)));
Magic Number,Microsoft.AspNetCore.Hosting,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Domain.svc")'  				app => app.Run(async context => await domain.Handle(context' 11)));
Magic Number,Microsoft.AspNetCore.Hosting,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Commands.svc")'  				app => app.Run(async context => await commands.Handle(context' 13)));
Magic Number,Microsoft.AspNetCore.Hosting,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Reporting.svc")'  				app => app.Run(async context => await reporting.Handle(context' 14)));
Magic Number,Microsoft.AspNetCore.Builder,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/RestApplication.svc")'  				app => app.Run(async context => await rest.Handle(context' 20)));
Magic Number,Microsoft.AspNetCore.Builder,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Crud.svc")'  				app => app.Run(async context => await crud.Handle(context' 9)));
Magic Number,Microsoft.AspNetCore.Builder,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Domain.svc")'  				app => app.Run(async context => await domain.Handle(context' 11)));
Magic Number,Microsoft.AspNetCore.Builder,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Commands.svc")'  				app => app.Run(async context => await commands.Handle(context' 13)));
Magic Number,Microsoft.AspNetCore.Builder,RevenjBuilderExtension,C:\research\architectureSmells\repos\ngs-doo_revenj\csharp\Plugins\Revenj.Plugins.AspNetCore.Commands\RevenjBuilderExtension.cs,UseRevenjMiddleware,The following statement contains a magic number: builder.MapWhen(  				context => context.Request.Path.StartsWithSegments("/Reporting.svc")'  				app => app.Run(async context => await reporting.Handle(context' 14)));
