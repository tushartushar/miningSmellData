Implementation smell,Namespace,Class,File,Method,Description
Long Method,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The method has 144 lines of code.
Long Method,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The method has 197 lines of code.
Complex Method,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,Cyclomatic complexity of the method is 9
Complex Conditional,Revenj.Processing,ServerServiceAspect,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\Aspects\ServerServiceAspect.cs,Initialize,The conditional expression  "!type.IsAbstract  					&& (type.IsPublic || type.IsNestedPublic)  					&& type.GetInterfaces().Any(it => it.IsGenericType && it.GetGenericTypeDefinition() == typeof(IServerService<'>))"  is complex.
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: if (commandDescriptions == null || commandDescriptions.Length == 0)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5310);  				return  					ProcessingResult<TOutput>.Create(  						"There are no commands to execute."'  						HttpStatusCode.BadRequest'  						null'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingContext,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingContext.cs,Execute,The following statement contains a magic number: try  			{  				foreach (var c in commandDescriptions)  					if (!Permissions.CanAccess(c.CommandType.FullName' principal))  					{  						TraceSource.TraceEvent(  							TraceEventType.Warning'  							5311'  							"Access denied. User: {0}. Target: {1}"'  							principal.Identity.Name'  							c.CommandType.FullName);  						return  							ProcessingResult<TOutput>.Create(  								"You don't have permission to execute command: " + c.CommandType.FullName'  								HttpStatusCode.Forbidden'  								executedCommands'  								start);  					}    				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var command = (IServerCommand)Scope.GetService(cd.CommandType);  					var result = command.Execute(Scope' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: {0}".With(ex.Message)'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: if (commandDescriptions == null || commandDescriptions.Length == 0)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5310);  				return  					ProcessingResult<TOutput>.Create(  						"There are no commands to execute."'  						HttpStatusCode.BadRequest'  						null'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: for (int i = 0; i < commandDescriptions.Length; i++)  			{  				var c = commandDescriptions[i];  				if (!Permissions.CanAccess(c.CommandType.FullName' principal))  				{  					TraceSource.TraceEvent(  						TraceEventType.Warning'  						5311'  						"Access denied. User: {0}. Target: {1}"'  						principal.Identity.Name'  						c.CommandType.FullName);  					return  						ProcessingResult<TOutput>.Create(  							"You don't have permission to execute command: " + c.CommandType.FullName'  							HttpStatusCode.Forbidden'  							null'  							start);  				}  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: for (int i = 0; i < commandDescriptions.Length; i++)  			{  				IServerCommand command;  				var cd = commandDescriptions[i];  				if (!ActualCommands.TryGetValue(cd.CommandType' out command))  				{  					TraceSource.TraceEvent(  						TraceEventType.Warning'  						5321'  						"Unknown target. User: {0}. Target: {1}"'  						principal.Identity.Name'  						cd.CommandType.FullName);  					return  						ProcessingResult<TOutput>.Create(  							"Unknown command: {0}. Check if requested command is registered in the system".With(  								cd.CommandType)'  							HttpStatusCode.NotImplemented'  							null'  							start);  				}  				useTransaction = useTransaction || (command is IReadOnlyServerCommand == false);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ProcessingEngine,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ProcessingEngine.cs,Execute,The following statement contains a magic number: try  			{  				try  				{  					scope = ScopePool.Take(!useTransaction' principal);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5322' "{0}"' ex);  					return Exceptions.DebugMode  						? ProcessingResult<TOutput>.Create(  							ex.ToString()'  							HttpStatusCode.ServiceUnavailable'  							null'  							start)  						: ProcessingResult<TOutput>.Create(  							"Unable to create database connection"'  							HttpStatusCode.ServiceUnavailable'  							null'  							start);  				}  				foreach (var cd in commandDescriptions)  				{  					var startCommand = Stopwatch.GetTimestamp();  					var cmd = ActualCommands[cd.CommandType];  					var result = cmd.Execute(scope.Factory' inputSerializer' outputSerializer' principal' cd.Data);  					if (result == null)  						throw new FrameworkException("Result returned null for " + cd.CommandType.FullName);  					executedCommands.Add(CommandResultDescription<TOutput>.Create(cd.RequestID' result' startCommand));  					if ((int)result.Status >= 400)  					{  						ScopePool.Release(scope' false);  						return ProcessingResult<TOutput>.Create(  							result.Message'  							result.Status'  							executedCommands'  							start);  					}  				}    				ScopePool.Release(scope' true);  				var duration = (decimal)(Stopwatch.GetTimestamp() - start) / TimeSpan.TicksPerMillisecond;  				return  					ProcessingResult<TOutput>.Create(  						"Commands executed in: " + duration.ToString(CultureInfo.InvariantCulture) + " ms"'  						HttpStatusCode.OK'  						executedCommands'  						start);  			}  			catch (SecurityException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Warning'  					5312'  					"Security error. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex);  				ScopePool.Release(scope' false);  				return  					ProcessingResult<TOutput>.Create(  						"You don't have authorization to perform requested action: " + ex.Message'  						HttpStatusCode.Forbidden'  						executedCommands'  						start);  			}  			catch (AggregateException ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5313'  					"Multiple errors. User: {0}. Error: {1}."'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						string.Join(Environment.NewLine' ex.InnerExceptions.Select(it => it.Message))'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}  			catch (OutOfMemoryException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5315' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.ServiceUnavailable'  						executedCommands'  						start);  			}  			catch (DbException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Warning' 5316' ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.Conflict'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.Conflict'  						executedCommands'  						start);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5317'  					"Unexpected error. User: {0}. Error: {1}"'  					principal.Identity.Name'  					ex.GetDetailedExplanation());  				ScopePool.Release(scope' false);  				return Exceptions.DebugMode  					? ProcessingResult<TOutput>.Create(  						ex.GetDetailedExplanation()'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start)  					: ProcessingResult<TOutput>.Create(  						ex.Message'  						HttpStatusCode.InternalServerError'  						executedCommands'  						start);  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,ScopePool,The following statement contains a magic number: if (!int.TryParse(ConfigurationManager.AppSettings["Processing.PoolSize"]' out Size))  				Size = 20;
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,ScopePool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Processing.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,ScopePool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Processing.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,ScopePool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Processing.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,SetupReadonlyScope,The following statement contains a magic number: try  			{  				var query = Queries.StartQuery(false);  				inner.RegisterInstance(query);  				return new Scope(inner' query);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5301' "{0}"' ex);  				inner.Dispose();  				throw;  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,SetupWritableScope,The following statement contains a magic number: try  			{  				var query = Queries.StartQuery(true);  				inner.RegisterInstance(query);  				inner.RegisterInstance(principal);  				inner.RegisterType(typeof(ProcessingContext)' InstanceScope.Singleton' typeof(IProcessingEngine));  				return new Scope(inner' query);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5302' "{0}"' ex);  				inner.Dispose();  				throw;  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var s in Scopes)  				{  					try  					{  						Queries.EndQuery(s.Query' false);  						s.Factory.Dispose();  					}  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5303' "{0}"' ex);  					}  				}  				Scopes.Dispose();  			}  			catch (Exception ex2)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5304' "{0}"' ex2);  			}
Magic Number,Revenj.Processing,ScopePool,C:\repos\ngs-doo_revenj\csharp\Server\Revenj.Processing\ScopePool.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var s in Scopes)  				{  					try  					{  						Queries.EndQuery(s.Query' false);  						s.Factory.Dispose();  					}  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5303' "{0}"' ex);  					}  				}  				Scopes.Dispose();  			}  			catch (Exception ex2)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5304' "{0}"' ex2);  			}
