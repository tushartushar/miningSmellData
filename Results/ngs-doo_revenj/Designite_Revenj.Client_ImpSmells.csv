Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Revenj,DictionaryServiceLocator,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Patterns\DictionaryServiceLocator.cs,Resolve,Cyclomatic complexity of the method is 11
Complex Method,Revenj,StandardProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\StandardProxy.cs,Persist,Cyclomatic complexity of the method is 8
Complex Method,Revenj,DomainProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\DomainProxy.cs,Search,Cyclomatic complexity of the method is 8
Long Parameter List,Revenj,ReportingProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\ReportingProxy.cs,OlapCube,The method has 5 parameters. Parameters: specification' templater' dimensions' facts' order
Long Parameter List,Revenj,HttpClient,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\HttpClient.cs,Call,The method has 5 parameters. Parameters: command' method' argument' expectedStatus' accept
Long Parameter List,Revenj.Storage,LitS3Repository,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Storage\S3\LitS3Repository.cs,Upload,The method has 5 parameters. Parameters: bucket' key' stream' length' metadata
Long Statement,Revenj,StandardProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\StandardProxy.cs,OlapCube,The length of the statement  "					URL + "olap/" + typeof(TCube).FullName + "?specification=" + specName + "&" + BuildOlapArguments(dimensions' facts' order)' " is 123.
Long Statement,Revenj,ReportingProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\ReportingProxy.cs,OlapCube,The length of the statement  "					URL + "olap/" + typeof(TCube).FullName + "/" + templater + "?specification=" + specName + (args.Length > 0 ? "&" + args : string.Empty)' " is 136.
Long Statement,Revenj,HttpClient,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\HttpClient.cs,ExecuteRequest,The length of the statement  "				if (retryCount > 0 && (response == null || response != null && response.StatusCode == HttpStatusCode.ServiceUnavailable)) " is 121.
Complex Conditional,Revenj,HttpClient,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\HttpClient.cs,ExecuteRequest,The conditional expression  "retryCount > 0 && (response == null || response != null && response.StatusCode == HttpStatusCode.ServiceUnavailable)"  is complex.
Magic Number,Revenj,DomainProxy,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\DomainProxy.cs,Find,The following statement contains a magic number: if (encodedUris.Length > 300 || arr.Any(it => it.Contains("'")))  			{  				var arg = new GetArgument { Name = typeof(T).FullName' Uri = arr };  				return Application.Post<GetArgument' T[]>("GetDomainObject"' arg);  			}
Magic Number,Revenj,HttpClient,C:\repos\ngs-doo_revenj\csharp\Client\Revenj.Client\Server\HttpClient.cs,ExecuteRequest,The following statement contains a magic number: try  			{  				response = (HttpWebResponse)request.GetResponse();  				if (expectedStatus != null && !expectedStatus.Contains(response.StatusCode))  				{  					if ((int)response.StatusCode < 300)  						throw new ArgumentException("Invalid response code. Received " + response.StatusCode  							+ ". Expected: " + string.Join(" or "' expectedStatus.Select(it => it.ToString()).ToArray()));  				}  			}  			catch (WebException we)  			{  				response = we.Response as HttpWebResponse;  				if (retryCount > 0 && (response == null || response != null && response.StatusCode == HttpStatusCode.ServiceUnavailable))  					return ExecuteRequest(expectedStatus' request' retryCount - 1);  				if (response == null)  					throw;  				string content;  				var ct = (response.ContentType ?? string.Empty);  				bool isText = ct.StartsWith("plain/text");  				if (ct.StartsWith("application/xml"))  				{  					using (var reader = XmlReader.Create(response.GetResponseStream()))  					{  						reader.MoveToContent();  						content = reader.ReadInnerXml();  					}  				}  				else  					using (var stream = new StreamReader(response.GetResponseStream()))  						content = stream.ReadToEnd();    				switch (response.StatusCode)  				{  					case HttpStatusCode.BadRequest:  						throw new WebException(content);  					case HttpStatusCode.Unauthorized:  					case HttpStatusCode.Forbidden:  						throw new SecurityException(content);  					case HttpStatusCode.NotFound:  						throw new WebException(content);  					case HttpStatusCode.RequestEntityTooLarge:  						throw new ArgumentOutOfRangeException(content);  					default:  						if (isText)  							throw new WebException(content);  						throw new WebException(response.StatusDescription);  				}  			}
