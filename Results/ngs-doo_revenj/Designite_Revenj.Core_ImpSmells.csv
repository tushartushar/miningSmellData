Implementation smell,Namespace,Class,File,Method,Description
Long Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,Fastpath,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPath.cs,FastpathV3,The method has 112 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The method has 100 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The method has 129 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExpectedTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,ChangeType,The method has 167 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Write,The method has 121 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The method has 133 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,SetValue,The method has 104 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,Open,The method has 102 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlSchema,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlSchema.cs,GetReservedWords,The method has 112 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The method has 223 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The method has 255 lines of code.
Long Method,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitBinaryExpression,The method has 117 lines of code.
Complex Method,Revenj.DatabasePersistence.Postgres,PostgresOlapCubeQuery<TSource>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresOlapCubeQuery.cs,ValidateInput,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres,PostgresOlapCubeQuery<TSource>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresOlapCubeQuery.cs,PrepareSql,Cyclomatic complexity of the method is 15
Complex Method,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,EndQuery,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres,PostgresTypedArray,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresTypedArray.cs,ParseCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,ArrayTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ArrayTuple.cs,InsertRecord,Cyclomatic complexity of the method is 14
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,DictionaryTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,InsertRecord,Cyclomatic complexity of the method is 10
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,RecordTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\RecordTuple.cs,InsertRecord,Cyclomatic complexity of the method is 14
Complex Method,Revenj.DatabasePersistence.Postgres.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\StringConverter.cs,ParseStreamCollection,Cyclomatic complexity of the method is 11
Complex Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,Cyclomatic complexity of the method is 11
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,Cyclomatic complexity of the method is 14
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetParseCommandText,Cyclomatic complexity of the method is 9
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetPrepareCommandText,Cyclomatic complexity of the method is 10
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,Open,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,Cyclomatic complexity of the method is 11
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetNextRow,Cyclomatic complexity of the method is 10
Complex Method,Revenj.DatabasePersistence.Postgres.Npgsql,CompletedResponse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CompletedResponse,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DatabasePersistence.Postgres.QueryGeneration,QuerySourceConverterFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QuerySourceConverterFactory.cs,CreateResult,Cyclomatic complexity of the method is 12
Complex Method,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetFromPart,Cyclomatic complexity of the method is 12
Complex Method,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetQuerySourceFromExpression,Cyclomatic complexity of the method is 16
Complex Method,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitBinaryExpression,Cyclomatic complexity of the method is 14
Complex Method,Revenj.DomainPatterns,LookupCache<TValue>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Cache\LookupCache.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,Revenj.DomainPatterns,DomainTypeResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DomainTypeResolver.cs,TryToResolveTypeWithoutStrongName,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Extensibility,AutofacObjectFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\AutofacObjectFactory.cs,BuildFactoryForService,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Extensibility,AutofacObjectFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\AutofacObjectFactory.cs,RegisterToContainer,Cyclomatic complexity of the method is 18
Complex Method,Revenj.Extensibility,DryIocObjectFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIocObjectFactory.cs,BuildFactoryForService,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Extensibility,PluginsProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\PluginsProvider.cs,FindPlugins,Cyclomatic complexity of the method is 10
Complex Method,Revenj.Extensibility.Autofac.Configuration,ConfigurationSettingsReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\ConfigurationSettingsReader.cs,Load,Cyclomatic complexity of the method is 18
Complex Method,Revenj.Extensibility.Autofac.Core.Activators.Reflection,AutowiringPropertyInjector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\AutowiringPropertyInjector.cs,InjectProperties,Cyclomatic complexity of the method is 11
Complex Method,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,EnforceBindable,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Extensibility.Autofac.Util,TypeExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Util\TypeExtensions.cs,IsCompatibleWithGenericParameterConstraints,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,Cyclomatic complexity of the method is 9
Complex Method,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetDecoratorExpressionOrDefault,Cyclomatic complexity of the method is 11
Complex Method,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetFuncDecoratorExpressionOrDefault,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetServiceFactoryOrDefault,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetArrayExpression,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetExpressionOrDefault,Cyclomatic complexity of the method is 9
Complex Method,DryIoc,ReflectionFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,CreateExpressionOrDefault,Cyclomatic complexity of the method is 12
Complex Method,DryIoc,ReflectionFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetClosedTypeArgsOrNullForOpenGenericType,Cyclomatic complexity of the method is 10
Complex Method,DryIoc,ReflectionTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,SetToNullGenericParametersReferencedInConstraints,Cyclomatic complexity of the method is 8
Complex Method,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,Cyclomatic complexity of the method is 9
Complex Method,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,Cyclomatic complexity of the method is 10
Complex Method,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetDecoratorExpressionOrDefault,Cyclomatic complexity of the method is 11
Complex Method,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetFuncDecoratorExpressionOrDefault,Cyclomatic complexity of the method is 10
Complex Method,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetServiceFactoryOrDefault,Cyclomatic complexity of the method is 10
Complex Method,DryIoc.Reflection,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetArrayExpression,Cyclomatic complexity of the method is 10
Complex Method,DryIoc.Reflection,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetExpressionOrDefault,Cyclomatic complexity of the method is 9
Complex Method,DryIoc.Reflection,ReflectionFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,CreateExpressionOrDefault,Cyclomatic complexity of the method is 12
Complex Method,DryIoc.Reflection,ReflectionFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetClosedTypeArgsOrNullForOpenGenericType,Cyclomatic complexity of the method is 10
Complex Method,DryIoc.Reflection,ReflectionTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,SetToNullGenericParametersReferencedInConstraints,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableStructCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization,Deserializer<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Revenj.Serialization,WireSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\WireSerialization.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,Revenj.Serialization,WireSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\WireSerialization.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDateNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestampNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffsetNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeColorNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,Cyclomatic complexity of the method is 9
Complex Method,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleFNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimalNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeIntNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLongNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,Cyclomatic complexity of the method is 9
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDoubleNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,Cyclomatic complexity of the method is 9
Complex Method,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloatNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,Cyclomatic complexity of the method is 11
Complex Method,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,Cyclomatic complexity of the method is 11
Complex Method,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeNullableCollection,Cyclomatic complexity of the method is 8
Complex Method,Revenj.Utility,AssemblyScanner,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Reflection\AssemblyScanner.cs,GetAssemblies,Cyclomatic complexity of the method is 8
Long Parameter List,Revenj.DatabasePersistence.Postgres,BulkReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\BulkRead.cs,Analyze,The method has 5 parameters. Parameters: dimensionsAndFacts' order' filter' limit' offset
Long Parameter List,Revenj.DatabasePersistence.Postgres,IPostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,Search,The method has 5 parameters. Parameters: filter' limit' offset' order' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,Search,The method has 5 parameters. Parameters: filter' limit' offset' order' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres,PostgresOlapCubeQuery<TSource>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresOlapCubeQuery.cs,Analyze,The method has 6 parameters. Parameters: dimensions' facts' order' filter' limit' offset
Long Parameter List,Revenj.DatabasePersistence.Postgres,PostgresOlapCubeQuery<TSource>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresOlapCubeQuery.cs,PrepareSql,The method has 6 parameters. Parameters: usedDimensions' usedFacts' order' filter' limit' offset
Long Parameter List,Revenj.DatabasePersistence.Postgres.Converters,HstoreConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,ParseDictionary,The method has 5 parameters. Parameters: reader' context' quoteContext' cur' matchEnd
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlInterval,The method has 5 parameters. Parameters: days' hours' minutes' seconds' milliseconds
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlInterval,The method has 6 parameters. Parameters: months' days' hours' minutes' seconds' milliseconds
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlInterval,The method has 7 parameters. Parameters: years' months' days' hours' minutes' seconds' milliseconds
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeTZ,The method has 5 parameters. Parameters: hours' minutes' seconds' microseconds' timeZone
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStamp,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeStamp,The method has 6 parameters. Parameters: year' month' day' hours' minutes' seconds
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStampTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeStampTZ,The method has 7 parameters. Parameters: year' month' day' hours' minutes' seconds' timezone
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBackendTypeInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,NpgsqlBackendTypeInfo,The method has 6 parameters. Parameters: OID' Name' NpgsqlDbType' DbType' Type' ConvertBackendToNative
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBackendTypeInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,NpgsqlBackendTypeInfo,The method has 9 parameters. Parameters: OID' Name' NpgsqlDbType' DbType' Type' ConvertBackendToNative' frameworkType' convertProviderToFramework' convertFrameworkToProvider
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlNativeTypeInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,NpgsqlNativeTypeInfo,The method has 5 parameters. Parameters: Name' NpgsqlDbType' DbType' Quote' ConvertNativeToBackend
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBackendTypeMapping,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,AddType,The method has 6 parameters. Parameters: OID' Name' NpgsqlDbType' DbType' Type' BackendConvert
Long Parameter List,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlNativeTypeMapping,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,AddType,The method has 5 parameters. Parameters: Name' NpgsqlDbType' DbType' Quote' NativeConvert
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,NpgsqlBind,The method has 5 parameters. Parameters: portalName' preparedStatementName' parameterFormatCodes' parameterValues' resultFormatCodes
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,NpgsqlStartupPacket,The method has 6 parameters. Parameters: packet_size' database_name' user_name' arguments' unused' optional_tty
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,CachingDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,CachingDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,CachingRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,CachingRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetBytes,The method has 5 parameters. Parameters: i' fieldOffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyRow,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRow.cs,GetChars,The method has 5 parameters. Parameters: i' fieldoffset' buffer' bufferoffset' length
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,NpgsqlRowDescription,The method has 5 parameters. Parameters: stream' type_mapping' compatVersion' buffer' queue
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParameter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Parameter\NpgsqlParameter.cs,NpgsqlParameter,The method has 10 parameters. Parameters: parameterName' parameterType' size' sourceColumn' direction' isNullable' precision' scale' sourceVersion' value
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParameter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Parameter\NpgsqlParameter.cs,NpgsqlParameter,The method has 10 parameters. Parameters: parameterName' parameterType' size' sourceColumn' direction' isNullable' precision' scale' sourceVersion' value
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadChars,The method has 5 parameters. Parameters: stream' output' maxChars' maxRead' outputIdx
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadEscapedBytes,The method has 6 parameters. Parameters: stream' buffer' output' maxBytes' maxRead' outputIdx
Long Parameter List,Revenj.DatabasePersistence.Postgres.Npgsql,HashAlgorithm,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\HashAlgorithm.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,ArrayMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\ArrayMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,DatabaseSpecificationFunctions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\DatabaseSpecificationFunctions.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,DateTimeMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\DateTimeMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,DecimalMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\DecimalMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,DictionaryMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\DictionaryMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,ExpressionShortCircuiting,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\ExpressionShortCircuiting.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LinqMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LinqMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,MathMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\MathMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,NullValuesImpedanceMismatch,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\NullValuesImpedanceMismatch.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,SetMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\SetMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,StringMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\StringMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,TreeMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\TreeMethods.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,MainQueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\MainQueryParts.cs,MainQueryParts,The method has 6 parameters. Parameters: locator' factory' simplifications' expressionMatchers' memberMatchers' projectionMatchers
Long Parameter List,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,QueryParts,The method has 7 parameters. Parameters: locator' context' converterFactory' simplifications' expressionMatchers' memberMatchers' projectionMatchers
Long Parameter List,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,AddSelectPart,The method has 5 parameters. Parameters: qs' sql' name' type' instancer
Long Parameter List,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,ProcessLimitAndOffsetOperators,The method has 5 parameters. Parameters: sb' limit' offset' first' single
Long Parameter List,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,IExpressionMatcher,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\IExpressionMatcher.cs,TryMatch,The method has 5 parameters. Parameters: expression' queryBuilder' visitExpression' context' converter
Long Parameter List,Revenj.Extensibility,CastleDynamicProxyProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\CastleDynamicProxyProvider.cs,CreateInterfaceProxy,The method has 5 parameters. Parameters: interfaceToProxy' instance' typesToProxy' selector' interceptors
Long Parameter List,Revenj.Extensibility,CastleDynamicProxyProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\CastleDynamicProxyProvider.cs,CreateClassProxy,The method has 5 parameters. Parameters: classToProxy' typesToProxy' arguments' selector' interceptors
Long Parameter List,Revenj.Extensibility,IDynamicProxyProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\IDynamicProxyProvider.cs,CreateInterfaceProxy,The method has 5 parameters. Parameters: interfaceToProxy' instance' typesToProxy' selector' interceptors
Long Parameter List,Revenj.Extensibility,IDynamicProxyProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\IDynamicProxyProvider.cs,CreateClassProxy,The method has 5 parameters. Parameters: classToProxy' typesToProxy' arguments' selector' interceptors
Long Parameter List,Revenj.Extensibility,ImportExternalAttribute,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,ImportExternalAttribute,The method has 5 parameters. Parameters: implementationType' constructorSignature' metadata' contractKey' contractType
Long Parameter List,Revenj.Extensibility,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The method has 7 parameters. Parameters: errorCheck' errorCode' arg0' arg1' arg2' arg3' inner
Long Parameter List,Revenj.Extensibility,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Setup.cs,UseAutofac,The method has 6 parameters. Parameters: pluginAssemblies' pluginPaths' withExternalConfiguration' loadModules' withAspects' dslAspects
Long Parameter List,Revenj.Extensibility,AutofacContainerBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Setup.cs,AutofacContainerBuilder,The method has 5 parameters. Parameters: pluginAssemblies' pluginPaths' loadModules' withAspects' dslAspects
Long Parameter List,Revenj.Extensibility.Autofac.Builder,RegistrationBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Builder\RegistrationBuilder.cs,CreateRegistration,The method has 5 parameters. Parameters: id' data' activator' services' target
Long Parameter List,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,RegisterGenericDecorator,The method has 5 parameters. Parameters: builder' decoratorType' decoratedServiceType' fromKey' toKey
Long Parameter List,Revenj.Extensibility.Autofac.Core,ActivatedEventArgs<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\ActivatedEventArgs.cs,ActivatedEventArgs,The method has 5 parameters. Parameters: service' context' component' parameters' instance
Long Parameter List,Revenj.Extensibility.Autofac.Core,ActivatingEventArgs<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\ActivatingEventArgs.cs,ActivatingEventArgs,The method has 5 parameters. Parameters: service' context' component' parameters' instance
Long Parameter List,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ReflectionActivator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ReflectionActivator.cs,ReflectionActivator,The method has 5 parameters. Parameters: implementationType' constructorFinder' constructorSelector' configuredParameters' configuredProperties
Long Parameter List,Revenj.Extensibility.Autofac.Core.Registration,ComponentRegistration,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Registration\ComponentRegistration.cs,ComponentRegistration,The method has 7 parameters. Parameters: id' activator' lifetime' sharing' ownership' services' metadata
Long Parameter List,Revenj.Extensibility.Autofac.Core.Registration,ComponentRegistration,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Registration\ComponentRegistration.cs,ComponentRegistration,The method has 8 parameters. Parameters: id' activator' lifetime' sharing' ownership' services' metadata' target
Long Parameter List,Revenj.Extensibility.Autofac.Core.Resolving,InstanceLookup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Resolving\InstanceLookup.cs,InstanceLookup,The method has 5 parameters. Parameters: service' registration' scope' mostNestedVisibleScope' parameters
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The method has 6 parameters. Parameters: s' info' pm' r' c' p
Long Parameter List,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericRegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericRegistrationExtensions.cs,RegisterGenericDecorator,The method has 5 parameters. Parameters: builder' decoratorType' decoratedServiceType' fromKey' toKey
Long Parameter List,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryBindServiceType,The method has 5 parameters. Parameters: service' configuredOpenGenericServices' openGenericImplementationType' constructedImplementationType' constructedServices
Long Parameter List,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: factory' serviceType' serviceKey' ifAlreadyRegistered' isStaticallyChecked
Long Parameter List,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The method has 5 parameters. Parameters: serviceType' serviceKey' requiredServiceType' compositeParentKey' scope
Long Parameter List,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingResolutionScope,The method has 5 parameters. Parameters: scope' assignableFromServiceType' serviceKey' outermost' throwIfNotFound
Long Parameter List,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Container,The method has 6 parameters. Parameters: rules' registry' singletonScope' scopeContext' openedScope' disposed
Long Parameter List,DryIoc,Registry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Registry,The method has 7 parameters. Parameters: services' decorators' wrappers' defaultFactoryDelegateCache' keyedFactoryDelegateCache' factoryExpressionCache' resolutionStateCache
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: registrator' serviceType' factory' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 8 parameters. Parameters: registrator' serviceType' implementationType' reuse' with' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 7 parameters. Parameters: registrator' implementationType' reuse' with' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' serviceTypes' implementationType' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 9 parameters. Parameters: registrator' implTypes' reuse' made' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 9 parameters. Parameters: registrator' implTypeAssemblies' serviceTypeCondition' reuse' made' setup' ifAlreadyRegistered' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterDelegate,The method has 6 parameters. Parameters: registrator' factoryDelegate' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterDelegate,The method has 7 parameters. Parameters: registrator' serviceType' factoryDelegate' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterInstance,The method has 8 parameters. Parameters: container' serviceType' instance' reuse' ifAlreadyRegistered' preventDisposal' weaklyReferenced' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterInstance,The method has 7 parameters. Parameters: container' instance' reuse' ifAlreadyRegistered' preventDisposal' weaklyReferenced' serviceKey
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,IsRegistered,The method has 5 parameters. Parameters: registrator' serviceType' serviceKey' factoryType' condition
Long Parameter List,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Unregister,The method has 5 parameters. Parameters: registrator' serviceType' serviceKey' factoryType' condition
Long Parameter List,DryIoc,Resolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Resolve,The method has 5 parameters. Parameters: resolver' serviceType' serviceKey' ifUnresolved' requiredServiceType
Long Parameter List,DryIoc,Request,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Push,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc,Request,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Request,The method has 6 parameters. Parameters: parent' containerWeakRef' serviceInfo' resolvedFactory' funcArgs' scope
Long Parameter List,DryIoc,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The method has 6 parameters. Parameters: cacheFactoryExpression' lazyMetadata' metadata' condition' openResolutionScope' reuseWrappers
Long Parameter List,DryIoc,ServiceSetup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ServiceSetup,The method has 6 parameters. Parameters: cacheFactoryExpression' lazyMetadata' metadata' condition' openResolutionScope' reuseWrappers
Long Parameter List,DryIoc,Parameters,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Name,The method has 6 parameters. Parameters: source' name' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc,Parameters,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Type,The method has 5 parameters. Parameters: source' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,All,The method has 5 parameters. Parameters: withNonPublic' withPrimitive' withFields' ifUnresolved' withInfo
Long Parameter List,DryIoc,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Name,The method has 6 parameters. Parameters: source' name' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc,IResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc,IResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The method has 5 parameters. Parameters: serviceType' serviceKey' requiredServiceType' compositeParentKey' scope
Long Parameter List,DryIoc,IRegistrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: factory' serviceType' serviceKey' ifAlreadyRegistered' isStaticallyChecked
Long Parameter List,DryIoc,IScopeAccess,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingResolutionScope,The method has 5 parameters. Parameters: scope' assignableFromServiceType' serviceKey' outermost' throwIfNotFound
Long Parameter List,DryIoc,ContainerException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Of,The method has 7 parameters. Parameters: errorCheck' errorCode' arg0' arg1' arg2' arg3' inner
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,If,The method has 6 parameters. Parameters: throwCondition' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIf,The method has 6 parameters. Parameters: arg0' throwCondition' error' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIf,The method has 6 parameters. Parameters: arg0' throwCondition' error' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNull,The method has 6 parameters. Parameters: arg' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNotOf,The method has 5 parameters. Parameters: arg0' arg1' error' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNotImplementedBy,The method has 5 parameters. Parameters: arg0' arg1' error' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,IfThrows,The method has 6 parameters. Parameters: operation' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,It,The method has 5 parameters. Parameters: error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,For,The method has 5 parameters. Parameters: error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc,PrintTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Print,The method has 5 parameters. Parameters: s' x' quote' itemSeparator' getTypeName
Long Parameter List,DryIoc,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ImTreeMap,The method has 6 parameters. Parameters: hash' key' value' conficts' left' right
Long Parameter List,DryIoc,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,AddOrUpdate,The method has 5 parameters. Parameters: hash' key' value' update' updateOnly
Long Parameter List,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: factory' serviceType' serviceKey' ifAlreadyRegistered' isStaticallyChecked
Long Parameter List,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The method has 5 parameters. Parameters: serviceType' serviceKey' requiredServiceType' compositeParentKey' scope
Long Parameter List,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingResolutionScope,The method has 5 parameters. Parameters: scope' assignableFromServiceType' serviceKey' outermost' throwIfNotFound
Long Parameter List,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Container,The method has 6 parameters. Parameters: rules' registry' singletonScope' scopeContext' openedScope' disposed
Long Parameter List,DryIoc.Reflection,Registry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Registry,The method has 7 parameters. Parameters: services' decorators' wrappers' defaultFactoryDelegateCache' keyedFactoryDelegateCache' factoryExpressionCache' resolutionStateCache
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: registrator' serviceType' factory' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 8 parameters. Parameters: registrator' serviceType' implementationType' reuse' with' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 7 parameters. Parameters: registrator' implementationType' reuse' with' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 6 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' serviceTypes' implementationType' reuse' made' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 9 parameters. Parameters: registrator' implTypes' reuse' made' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' reuse' made' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 8 parameters. Parameters: registrator' made' reuse' setup' ifAlreadyRegistered' serviceTypeCondition' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterMany,The method has 9 parameters. Parameters: registrator' implTypeAssemblies' serviceTypeCondition' reuse' made' setup' ifAlreadyRegistered' nonPublicServiceTypes' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterDelegate,The method has 6 parameters. Parameters: registrator' factoryDelegate' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterDelegate,The method has 7 parameters. Parameters: registrator' serviceType' factoryDelegate' reuse' setup' ifAlreadyRegistered' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterInstance,The method has 8 parameters. Parameters: container' serviceType' instance' reuse' ifAlreadyRegistered' preventDisposal' weaklyReferenced' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RegisterInstance,The method has 7 parameters. Parameters: container' instance' reuse' ifAlreadyRegistered' preventDisposal' weaklyReferenced' serviceKey
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,IsRegistered,The method has 5 parameters. Parameters: registrator' serviceType' serviceKey' factoryType' condition
Long Parameter List,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Unregister,The method has 5 parameters. Parameters: registrator' serviceType' serviceKey' factoryType' condition
Long Parameter List,DryIoc.Reflection,Resolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Resolve,The method has 5 parameters. Parameters: resolver' serviceType' serviceKey' ifUnresolved' requiredServiceType
Long Parameter List,DryIoc.Reflection,Request,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Push,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc.Reflection,Request,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Request,The method has 6 parameters. Parameters: parent' containerWeakRef' serviceInfo' resolvedFactory' funcArgs' scope
Long Parameter List,DryIoc.Reflection,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The method has 6 parameters. Parameters: cacheFactoryExpression' lazyMetadata' metadata' condition' openResolutionScope' reuseWrappers
Long Parameter List,DryIoc.Reflection,ServiceSetup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ServiceSetup,The method has 6 parameters. Parameters: cacheFactoryExpression' lazyMetadata' metadata' condition' openResolutionScope' reuseWrappers
Long Parameter List,DryIoc.Reflection,Parameters,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Name,The method has 6 parameters. Parameters: source' name' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc.Reflection,Parameters,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Type,The method has 5 parameters. Parameters: source' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc.Reflection,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,All,The method has 5 parameters. Parameters: withNonPublic' withPrimitive' withFields' ifUnresolved' withInfo
Long Parameter List,DryIoc.Reflection,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Name,The method has 6 parameters. Parameters: source' name' requiredServiceType' serviceKey' ifUnresolved' defaultValue
Long Parameter List,DryIoc.Reflection,IResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveKeyed,The method has 5 parameters. Parameters: serviceType' serviceKey' ifUnresolved' requiredServiceType' scope
Long Parameter List,DryIoc.Reflection,IResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The method has 5 parameters. Parameters: serviceType' serviceKey' requiredServiceType' compositeParentKey' scope
Long Parameter List,DryIoc.Reflection,IRegistrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Register,The method has 5 parameters. Parameters: factory' serviceType' serviceKey' ifAlreadyRegistered' isStaticallyChecked
Long Parameter List,DryIoc.Reflection,IScopeAccess,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingResolutionScope,The method has 5 parameters. Parameters: scope' assignableFromServiceType' serviceKey' outermost' throwIfNotFound
Long Parameter List,DryIoc.Reflection,ContainerException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Of,The method has 7 parameters. Parameters: errorCheck' errorCode' arg0' arg1' arg2' arg3' inner
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,If,The method has 6 parameters. Parameters: throwCondition' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIf,The method has 6 parameters. Parameters: arg0' throwCondition' error' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIf,The method has 6 parameters. Parameters: arg0' throwCondition' error' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNull,The method has 6 parameters. Parameters: arg' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNotOf,The method has 5 parameters. Parameters: arg0' arg1' error' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfNotImplementedBy,The method has 5 parameters. Parameters: arg0' arg1' error' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,IfThrows,The method has 6 parameters. Parameters: operation' error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,It,The method has 5 parameters. Parameters: error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,Throw,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,For,The method has 5 parameters. Parameters: error' arg0' arg1' arg2' arg3
Long Parameter List,DryIoc.Reflection,PrintTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Print,The method has 5 parameters. Parameters: s' x' quote' itemSeparator' getTypeName
Long Parameter List,DryIoc.Reflection,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ImTreeMap,The method has 6 parameters. Parameters: hash' key' value' conficts' left' right
Long Parameter List,DryIoc.Reflection,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,AddOrUpdate,The method has 5 parameters. Parameters: hash' key' value' update' updateOnly
Long Parameter List,DryIoc.MefAttributedModel,ImportExternalAttribute,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,ImportExternalAttribute,The method has 5 parameters. Parameters: implementationType' constructorSignature' metadata' contractKey' contractType
Long Parameter List,DryIoc.MefAttributedModel,ImportExternalAttribute,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,ImportExternalAttribute,The method has 5 parameters. Parameters: implementationType' constructorSignature' metadata' contractKey' contractType
Long Parameter List,DryIoc.MefAttributedModel,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The method has 7 parameters. Parameters: errorCheck' errorCode' arg0' arg1' arg2' arg3' inner
Long Parameter List,DryIoc.MefAttributedModel,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The method has 7 parameters. Parameters: errorCheck' errorCode' arg0' arg1' arg2' arg3' inner
Long Parameter List,Revenj.Serialization,GenericDataContractResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\GenericDataContractResolver.cs,TryResolveType,The method has 5 parameters. Parameters: type' declaredType' knownTypeResolver' typeName' typeNamespace
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,,The length of the parameter functionNeedsColumnListDefinition is 33.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnection.cs,,The length of the parameter ProvideClientCertificatesCallbackDelegate is 41.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnection.cs,,The length of the parameter CertificateSelectionCallbackDelegate is 36.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnection.cs,,The length of the parameter CertificateValidationCallbackDelegate is 37.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnection.cs,,The length of the parameter PrivateKeySelectionCallbackDelegate is 35.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,,The length of the parameter _caseInsensitiveNameIndexTable is 30.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlTransaction,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlTransaction.cs,,The length of the parameter Exception_SavePointNotSupported is 31.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlTransaction,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlTransaction.cs,,The length of the parameter Exception_SavePointWithSemicolon is 32.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParameter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Parameter\NpgsqlParameter.cs,,The length of the parameter Exception_ParameterTypeIsOnlyArray is 34.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlConnectedState.cs,,The length of the parameter Exception_AuthenticationMethodNotSupported is 42.
Long Identifier,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlConnectedState.cs,,The length of the parameter Log_AuthenticationClearTextRequest is 34.
Long Identifier,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,,The length of the parameter BeforeCreationAspectDictionary is 30.
Long Identifier,Revenj.Extensibility,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter _getImportedPropertiesAndFields is 31.
Long Identifier,Revenj.Extensibility,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter UnsupportedMultipleFactoryTypes is 31.
Long Identifier,Revenj.Extensibility,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter ExportManyDoesNotExportAnyType is 30.
Long Identifier,Revenj.Extensibility.Autofac.Configuration,ComponentElement,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\ComponentElement.cs,,The length of the parameter InstanceOwnershipAttributeName is 30.
Long Identifier,Revenj.Extensibility.Autofac.Core.Registration,ComponentRegistry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Registration\ComponentRegistry.cs,,The length of the parameter _dynamicRegistrationSourcesArray is 32.
Long Identifier,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateFuncGenerator,The length of the parameter activatorComponentRegistrationParam is 35.
Long Identifier,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateGenerator,The length of the parameter activatorComponentRegistrationParam is 35.
Long Identifier,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryBindServiceType,The length of the parameter constructedImplementationTypeTmp is 32.
Long Identifier,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryMapImplementationGenericArguments,The length of the parameter implementationGenericArgumentDefinitions is 40.
Long Identifier,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryMapImplementationGenericArguments,The length of the parameter serviceArgumentDefinitionToArgumentMapping is 42.
Long Identifier,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryFindServiceArgumentForImplementationArgumentDefinition,The length of the parameter implementationGenericArgumentDefinition is 39.
Long Identifier,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryFindServiceArgumentForImplementationArgumentDefinition,The length of the parameter serviceArgumentDefinitionToArgument is 35.
Long Identifier,DryIoc,Rules,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter _factoryDelegateCompilationToDynamicAssembly is 44.
Long Identifier,DryIoc,FactoryMethod,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ConstructorWithResolvableArguments is 34.
Long Identifier,DryIoc,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ExcludedGeneralPurposeServiceTypes is 34.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToResolveFromRegisteredServices is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ImplementationIsNotAssignableToServiceType is 42.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter MadeOfTypeNotAssignableToImplementationType is 43.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericRequiresFactoryProvider is 45.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericImplWithNonGenericService is 47.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericServiceWithMissingTypeArgs is 48.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringNotAGenericTypedefImplType is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringNotAGenericTypedefServiceType is 40.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoDefinedMethodToSelectFromMultipleConstructors is 47.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchedImplementedTypesWithServiceType is 40.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ExpectedClosedGenericServiceType is 32.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NotFoundOpenGenericImplTypeArgInService is 39.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToGetConstructorFromSelector is 34.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToFindCtorWithAllResolvableArgs is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToFindMatchingCtorForFuncWithArgs is 39.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegedFactoryDlgResultNotOfServiceType is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteredInstanceIsNotAssignableToServiceType is 46.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NotFoundSpecifiedWritablePropertyOrField is 40.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter PushingToRequestWithoutFactory is 30.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchedGenericParamConstraints is 32.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter GenericWrapperWithMultipleTypeArgsShouldSpecifyArgIndex is 55.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter GenericWrapperTypeArgIndexOutOfBounds is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NonGenericWrapperMayWrapOnlyRequiredServiceType is 47.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter DependencyHasShorterReuseLifespan is 33.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ServiceIsNotAssignableFromFactoryMethod is 39.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter FactoryObjIsNullInFactoryMethod is 31.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter FactoryObjProvidedButMethodIsStatic is 35.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToRegisterDuplicateDefault is 32.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter WrappedNotAssignableFromRequiredType is 36.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegReusedObjWrapperIsNotIreused is 31.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RecyclableReuseWrapperIsRecycled is 32.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchingScopeWhenRegisteringInstance is 38.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ResolutionScopeIsNotSupportedForRegisterInstance is 48.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedFactoryMemberExpression is 33.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedExpressionInsteadOfArgMethod is 38.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedExpressionInsteadOfConstant is 37.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter InjectedCustomValueIsOfDifferentType is 36.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ArgOfValueIsProvidedButNoArgValues is 34.
Long Identifier,DryIoc,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ArgOfValueIndesIsOutOfProvidedArgValues is 39.
Long Identifier,DryIoc,Portable,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter _getEnvCurrentManagedThreadIdMethod is 35.
Long Identifier,DryIoc.Reflection,Rules,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter _factoryDelegateCompilationToDynamicAssembly is 44.
Long Identifier,DryIoc.Reflection,FactoryMethod,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ConstructorWithResolvableArguments is 34.
Long Identifier,DryIoc.Reflection,Registrator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ExcludedGeneralPurposeServiceTypes is 34.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToResolveFromRegisteredServices is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ImplementationIsNotAssignableToServiceType is 42.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter MadeOfTypeNotAssignableToImplementationType is 43.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericRequiresFactoryProvider is 45.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericImplWithNonGenericService is 47.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringOpenGenericServiceWithMissingTypeArgs is 48.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringNotAGenericTypedefImplType is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteringNotAGenericTypedefServiceType is 40.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoDefinedMethodToSelectFromMultipleConstructors is 47.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchedImplementedTypesWithServiceType is 40.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ExpectedClosedGenericServiceType is 32.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NotFoundOpenGenericImplTypeArgInService is 39.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToGetConstructorFromSelector is 34.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToFindCtorWithAllResolvableArgs is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToFindMatchingCtorForFuncWithArgs is 39.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegedFactoryDlgResultNotOfServiceType is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegisteredInstanceIsNotAssignableToServiceType is 46.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NotFoundSpecifiedWritablePropertyOrField is 40.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter PushingToRequestWithoutFactory is 30.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchedGenericParamConstraints is 32.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter GenericWrapperWithMultipleTypeArgsShouldSpecifyArgIndex is 55.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter GenericWrapperTypeArgIndexOutOfBounds is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NonGenericWrapperMayWrapOnlyRequiredServiceType is 47.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter DependencyHasShorterReuseLifespan is 33.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ServiceIsNotAssignableFromFactoryMethod is 39.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter FactoryObjIsNullInFactoryMethod is 31.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter FactoryObjProvidedButMethodIsStatic is 35.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnableToRegisterDuplicateDefault is 32.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter WrappedNotAssignableFromRequiredType is 36.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RegReusedObjWrapperIsNotIreused is 31.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter RecyclableReuseWrapperIsRecycled is 32.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter NoMatchingScopeWhenRegisteringInstance is 38.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ResolutionScopeIsNotSupportedForRegisterInstance is 48.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedFactoryMemberExpression is 33.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedExpressionInsteadOfArgMethod is 38.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter UnexpectedExpressionInsteadOfConstant is 37.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter InjectedCustomValueIsOfDifferentType is 36.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ArgOfValueIsProvidedButNoArgValues is 34.
Long Identifier,DryIoc.Reflection,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter ArgOfValueIndesIsOutOfProvidedArgValues is 39.
Long Identifier,DryIoc.Reflection,Portable,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,,The length of the parameter _getEnvCurrentManagedThreadIdMethod is 35.
Long Identifier,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter _getImportedPropertiesAndFields is 31.
Long Identifier,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter _getImportedPropertiesAndFields is 31.
Long Identifier,DryIoc.MefAttributedModel,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter UnsupportedMultipleFactoryTypes is 31.
Long Identifier,DryIoc.MefAttributedModel,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter ExportManyDoesNotExportAnyType is 30.
Long Identifier,DryIoc.MefAttributedModel,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter UnsupportedMultipleFactoryTypes is 31.
Long Identifier,DryIoc.MefAttributedModel,Error,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,,The length of the parameter ExportManyDoesNotExportAnyType is 30.
Long Statement,DSL,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,Setup,The length of the statement  "			return Setup(builder' withAspects' externalConfiguration' setupDatabase != null ? new[] { setupDatabase } : new Action<IObjectFactoryBuilder>[0]); " is 146.
Long Statement,DSL,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType<GenericDeserializationBinder' GenericDeserializationBinder' SerializationBinder>(InstanceScope.Singleton); " is 127.
Long Statement,DSL,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType(typeof(JsonSerialization)' InstanceScope.Singleton' false' typeof(ISerialization<string>)' typeof(ISerialization<TextReader>)); " is 148.
Long Statement,DSL,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType(typeof(ProtobufSerialization)' InstanceScope.Singleton' false' typeof(ISerialization<MemoryStream>)' typeof(ISerialization<Stream>)); " is 154.
Long Statement,DSL,Postgres,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,Setup,The length of the statement  "			return DSL.Core.Setup(withAspects' externalConfiguration' b => Revenj.DatabasePersistence.Postgres.Setup.ConfigurePostgres(b' connectionString)); " is 145.
Long Statement,Revenj,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,Setup,The length of the statement  "			return Setup(builder' withAspects' externalConfiguration' setupDatabase != null ? new[] { setupDatabase } : new Action<IObjectFactoryBuilder>[0]); " is 146.
Long Statement,Revenj,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType<GenericDeserializationBinder' GenericDeserializationBinder' SerializationBinder>(InstanceScope.Singleton); " is 127.
Long Statement,Revenj,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType(typeof(JsonSerialization)' InstanceScope.Singleton' false' typeof(ISerialization<string>)' typeof(ISerialization<TextReader>)); " is 148.
Long Statement,Revenj,Core,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,ConfigureSerialization,The length of the statement  "			builder.RegisterType(typeof(ProtobufSerialization)' InstanceScope.Singleton' false' typeof(ISerialization<MemoryStream>)' typeof(ISerialization<Stream>)); " is 154.
Long Statement,Revenj,Postgres,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Core.cs,Setup,The length of the statement  "			return DSL.Core.Setup(withAspects' externalConfiguration' b => Revenj.DatabasePersistence.Postgres.Setup.ConfigurePostgres(b' connectionString)); " is 145.
Long Statement,Revenj,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,ConfigurePostgres,The length of the statement  "			builder.RegisterType<PostgresDatabaseNotification' IDataChangeNotification' IEagerNotification>(InstanceScope.Singleton); " is 121.
Long Statement,Revenj,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,ConfigurePostgres,The length of the statement  "			builder.RegisterType<PostgresObjectFactory' IPostgresConverterRepository' IPostgresConverterFactory>(InstanceScope.Singleton); " is 126.
Long Statement,Revenj,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "			var cs = ConfigurationManager.AppSettings["Revenj.ConnectionString"] ?? ConfigurationManager.AppSettings["ConnectionString"]; " is 125.
Long Statement,Revenj,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "				throw new ConfigurationErrorsException(@"ConnectionString is missing from configuration. Add ConnectionString to <appSettings> " is 126.
Long Statement,Revenj,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "Example: <add key=""ConnectionString"" value=""server=postgres.localhost;port=5432;database=MyDatabase;user=postgres;password=123456;encoding=unicode"" />"); " is 157.
Long Statement,Revenj.DatabasePersistence.Postgres,BulkReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\BulkRead.cs,Execute,The length of the statement  "					com = PostgresCommandFactory.PreparedCommand(Stream' preparedCommand.Name' preparedCommand.Query' preparedCommand.Types); " is 121.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_Notification,The length of the statement  "					TraceSource.TraceEvent(TraceEventType.Verbose' 5137' "Postgres notification: {0} with {1}"' e.Condition' e.AdditionalInformation); " is 130.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Track,The length of the statement  "				}).Select(it => new KeyValuePair<string[]' Lazy<T[]>>(it.URI' new Lazy<T[]>(() => GetRepository<T>(it.Name).Find(it.URI) as T[]))); " is 131.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,LogError,The length of the statement  "			TraceSource.TraceEvent(TraceEventType.Information' error' "{0}:{1} - {2}"' Connection.Host' Connection.Port' Connection.Database); " is 130.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,PrepareCommand,The length of the statement  "				TraceSource.TraceEvent(TraceEventType.Information' 5110' "{0}:{1} - {2}"' Connection.Host' Connection.Port' Connection.Database); " is 129.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,AddSource,The length of the statement  "					throw new FrameworkException("Unknown data source for type: " + typeof(T).FullName + ". Only queryable types can be used as data source"); " is 138.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,StartQuery,The length of the statement  "				TraceSource.TraceEvent(TraceEventType.Information' 5101' "Transactions: {0}' connections: {1}"' OpenTransactions.Count' OpenConnections.Count); " is 143.
Long Statement,Revenj.DatabasePersistence.Postgres,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,ConfigurePostgres,The length of the statement  "			builder.RegisterType<PostgresDatabaseNotification' IDataChangeNotification' IEagerNotification>(InstanceScope.Singleton); " is 121.
Long Statement,Revenj.DatabasePersistence.Postgres,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,ConfigurePostgres,The length of the statement  "			builder.RegisterType<PostgresObjectFactory' IPostgresConverterRepository' IPostgresConverterFactory>(InstanceScope.Singleton); " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "			var cs = ConfigurationManager.AppSettings["Revenj.ConnectionString"] ?? ConfigurationManager.AppSettings["ConnectionString"]; " is 125.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "				throw new ConfigurationErrorsException(@"ConnectionString is missing from configuration. Add ConnectionString to <appSettings> " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres,PostgresModule,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Load,The length of the statement  "Example: <add key=""ConnectionString"" value=""server=postgres.localhost;port=5432;database=MyDatabase;user=postgres;password=123456;encoding=unicode"" />"); " is 157.
Long Statement,Revenj.DatabasePersistence.Postgres.Converters,ArrayTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ArrayTuple.cs,InsertArray,The length of the statement  "			throw new FrameworkException("Should not happen. Insert array called on array tuple. Nested arrays are invalid construct."); " is 124.
Long Statement,Revenj.DatabasePersistence.Postgres.Converters,EmptyArrayTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ArrayTuple.cs,InsertArray,The length of the statement  "				throw new FrameworkException("Should not happen. Insert array called on array tuple. Nested arrays are invalid construct."); " is 124.
Long Statement,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The length of the statement  "			int micro = (int)(value.Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' value.Kind).Ticks) / 10; " is 145.
Long Statement,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The length of the statement  "			int micro = (int)(value.ToUniversalTime().Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' DateTimeKind.Utc).Ticks) / 10; " is 169.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ArrayBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\ArrayHandling.cs,ToArrayList,The length of the statement  "			//We're either dealing with a 1-dimension array or treating a row of an n-dimension array. In either case parse the elements and put them in our ArrayList " is 154.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Contains,The length of the statement  "			foreach (uint chunk in EnumChunks(item))//because last chunk is zero-filled in unused portion' it is safe to check it if searching for true " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Concat,The length of the statement  "			else if (_lastChunkLen == 0)//Not only more efficient case with special handling' but also reasonably likely to appear in real use quite often. " is 143.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The length of the statement  "						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean. " is 181.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,ToString,The length of the statement  "				sb.Append(Math.Abs(Hours).ToString("D2")).Append(':').Append(Math.Abs(Minutes).ToString("D2")).Append(':').Append(Math.Abs(seconds).ToString("0#.######"' System.Globalization.CultureInfo.InvariantCulture.NumberFormat)); " is 219.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBasicType,The length of the statement  "			return (((IFormattable)((IConvertible)NativeData).ToType(typeof(T)' null)).ToString(null' CultureInfo.InvariantCulture.NumberFormat)); " is 134.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("int2"' NpgsqlDbType.Smallint' DbType.Int16' false' BasicNativeToBackendTypeConverter.ToBasicType<short>); " is 132.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("int4"' NpgsqlDbType.Integer' DbType.Int32' false' BasicNativeToBackendTypeConverter.ToBasicType<int>); " is 129.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("int8"' NpgsqlDbType.Bigint' DbType.Int64' false' BasicNativeToBackendTypeConverter.ToBasicType<long>); " is 129.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("float4"' NpgsqlDbType.Real' DbType.Single' true' new ConvertNativeToBackendHandler(BasicNativeToBackendTypeConverter.ToSingleDouble)); " is 161.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("float8"' NpgsqlDbType.Double' DbType.Double' true' new ConvertNativeToBackendHandler(BasicNativeToBackendTypeConverter.ToSingleDouble)); " is 163.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,PrepareDefaultTypesMap,The length of the statement  "			nativeTypeMapping.AddType("numeric"' NpgsqlDbType.Numeric' DbType.Decimal' true' BasicNativeToBackendTypeConverter.ToBasicType<decimal>); " is 137.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "										  npgsqlmacaddr => (npgsqlmacaddr is PhysicalAddress ? (NpgsqlMacAddress)(PhysicalAddress)npgsqlmacaddr : npgsqlmacaddr)); " is 120.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "												  typeof(TimeSpan)' interval => (TimeSpan)(NpgsqlInterval)interval' intervalNpgsql => (intervalNpgsql is TimeSpan ? (NpgsqlInterval)(TimeSpan)intervalNpgsql : intervalNpgsql)); " is 174.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "											  typeof(DateTime)' date => (DateTime)(NpgsqlDate)date' npgsqlDate => (npgsqlDate is DateTime ? (NpgsqlDate)(DateTime)npgsqlDate : npgsqlDate)); " is 142.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "											  typeof(DateTime)' time => time is DateTime ? time : (DateTime)(NpgsqlTime)time' npgsqlTime => (npgsqlTime is TimeSpan ? (NpgsqlTime)(TimeSpan)npgsqlTime : npgsqlTime)); " is 168.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "											  typeof(DateTime)' timetz => (DateTime)(NpgsqlTimeTZ)timetz' npgsqlTimetz => (npgsqlTimetz is TimeSpan ? (NpgsqlTimeTZ)(TimeSpan)npgsqlTimetz : npgsqlTimetz)); " is 158.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "											  typeof(DateTime)' timestamp => (DateTime)(NpgsqlTimeStamp)timestamp' npgsqlTimestamp => (npgsqlTimestamp is DateTime ? (NpgsqlTimeStamp)(DateTime)npgsqlTimestamp : npgsqlTimestamp)); " is 182.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "							  typeof(DateTime)' timestamp => (DateTime)(NpgsqlTimeStampTZ)timestamp' npgsqlTimestampTZ => (npgsqlTimestampTZ is DateTime ? (NpgsqlTimeStampTZ)(DateTime)npgsqlTimestampTZ : npgsqlTimestampTZ)); " is 194.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,TypeInfoList,The length of the statement  "											  typeof(DateTime)' timestamptz => ((DateTime)(NpgsqlTimeStampTZ)timestamptz).ToLocalTime()' npgsqlTimestampTZ => (npgsqlTimestampTZ is DateTime ? (NpgsqlTimeStampTZ)(DateTime)npgsqlTimestampTZ : npgsqlTimestampTZ is DateTimeOffset ? (NpgsqlTimeStampTZ)(DateTimeOffset)npgsqlTimestampTZ : npgsqlTimestampTZ)); " is 307.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlNativeTypeInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,ConvertToBackendPlainQuery,The length of the statement  "					(this.Quote ? QuoteString(_ConvertNativeToBackend(this' NativeData' false)) : _ConvertNativeToBackend(this' NativeData' false)); " is 128.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExpectedTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,ChangeType,The length of the statement  "					return new DateTimeOffset(timetz.Ticks' new TimeSpan(timetz.TimeZone.Hours' timetz.TimeZone.Minutes' timetz.TimeZone.Seconds)); " is 127.
Long Statement,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExpectedTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,ChangeType,The length of the statement  "					return new DateTimeOffset(timestamptz.Ticks' new TimeSpan(timestamptz.TimeZone.Hours' timestamptz.TimeZone.Minutes' timestamptz.TimeZone.Seconds)); " is 147.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,AddDateTime,The length of the statement  "			AddString(string.Format("{0}-{1}-{2} {3}:{4}:{5}.{6}"' fieldValue.Year' fieldValue.Month' fieldValue.Day' fieldValue.Hour' fieldValue.Minute' fieldValue.Second' fieldValue.Millisecond)); " is 186.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlQuery.cs,Send,The length of the statement  "			// Workaround for seek exceptions when running under ms.net. TODO: Check why Npgsql may be letting behind data in the stream. " is 125.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Flush,The length of the statement  "				// However' if we do not forward the Flush to the underlying stream' we may have problems when chaining several streams. " is 120.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,ClearReadBufferBeforeWrite,The length of the statement  "				throw new NotSupportedException("Cannot write to a BufferedStream while the read buffer is not empty if the underlying stream is not seekable. Ensure that the stream underlying this BufferedStream can seek or avoid interleaving read and write operations on this BufferedStream."); " is 280.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,FlushWrite,The length of the statement  "							"BufferedStream: Write buffer must be allocated and write position must be in the bounds of the buffer in FlushWrite!"); " is 120.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Read,The length of the statement  "				throw new ArgumentException("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."); " is 178.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Write,The length of the statement  "				throw new ArgumentException("Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."); " is 178.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,WriteByte,The length of the statement  "			// We should not be flushing here' but only writing to the underlying stream' but previous version flushed' so we keep this. " is 124.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBufferedStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBufferedStream.cs,Seek,The length of the statement  "			// If the seek destination is still within the data currently in the buffer' we want to keep the buffer data and continue using it. " is 131.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,ExecuteReader,The length of the statement  "						//Adjust behaviour so source reader is sequential access - for speed - and doesn't close the connection - or it'll do so at the wrong time. " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetReader,The length of the statement  "						reader = forwardReader.Process(connector.ExecuteEnum(new NpgsqlExecute(bind.PortalName' 0))' cb' connector.BlockNotificationThread()' true); " is 140.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,PassEscapedArray,The length of the statement  "			int endAt = array.Length - 1;//leave last char for separate append as we don't have to continually check we're safe to add the next char too. " is 141.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,PassParam,The length of the statement  "			// Add parentheses wrapping parameter value before the type cast to avoid problems with Int16.MinValue' Int32.MinValue and Int64.MinValue " is 137.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,PassParam,The length of the statement  "						//We could test to see if \ is used anywhere' but then we could be doing quite an expensive check (if the value is large) for little gain. " is 138.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The length of the statement  "					// Check if just procedure name was passed. If so' does not replace parameter names and just pass parameter values in order they were added in parameters collection. Also check if command text finishes in a ";" which would make Npgsql incorrectly append a "()" when executing this command text. " is 294.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The length of the statement  "				var parameterIndex = new Dictionary<string' NpgsqlParameter>(parameters.Count' StringComparer.InvariantCultureIgnoreCase); " is 122.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The length of the statement  "				var len = parameters.Where(it => it.Direction == ParameterDirection.Input || it.Direction == ParameterDirection.InputOutput).Count(); " is 133.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,CheckFunctionNeedsColumnDefinitionList,The length of the statement  "				"select count(*) > 0 from pg_proc p left join pg_namespace n on p.pronamespace = n.oid where " + predicate + " and n.nspname=:nspname"; " is 135.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,CheckFunctionNeedsColumnDefinitionList,The length of the statement  "				// Instead of defaulting don't use the nspname' as an alternative' query pg_proc and pg_namespace to try and determine the nspname. " is 131.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,CheckFunctionNeedsColumnDefinitionList,The length of the statement  "				//schemaName = "public"; // This was removed after build 0.99.3 because the assumption that a function is in public is often incorrect. " is 135.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetPreparedCommandStream,The length of the statement  "				// Add parentheses wrapping parameter value before the type cast to avoid problems with Int16.MinValue' Int32.MinValue and Int64.MinValue " is 137.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetParseCommandText,The length of the statement  "				// Check if just procedure name was passed. If so' does not replace parameter names and just pass parameter values in order they were added in parameters collection. " is 165.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetParseCommandText,The length of the statement  "				parseCommand = string.Format("select * from {0}"' parseCommand); // This syntax is only available in 7.3+ as well SupportsPrepare. " is 130.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetParseCommandText,The length of the statement  "								parseCommand = ReplaceParameterValue(parseCommand' parameterName' string.Format("${0}::{1}{2}"' (i + 1)' parameters[i].TypeInfo.CastName' parameterSize)); " is 154.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetPrepareCommandText,The length of the statement  "				// Check if just procedure name was passed. If so' does not replace parameter names and just pass parameter values in order they were added in parameters collection. " is 165.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommandBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommandBuilder.cs,DeriveParameters,The length of the statement  "			// Updated after 0.99.3 to support the optional existence of a name qualifying schema and case insensitivity when the schema ror procedure name do not contain a quote. " is 167.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommandBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommandBuilder.cs,DeriveParameters,The length of the statement  "					"select proargnames' proargtypes from pg_proc p left join pg_namespace n on p.pronamespace = n.oid where proname=:proname and n.nspname=:nspname"; " is 146.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,SetValue,The length of the statement  "							throw new ArgumentException("Attempt to set compatibility with version " + value + " when using version " + THIS_VERSION); " is 122.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ReleasePlansPortals,The length of the statement  "						using (NpgsqlCommand cmd = new NpgsqlCommand(String.Format("deallocate \"{0}\";"' _planNamePrefix + i.ToString())' this)) " is 121.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ReleasePlansPortals,The length of the statement  "					// Ignore any error which may occur when releasing portals as this portal name may not be valid anymore. i.e.: the portal name was used on a prepared query which had errors. " is 173.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ReleasePlansPortals,The length of the statement  "				// Ignore any error which may occur when releasing portals as this portal name may not be valid anymore. i.e.: the portal name was used on a prepared query which had errors. " is 173.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,Open,The length of the statement  "				|| !string.Equals(clientEncodingParam.ParameterValue' "UTF8"' StringComparison.OrdinalIgnoreCase) && !string.Equals(clientEncodingParam.ParameterValue' "UNICODE"' StringComparison.OrdinalIgnoreCase)) " is 199.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,CheckStringConformanceRequirements,The length of the statement  "			if (_serverParameters.TryGetValue("escape_string_warning"' out warning) && warning.ParameterValue == "on")//try the most commonly set at time of coding first " is 157.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlContextHolder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ProcessServerMessages,The length of the statement  "						//To give runtime chance to release correctly the lock. See http://pgfoundry.org/forum/message.php?msg_id=1002650 for more information. " is 135.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,ReleaseConnector,The length of the statement  "			if (Connector.CurrentReader != null && (Thread.CurrentThread.ThreadState & (ThreadState.Aborted | ThreadState.AbortRequested)) == 0) " is 132.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,UngetConnector,The length of the statement  "						//If the connector fails to release its resources then it is probably broken' so make sure we don't add it to the queue. " is 120.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetPrimaryKeys,The length of the statement  "				"select a.attname from pg_catalog.pg_class ct' pg_catalog.pg_class ci' pg_catalog.pg_attribute a' pg_catalog.pg_index i  WHERE ct.oid=i.indrelid AND ci.oid=i.indexrelid  AND a.attrelid=ci.oid AND i.indisprimary AND ct.relname = :tablename"; " is 240.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetKeys,The length of the statement  "				"select a.attname' ci.relname' i.indisprimary from pg_catalog.pg_class ct' pg_catalog.pg_class ci' pg_catalog.pg_attribute a' pg_catalog.pg_index i WHERE ct.oid=i.indrelid AND ci.oid=i.indexrelid AND a.attrelid=ci.oid AND i.indisunique AND ct.oid = :tableOid order by ci.relname"; " is 280.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,IsNullable,The length of the statement  "			string lookupKey = string.Format("{0}'{1}"' CurrentDescription[FieldIndex].TableOID' CurrentDescription[FieldIndex].ColumnAttributeNumber); " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetBaseColumnName,The length of the statement  "			string lookupKey = string.Format("{0}'{1}"' CurrentDescription[FieldIndex].TableOID' CurrentDescription[FieldIndex].ColumnAttributeNumber); " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,IsAutoIncrement,The length of the statement  "			string lookupKey = string.Format("{0}'{1}"' CurrentDescription[FieldIndex].TableOID' CurrentDescription[FieldIndex].ColumnAttributeNumber); " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetTablesFromOids,The length of the statement  "					"SELECT current_database()' nc.nspname' c.relname' c.oid FROM pg_namespace nc' pg_class c WHERE c.relnamespace = nc.oid AND (c.relkind = 'r' OR c.relkind = 'v') AND c.oid IN ("); " is 178.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetColumns,The length of the statement  "				"SELECT a.attname AS column_name' a.attnotnull AS column_notnull' a.attrelid AS table_id' a.attnum AS column_num' d.adsrc as column_default"); " is 142.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetColumns,The length of the statement  "				" FROM pg_attribute a LEFT OUTER JOIN pg_attrdef d ON a.attrelid = d.adrelid AND a.attnum = d.adnum WHERE a.attnum > 0 AND ("); " is 127.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlPromotableSinglePhaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlPromotableSinglePhaseNotification.cs,CreateResourceManager,The length of the statement  "				AppDomain rmDomain = AppDomain.CreateDomain("NpgsqlResourceManager"' AppDomain.CurrentDomain.Evidence' AppDomain.CurrentDomain.SetupInformation); " is 145.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,InitDictionary,The length of the statement  "				_caseInsensitiveNameIndexTable = new Dictionary<string' int>(fields_data.Length' StringComparer.InvariantCultureIgnoreCase); " is 124.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,InitDictionary,The length of the statement  "				_caseInsensitiveNameIndexTable = new Dictionary<string' int>(fields_data.Length' KanaWidthCaseInsensitiveComparator.INSTANCE); " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,FieldIndex,The length of the statement  "			if (_field_name_index_table.TryGetValue(fieldName' out ret) || _caseInsensitiveNameIndexTable.TryGetValue(fieldName' out ret)) " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlSchema,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlSchema.cs,GetDatabases,The length of the statement  "				"SELECT d.datname AS database_name' u.usename AS owner' pg_catalog.pg_encoding_to_char(d.encoding) AS encoding FROM pg_catalog.pg_database d LEFT JOIN pg_catalog.pg_user u ON d.datdba = u.usesysid"); " is 199.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlSchema,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlSchema.cs,GetColumns,The length of the statement  "				"SELECT table_catalog' table_schema' table_name' column_name' ordinal_position' column_default' is_nullable' udt_name AS data_type' character_maximum_length' character_octet_length' numeric_precision' numeric_precision_radix' numeric_scale' datetime_precision' character_set_catalog' character_set_schema' character_set_name' collation_catalog FROM information_schema.columns"); " is 378.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlSchema,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlSchema.cs,GetIndexColumns,The length of the statement  "					BuildCommand(getIndexColumns' restrictions' false' "current_database()"' "n.nspname"' "t.relname"' "i.relname"' "a.attname")) " is 125.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponsesEnum,The length of the statement  "					// throw an exception instead of trying to cancel query. This helps to prevent loop as CancelRequest will also try to stablish a connection and sends commands. " is 159.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponsesEnum,The length of the statement  "						// Changed message again to report about the two possible timeouts: connection or command as the establishment timeout only was confusing users when the timeout was a command timeout. " is 183.
Long Statement,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The length of the statement  "							yield return lastRowDescription = new NpgsqlRowDescription(stream' context.OidToNameMapping' context.CompatVersion' buffer' queue); " is 131.
Long Statement,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,EscapeForLike,The length of the statement  "					visitExpression(ConstantExpression.Constant(value.Replace(@"\"' @"\\").Replace("_"' "\\_").Replace("%"' "\\%")' typeof(string))); " is 129.
Long Statement,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,SetMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\SetMethods.cs,TryMatch,The length of the statement  "			if (dt.IsGenericType && dt.GetGenericTypeDefinition() == typeof(HashSet<>) && SupportedMethods.TryGetValue(mce.Method.Name' out mcd)) " is 133.
Long Statement,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,StringMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\StringMethods.cs,EscapeForLike,The length of the statement  "					visitExpression(ConstantExpression.Constant(value.Replace(@"\"' @"\\").Replace("_"' "\\_").Replace("%"' "\\%")' typeof(string))); " is 129.
Long Statement,Revenj.DatabasePersistence.Postgres.Plugins.QuerySimplifications,ContainsSubquery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\QuerySimplifications\ContainsSubquery.cs,Simplify,The length of the statement  "				: exp + " = ANY(" + (pe != null ? query.Context.Name + "\"" + pe.Name + "\"" : parts.GetSqlExpression(parts.MainFrom.FromExpression)) + ")"; " is 140.
Long Statement,Revenj.DatabasePersistence.Postgres.Plugins.QuerySimplifications,ContainsSubquery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\QuerySimplifications\ContainsSubquery.cs,FormatInQuery,The length of the statement  "					? exp + " = " + Revenj.DatabasePersistence.Postgres.NpgsqlTypes.TypeConverter.Convert(query.MainFrom.ItemType' array[0]) " is 120.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration,QueryExecutor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryExecutor.cs,ExecuteScalar,The length of the statement  "			var seedAggregate = queryModel.ResultOperators.LastOrDefault(it => it is AggregateFromSeedResultOperator) as AggregateFromSeedResultOperator; " is 141.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration,QueryExecutor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryExecutor.cs,ExecuteScalar,The length of the statement  "			var aggregate = queryModel.ResultOperators.LastOrDefault(it => it is AggregateResultOperator) as AggregateResultOperator; " is 121.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration,QueryExecutor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryExecutor.cs,ExecuteSingle,The length of the statement  "			return returnDefaultWhenEmpty ? ExecuteCollection<T>(queryModel).SingleOrDefault() : ExecuteCollection<T>(queryModel).Single(); " is 127.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration,SelectSubqueryData,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\SelectSubqueryData.cs,Create,The length of the statement  "				selects.Add(new KeyValuePair<IQuerySource' Func<object' BufferedTextReader' object>>(factory.QuerySource' factory.Instancer)); " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetFromPart,The length of the statement  "				sb.AppendFormat("FROM {0}"' GetQuerySourceFromExpression(MainFrom.ItemName' MainFrom.ItemType' MainFrom.FromExpression)); " is 121.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetInnerFromPart,The length of the statement  "			sb.AppendFormat(" FROM {0}"' GetQuerySourceFromExpression(MainFrom.ItemName' MainFrom.ItemType' MainFrom.FromExpression)); " is 122.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetOrderPart,The length of the statement  "	"' OrderBy.Last().Orderings.Select(o => GetSqlExpression(o.Expression) + (o.OrderingDirection == OrderingDirection.Desc ? " DESC " : " ASC ")))); " is 145.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetQuerySourceFromExpression,The length of the statement  "					return "(" + subquery.BuildSqlString(true).Replace("\"" + sqe.QueryModel.MainFromClause.ItemName + "\""' "\"" + name + "\"") + ") \"" + name + "\""; " is 148.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetQuerySourceFromExpression,The length of the statement  "				var inner = string.Join(" UNION ALL "' nae.Expressions.Select(it => "SELECT {0} AS \"{1}\"".With(GetSqlExpression(it)' name))); " is 127.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,ProcessLimitAndOffsetOperators,The length of the statement  "				throw new NotSupportedException("Unsupported combination of limits and offsets in query. More than one offset and more than one limit found."); " is 143.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,ProjectorBuildingExpressionTreeVisitor<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\ProjectorBuildingExpressionTreeVisitor.cs,BuildProjector,The length of the statement  "			// The visitor gives us the projector's body. It simply replaces all QuerySourceReferenceExpressions with calls to ResultObjectMapping.GetObject<T>(). " is 150.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,ProjectorBuildingExpressionTreeVisitor<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\ProjectorBuildingExpressionTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "			// Substitute generic parameter "T" of ResultObjectMapping.GetObject<T>() with type of query source item' then return a call to that method " is 139.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SelectGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SelectExpressionTreeVisitor.cs,VisitSubQueryExpression,The length of the statement  "			var projector = (IExecuteFunc)Activator.CreateInstance(typeof(GenericProjection<>).MakeGenericType(selector.Type)' model); " is 122.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitConstantExpression,The length of the statement  "					SqlExpression.Append('\'').Append(value).Append("'::\"").Append(type.Namespace).Append("\".\"").Append(type.Name).Append('"'); " is 126.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitMethodCallExpression,The length of the statement  "			var attr = expression.Method.GetCustomAttributes(typeof(DatabaseFunctionAttribute)' false) as DatabaseFunctionAttribute[]; " is 122.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SubqueryGeneratorQueryModelVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SubqueryGeneratorQueryModelVisitor.cs,ParseSubquery,The length of the statement  "			var visitor = new SubqueryGeneratorQueryModelVisitor(parentQuery' canQueryInMemory' queryModel.SelectClause.Selector' context); " is 127.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SubquerySelectExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SubquerySelectExpressionTreeVisitor.cs,VisitMemberAssignment,The length of the statement  "				Query.Selects[cnt].Sql = "\"{0}\" AS \"{1}\"".With(Query.Selects[cnt].Name' Query.ConverterFactory.GetName(memberAssigment.Member)); " is 132.
Long Statement,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SubquerySelectExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SubquerySelectExpressionTreeVisitor.cs,CreateUnhandledItemException,The length of the statement  "			var message = string.Format("The expression '{0}' (type: {1}) is not supported by this LINQ provider."' itemText' typeof(T)); " is 125.
Long Statement,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,Initialize,The length of the statement  "				AroundMethodAspectDictionary = new Dictionary<KeyValuePair<Type' MethodInfo>' List<Func<object' object[]' Func<object[]' object>' object>>>(); " is 142.
Long Statement,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,Initialize,The length of the statement  "				AfterMethodAspectDictionary = new Dictionary<KeyValuePair<Type' MethodInfo>' List<Func<object' object[]' object' object>>>(); " is 125.
Long Statement,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,GetInterceptors,The length of the statement  "			var around = CreateInterceptorDictionary<Func<object' object[]' Func<object[]' object>' object>>(type' a => a.AroundMethodAspectDictionary); " is 140.
Long Statement,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,GetInterceptors,The length of the statement  "			var after = CreateInterceptorDictionary<Func<object' object[]' object' object>>(type' a => a.AfterMethodAspectDictionary); " is 122.
Long Statement,Revenj.Extensibility,AutofacObjectFactory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\AutofacObjectFactory.cs,CreateScope,The length of the statement  "			factory.AutofacBuilders.Add(cb => cb.RegisterInstance(factory).As<IObjectFactory>().As<IServiceProvider>().ExternallyOwned()); " is 126.
Long Statement,Revenj.Extensibility,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,RegisterExports,The length of the statement  "			registrator.RegisterExports(types.ThrowIfNull().Select(GetRegistrationInfoOrDefault).Where(regInfo => regInfo != null)); " is 120.
Long Statement,Revenj.Extensibility,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The length of the statement  "			var message = string.Format(MefAttributedModel.Error.GetMessage(errorCode)' Print(arg0)' Print(arg1)' Print(arg2)' Print(arg3)); " is 128.
Long Statement,Revenj.Extensibility,PluginsProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\PluginsProvider.cs,FindPlugins,The length of the statement  "					throw new FrameworkException("Error loading plugins for " + typeof(TService).FullName + ". " + ex.InnerException.Message' ex.InnerException); " is 141.
Long Statement,Revenj.Extensibility.Autofac.Builder,RegistrationBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Builder\RegistrationBuilder.cs,CreateRegistration,The length of the statement  "			//TODO: this probably protects against some invalid registrations' but since none of the tests fail' let's ignore it for now " is 124.
Long Statement,Revenj.Extensibility.Autofac.Builder,RegistrationBuilder<TLimit;TActivatorData;TRegistrationStyle>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Builder\RegistrationBuilderOfTLAR.cs,As,The length of the statement  "			return As(new TypedService(typeof(TService1))' new TypedService(typeof(TService2))' new TypedService(typeof(TService3))); " is 121.
Long Statement,Revenj.Extensibility.Autofac.Builder,RegistrationBuilder<TLimit;TActivatorData;TRegistrationStyle>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Builder\RegistrationBuilderOfTLAR.cs,PropertiesAutowired,The length of the statement  "				RegistrationData.ActivatingHandlers.Add((s' e) => injector.InjectProperties(e.Context' e.Instance' !preserveSetValues)); " is 120.
Long Statement,Revenj.Extensibility.Autofac.Configuration,ConfigurationSettingsReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\ConfigurationSettingsReader.cs,SetInjectProperties,The length of the statement  "							"The value '{0}' is not valid for the inject-properties attribute. Valid values are 'yes' and 'no'."' component.InjectProperties)); " is 131.
Long Statement,Revenj.Extensibility.Autofac.Configuration,ConfigurationSettingsReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\ConfigurationSettingsReader.cs,SetOwnership,The length of the statement  "							"The value '{0}' is not valid for the ownership attribute. Valid values are 'lifetime-scope' (the default) and 'external'."' component.Ownership)); " is 147.
Long Statement,Revenj.Extensibility.Autofac.Configuration,ConfigurationSettingsReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\ConfigurationSettingsReader.cs,SetScope,The length of the statement  "							"The value '{0}' is not valid for the instance-scope attribute. Valid values are 'single-instance'' 'per-dependency' (the default) and 'per-lifetime-scope'."' component.InstanceScope)); " is 185.
Long Statement,Revenj.Extensibility.Autofac.Configuration,DictionaryElementTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\DictionaryElementCollection.cs,GetInstantiableType,The length of the statement  "                    Type[] generics = destinationType.IsGenericType ? destinationType.GetGenericArguments() : new[] { typeof(string)' typeof(object) }; " is 131.
Long Statement,Revenj.Extensibility.Autofac.Configuration,TypeManipulation,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\TypeManipulation.cs,ChangeToCompatibleType,The length of the statement  "                throw new ConfigurationErrorsException(String.Format("Cannot convert type from {0} to {1}."' value.GetType()' destinationType)); " is 128.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,WithMetadataFrom,The length of the statement  "			var metadataProperties = attrType.GetProperties(BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance); " is 120.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,WithMetadataFrom,The length of the statement  "					throw new ArgumentException(string.Format("A metadata attribute of type {0} was not found on {1}."' typeof(TAttribute)' t)); " is 124.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,WithMetadataFrom,The length of the statement  "					throw new ArgumentException(string.Format("More than one metadata attribute of type {0} was found on {1}."' typeof(TAttribute)' t)); " is 132.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,RegisterGenericDecorator,The length of the statement  "			return OpenGenericRegistrationExtensions.RegisterGenericDecorator(builder' decoratorType' decoratedServiceType' fromKey' toKey); " is 128.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,RegisterDecorator,The length of the statement  "			return LightweightAdapterRegistrationExtensions.RegisterDecorator<TService>(builder' (c' p' f) => decorator(c' f)' fromKey' toKey); " is 131.
Long Statement,Revenj.Extensibility.Autofac,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\RegistrationExtensions.cs,RegisterDecorator,The length of the statement  "			return LightweightAdapterRegistrationExtensions.RegisterDecorator<TService>(builder' (c' p' f) => decorator(f)' fromKey' toKey); " is 128.
Long Statement,Revenj.Extensibility.Autofac,TypeExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\TypeExtensions.cs,IsClosedTypeOf,The length of the statement  "				throw new ArgumentException(string.Format("The type '{0}' is not an open generic class or interface type."' openGeneric.FullName)); " is 131.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ConstructorParameterBinding,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ConstructorParameterBinding.cs,Instantiate,The length of the statement  "					string.Format(CultureInfo.CurrentCulture' "An exception was thrown while invoking the constructor '{0}' on type '{1}'."' TargetConstructor' TargetConstructor.DeclaringType.Name)' ex.InnerException); " is 198.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ConstructorParameterBinding,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ConstructorParameterBinding.cs,Instantiate,The length of the statement  "					string.Format(CultureInfo.CurrentCulture' "An exception was thrown while invoking the constructor '{0}' on type '{1}'."' TargetConstructor' TargetConstructor.DeclaringType.Name)' ex); " is 183.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,MatchingSignatureConstructorSelector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\MatchingSignatureConstructorSelector.cs,SelectConstructorBinding,The length of the statement  "				throw new DependencyResolutionException(string.Format("The required constructor on type '{0}'  with signature '{1}' is unavailable."' targetTypeName' signature)); " is 162.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,MatchingSignatureConstructorSelector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\MatchingSignatureConstructorSelector.cs,SelectConstructorBinding,The length of the statement  "			throw new DependencyResolutionException(string.Format("More than one constructor matches the signature '{0}'."' signature)); " is 124.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,MostParametersConstructorSelector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\MostParametersConstructorSelector.cs,SelectConstructorBinding,The length of the statement  "                .Select(binding => new { Binding = binding' ConstructorParameterLength = binding.TargetConstructor.GetParameters().Length }); " is 125.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,MostParametersConstructorSelector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\MostParametersConstructorSelector.cs,SelectConstructorBinding,The length of the statement  "                "Cannot choose between multiple constructors with equal length {0} on type '{1}'. Select the constructor explicitly' with the UsingConstructor() configuration method' when the component is registered."' " is 202.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ReflectionActivator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ReflectionActivator.cs,GetFactory,The length of the statement  "			var _defaultParameters = _configuredParameters.Concat(new Parameter[] { new AutowiringParameter()' new DefaultValueParameter() }); " is 130.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ReflectionActivator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ReflectionActivator.cs,GetFactory,The length of the statement  "				throw new DependencyResolutionException(string.Format("No constructors on type '{0}' can be found with '{1}'."' _implementationType' _constructorFinder)); " is 154.
Long Statement,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ReflectionActivator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ReflectionActivator.cs,GetBindingFailureMessage,The length of the statement  "				"None of the constructors found with '{0}' on type '{1}' can be invoked with the available services and parameters:{2}"' " is 120.
Long Statement,Revenj.Extensibility.Autofac.Core.Lifetime,LifetimeScope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Lifetime\LifetimeScope.cs,CheckNotDisposed,The length of the statement  "				throw new ObjectDisposedException("Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it has already been disposed."' innerException: null); " is 184.
Long Statement,Revenj.Extensibility.Autofac.Core.Lifetime,MatchingScopeLifetime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Lifetime\MatchingScopeLifetime.cs,FindScope,The length of the statement  "				CultureInfo.CurrentCulture' "No scope with a Tag matching '{0}' is visible from the scope in which the instance was requested. This generally indicates that a component registered as per-HTTP request is being reqested by a SingleInstance() component (or a similar scenario.) Under the web integration always request dependencies from the DependencyResolver.Current or ILifetimeScopeProvider.RequestLifetime' never from the container itself."' _matchExpressionCode)); " is 466.
Long Statement,Revenj.Extensibility.Autofac.Core.Registration,ComponentRegistry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Registration\ComponentRegistry.cs,UpdateInitialisedAdapters,The length of the statement  "				"[Autofac] Component '{0}' provides services that have already been adapted. Consider refactoring to ContainerBuilder.Build() rather than Update()."' " is 149.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateFuncGenerator,The length of the statement  "			var activatorParams = new[] { activatorServiceParam' activatorComponentRegistrationParam' activatorContextParam' activatorParamsParam }; " is 136.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateFuncGenerator,The length of the statement  "			var actualParams = new Expression[] { activatorServiceParam' actualInfoParam' actualPmParam' activatorComponentRegistrationParam' activatorContextParam' activatorParamsParam }; " is 176.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateFuncGenerator,The length of the statement  "			var activator = Expression.Lambda<Func<Service' IComponentRegistration' IComponentContext' IEnumerable<Parameter>' Delegate>>(methodCall' activatorParams); " is 155.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateGenerator,The length of the statement  "			var activatorParams = new[] { activatorServiceParam' activatorComponentRegistrationParam' activatorContextParam' activatorParamsParam }; " is 136.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateGenerator,The length of the statement  "			var resolveCall = makeResolveCall(activatorServiceParam' activatorComponentRegistrationParam' activatorContextParam' resolveParameterArray); " is 140.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,CreateGenerator,The length of the statement  "			var activator = Expression.Lambda<Func<Service' IComponentRegistration' IComponentContext' IEnumerable<Parameter>' Delegate>>(creator' activatorParams); " is 152.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The length of the statement  "					MapParameters(info' pm' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15)); " is 121.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeServiceCall,The length of the statement  "					MapParameters(info' pm' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg16)); " is 121.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The length of the statement  "					MapParameters(info' pm' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15)) " is 120.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,MakeLookupCall,The length of the statement  "					MapParameters(info' pm' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9' arg10' arg11' arg12' arg13' arg14' arg15' arg16)) " is 127.
Long Statement,Revenj.Extensibility.Autofac.Features.GeneratedFactories,GeneratedFactoryRegistrationSource,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\GeneratedFactoryRegistrationSource.cs,RegistrationsFor,The length of the statement  "						var rb = RegistrationBuilder.ForDelegate(ts.ServiceType' (c' p) => factory.Value.GenerateFactory(resultTypeService' r.Target' c' p)) " is 132.
Long Statement,Revenj.Extensibility.Autofac.Features.LazyDependencies,LazyRegistrationSource,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\LazyDependencies\LazyRegistrationSource.cs,GetOrCreate,The length of the statement  "				var lambda = Expression.Lambda<Func<Service' IComponentRegistration' IComponentRegistration>>(body' new[] { paramService' paramCR }); " is 133.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericDecoratorRegistrationSource,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericDecoratorRegistrationSource.cs,RegistrationsFor,The length of the statement  "			if (OpenGenericServiceBinder.TryBindServiceType(service' _registrationData.Services' _activatorData.ImplementationType' out constructedImplementationType' out services)) " is 169.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericRegistrationSource,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericRegistrationSource.cs,RegistrationsFor,The length of the statement  "			if (OpenGenericServiceBinder.TryBindServiceType(service' _registrationData.Services' _activatorData.ImplementationType' out constructedImplementationType' out services)) " is 169.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryMapImplementationGenericArguments,The length of the statement  "			var serviceArgumentDefinitionToArgumentMapping = serviceArgumentDefinitions.Zip(serviceGenericArguments' (a' b) => new KeyValuePair<Type' Type>(a' b)); " is 151.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,TryFindServiceArgumentForImplementationArgumentDefinition,The length of the statement  "					implementationGenericArgumentDefinition' argdef.Key.GetGenericArguments().Zip(argdef.Value.GetGenericArguments()' (a' b) => new KeyValuePair<Type' Type>(a' b)))) " is 161.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,EnforceBindable,The length of the statement  "						throw new ArgumentException(string.Format("The implementation type '{0}' does not support the interface '{1}'."' implementationType' service)); " is 143.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,EnforceBindable,The length of the statement  "					if (!Traverse.Across(implementationType' t => t.BaseType).Any(t => IsCompatibleGenericClassDefinition(t' service.ServiceType))) " is 127.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,EnforceBindable,The length of the statement  "						throw new ArgumentException(string.Format("The service '{1}' is not assignable from implementation type '{0}'."' implementationType' service)); " is 143.
Long Statement,Revenj.Extensibility.Autofac.Features.OpenGenerics,OpenGenericServiceBinder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\OpenGenerics\OpenGenericServiceBinder.cs,IsCompatibleGenericClassDefinition,The length of the statement  "			return implementor == serviceType || implementor.IsGenericType && implementor.GetGenericTypeDefinition() == serviceType; " is 120.
Long Statement,Revenj.Extensibility.Autofac.Integration.Mef,ExportConfigurationBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\ExportConfigurationBuilder.cs,As,The length of the statement  "            WithMetadata(CompositionConstants.ExportTypeIdentityMetadataName' AttributedModelServices.GetTypeIdentity(typeof(TContract))); " is 126.
Long Statement,Revenj.Extensibility.Autofac.Integration.Mef,ExportConfigurationBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\ExportConfigurationBuilder.cs,AsNamed,The length of the statement  "            WithMetadata(CompositionConstants.ExportTypeIdentityMetadataName' AttributedModelServices.GetTypeIdentity(typeof(TExportedValue))); " is 131.
Long Statement,Revenj.Extensibility.Autofac.Integration.Mef,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\RegistrationExtensions.cs,FindType,The length of the statement  "				throw new InvalidOperationException("Multiple packages (" + all.Count() + ") for " + exportTypeIdentity + " found in plugins: " + string.Join("' "' all.Take(3))); " is 162.
Long Statement,Revenj.Extensibility.Autofac.Integration.Mef,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\RegistrationExtensions.cs,AttachExport,The length of the statement  "			var contractService = new ContractBasedService(exportConfiguration.ContractName' exportConfiguration.ExportTypeIdentity); " is 121.
Long Statement,Revenj.Extensibility.Autofac.Integration.Mef,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\RegistrationExtensions.cs,SetImports,The length of the statement  "					throw new NotSupportedException(string.Format("Import '{0}' is not supported: only contract-based imports are supported."' import)); " is 132.
Long Statement,Revenj.Extensibility.Autofac.Util,Enforce,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Util\Enforce.cs,ArgumentElementNotNull,The length of the statement  "				throw new ArgumentException(string.Format(CultureInfo.CurrentCulture' "The sequence provided as argument '{0}' cannot contain null elements."' name)); " is 150.
Long Statement,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetResolutionScopeExpression,The length of the statement  "			var parentServiceKeyExpr = Expression.Convert(request.Container.GetOrAddStateItemExpression(parent.ServiceKey)' typeof(object)); " is 128.
Long Statement,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The length of the statement  "				var service = ((IResolver)this).ResolveKeyed(serviceType' item.Key' IfUnresolved.ReturnDefault' requiredServiceType' scope); " is 124.
Long Statement,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The length of the statement  "					var service = ((IResolver)this).ResolveKeyed(serviceType' item.OptionalServiceKey' IfUnresolved.ReturnDefault' item.ServiceType' scope); " is 136.
Long Statement,DryIoc,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetLazyEnumerableExpressionOrDefault,The length of the statement  "			if (itemServiceType != typeof(object)) // cast to object is not required cause Resolve already return IEnumerable<object> " is 121.
Long Statement,DryIoc,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetFactoryExpression,The length of the statement  "			return expr == null ? null : Expression.New(ctor' request.Container.GetOrAddStateItemExpression(expr.WrapInFactoryExpression())); " is 129.
Long Statement,DryIoc,FactoryMethod,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveParameter,The length of the statement  "			var parameterRequest = request.Push(parameterServiceInfo.WithDetails(ServiceDetails.IfUnresolvedReturnDefault' request)); " is 121.
Long Statement,DryIoc,Resolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,CreateResolutionExpression,The length of the statement  "			var serviceKeyExpr = Expression.Convert(request.Container.GetOrAddStateItemExpression(request.ServiceKey)' typeof(object)); " is 123.
Long Statement,DryIoc,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The length of the statement  "					typeof(IReuseWrapper).ThrowIfNotImplementedBy(reuseWrappers[i]' Error.RegReusedObjWrapperIsNotIreused' i' reuseWrappers); " is 121.
Long Statement,DryIoc,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetInstantiatedSingletonExpressionOrDefault,The length of the statement  "					scope.GetOrAdd(FactoryID' () => factoryDelegate(request.Container.ResolutionStateCache' request.ContainerWeakRef' request.Scope))' " is 130.
Long Statement,DryIoc,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Details,The length of the statement  "				return Throw.For<IEnumerable<PropertyOrFieldServiceInfo>>(Error.NotFoundSpecifiedWritablePropertyOrField' name' request); " is 121.
Long Statement,DryIoc,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Match,The length of the statement  "			return property.CanWrite && !property.IsIndexer() // first checks that property is assignable in general and not indexer " is 120.
Long Statement,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetResolutionScopeExpression,The length of the statement  "			var parentServiceKeyExpr = Expression.Convert(request.Container.GetOrAddStateItemExpression(parent.ServiceKey)' typeof(object)); " is 128.
Long Statement,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The length of the statement  "				var service = ((IResolver)this).ResolveKeyed(serviceType' item.Key' IfUnresolved.ReturnDefault' requiredServiceType' scope); " is 124.
Long Statement,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveMany,The length of the statement  "					var service = ((IResolver)this).ResolveKeyed(serviceType' item.OptionalServiceKey' IfUnresolved.ReturnDefault' item.ServiceType' scope); " is 136.
Long Statement,DryIoc.Reflection,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetLazyEnumerableExpressionOrDefault,The length of the statement  "			if (itemServiceType != typeof(object)) // cast to object is not required cause Resolve already return IEnumerable<object> " is 121.
Long Statement,DryIoc.Reflection,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetFactoryExpression,The length of the statement  "			return expr == null ? null : Expression.New(ctor' request.Container.GetOrAddStateItemExpression(expr.WrapInFactoryExpression())); " is 129.
Long Statement,DryIoc.Reflection,FactoryMethod,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ResolveParameter,The length of the statement  "			var parameterRequest = request.Push(parameterServiceInfo.WithDetails(ServiceDetails.IfUnresolvedReturnDefault' request)); " is 121.
Long Statement,DryIoc.Reflection,Resolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,CreateResolutionExpression,The length of the statement  "			var serviceKeyExpr = Expression.Convert(request.Container.GetOrAddStateItemExpression(request.ServiceKey)' typeof(object)); " is 123.
Long Statement,DryIoc.Reflection,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The length of the statement  "					typeof(IReuseWrapper).ThrowIfNotImplementedBy(reuseWrappers[i]' Error.RegReusedObjWrapperIsNotIreused' i' reuseWrappers); " is 121.
Long Statement,DryIoc.Reflection,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetInstantiatedSingletonExpressionOrDefault,The length of the statement  "					scope.GetOrAdd(FactoryID' () => factoryDelegate(request.Container.ResolutionStateCache' request.ContainerWeakRef' request.Scope))' " is 130.
Long Statement,DryIoc.Reflection,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Details,The length of the statement  "				return Throw.For<IEnumerable<PropertyOrFieldServiceInfo>>(Error.NotFoundSpecifiedWritablePropertyOrField' name' request); " is 121.
Long Statement,DryIoc.Reflection,PropertiesAndFields,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Match,The length of the statement  "			return property.CanWrite && !property.IsIndexer() // first checks that property is assignable in general and not indexer " is 120.
Long Statement,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,RegisterExports,The length of the statement  "			registrator.RegisterExports(types.ThrowIfNull().Select(GetRegistrationInfoOrDefault).Where(regInfo => regInfo != null)); " is 120.
Long Statement,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,RegisterExports,The length of the statement  "			registrator.RegisterExports(types.ThrowIfNull().Select(GetRegistrationInfoOrDefault).Where(regInfo => regInfo != null)); " is 120.
Long Statement,DryIoc.MefAttributedModel,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The length of the statement  "			var message = string.Format(MefAttributedModel.Error.GetMessage(errorCode)' Print(arg0)' Print(arg1)' Print(arg2)' Print(arg3)); " is 128.
Long Statement,DryIoc.MefAttributedModel,AttributedModelException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,Of,The length of the statement  "			var message = string.Format(MefAttributedModel.Error.GetMessage(errorCode)' Print(arg0)' Print(arg1)' Print(arg2)' Print(arg3)); " is 128.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,FillName,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,FillName,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,FillName,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,CalcHash,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,CalcHash,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeObjectCollection,The length of the statement  "			if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeObjectCollection,The length of the statement  "				if (GetNextToken(sr) != '{') throw new SerializationException("Expecting '{' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 146.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeObjectCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 122.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 122.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,The length of the statement  "			else if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 144.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,The length of the statement  "				else if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 144.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableObjectCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 122.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableStructCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableStructCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 143.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,DeserializeNullableStructCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 122.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "				else throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 123.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "				if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "					else throw new SerializationException("Expecting '\"' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 123.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "					if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "				if (nextToken != '}') throw new SerializationException("Expecting '}' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The length of the statement  "				if (nextToken != ']') throw new SerializationException("Expecting ']' at position " + PositionInStream(sr) + ". Found " + (char)nextToken); " is 139.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "				else throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 141.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "				if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "					else throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 141.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "					if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "				if (nextToken != '}') throw new SerializationException("Expecting '}' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The length of the statement  "				if (nextToken != ']') throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization,XmlSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\XmlSerialization.cs,Deserialize,The length of the statement  "Root element should embed type attribute with class name or you should provide appropriate type T to Deserialize<T> method. " is 123.
Long Statement,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found end of stream."); " is 154.
Long Statement,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,DeserializeStream,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,DeserializeStream,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found end of stream."); " is 154.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,Deserialize,The length of the statement  "			throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "			else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "			else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true' false or null"); " is 169.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for boolean value. Expecting true or false"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The length of the statement  "			int nano = (int)(value.Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' value.Kind).Ticks); " is 139.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The length of the statement  "			int nano = (int)(value.ToUniversalTime().Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' DateTimeKind.Utc).Ticks); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The length of the statement  "				if ((nextToken = sr.Read()) != '-') throw new SerializationException("Expecting '-' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 171.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDateCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDateNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting date or null"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDateNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting date or null"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDateNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48); " is 120.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48); " is 146.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48); " is 171.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48; " is 189.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 126.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The length of the statement  "				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 129.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestampCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestampNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting timestamp or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestampNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting timestamp or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestampNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffset,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffset,The length of the statement  "					return DateTimeOffset.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 132.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffset,The length of the statement  "				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 129.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffsetCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffsetNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting timestamp or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffsetNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for DateTime value. Expecting timestamp or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeOffsetNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DictionaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DictionaryConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DictionaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DictionaryConverter.cs,Deserialize,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DictionaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DictionaryConverter.cs,Deserialize,The length of the statement  "				if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DictionaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DictionaryConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '}') throw new SerializationException("Expecting '}' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeColorCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeColorNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for Color value. Expecting number' string or null"); " is 170.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeColorNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for Color value. Expecting number' string or null"); " is 170.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeColorNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "			if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "					throw new SerializationException("Expecting 'X'' 'Y'' 'Width' or 'Height' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + name); " is 150.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "				if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "						throw new SerializationException("Expecting 'X'' 'Y'' 'Width' or 'Height' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + name); " is 150.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The length of the statement  "			if (nextToken != '}') throw new SerializationException("Expecting '}' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleFCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleFNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for Color value. Expecting number' string or null"); " is 170.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleFNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for Color value. Expecting number' string or null"); " is 170.
Long Statement,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleFNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for guid value. Expecting '\"' or null"); " is 159.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for guid value. Expecting '\"' or null"); " is 159.
Long Statement,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeNullableIP,The length of the statement  "				throw new SerializationException("Invalid null value found at " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 137.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeIP,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeIP,The length of the statement  "					throw new SerializationException("Error parsing IP address at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 130.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeIP,The length of the statement  "			throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for ip value. Expecting \""); " is 142.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeNullableUri,The length of the statement  "				throw new SerializationException("Invalid null value found at " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 137.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeUri,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,NetConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NetConverter.cs,DeserializeUri,The length of the statement  "				throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for Uri value. Expecting \""); " is 143.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimal,The length of the statement  "					throw new SerializationException("Error parsing decimal at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 127.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimal,The length of the statement  "				throw new SerializationException("Error parsing decimal at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 127.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The length of the statement  "						throw new SerializationException("Multiple '.' found in decimal value: " + new string(buf' 0' len) + ". At position" + JsonSerialization.PositionInStream(sr)); " is 159.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimalGeneric,The length of the statement  "			return decimal.Parse(new string(buf' 0' len)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowLeadingSign' Invariant); " is 150.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimalCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimalNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for decimal value. Expecting number or null"); " is 164.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimalNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for decimal value. Expecting number or null"); " is 164.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimalNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeInt,The length of the statement  "					throw new SerializationException("Error parsing int at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 123.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeInt,The length of the statement  "				throw new SerializationException("Error parsing int at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 123.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToIntGeneric,The length of the statement  "			return int.Parse(new string(buf' 0' len)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowLeadingSign' Invariant); " is 146.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeIntCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeIntNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for int value. Expecting number or null"); " is 160.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeIntNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for int value. Expecting number or null"); " is 160.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeIntNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLong,The length of the statement  "					throw new SerializationException("Error parsing long at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 124.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLong,The length of the statement  "				throw new SerializationException("Error parsing long at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 124.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLongGeneric,The length of the statement  "			return long.Parse(new string(buf' 0' len)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowLeadingSign' Invariant); " is 147.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLongCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLongNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for long value. Expecting number or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLongNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for long value. Expecting number or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLongNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDouble,The length of the statement  "					throw new SerializationException("Error parsing double at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 126.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDouble,The length of the statement  "				throw new SerializationException("Error parsing double at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 126.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDoubleGeneric,The length of the statement  "			return double.Parse(new string(buf' 0' len)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowLeadingSign' Invariant); " is 149.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDoubleCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDoubleNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for double value. Expecting number or null"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDoubleNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for double value. Expecting number or null"); " is 163.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDoubleNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloat,The length of the statement  "					throw new SerializationException("Error parsing float at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 125.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloat,The length of the statement  "				throw new SerializationException("Error parsing float at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 125.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloatGeneric,The length of the statement  "			return float.Parse(new string(buf' 0' len)' NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.AllowLeadingSign' Invariant); " is 148.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloatCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloatNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for float value. Expecting number or null"); " is 162.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloatNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for float value. Expecting number or null"); " is 162.
Long Statement,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloatNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "			if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "					throw new SerializationException("Expecting 'X' or 'Y' as property names at position " + JsonSerialization.PositionInStream(sr) + ". Found " + firstName); " is 154.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "			if (nextToken != ''') throw new SerializationException("Expecting ''' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "				else throw new SerializationException("Expecting '}' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePoint,The length of the statement  "			throw new SerializationException("Expecting 'X' and 'Y' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + firstName + " and " + secondName); " is 160.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "			if (nextToken != '{') throw new SerializationException("Expecting '{' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "					throw new SerializationException("Expecting 'X' or 'Y' as property names at position " + JsonSerialization.PositionInStream(sr) + ". Found " + firstName); " is 154.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "			if (nextToken != ''') throw new SerializationException("Expecting ''' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "			if (nextToken != ':') throw new SerializationException("Expecting ':' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 157.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "				else throw new SerializationException("Expecting '}' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,PointConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\PointConverter.cs,DeserializePointF,The length of the statement  "			throw new SerializationException("Expecting 'X' and 'Y' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + firstName + " and " + secondName); " is 160.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeNullable,The length of the statement  "				throw new SerializationException("Invalid null value found at " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 137.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeNullable,The length of the statement  "				throw new SerializationException("Invalid null value found at " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 137.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,Deserialize,The length of the statement  "			if (nextToken != '"') throw new SerializationException("Expecting '\"' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 158.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for string value. Expecting '\"' or null"); " is 161.
Long Statement,Revenj.Serialization.Json.Converters,TreePathConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\TreePathConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,Deserialize,The length of the statement  "					throw new SerializationException("Error parsing XML at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex); " is 123.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeNullable,The length of the statement  "				throw new SerializationException("Invalid null value found at " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 137.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for xml value. Expecting string' object or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeNullableCollection,The length of the statement  "					else throw new SerializationException("Invalid value found at position " + JsonSerialization.PositionInStream(sr) + " for xml value. Expecting string' object or null"); " is 168.
Long Statement,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,DeserializeNullableCollection,The length of the statement  "				else throw new SerializationException("Expecting ']' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken); " is 140.
Long Statement,Revenj.Utility,Sorting,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TopologicalSort.cs,TopologicalSort,The length of the statement  "					throw new ArgumentException("Provided graph has circular dependency. Topological sort can't be performed on graph with circular dependency."); " is 142.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The conditional expression  "value.Year == 1 && value.Month == 1 && value.Day == 1 && (value.Hour - hours) < 0"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Contains,The conditional expression  "item && (chunk != 0) || !item && chunk != 0xFFFFFFFFu"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlDate,The conditional expression  "year == 0 || year < MinYear || year > MaxYear || month < 1 || month > 12 || day < 1 ||  				(day > (IsLeap(year) ? 366 : 365))"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The conditional expression  "hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m))"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The conditional expression  "b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlMacAddress,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,NpgsqlMacAddress,The conditional expression  "(c >= '0' && c <= '9') || (c >= 'A' && c <= 'F')"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The conditional expression  "((_parameterFormatCodes.Length == 1) && (_parameterFormatCodes[0] == (Int16)FormatCode.Binary)) ||  							((_parameterFormatCodes.Length != 1) && (_parameterFormatCodes[i] == (Int16)FormatCode.Binary))"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The conditional expression  "((_parameterFormatCodes.Length == 1) && (_parameterFormatCodes[0] == (Int16)FormatCode.Binary)) ||  						((_parameterFormatCodes.Length != 1) && (_parameterFormatCodes[i] == (Int16)FormatCode.Binary))"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The conditional expression  "CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar")"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The conditional expression  "CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit")"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The conditional expression  "CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar")"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The conditional expression  "CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit")"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Npgsql,ForwardsOnlyDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetNextRow,The conditional expression  "((_behavior & CommandBehavior.SingleRow) != 0 && CurrentRow != null && _pendingDescription == null) ||  				((_behavior & CommandBehavior.SchemaOnly) != 0)"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,TryMatch,The conditional expression  "ceZero == null || ceMethod == null || !ceZero.Value.Equals(0) || !CompareMethods.Contains(ceMethod.Method)"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.Plugins.ProjectionSimplifications,CountProjection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ProjectionSimplifications\CountProjection.cs,CheckShortCircuitCount,The conditional expression  "mq != null && subquery.Joins.Count == 0 && subquery.AdditionalJoins.Count == 0 && subquery.Conditions.Count == 0"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,TryToSimplifyMainFrom,The conditional expression  "subquery.Conditions.Count > 0  					|| subquery.Joins.Count > 0  					|| subquery.ResultOperators.Any(it => it is CastResultOperator == false && it is DefaultIfEmptyResultOperator == false)  					|| subquery.AdditionalJoins.Count > 0"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitBinaryExpression,The conditional expression  "left.Type == typeof(int) && right.Type == typeof(int)  				&& (left.NodeType == ExpressionType.Convert && right.NodeType == ExpressionType.Constant  					|| left.NodeType == ExpressionType.Constant && right.NodeType == ExpressionType.Convert)"  is complex.
Complex Conditional,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitBinaryExpression,The conditional expression  "(expression.NodeType == ExpressionType.NotEqual || expression.NodeType == ExpressionType.Equal)  				&& (nullLeft || nullRight)"  is complex.
Complex Conditional,Revenj.DomainPatterns,SystemStartupAspect,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Aspects\SystemStartupAspect.cs,Initialize,The conditional expression  "t.IsClass && (t.IsPublic || t.IsNestedPublic)  					&& typeof(ISystemStartup).IsAssignableFrom(t)"  is complex.
Complex Conditional,Revenj.Extensibility,CastleInterceptor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\CastleInterceptor.cs,Intercept,The conditional expression  "BeforeAspects != null  				&& (BeforeAspects.TryGetValue(method' out beforeList)  				|| method.IsGenericMethod && BeforeAspects.TryGetValue(method.GetGenericMethodDefinition()' out beforeList))"  is complex.
Complex Conditional,Revenj.Extensibility,CastleInterceptor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\CastleInterceptor.cs,Intercept,The conditional expression  "AroundAspects != null  				&& (AroundAspects.TryGetValue(method' out aroundList)  				|| method.IsGenericMethod && AroundAspects.TryGetValue(method.GetGenericMethodDefinition()' out aroundList))"  is complex.
Complex Conditional,Revenj.Extensibility,CastleInterceptor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\DynamicProxy\CastleInterceptor.cs,Intercept,The conditional expression  "AfterAspects != null  				&& (AfterAspects.TryGetValue(method' out afterList)  				|| method.IsGenericMethod && AfterAspects.TryGetValue(method.GetGenericMethodDefinition()' out afterList))"  is complex.
Complex Conditional,Revenj.Extensibility,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetRegistrationInfoOrDefault,The conditional expression  "implementationType.IsValueType() ||  				implementationType.IsAbstract() && !implementationType.IsStatic() ||  				implementationType.IsCompilerGenerated()"  is complex.
Complex Conditional,Revenj.Extensibility,ExportedRegistrationInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetSetup,The conditional expression  "lazyMetadata == null && condition == null && !OpenResolutionScope && ReusedWrappers.IsNullOrEmpty()"  is complex.
Complex Conditional,Revenj.Extensibility,AutofacContainerBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Setup.cs,AutofacContainerBuilder,The conditional expression  "m.IsPublic && !m.IsAbstract && typeof(Revenj.Extensibility.Autofac.Module).IsAssignableFrom(m) && m.GetConstructor(new Type[0]) != null"  is complex.
Complex Conditional,Revenj.Extensibility.Autofac.Features.ResolveAnything,AnyConcreteTypeNotAlreadyRegisteredSource,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\ResolveAnything\AnyConcreteTypeNotAlreadyRegisteredSource.cs,RegistrationsFor,The conditional expression  "ts == null ||  				!ts.ServiceType.IsClass ||  				ts.ServiceType.IsSubclassOf(typeof(Delegate)) ||  				ts.ServiceType.IsAbstract ||  				!_predicate(ts.ServiceType) ||  				registrationAccessor(service).Any()"  is complex.
Complex Conditional,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingScopeOrDefault,The conditional expression  "name != null &&  					(assignableFromServiceType == null || name.Key.IsAssignableTo(assignableFromServiceType)) &&  					(serviceKey == null || serviceKey.Equals(name.Value))"  is complex.
Complex Conditional,DryIoc,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetServiceFactoryOrDefault,The conditional expression  "factoriesEntry != null && factoriesEntry.Factories.GetValueOrDefault(serviceKey) == null ||  						entry is Factory && !DefaultKey.Value.Equals(serviceKey)"  is complex.
Complex Conditional,DryIoc,Registry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,UnregisterServiceFactory,The conditional expression  "(serviceKey != null && !DefaultKey.Value.Equals(serviceKey)) ||  								(condition != null && !condition((Factory)entry))"  is complex.
Complex Conditional,DryIoc,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetKeyValuePairExpressionOrDefault,The conditional expression  "serviceKey == null && serviceKeyType.IsValueType() ||  				serviceKey != null && !serviceKeyType.IsTypeOf(serviceKey)"  is complex.
Complex Conditional,DryIoc,ServiceInfoTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,InheritInfo,The conditional expression  "serviceType == dependency.ServiceType && serviceKey == dependencyDetails.ServiceKey &&  				ifUnresolved == dependencyDetails.IfUnresolved && requiredServiceType == dependencyDetails.RequiredServiceType"  is complex.
Complex Conditional,DryIoc,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The conditional expression  "cacheFactoryExpression && lazyMetadata == null && metadata == null &&  				condition == null && openResolutionScope == false && reuseWrappers == null"  is complex.
Complex Conditional,DryIoc,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfReuseHasShorterLifespanThanParent,The conditional expression  "reuse != null && reuse.Lifespan > 0 && !request.Parent.IsEmpty &&  				request.Container.Rules.ThrowIfDependencyHasShorterReuseLifespan"  is complex.
Complex Conditional,DryIoc,Scope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The conditional expression  "reused != null && !(reused is IHideDisposableFromContainer)  						   && reused.Target != null && (disposable = reused.Target as IDisposable) == null"  is complex.
Complex Conditional,DryIoc,SingletonScope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The conditional expression  "reused != null && !(reused is IHideDisposableFromContainer)  						   && reused.Target != null && (disposable = reused.Target as IDisposable) == null"  is complex.
Complex Conditional,DryIoc,ArrayTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RemoveAt,The conditional expression  "source == null || source.Length == 0 || index < 0 || index >= source.Length"  is complex.
Complex Conditional,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetMatchingScopeOrDefault,The conditional expression  "name != null &&  					(assignableFromServiceType == null || name.Key.IsAssignableTo(assignableFromServiceType)) &&  					(serviceKey == null || serviceKey.Equals(name.Value))"  is complex.
Complex Conditional,DryIoc.Reflection,Container,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetServiceFactoryOrDefault,The conditional expression  "factoriesEntry != null && factoriesEntry.Factories.GetValueOrDefault(serviceKey) == null ||  						entry is Factory && !DefaultKey.Value.Equals(serviceKey)"  is complex.
Complex Conditional,DryIoc.Reflection,Registry,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,UnregisterServiceFactory,The conditional expression  "(serviceKey != null && !DefaultKey.Value.Equals(serviceKey)) ||  								(condition != null && !condition((Factory)entry))"  is complex.
Complex Conditional,DryIoc.Reflection,WrappersSupport,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetKeyValuePairExpressionOrDefault,The conditional expression  "serviceKey == null && serviceKeyType.IsValueType() ||  				serviceKey != null && !serviceKeyType.IsTypeOf(serviceKey)"  is complex.
Complex Conditional,DryIoc.Reflection,ServiceInfoTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,InheritInfo,The conditional expression  "serviceType == dependency.ServiceType && serviceKey == dependencyDetails.ServiceKey &&  				ifUnresolved == dependencyDetails.IfUnresolved && requiredServiceType == dependencyDetails.RequiredServiceType"  is complex.
Complex Conditional,DryIoc.Reflection,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,With,The conditional expression  "cacheFactoryExpression && lazyMetadata == null && metadata == null &&  				condition == null && openResolutionScope == false && reuseWrappers == null"  is complex.
Complex Conditional,DryIoc.Reflection,Factory,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,ThrowIfReuseHasShorterLifespanThanParent,The conditional expression  "reuse != null && reuse.Lifespan > 0 && !request.Parent.IsEmpty &&  				request.Container.Rules.ThrowIfDependencyHasShorterReuseLifespan"  is complex.
Complex Conditional,DryIoc.Reflection,Scope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The conditional expression  "reused != null && !(reused is IHideDisposableFromContainer)  						   && reused.Target != null && (disposable = reused.Target as IDisposable) == null"  is complex.
Complex Conditional,DryIoc.Reflection,SingletonScope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The conditional expression  "reused != null && !(reused is IHideDisposableFromContainer)  						   && reused.Target != null && (disposable = reused.Target as IDisposable) == null"  is complex.
Complex Conditional,DryIoc.Reflection,ArrayTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,RemoveAt,The conditional expression  "source == null || source.Length == 0 || index < 0 || index >= source.Length"  is complex.
Complex Conditional,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetRegistrationInfoOrDefault,The conditional expression  "implementationType.IsValueType() ||  				implementationType.IsAbstract() && !implementationType.IsStatic() ||  				implementationType.IsCompilerGenerated()"  is complex.
Complex Conditional,DryIoc.MefAttributedModel,AttributedModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetRegistrationInfoOrDefault,The conditional expression  "implementationType.IsValueType() ||  				implementationType.IsAbstract() && !implementationType.IsStatic() ||  				implementationType.IsCompilerGenerated()"  is complex.
Complex Conditional,DryIoc.MefAttributedModel,ExportedRegistrationInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetSetup,The conditional expression  "lazyMetadata == null && condition == null && !OpenResolutionScope && ReusedWrappers.IsNullOrEmpty()"  is complex.
Complex Conditional,DryIoc.MefAttributedModel,ExportedRegistrationInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,GetSetup,The conditional expression  "lazyMetadata == null && condition == null && !OpenResolutionScope && ReusedWrappers.IsNullOrEmpty()"  is complex.
Complex Conditional,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Skip,The conditional expression  "nextToken != ''' && nextToken != '}' && nextToken != ']' && nextToken != -1"  is complex.
Complex Conditional,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Memorize,The conditional expression  "nextToken != ''' && nextToken != '}' && nextToken != ']' && nextToken != -1"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,Deserialize,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,Deserialize,The conditional expression  "sr.Read() == 'r' && sr.Read() == 'u' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,Deserialize,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'r' && sr.Read() == 'u' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'r' && sr.Read() == 'u' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'r' && sr.Read() == 'u' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'r' && sr.Read() == 'u' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The conditional expression  "sr.Read() == 'a' && sr.Read() == 'l' && sr.Read() == 's' && sr.Read() == 'e' && sr.Read() == '"'"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The conditional expression  "i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1)"  is complex.
Complex Conditional,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The conditional expression  "buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-'"  is complex.
Complex Conditional,Revenj.Utility,BufferedTextReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\BufferedTextReader.cs,ReadNumber,The conditional expression  "ch >= '0' && ch <= '9' || ch == '.' || ch == '+' || ch == '-' || ch == 'e' || ch == 'E'"  is complex.
Virtual Method Call from Constructor,Revenj.Extensibility.Autofac.Core.Activators.Reflection,ConstructorParameterBinding,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\ConstructorParameterBinding.cs,ConstructorParameterBinding,The constructor "ConstructorParameterBinding" calls a virtual method "CanSupplyValue".
Empty Catch Block,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Take,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,PrepareCommand,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,StringRowReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlAsciiRow.cs,AbandonShip,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,StringRowReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlAsciiRow.cs,AbandonShip,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,Cancel,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnection,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnection.cs,CheckConnectionOpen,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ReleasePlansPortals,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ReleasePlansPortals,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,FireNotice,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,FireNotification,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,Open,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,Close,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,CleanUpConnectorMethod,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,ClearQueue,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlReadyState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlReadyState.cs,Close,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlReadyState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlReadyState.cs,Close,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,Close,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponsesEnum,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponsesEnum,The method has an empty catch block.
Empty Catch Block,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessExistingBackendResponses,The method has an empty catch block.
Empty Catch Block,DryIoc,Scope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The method has an empty catch block.
Empty Catch Block,DryIoc,SingletonScope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The method has an empty catch block.
Empty Catch Block,DryIoc.Reflection,Scope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The method has an empty catch block.
Empty Catch Block,DryIoc.Reflection,SingletonScope,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,DisposeItem,The method has an empty catch block.
Empty Catch Block,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,PositionInStream,The method has an empty catch block.
Empty Catch Block,Revenj.Serialization,Deserializer<T>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Deserializer,The method has an empty catch block.
Empty Catch Block,Revenj.Utility,PdfConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\PdfConverter.cs,RunConverter,The method has an empty catch block.
Empty Catch Block,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,LoadAssembly,The method has an empty catch block.
Empty Catch Block,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,LoadDynamicAssembly,The method has an empty catch block.
Empty Catch Block,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,InitializeDirectory,The method has an empty catch block.
Empty Catch Block,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,InitializeDirectory,The method has an empty catch block.
Magic Number,Revenj,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MinBatchSize = 1000;
Magic Number,Revenj,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MaxObjectSize = 1024 * 1024;
Magic Number,Revenj,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MaxObjectSize = 1024 * 1024;
Magic Number,Revenj.DatabasePersistence.Postgres,BulkReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\BulkRead.cs,Execute,The following statement contains a magic number: Stream.SetLength(Stream.Length - 2);
Magic Number,Revenj.DatabasePersistence.Postgres,BulkReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\BulkRead.cs,Analyze,The following statement contains a magic number: ResultActions.Add((dr' ind) =>  				{  					var obj = dr.GetValue(ind);  					var tr = obj as TextReader;  					var btr = tr != null ? Stream.UseBufferedReader(tr) : Stream.UseBufferedReader(obj.ToString());  					PostgresTypedArray.ParseCollection(btr' 0' Locator' (rdr' _' __' ___) =>  					{  						rdr.Read(3);  						var args = new object[converters.Length];  						for (int x = 0; x < converters.Length; x++)  							args[x] = converters[x](rdr' 1);  						rdr.Read(3);  						return table.Rows.Add(args);  					});  					if (tr != null) tr.Dispose();  					return table;  				});
Magic Number,Revenj.DatabasePersistence.Postgres,BulkReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\BulkRead.cs,Analyze,The following statement contains a magic number: ResultActions.Add((dr' ind) =>  				{  					var obj = dr.GetValue(ind);  					var tr = obj as TextReader;  					var btr = tr != null ? Stream.UseBufferedReader(tr) : Stream.UseBufferedReader(obj.ToString());  					PostgresTypedArray.ParseCollection(btr' 0' Locator' (rdr' _' __' ___) =>  					{  						rdr.Read(3);  						var args = new object[converters.Length];  						for (int x = 0; x < converters.Length; x++)  							args[x] = converters[x](rdr' 1);  						rdr.Read(3);  						return table.Rows.Add(args);  					});  					if (tr != null) tr.Dispose();  					return table;  				});
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,PostgresConnectionPool,The following statement contains a magic number: if (!int.TryParse(ConfigurationManager.AppSettings["Database.PoolSize"]' out Size))  				Size = Math.Min(Environment.ProcessorCount' 20);
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,PostgresConnectionPool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Database.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,PostgresConnectionPool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Database.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,PostgresConnectionPool,The following statement contains a magic number: if (!Enum.TryParse<PoolMode>(ConfigurationManager.AppSettings["Database.PoolMode"]' out Mode))  			{  				//TODO: Mono has issues with BlockingCollection. use None as default  				int p = (int)Environment.OSVersion.Platform;  				if (p == 4 || p == 6 || p == 128)  					Mode = PoolMode.None;  				else  					Mode = PoolMode.IfAvailable;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Take,The following statement contains a magic number: if (open)  			{  				try  				{  					if (conn.State == ConnectionState.Closed)  						conn.Open();  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5010' ex.ToString());  					try { conn.Close(); }  					catch { }  					NpgsqlConnection.ClearAllPools();  					conn = Info.GetConnection();  					conn.Open();  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Release,The following statement contains a magic number: switch (Mode)  			{  				case PoolMode.None:  					try { connection.Close(); }  					catch (Exception ex)  					{  						if (valid)  							TraceSource.TraceEvent(TraceEventType.Error' 5011' "{0}"' ex);  					}  					break;  				default:  					if (valid && connection.State == ConnectionState.Open && Connections.Count < Size)  					{  						Connections.Add(connection);  					}  					else  					{  						try { connection.Close(); }  						catch (Exception ex)  						{  							if (valid)  								TraceSource.TraceEvent(TraceEventType.Error' 5012' "{0}"' ex);  						}  						if (Connections.Count < Size)  							Connections.Add(Info.GetConnection());  					}  					break;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Release,The following statement contains a magic number: switch (Mode)  			{  				case PoolMode.None:  					try { connection.Close(); }  					catch (Exception ex)  					{  						if (valid)  							TraceSource.TraceEvent(TraceEventType.Error' 5011' "{0}"' ex);  					}  					break;  				default:  					if (valid && connection.State == ConnectionState.Open && Connections.Count < Size)  					{  						Connections.Add(connection);  					}  					else  					{  						try { connection.Close(); }  						catch (Exception ex)  						{  							if (valid)  								TraceSource.TraceEvent(TraceEventType.Error' 5012' "{0}"' ex);  						}  						if (Connections.Count < Size)  							Connections.Add(Info.GetConnection());  					}  					break;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var con in Connections)  				{  					try { con.Close(); }  					catch (Exception ex) { TraceSource.TraceEvent(TraceEventType.Error' 5013' "{0}"' ex); }  				}  				Connections.Dispose();  				NpgsqlConnection.ClearAllPools();  			}  			catch (Exception e) { TraceSource.TraceEvent(TraceEventType.Error' 5014' "{0}"' e); }
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresConnectionPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresConnectionPool.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var con in Connections)  				{  					try { con.Close(); }  					catch (Exception ex) { TraceSource.TraceEvent(TraceEventType.Error' 5013' "{0}"' ex); }  				}  				Connections.Dispose();  				NpgsqlConnection.ClearAllPools();  			}  			catch (Exception e) { TraceSource.TraceEvent(TraceEventType.Error' 5014' "{0}"' e); }
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: if (RetryCount > 60)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5130' "Retry count exceeded: {0}"' connectionString);  				RetryCount = 30;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: if (RetryCount > 60)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5130' "Retry count exceeded: {0}"' connectionString);  				RetryCount = 30;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: if (RetryCount > 60)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5130' "Retry count exceeded: {0}"' connectionString);  				RetryCount = 30;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: try  			{  				if (Connection != null)  				{  					Connection.StateChange -= Connection_StateChange;  					Connection.Notification -= Connection_Notification;  					try { Connection.Close(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5132' "{0}"' ex);  					}  					try { Connection.Dispose(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5133' "{0}"' ex);  					}  				}  				Connection = new NpgsqlConnection(connectionString);  				Connection.StateChange += Connection_StateChange;  				Connection.Notification += Connection_Notification;  				Connection.Open();  				var com = Connection.CreateCommand();  				com.CommandText = "listen events; listen aggregate_roots; listen migration;";  				com.ExecuteNonQuery();  				RetryCount = 0;  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5134' "{0}"' ex);  				Thread.Sleep(1000 * RetryCount);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: try  			{  				if (Connection != null)  				{  					Connection.StateChange -= Connection_StateChange;  					Connection.Notification -= Connection_Notification;  					try { Connection.Close(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5132' "{0}"' ex);  					}  					try { Connection.Dispose(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5133' "{0}"' ex);  					}  				}  				Connection = new NpgsqlConnection(connectionString);  				Connection.StateChange += Connection_StateChange;  				Connection.Notification += Connection_Notification;  				Connection.Open();  				var com = Connection.CreateCommand();  				com.CommandText = "listen events; listen aggregate_roots; listen migration;";  				com.ExecuteNonQuery();  				RetryCount = 0;  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5134' "{0}"' ex);  				Thread.Sleep(1000 * RetryCount);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: try  			{  				if (Connection != null)  				{  					Connection.StateChange -= Connection_StateChange;  					Connection.Notification -= Connection_Notification;  					try { Connection.Close(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5132' "{0}"' ex);  					}  					try { Connection.Dispose(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5133' "{0}"' ex);  					}  				}  				Connection = new NpgsqlConnection(connectionString);  				Connection.StateChange += Connection_StateChange;  				Connection.Notification += Connection_Notification;  				Connection.Open();  				var com = Connection.CreateCommand();  				com.CommandText = "listen events; listen aggregate_roots; listen migration;";  				com.ExecuteNonQuery();  				RetryCount = 0;  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5134' "{0}"' ex);  				Thread.Sleep(1000 * RetryCount);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,SetUpConnection,The following statement contains a magic number: try  			{  				if (Connection != null)  				{  					Connection.StateChange -= Connection_StateChange;  					Connection.Notification -= Connection_Notification;  					try { Connection.Close(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5132' "{0}"' ex);  					}  					try { Connection.Dispose(); }  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5133' "{0}"' ex);  					}  				}  				Connection = new NpgsqlConnection(connectionString);  				Connection.StateChange += Connection_StateChange;  				Connection.Notification += Connection_Notification;  				Connection.Open();  				var com = Connection.CreateCommand();  				com.CommandText = "listen events; listen aggregate_roots; listen migration;";  				com.ExecuteNonQuery();  				RetryCount = 0;  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5134' "{0}"' ex);  				Thread.Sleep(1000 * RetryCount);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_StateChange,The following statement contains a magic number: if (e.CurrentState == ConnectionState.Closed  				|| e.CurrentState == ConnectionState.Broken)  				SetUpConnection(Connection.ConnectionString);  			else if (e.CurrentState != ConnectionState.Open)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5136' "Invalid notification state: {0}"' e.CurrentState);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_Notification,The following statement contains a magic number: try  			{  				if (e.Condition == "events" || e.Condition == "aggregate_roots")  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5137' "Postgres notification: {0} with {1}"' e.Condition' e.AdditionalInformation);  					var firstSeparator = e.AdditionalInformation.IndexOf(':');  					var name = e.AdditionalInformation.Substring(0' firstSeparator);  					var secondSeparator = e.AdditionalInformation.Substring(firstSeparator + 1).IndexOf(':');  					var op = e.AdditionalInformation.Substring(firstSeparator + 1' secondSeparator).Trim();  					var array = e.AdditionalInformation.Substring(firstSeparator + secondSeparator + 2).Trim();  					if (array.Length > 0)  					{  						var uris = StringConverter.ParseCollection(Reader.Reuse(array)' 0' false).ToArray();  						switch (op)  						{  							case "Update":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Update' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Change":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Change' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Delete":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Delete' NotifyInfo.SourceEnum.Database' uris));  								break;  							default:  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Insert' NotifyInfo.SourceEnum.Database' uris));  								break;  						}  					}  				}  				else if (e.Condition == "migration")  				{  					TraceSource.TraceEvent(TraceEventType.Information' 5155' "Postgres migration detected: {0} "' e.AdditionalInformation);  					SystemState.Notify(new SystemEvent("migration"' e.AdditionalInformation));  				}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5138' "{0}{1} {2}"' e.Condition' e.AdditionalInformation' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_Notification,The following statement contains a magic number: try  			{  				if (e.Condition == "events" || e.Condition == "aggregate_roots")  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5137' "Postgres notification: {0} with {1}"' e.Condition' e.AdditionalInformation);  					var firstSeparator = e.AdditionalInformation.IndexOf(':');  					var name = e.AdditionalInformation.Substring(0' firstSeparator);  					var secondSeparator = e.AdditionalInformation.Substring(firstSeparator + 1).IndexOf(':');  					var op = e.AdditionalInformation.Substring(firstSeparator + 1' secondSeparator).Trim();  					var array = e.AdditionalInformation.Substring(firstSeparator + secondSeparator + 2).Trim();  					if (array.Length > 0)  					{  						var uris = StringConverter.ParseCollection(Reader.Reuse(array)' 0' false).ToArray();  						switch (op)  						{  							case "Update":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Update' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Change":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Change' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Delete":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Delete' NotifyInfo.SourceEnum.Database' uris));  								break;  							default:  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Insert' NotifyInfo.SourceEnum.Database' uris));  								break;  						}  					}  				}  				else if (e.Condition == "migration")  				{  					TraceSource.TraceEvent(TraceEventType.Information' 5155' "Postgres migration detected: {0} "' e.AdditionalInformation);  					SystemState.Notify(new SystemEvent("migration"' e.AdditionalInformation));  				}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5138' "{0}{1} {2}"' e.Condition' e.AdditionalInformation' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_Notification,The following statement contains a magic number: try  			{  				if (e.Condition == "events" || e.Condition == "aggregate_roots")  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5137' "Postgres notification: {0} with {1}"' e.Condition' e.AdditionalInformation);  					var firstSeparator = e.AdditionalInformation.IndexOf(':');  					var name = e.AdditionalInformation.Substring(0' firstSeparator);  					var secondSeparator = e.AdditionalInformation.Substring(firstSeparator + 1).IndexOf(':');  					var op = e.AdditionalInformation.Substring(firstSeparator + 1' secondSeparator).Trim();  					var array = e.AdditionalInformation.Substring(firstSeparator + secondSeparator + 2).Trim();  					if (array.Length > 0)  					{  						var uris = StringConverter.ParseCollection(Reader.Reuse(array)' 0' false).ToArray();  						switch (op)  						{  							case "Update":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Update' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Change":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Change' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Delete":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Delete' NotifyInfo.SourceEnum.Database' uris));  								break;  							default:  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Insert' NotifyInfo.SourceEnum.Database' uris));  								break;  						}  					}  				}  				else if (e.Condition == "migration")  				{  					TraceSource.TraceEvent(TraceEventType.Information' 5155' "Postgres migration detected: {0} "' e.AdditionalInformation);  					SystemState.Notify(new SystemEvent("migration"' e.AdditionalInformation));  				}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5138' "{0}{1} {2}"' e.Condition' e.AdditionalInformation' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Connection_Notification,The following statement contains a magic number: try  			{  				if (e.Condition == "events" || e.Condition == "aggregate_roots")  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5137' "Postgres notification: {0} with {1}"' e.Condition' e.AdditionalInformation);  					var firstSeparator = e.AdditionalInformation.IndexOf(':');  					var name = e.AdditionalInformation.Substring(0' firstSeparator);  					var secondSeparator = e.AdditionalInformation.Substring(firstSeparator + 1).IndexOf(':');  					var op = e.AdditionalInformation.Substring(firstSeparator + 1' secondSeparator).Trim();  					var array = e.AdditionalInformation.Substring(firstSeparator + secondSeparator + 2).Trim();  					if (array.Length > 0)  					{  						var uris = StringConverter.ParseCollection(Reader.Reuse(array)' 0' false).ToArray();  						switch (op)  						{  							case "Update":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Update' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Change":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Change' NotifyInfo.SourceEnum.Database' uris));  								break;  							case "Delete":  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Delete' NotifyInfo.SourceEnum.Database' uris));  								break;  							default:  								Subject.OnNext(new NotifyInfo(name' NotifyInfo.OperationEnum.Insert' NotifyInfo.SourceEnum.Database' uris));  								break;  						}  					}  				}  				else if (e.Condition == "migration")  				{  					TraceSource.TraceEvent(TraceEventType.Information' 5155' "Postgres migration detected: {0} "' e.AdditionalInformation);  					SystemState.Notify(new SystemEvent("migration"' e.AdditionalInformation));  				}  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5138' "{0}{1} {2}"' e.Condition' e.AdditionalInformation' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Dispose,The following statement contains a magic number: try  			{  				if (Connection != null && Connection.State == ConnectionState.Open)  					Connection.Close();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5139' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseNotification,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseNotification.cs,Dispose,The following statement contains a magic number: try { Connection.Dispose(); }  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5140' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,FormatException,The following statement contains a magic number: if (!string.IsNullOrEmpty(ex.ErrorSql))  				return new FrameworkException(ex.Message + details + @"  SQL: " + ex.ErrorSql.Substring(0' Math.Min(ex.ErrorSql.Length' 200))' ex);
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,PrepareCommand,The following statement contains a magic number: try  			{  				if (Transaction == null && Connection.State == ConnectionState.Closed)  					Connection.Open();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5110' "{0}"' ex);  				TraceSource.TraceEvent(TraceEventType.Information' 5110' "{0}:{1} - {2}"' Connection.Host' Connection.Port' Connection.Database);  				try { Connection.Close(); }  				catch { }  				NpgsqlConnection.ClearAllPools();  				//TODO new connection!?  				if (Connection.State == ConnectionState.Closed)  					Connection.Open();  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,PrepareCommand,The following statement contains a magic number: try  			{  				if (Transaction == null && Connection.State == ConnectionState.Closed)  					Connection.Open();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5110' "{0}"' ex);  				TraceSource.TraceEvent(TraceEventType.Information' 5110' "{0}:{1} - {2}"' Connection.Host' Connection.Port' Connection.Database);  				try { Connection.Close(); }  				catch { }  				NpgsqlConnection.ClearAllPools();  				//TODO new connection!?  				if (Connection.State == ConnectionState.Closed)  					Connection.Open();  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ResetConnection,The following statement contains a magic number: lock (sync)  			{  				try  				{  					Connection.Close();  					Connection.Dispose();  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5111' "{0}"' ex);  					NpgsqlConnection.ClearAllPools();  				}  				Connection = new NpgsqlConnection(cs);  				DifferentConnection = true;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteNonQuery,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					return command.ExecuteNonQuery();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5112' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5113' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5114' "{0}"' ex);  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5114' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteNonQuery,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					return command.ExecuteNonQuery();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5112' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5113' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5114' "{0}"' ex);  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5114' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteNonQuery,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					return command.ExecuteNonQuery();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5112' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5113' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5114' "{0}"' ex);  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5114' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteNonQuery,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					return command.ExecuteNonQuery();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5112' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5113' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5114' "{0}"' ex);  					ResetConnection();  					return ExecuteNonQuery(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5114' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteDataReader,The following statement contains a magic number: try  			{  				var npg = command as NpgsqlCommand;  				var behavior = npg != null ? npg.ReaderBehavior : CommandBehavior.Default;  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					using (var dr = command.ExecuteReader(behavior))  					{  						while (dr.Read())  						{  							hasRead = true;  							action(dr);  						}  					}  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5115' ex);  				if (tryRecover && !hasRead && ShouldTryRecover(ex))  				{  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5116' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover && !hasRead)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5117' "{0}"' ex);  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5117' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteDataReader,The following statement contains a magic number: try  			{  				var npg = command as NpgsqlCommand;  				var behavior = npg != null ? npg.ReaderBehavior : CommandBehavior.Default;  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					using (var dr = command.ExecuteReader(behavior))  					{  						while (dr.Read())  						{  							hasRead = true;  							action(dr);  						}  					}  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5115' ex);  				if (tryRecover && !hasRead && ShouldTryRecover(ex))  				{  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5116' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover && !hasRead)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5117' "{0}"' ex);  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5117' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteDataReader,The following statement contains a magic number: try  			{  				var npg = command as NpgsqlCommand;  				var behavior = npg != null ? npg.ReaderBehavior : CommandBehavior.Default;  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					using (var dr = command.ExecuteReader(behavior))  					{  						while (dr.Read())  						{  							hasRead = true;  							action(dr);  						}  					}  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5115' ex);  				if (tryRecover && !hasRead && ShouldTryRecover(ex))  				{  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5116' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover && !hasRead)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5117' "{0}"' ex);  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5117' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteDataReader,The following statement contains a magic number: try  			{  				var npg = command as NpgsqlCommand;  				var behavior = npg != null ? npg.ReaderBehavior : CommandBehavior.Default;  				lock (Transaction ?? sync)  				{  					PrepareCommand(command);  					using (var dr = command.ExecuteReader(behavior))  					{  						while (dr.Read())  						{  							hasRead = true;  							action(dr);  						}  					}  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5115' ex);  				if (tryRecover && !hasRead && ShouldTryRecover(ex))  				{  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5116' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover && !hasRead)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5117' "{0}"' ex);  					ResetConnection();  					ExecuteDataReader(command' action' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5117' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,FillDataSet,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					command.Connection = Connection;  					command.Transaction = Transaction;  					var da = new NpgsqlDataAdapter(command);  					return da.Fill(ds);  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5118' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5119' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5120' "{0}"' ex);  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5120' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,FillDataSet,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					command.Connection = Connection;  					command.Transaction = Transaction;  					var da = new NpgsqlDataAdapter(command);  					return da.Fill(ds);  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5118' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5119' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5120' "{0}"' ex);  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5120' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,FillDataSet,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					command.Connection = Connection;  					command.Transaction = Transaction;  					var da = new NpgsqlDataAdapter(command);  					return da.Fill(ds);  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5118' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5119' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5120' "{0}"' ex);  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5120' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,FillDataSet,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					command.Connection = Connection;  					command.Transaction = Transaction;  					var da = new NpgsqlDataAdapter(command);  					return da.Fill(ds);  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5118' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5119' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5120' "{0}"' ex);  					ResetConnection();  					return FillDataSet(command' ds' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5120' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}  			finally  			{  				command.Transaction = null;  				command.Connection = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteScalar,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					return command.ExecuteScalar();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5121' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5122' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5123' "{0}"' ex);  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5123' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteScalar,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					return command.ExecuteScalar();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5121' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5122' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5123' "{0}"' ex);  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5123' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteScalar,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					return command.ExecuteScalar();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5121' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5122' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5123' "{0}"' ex);  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5123' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,ExecuteScalar,The following statement contains a magic number: try  			{  				lock (Transaction ?? sync)  				{  					return command.ExecuteScalar();  				}  			}  			catch (NpgsqlException ex)  			{  				BrokenTransaction = !tryRecover;  				LogError(command' 5121' ex);  				if (tryRecover && ShouldTryRecover(ex))  				{  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					if (Transaction == null)  						ResetConnection();  					throw FormatException(ex);  				}  			}  			catch (PostgresException ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5122' "{0}"' ex);  				throw;  			}  			catch (Exception ex)  			{  				if (tryRecover)  				{  					TraceSource.TraceEvent(TraceEventType.Error' 5123' "{0}"' ex);  					ResetConnection();  					return ExecuteScalar(command' false);  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Critical' 5123' "{0}"' ex);  					if (Transaction == null)  						ResetConnection();  					throw;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresDatabaseQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresDatabaseQuery.cs,Dispose,The following statement contains a magic number: try  			{  				if (DifferentConnection && Connection.State == ConnectionState.Open)  					Connection.Close();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5124' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresOlapCubeQuery<TSource>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresOlapCubeQuery.cs,PrepareSql,The following statement contains a magic number: if (customOrder.Count > 0)  			{  				sb.Append(" ORDER BY ");  				foreach (var kv in customOrder)  				{  					if (CubeDimensions.ContainsKey(kv.Key))  						sb.Append(CubeDimensions[kv.Key](alias));  					else if (CubeFacts.ContainsKey(kv.Key))  						sb.Append(CubeFacts[kv.Key](alias));  					else  						sb.AppendFormat("\"{0}\""' kv.Key);  					if (kv.Value == false)  						sb.Append(" DESC");  					sb.Append("' ");  				}  				sb.Length -= 2;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,StartQuery,The following statement contains a magic number: try  			{  				query = QueryFactory(connection' transaction);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5101' "{0}"' ex);  				TraceSource.TraceEvent(TraceEventType.Information' 5101' "Transactions: {0}' connections: {1}"' OpenTransactions.Count' OpenConnections.Count);  				throw;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,StartQuery,The following statement contains a magic number: try  			{  				query = QueryFactory(connection' transaction);  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Critical' 5101' "{0}"' ex);  				TraceSource.TraceEvent(TraceEventType.Information' 5101' "Transactions: {0}' connections: {1}"' OpenTransactions.Count' OpenConnections.Count);  				throw;  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var tran in OpenTransactions.Values)  				{  					var conn = tran.Connection;  					if (conn != null)  					{  						try  						{  							tran.Rollback();  						}  						catch (Exception tex)  						{  							TraceSource.TraceEvent(TraceEventType.Error' 5102' "{0}"' tex);  						}  						Connections.Release(conn' false);  					}  				}  				OpenTransactions.Clear();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5103' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var tran in OpenTransactions.Values)  				{  					var conn = tran.Connection;  					if (conn != null)  					{  						try  						{  							tran.Rollback();  						}  						catch (Exception tex)  						{  							TraceSource.TraceEvent(TraceEventType.Error' 5102' "{0}"' tex);  						}  						Connections.Release(conn' false);  					}  				}  				OpenTransactions.Clear();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5103' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresQueryManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresQueryManager.cs,Dispose,The following statement contains a magic number: try  			{  				foreach (var c in OpenConnections.Values)  					Connections.Release(c' false);  				OpenConnections.Clear();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(TraceEventType.Error' 5104' "{0}"' ex);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresRecordConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresRecordConverter.cs,ParseList,The following statement contains a magic number: if (value.Length > 0 && value[0] == '{' && value[value.Length - 1] == '}')  			{  				if (value.Length == 2)  					return new List<string>();  				int cur = 1;  				int len = value.Length - 1;  				var sb = new StringBuilder();  				while (cur <= len)  				{  					char current = value[cur];  					if (current == ''' || current == '}')  					{  						var sbVal = sb.ToString();  						list.Add(sbVal != "NULL" ? sbVal : null);  						sb = new StringBuilder();  					}  					else if (current == '"')  					{  						if (sb.Length > 0)  							throw new FrameworkException("Error in array format. {0}".With(value));  						cur++;  						while (cur < len)  						{  							current = value[cur];  							if (current == '\\')  							{  								cur++;  								sb.Append(value[cur]);  							}  							else if (current == '"')  							{  								cur++;  								current = value[cur];  								if (current == '"')  									sb.Append(current);  								else  								{  									list.Add(sb.ToString());  									sb = new StringBuilder();  									break;  								}  							}  							else sb.Append(current);  							cur++;  						}  					}  					else sb.Append(current);  					cur++;  				}  				if (sb.Length > 0)  					throw new FrameworkException("Error in array format. {0}".With(value));  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresRecordConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresRecordConverter.cs,BuildSimpleUriList,The following statement contains a magic number: var sb = new StringBuilder(uris.Count * 40);
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresRecordConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresRecordConverter.cs,BuildCompositeUriList,The following statement contains a magic number: var sb = new StringBuilder(uris.Count * 40);
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresTypedArray,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresTypedArray.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<T>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresTypedArray,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresTypedArray.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<T>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres,PostgresTypedArray,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\PostgresTypedArray.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(default(T));  				}  				else  				{  					var innerEscaped = cur != '(';  					if (innerEscaped)  						reader.Read(arrayContext);  					list.Add(parseItem(reader' 0' recordContext' locator));  					if (innerEscaped)  						cur = reader.Read(arrayContext + 1);  					else  						cur = reader.Read();  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MinBatchSize = 1000;
Magic Number,Revenj.DatabasePersistence.Postgres,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MaxObjectSize = 1024 * 1024;
Magic Number,Revenj.DatabasePersistence.Postgres,Setup,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Setup.cs,Setup,The following statement contains a magic number: MaxObjectSize = 1024 * 1024;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 't')  					list.Add(true);  				else if (cur == 'f')  					list.Add(false);  				else  				{  					reader.Read(3);  					list.Add(null);  				}  				cur = reader.Read();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 't')  					list.Add(true);  				else if (cur == 'f')  					list.Add(false);  				else  				{  					reader.Read(3);  					list.Add(false);  				}  				cur = reader.Read();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: if (value)  			{  				buf[pos] = 't';  				buf[pos + 1] = 'r';  				buf[pos + 2] = 'u';  				buf[pos + 3] = 'e';  				return pos + 4;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: if (value)  			{  				buf[pos] = 't';  				buf[pos + 1] = 'r';  				buf[pos + 2] = 'u';  				buf[pos + 3] = 'e';  				return pos + 4;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: if (value)  			{  				buf[pos] = 't';  				buf[pos + 1] = 'r';  				buf[pos + 2] = 'u';  				buf[pos + 3] = 'e';  				return pos + 4;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: buf[pos + 2] = 'l';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: buf[pos + 3] = 's';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: buf[pos + 4] = 'e';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\BoolConverter.cs,SerializeURI,The following statement contains a magic number: return pos + 5;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,FromDatabase,The following statement contains a magic number: if (value.Length > 1 && value[0] == '\\' && value[1] == 'x')  			{  				var data = new byte[value.Length / 2 - 1];  				var pos = 2;  				for (int i = 0; i < data.Length; i++)  					data[i] = (byte)((CharLookup[value[pos++]] << 4) + CharLookup[value[pos++]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,FromDatabase,The following statement contains a magic number: if (value.Length > 1 && value[0] == '\\' && value[1] == 'x')  			{  				var data = new byte[value.Length / 2 - 1];  				var pos = 2;  				for (int i = 0; i < data.Length; i++)  					data[i] = (byte)((CharLookup[value[pos++]] << 4) + CharLookup[value[pos++]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,FromDatabase,The following statement contains a magic number: if (value.Length > 1 && value[0] == '\\' && value[1] == 'x')  			{  				var data = new byte[value.Length / 2 - 1];  				var pos = 2;  				for (int i = 0; i < data.Length; i++)  					data[i] = (byte)((CharLookup[value[pos++]] << 4) + CharLookup[value[pos++]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Parse,The following statement contains a magic number: var list = new List<byte>(1024);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Parse,The following statement contains a magic number: while (cur != -1 && cur != '\\' && cur != '"')  			{  				list.Add((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  				cur = reader.Read();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyColl);  					cur = reader.Read(4);  				}  				else  				{  					reader.Read(skipInner);  					var item = new List<byte>(1024);  					cur = reader.Read();  					while (cur != -1 && cur != '"' && cur != '\\')  					{  						item.Add((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  						cur = reader.Read();  					}  					cur = reader.Read(innerContext);  					list.Add(item.ToArray());  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyColl);  					cur = reader.Read(4);  				}  				else  				{  					reader.Read(skipInner);  					var item = new List<byte>(1024);  					cur = reader.Read();  					while (cur != -1 && cur != '"' && cur != '\\')  					{  						item.Add((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  						cur = reader.Read();  					}  					cur = reader.Read(innerContext);  					list.Add(item.ToArray());  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyColl);  					cur = reader.Read(4);  				}  				else  				{  					reader.Read(skipInner);  					var item = new List<byte>(1024);  					cur = reader.Read();  					while (cur != -1 && cur != '"' && cur != '\\')  					{  						item.Add((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  						cur = reader.Read();  					}  					cur = reader.Read(innerContext);  					list.Add(item.ToArray());  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseStream,The following statement contains a magic number: while (ind < bytes.Length && cur != '\\' && cur != '"')  			{  				bytes[ind++] = (byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]);  				cur = reader.Read();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseStream,The following statement contains a magic number: if (cur == '\\' || cur == '"')  			{  				stream = new MemoryStream();  				stream.Write(bytes' 0' ind);  			}  			else  			{  				stream = ChunkedMemoryStream.Create();  				stream.Write(bytes' 0' ind);  				while (cur != -1 && cur != '\\' && cur != '"')  				{  					stream.WriteByte((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  					cur = reader.Read();  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseStreamCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyCol);  					cur = reader.Read(4);  				}  				else  				{  					cur = reader.Read(skipInner + 1);  					int ind = 0;  					while (ind < bytes.Length && cur != '\\' && cur != '"')  					{  						bytes[ind++] = (byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]);  						cur = reader.Read();  					}  					Stream stream;  					if (cur == '\\' || cur == '"')  					{  						stream = new MemoryStream();  						stream.Write(bytes' 0' ind);  					}  					else  					{  						stream = ChunkedMemoryStream.Create();  						stream.Write(bytes' 0' ind);  						while (cur != -1 && cur != '\\' && cur != '"')  						{  							stream.WriteByte((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  							cur = reader.Read();  						}  					}  					cur = reader.Read(innerContext);  					stream.Position = 0;  					list.Add(stream);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseStreamCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyCol);  					cur = reader.Read(4);  				}  				else  				{  					cur = reader.Read(skipInner + 1);  					int ind = 0;  					while (ind < bytes.Length && cur != '\\' && cur != '"')  					{  						bytes[ind++] = (byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]);  						cur = reader.Read();  					}  					Stream stream;  					if (cur == '\\' || cur == '"')  					{  						stream = new MemoryStream();  						stream.Write(bytes' 0' ind);  					}  					else  					{  						stream = ChunkedMemoryStream.Create();  						stream.Write(bytes' 0' ind);  						while (cur != -1 && cur != '\\' && cur != '"')  						{  							stream.WriteByte((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  							cur = reader.Read();  						}  					}  					cur = reader.Read(innerContext);  					stream.Position = 0;  					list.Add(stream);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,ParseStreamCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(emptyCol);  					cur = reader.Read(4);  				}  				else  				{  					cur = reader.Read(skipInner + 1);  					int ind = 0;  					while (ind < bytes.Length && cur != '\\' && cur != '"')  					{  						bytes[ind++] = (byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]);  						cur = reader.Read();  					}  					Stream stream;  					if (cur == '\\' || cur == '"')  					{  						stream = new MemoryStream();  						stream.Write(bytes' 0' ind);  					}  					else  					{  						stream = ChunkedMemoryStream.Create();  						stream.Write(bytes' 0' ind);  						while (cur != -1 && cur != '\\' && cur != '"')  						{  							stream.WriteByte((byte)((CharLookup[cur] << 4) + CharLookup[reader.Read()]));  							cur = reader.Read();  						}  					}  					cur = reader.Read(innerContext);  					stream.Position = 0;  					list.Add(stream);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Serialize,The following statement contains a magic number: var cnt = 2;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Serialize,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)  			{  				var b = value[i];  				buf[cnt++] = CharMap[b >> 4];  				buf[cnt++] = CharMap[b & 0xf];  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Serialize,The following statement contains a magic number: return pos + 2 + value.Length * 2;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteaConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,Serialize,The following statement contains a magic number: return pos + 2 + value.Length * 2;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,ByteTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ByteaConverter.cs,BuildArray,The following statement contains a magic number: for (int i = 0; i < Value.Length && i < Length; i++)  				{  					var b = Value[i];  					sw.Write(CharMap[b >> 4]);  					sw.Write(CharMap[b & 0xf]);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,Serialize,The following statement contains a magic number: buf[start + 4] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Month' buf' start + 5);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,Serialize,The following statement contains a magic number: buf[start + 7] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Day' buf' start + 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDate,The following statement contains a magic number: var read = reader.Read(buf' 1' 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDate,The following statement contains a magic number: for (int i = read + 1; i < 10; i++)  				buf[i] = (char)reader.Read();
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDate,The following statement contains a magic number: if (buf[4] != '-')  				return ParseDateSlow(buf' reader);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDate,The following statement contains a magic number: return new DateTime(NumberConverter.Read4(buf' 0)' NumberConverter.Read2(buf' 5)' NumberConverter.Read2(buf' 8));
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDate,The following statement contains a magic number: return new DateTime(NumberConverter.Read4(buf' 0)' NumberConverter.Read2(buf' 5)' NumberConverter.Read2(buf' 8));
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDateSlow,The following statement contains a magic number: int foundAt = 4;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDateSlow,The following statement contains a magic number: for (int i = buf.Length - foundAt - 1; i < 5; i++)  				newBuf[i] = (char)reader.Read();
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseDateSlow,The following statement contains a magic number: return new DateTime(year' NumberConverter.Read2(newBuf' 0)' NumberConverter.Read2(newBuf' 3));
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(null);  				}  				else  				{  					list.Add(ParseDate(reader' cur));  					cur = reader.Read();  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(DateTime.MinValue);  				}  				else  				{  					list.Add(ParseDate(reader' cur));  					cur = reader.Read();  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,InsertRecord,The following statement contains a magic number: sw.Write(buf' 0' 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[12];  					buf[0] = '\'';  					Serialize(Date' buf' 1);  					buf[11] = '\'';  					return new string(buf' 0' 12);  				}  				else  				{  					var buf = new char[10];  					Serialize(Date' buf' 0);  					return new string(buf' 0' 10);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[12];  					buf[0] = '\'';  					Serialize(Date' buf' 1);  					buf[11] = '\'';  					return new string(buf' 0' 12);  				}  				else  				{  					var buf = new char[10];  					Serialize(Date' buf' 0);  					return new string(buf' 0' 10);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[12];  					buf[0] = '\'';  					Serialize(Date' buf' 1);  					buf[11] = '\'';  					return new string(buf' 0' 12);  				}  				else  				{  					var buf = new char[10];  					Serialize(Date' buf' 0);  					return new string(buf' 0' 10);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[12];  					buf[0] = '\'';  					Serialize(Date' buf' 1);  					buf[11] = '\'';  					return new string(buf' 0' 12);  				}  				else  				{  					var buf = new char[10];  					Serialize(Date' buf' 0);  					return new string(buf' 0' 10);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DateTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DateConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[12];  					buf[0] = '\'';  					Serialize(Date' buf' 1);  					buf[11] = '\'';  					return new string(buf' 0' 12);  				}  				else  				{  					var buf = new char[10];  					Serialize(Date' buf' 0);  					return new string(buf' 0' 10);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseDecimal,The following statement contains a magic number: if (size > 18)  			{  				if (neg)  					return -decimal.Parse(new string(buf' 0' size)' Invariant);  				return decimal.Parse(new string(buf' 0' size)' Invariant);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseDecimal,The following statement contains a magic number: for (int i = 0; i < size && i < buf.Length; i++)  			{  				ch = buf[i];  				if (ch == '.')  					scale = size - i - 1;  				else  					value = (value << 3) + (value << 1) + ch - 48;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseDecimal,The following statement contains a magic number: for (int i = 0; i < size && i < buf.Length; i++)  			{  				ch = buf[i];  				if (ch == '.')  					scale = size - i - 1;  				else  					value = (value << 3) + (value << 1) + ch - 48;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseDecimal,The following statement contains a magic number: return new decimal((int)value' (int)(value >> 32)' 0' neg' (byte)scale);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<decimal?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<decimal?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseNullableCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(null);  					cur = reader.Read(4);  				}  				else list.Add(ParseDecimal(reader' ref cur' '}'));  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<decimal>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<decimal>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DecimalConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DecimalConverter.cs,ParseCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(0);  					cur = reader.Read(4);  				}  				else list.Add(ParseDecimal(reader' ref cur' '}'));  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(null);  					}  					else  					{  						list.Add(double.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseDouble(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(null);  					}  					else  					{  						list.Add(double.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseDouble(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(0);  					}  					else  					{  						list.Add(double.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseDouble(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,DoubleConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\DoubleConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(0);  					}  					else  					{  						list.Add(double.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseDouble(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,EnumConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\EnumConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context);  				else  					reader.Read(2);  				return new List<T?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,EnumConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\EnumConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context);  				else  					reader.Read(2);  				return new List<T>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(null);  					}  					else  					{  						list.Add(float.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseFloat(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(null);  					}  					else  					{  						list.Add(float.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseFloat(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(0);  					}  					else  					{  						list.Add(float.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseFloat(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,FloatConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\FloatConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read();  					if (cur == 'U')  					{  						cur = reader.Read(3);  						list.Add(0);  					}  					else  					{  						list.Add(float.NaN);  						cur = reader.Read(2);  					}  				}  				else  				{  					list.Add(ParseFloat(reader' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: Lookup = new Pair[256];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: for (char c = 'a'; c <= 'f'; c++)  				Values[c - '0'] = (byte)(c - 'a' + 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++)  				Values[c - '0'] = (byte)(c - 'A' + 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: var l = Lookup[(a >> 24) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: var l = Lookup[(a >> 24) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 16) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 16) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 2] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 3] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 4] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 5] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[a & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 6] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 7] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 8] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(b >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(b >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 9] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 10] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[b & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 11] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 12] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 13] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(c >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(c >> 8) & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 14] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 15] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[c & 255];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 16] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 17] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 18] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 19] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 20] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 21] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 22] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 23] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 24] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 25] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 26] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 27] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 28] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 29] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 30] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 31] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 32] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 33] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 34] = l.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buf[start + 35] = l.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid,The following statement contains a magic number: int read = reader.Read(buf' 1' 36);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid,The following statement contains a magic number: for (int i = read + 1; i < 37 && i < buf.Length; i++)  				buf[i] = (char)reader.Read();
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseCollectionGuid,The following statement contains a magic number: int read = reader.Read(buf' 1' 35);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseCollectionGuid,The following statement contains a magic number: for (int i = read + 1; i < 36; i++)  				buf[i] = (char)reader.Read();
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<Guid?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<Guid?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseNullableCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(null);  				}  				else  				{  					list.Add(ParseCollectionGuid(reader' cur));  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<Guid>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<Guid>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,ParseCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(Guid.Empty);  				}  				else  				{  					list.Add(ParseCollectionGuid(reader' cur));  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var hi = (value >> 4) & 15;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var hi = (value >> 4) & 15;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var lo = value & 15;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)(hi < 10 ? '0' + hi : 'a' + hi - 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)(hi < 10 ? '0' + hi : 'a' + hi - 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)(lo < 10 ? '0' + lo : 'a' + lo - 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)(lo < 10 ? '0' + lo : 'a' + lo - 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)((number / 10) + '0');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)((number % 10) + '0');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Offset = number < 10 ? (byte)1 : (byte)0;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,InsertRecord,The following statement contains a magic number: sw.Write(buf' 0' 36);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[38];  					buf[0] = '\'';  					Serialize(Value' buf' 1);  					buf[37] = '\'';  					return new string(buf' 0' buf.Length);  				}  				else  				{  					var buf = new char[36];  					Serialize(Value' buf' 0);  					return new string(buf' 0' buf.Length);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[38];  					buf[0] = '\'';  					Serialize(Value' buf' 1);  					buf[37] = '\'';  					return new string(buf' 0' buf.Length);  				}  				else  				{  					var buf = new char[36];  					Serialize(Value' buf' 0);  					return new string(buf' 0' buf.Length);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,GuidTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\GuidConverter.cs,BuildTuple,The following statement contains a magic number: if (quote)  				{  					var buf = new char[38];  					buf[0] = '\'';  					Serialize(Value' buf' 1);  					buf[37] = '\'';  					return new string(buf' 0' buf.Length);  				}  				else  				{  					var buf = new char[36];  					Serialize(Value' buf' 0);  					return new string(buf' 0' buf.Length);  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,HstoreConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,FromDatabase,The following statement contains a magic number: var parts = value.Substring(1' value.Length - 2).Split(new[] { "\"' \""' "\"'\"" }' StringSplitOptions.None);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,HstoreConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,ParseDictionary,The following statement contains a magic number: do  			{  				do  				{  					if (cur == '\\' || cur == '"')  					{  						cur = reader.Read(quoteContext);  						if (cur == '=')  							break;  						for (int i = 0; i < quoteContext - 1; i++)  							cur = reader.Read();  					}  					reader.AddToBuffer((char)cur);  					reader.FillUntil('\\'' '"');  					cur = reader.Read();  				} while (cur != -1);  				var name = reader.BufferToString();  				cur = reader.Read(2);  				if (cur == 'N')  				{  					dict.Add(name' null);  					cur = reader.Read(4);  					if (cur == '\\' || cur == '"')  					{  						reader.Read(context);  						return dict;  					}  					if (cur == ''' && reader.Peek() != ' ')  						return dict;  					do { cur = reader.Read(); }  					while (cur == ' ');  				}  				else  				{  					cur = reader.Read(quoteContext);  					do  					{  						if (cur == '\\' || cur == '"')  						{  							cur = reader.Read(quoteContext);  							if (cur == ''')  							{  								dict.Add(name' reader.BufferToString());  								do { cur = reader.Read(); }  								while (cur == ' ');  								cur = reader.Read(quoteContext);  								break;  							}  							for (int i = 0; i < context; i++)  								cur = reader.Read();  							if (cur == ''' || cur == -1 || cur == matchEnd)  							{  								dict.Add(name' reader.BufferToString());  								return dict;  							}  							for (int i = 0; i < context - 1; i++)  								cur = reader.Read();  						}  						reader.AddToBuffer((char)cur);  						reader.FillUntil('\\'' '"');  						cur = reader.Read();  					} while (cur != -1);  				}  			} while (cur != -1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,HstoreConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,ParseDictionary,The following statement contains a magic number: do  			{  				do  				{  					if (cur == '\\' || cur == '"')  					{  						cur = reader.Read(quoteContext);  						if (cur == '=')  							break;  						for (int i = 0; i < quoteContext - 1; i++)  							cur = reader.Read();  					}  					reader.AddToBuffer((char)cur);  					reader.FillUntil('\\'' '"');  					cur = reader.Read();  				} while (cur != -1);  				var name = reader.BufferToString();  				cur = reader.Read(2);  				if (cur == 'N')  				{  					dict.Add(name' null);  					cur = reader.Read(4);  					if (cur == '\\' || cur == '"')  					{  						reader.Read(context);  						return dict;  					}  					if (cur == ''' && reader.Peek() != ' ')  						return dict;  					do { cur = reader.Read(); }  					while (cur == ' ');  				}  				else  				{  					cur = reader.Read(quoteContext);  					do  					{  						if (cur == '\\' || cur == '"')  						{  							cur = reader.Read(quoteContext);  							if (cur == ''')  							{  								dict.Add(name' reader.BufferToString());  								do { cur = reader.Read(); }  								while (cur == ' ');  								cur = reader.Read(quoteContext);  								break;  							}  							for (int i = 0; i < context; i++)  								cur = reader.Read();  							if (cur == ''' || cur == -1 || cur == matchEnd)  							{  								dict.Add(name' reader.BufferToString());  								return dict;  							}  							for (int i = 0; i < context - 1; i++)  								cur = reader.Read();  						}  						reader.AddToBuffer((char)cur);  						reader.FillUntil('\\'' '"');  						cur = reader.Read();  					} while (cur != -1);  				}  			} while (cur != -1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,HstoreConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\HstoreConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(allowNulls ? null : new Dictionary<string' string>());  				}  				else  				{  					list.Add(ParseDictionary(reader' innerContext' innerContext << 1' ref cur' '}'));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseInt,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseInt,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseInt,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseInt,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != matchEnd);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<int?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<int?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseNullableCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(null);  					cur = reader.Read(4);  				}  				else  				{  					list.Add(ParseInt(reader' ref cur' '}'));  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<int>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<int>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParseCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					list.Add(0);  					cur = reader.Read(4);  				}  				else  				{  					list.Add(ParseInt(reader' ref cur' '}'));  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParsePositive,The following statement contains a magic number: for (int i = start; i < source.Length; i++)  			{  				if (i == end) break;  				res = res * 10 + (source[i] - 48);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ParsePositive,The following statement contains a magic number: for (int i = start; i < source.Length; i++)  			{  				if (i == end) break;  				res = res * 10 + (source[i] - 48);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,ToString,The following statement contains a magic number: if (value < 0)  			{  				int pos = 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				return new string(buf' pos' 12 - pos);  			}  			else  			{  				int pos = 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				return new string(buf' pos + 1' 10 - pos);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value == int.MinValue)  			{  				"-2147483648".CopyTo(0' buf' start' 11);  				return start + 11;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value == int.MinValue)  			{  				"-2147483648".CopyTo(0' buf' start' 11);  				return start + 11;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 11;  				var abs = (uint)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 2);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 12 - pos;  				pos = pos - start;  			}  			else  			{  				pos = start + 10;  				var abs = (uint)(value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				len = start + 10 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,InsertRecord,The following statement contains a magic number: int pos = 10;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,InsertRecord,The following statement contains a magic number: do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,InsertRecord,The following statement contains a magic number: do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,IntTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\IntConverter.cs,InsertRecord,The following statement contains a magic number: sw.Write(buf' pos + 1' 10 - pos);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseLong,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseLong,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseLong,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseLong,The following statement contains a magic number: if (cur == '-')  			{  				cur = reader.Read();  				do  				{  					res = (res << 3) + (res << 1) - (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}  			else  			{  				do  				{  					res = (res << 3) + (res << 1) + (cur - 48);  					cur = reader.Read();  				} while (cur != -1 && cur != ''' && cur != ')' && cur != '}');  				return res;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseNullableCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(null);  				}  				else  				{  					list.Add(ParseLong(reader' ref cur));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,ParseCollection,The following statement contains a magic number: while (cur != -1 && cur != '}')  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(0);  				}  				else  				{  					list.Add(ParseLong(reader' ref cur));  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value == long.MinValue)  			{  				"-9223372036854775808".CopyTo(0' buf' start' 20);  				return start + 20;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value == long.MinValue)  			{  				"-9223372036854775808".CopyTo(0' buf' start' 20);  				return start + 20;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,Serialize,The following statement contains a magic number: if (value < 0)  			{  				pos = start + 21;  				var abs = (ulong)(-value);  				NumberConverter.Pair num;  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);  				pos += num.Offset;  				buf[pos] = '-';  				len = start + 22 - pos;  				pos = pos - start;  			}  			else  			{  				pos = 20;  				var abs = (ulong)(value);  				do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					var num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  				} while (abs != 0);  				if (buf[pos + 1] == '0') // TODO: remove branch  					pos++;  				len = start + 20 - pos;  				pos = pos + 1 - start;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,InsertRecord,The following statement contains a magic number: int pos = 20;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,InsertRecord,The following statement contains a magic number: do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,InsertRecord,The following statement contains a magic number: do  				{  					var div = abs / 100;  					var rem = abs - div * 100;  					num = NumberConverter.Numbers[rem];  					buf[pos--] = num.Second;  					buf[pos--] = num.First;  					abs = div;  					if (abs == 0) break;  				} while (pos > 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,LongTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\LongConverter.cs,InsertRecord,The following statement contains a magic number: sw.Write(buf' pos + 1' 20 - pos);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,NumberConverter,The following statement contains a magic number: Numbers = new Pair[100];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: var div = number / 100;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: var rem = number - div * 100;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: buffer[start + 2] = pair2.First;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: buffer[start + 3] = pair2.Second;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read2,The following statement contains a magic number: int first = source[start] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read2,The following statement contains a magic number: return (first << 3) + (first << 1) + source[start + 1] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read2,The following statement contains a magic number: return (first << 3) + (first << 1) + source[start + 1] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: int first = source[start] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: var second = source[start + 1] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: var third = source[start + 2] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: var third = source[start + 2] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: return first * 1000 + second * 100 + (third << 3) + (third << 1) + source[start + 3] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: return first * 1000 + second * 100 + (third << 3) + (third << 1) + source[start + 3] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: return first * 1000 + second * 100 + (third << 3) + (third << 1) + source[start + 3] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: return first * 1000 + second * 100 + (third << 3) + (third << 1) + source[start + 3] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,Read4,The following statement contains a magic number: return first * 1000 + second * 100 + (third << 3) + (third << 1) + source[start + 3] - 48;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,TryParsePositiveInt,The following statement contains a magic number: for (int i = 0; i < number.Length; i++)  				value = (value << 3) + (value << 1) + number[i] - '0';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,ParseLong,The following statement contains a magic number: if (number[0] == '-')  			{  				for (int i = 1; i < number.Length; i++)  					value = (value << 3) + (value << 2) - number[i] + '0';  			}  			else  			{  				for (int i = 0; i < number.Length; i++)  					value = (value << 3) + (value << 2) + number[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,ParseLong,The following statement contains a magic number: if (number[0] == '-')  			{  				for (int i = 1; i < number.Length; i++)  					value = (value << 3) + (value << 2) - number[i] + '0';  			}  			else  			{  				for (int i = 0; i < number.Length; i++)  					value = (value << 3) + (value << 2) + number[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,ParseLong,The following statement contains a magic number: if (number[0] == '-')  			{  				for (int i = 1; i < number.Length; i++)  					value = (value << 3) + (value << 2) - number[i] + '0';  			}  			else  			{  				for (int i = 0; i < number.Length; i++)  					value = (value << 3) + (value << 2) + number[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\NumberConverter.cs,ParseLong,The following statement contains a magic number: if (number[0] == '-')  			{  				for (int i = 1; i < number.Length; i++)  					value = (value << 3) + (value << 2) - number[i] + '0';  			}  			else  			{  				for (int i = 0; i < number.Length; i++)  					value = (value << 3) + (value << 2) + number[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,PostgresTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\PostgresTuple.cs,BuildQuoteEscape,The following statement contains a magic number: for (int j = escaping.Length - 1; j >= 0; j--)  			{  				if (escaping[j] == '1')  				{  					var len = sb.Length;  					for (int i = 0; i < len; i++)  						sb.Insert(i * 2' sb[i * 2]);  				}  				else  					sb.Replace("\\"' "\\\\").Replace("\""' "\\\"");  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,PostgresTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\PostgresTuple.cs,BuildQuoteEscape,The following statement contains a magic number: for (int j = escaping.Length - 1; j >= 0; j--)  			{  				if (escaping[j] == '1')  				{  					var len = sb.Length;  					for (int i = 0; i < len; i++)  						sb.Insert(i * 2' sb[i * 2]);  				}  				else  					sb.Replace("\\"' "\\\\").Replace("\""' "\\\"");  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,PostgresTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\PostgresTuple.cs,InitSlashes,The following statement contains a magic number: var arr = new string[20];
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,SecretConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\SecretConverter.cs,ExtractBytesAndEcrypt,The following statement contains a magic number: try  			{  				bstr = Marshal.SecureStringToBSTR(value);  				int len = Marshal.ReadInt32(bstr' -4);  				var bytes = new byte[len];  				for (var i = 0; i < len; ++i)  					bytes[i] = Marshal.ReadByte(bstr' i);  				return RsaProvider.Encrypt(bytes' false);  			}  			finally  			{  				if (bstr != IntPtr.Zero) Marshal.ZeroFreeBSTR(bstr);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\StringConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<string>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\StringConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (espaced)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<string>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 4] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 7] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 10] = ' ';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 13] = ':';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 16] = ':';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Month' buffer' pos + 5);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Day' buffer' pos + 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Hour' buffer' pos + 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Minute' buffer' pos + 14);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Second' buffer' pos + 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: int micro = (int)(value.Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' value.Kind).Ticks) / 10;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: int end = pos + 19;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: return end + 3;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 4] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 7] = '-';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 10] = ' ';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 13] = ':';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: buffer[pos + 16] = ':';
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Month' buffer' pos + 5);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Day' buffer' pos + 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Hour' buffer' pos + 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Minute' buffer' pos + 14);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Second' buffer' pos + 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: int micro = (int)(value.ToUniversalTime().Ticks - new DateTime(value.Year' value.Month' value.Day' value.Hour' value.Minute' value.Second' DateTimeKind.Utc).Ticks) / 10;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: int end = pos + 19;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: if (micro != 0)  			{  				buffer[pos + 19] = '.';  				var div = micro / 100;  				var rem = micro - div * 100;  				NumberConverter.Write4(div' buffer' 20);  				NumberConverter.Write2(rem' buffer' 24);  				end = pos + 25;  				while (buffer[end] == '0')  					end--;  				end++;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,Serialize,The following statement contains a magic number: return end + 3;
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[10] != ' ')  				return DateTime.Parse(new string(buf' 0' len)' CultureInfo.InvariantCulture);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: var month = NumberConverter.Read2(buf' 5);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: var date = NumberConverter.Read2(buf' 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: var hour = NumberConverter.Read2(buf' 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: var minutes = NumberConverter.Read2(buf' 14);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: var seconds = NumberConverter.Read2(buf' 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseTimestampUtc,The following statement contains a magic number: if (buf[19] == '.')  			{  				long nano = 0;  				var max = len - 3;  				for (int i = 20' r = 0; i < max && r < TimestampReminder.Length && i < buf.Length; i++' r++)  					nano += TimestampReminder[r] * (buf[i] - 48);  				var pos = buf[len - 3] == '+';  				var offset = NumberConverter.Read2(buf' len - 2);  				var dt = offset != 0  					? new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset)  					: new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  				return new DateTime(dt.Ticks + nano' DateTimeKind.Utc);  			}  			else if (len == 20 && buf[19] == 'Z')  			{  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 22)  			{  				var pos = buf[19] == '+';  				var offset = NumberConverter.Read2(buf' 20);  				if (offset != 0)  					return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc).AddHours(pos ? -offset : offset);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc);  			}  			else if (len == 25)  			{  				var pos = buf[19] == '+';  				var offsetHour = NumberConverter.Read2(buf' 20);  				var offsetMin = NumberConverter.Read2(buf' 23);  				return new DateTime(year' month' date' hour' minutes' seconds' DateTimeKind.Utc)  					.AddHours(pos ? -offsetHour : offsetHour)  					.AddMinutes(pos ? -offsetMin : offsetMin);  			}  			else  			{  				buf[10] = 'T';  				return DateTime.Parse(new string(buf' 0' len));  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(null);  				}  				else  				{  					list.Add(ParseTimestampUtc(reader' innerContext).ToLocalTime());  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollection,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollection,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(DateTime.MinValue);  				}  				else  				{  					list.Add(ParseTimestampUtc(reader' innerContext).ToLocalTime());  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollectionUtc,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollectionUtc,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime?>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseNullableCollectionUtc,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(null);  				}  				else  				{  					list.Add(ParseTimestampUtc(reader' innerContext));  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollectionUtc,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollectionUtc,The following statement contains a magic number: if (cur == '}')  			{  				if (escaped)  					reader.Read(context + 2);  				else  					reader.Read(2);  				return new List<DateTime>(0);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,ParseCollectionUtc,The following statement contains a magic number: do  			{  				cur = reader.Read();  				if (cur == 'N')  				{  					cur = reader.Read(4);  					list.Add(MinUtc);  				}  				else  				{  					list.Add(ParseTimestampUtc(reader' innerContext));  					cur = reader.Read();  				}  			} while (cur == ''');
Magic Number,Revenj.DatabasePersistence.Postgres.Converters,TimestampTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\TimestampConverter.cs,BuildTuple,The following statement contains a magic number: var buf = new char[32];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ArrayBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\ArrayHandling.cs,ToArrayList,The following statement contains a magic number: string stripBraces = BackendData.Trim().Substring(1' BackendData.Length - 2).Trim();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: foreach (bool bit in bits)  			{  				curChunk = (curChunk << 1) | (bit ? 1u : 0u);  				if (++curChunkLen == 32)  				{  					_chunks.Add(curChunk);  					curChunk = 0;  					curChunkLen = 0;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: if (value)  			{  				_chunks = new List<uint>((count + 31) / 32);  				for (int i = 0; i < count / 32; ++i)  					_chunks.Add(0xFFFFFFFFu);  				if (count % 32 != 0)  					_chunks.Add(0xFFFFFFFFu << -count);  			}  			else  				_chunks = new List<uint>(new uint[(count + 31) / 32]);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: _lastChunkLen = count % 32;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,BitString,The following statement contains a magic number: int bitCount = 32;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,IndexOf,The following statement contains a magic number: if (item)  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((chunkCount & (0x80000000u >> i)) != 0)  							{  								return chunkCount * 32 + i;  							}  						}  					}  				}  			}  			else  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0xFFFFFFFFu)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((~chunkCount & (0x80000000u >> i)) != 0)  							{  								int ret = chunkCount * 32 + i;  								return ret < Length ? ret : -1;  							}  						}  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,IndexOf,The following statement contains a magic number: if (item)  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((chunkCount & (0x80000000u >> i)) != 0)  							{  								return chunkCount * 32 + i;  							}  						}  					}  				}  			}  			else  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0xFFFFFFFFu)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((~chunkCount & (0x80000000u >> i)) != 0)  							{  								int ret = chunkCount * 32 + i;  								return ret < Length ? ret : -1;  							}  						}  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,IndexOf,The following statement contains a magic number: if (item)  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((chunkCount & (0x80000000u >> i)) != 0)  							{  								return chunkCount * 32 + i;  							}  						}  					}  				}  			}  			else  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0xFFFFFFFFu)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((~chunkCount & (0x80000000u >> i)) != 0)  							{  								int ret = chunkCount * 32 + i;  								return ret < Length ? ret : -1;  							}  						}  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,IndexOf,The following statement contains a magic number: if (item)  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((chunkCount & (0x80000000u >> i)) != 0)  							{  								return chunkCount * 32 + i;  							}  						}  					}  				}  			}  			else  			{  				for (int chunkCount = 0; chunkCount != _chunks.Count; ++chunkCount)  				{  					if (_chunks[chunkCount] != 0xFFFFFFFFu)  					{  						uint chunk = _chunks[chunkCount];  						for (int i = 0; i != 32; ++i)  						{  							if ((~chunkCount & (0x80000000u >> i)) != 0)  							{  								int ret = chunkCount * 32 + i;  								return ret < Length ? ret : -1;  							}  						}  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,GetEnumerator,The following statement contains a magic number: if (_chunks.Count != 0)  			{  				foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  					for (int i = 31; i != -1; --i)  						yield return (chunk & (1u << i)) != 0;  				uint lastChunk = _chunks[_chunks.Count - 1];  				for (int i = 31; i != 31 - _lastChunkLen; --i)  					yield return (lastChunk & (1u << i)) != 0;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,GetEnumerator,The following statement contains a magic number: if (_chunks.Count != 0)  			{  				foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  					for (int i = 31; i != -1; --i)  						yield return (chunk & (1u << i)) != 0;  				uint lastChunk = _chunks[_chunks.Count - 1];  				for (int i = 31; i != 31 - _lastChunkLen; --i)  					yield return (lastChunk & (1u << i)) != 0;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,GetEnumerator,The following statement contains a magic number: if (_chunks.Count != 0)  			{  				foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  					for (int i = 31; i != -1; --i)  						yield return (chunk & (1u << i)) != 0;  				uint lastChunk = _chunks[_chunks.Count - 1];  				for (int i = 31; i != 31 - _lastChunkLen; --i)  					yield return (lastChunk & (1u << i)) != 0;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Concat,The following statement contains a magic number: if (Length == 0)  				return append;  			else if (append.Length == 0)  				return this;  			else if (_lastChunkLen == 0)//Not only more efficient case with special handling' but also reasonably likely to appear in real use quite often.  			{  				List<uint> chunks = new List<uint>(_chunks);//Note that this copies' doesn't share.  				chunks.AddRange(append._chunks);  				return new BitString(chunks' append._lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>(AllChunksButLast);  				chunks.Add(_chunks[_chunks.Count - 1] | (append._chunks[0] >> _lastChunkLen));  				for (int idx = 1; idx != append._chunks.Count; ++idx)  				{  					chunks.Add((append._chunks[idx - 1] << -_lastChunkLen) | (append._chunks[idx] >> _lastChunkLen));  				}  				chunks.Add(append._chunks[append._chunks.Count - 1] << -_lastChunkLen);  				while (chunks.Count > (Length + append.Length + 31) / 32)  					chunks.RemoveAt(chunks.Count - 1);  				return new BitString(chunks' (_lastChunkLen + append._lastChunkLen) % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Concat,The following statement contains a magic number: if (Length == 0)  				return append;  			else if (append.Length == 0)  				return this;  			else if (_lastChunkLen == 0)//Not only more efficient case with special handling' but also reasonably likely to appear in real use quite often.  			{  				List<uint> chunks = new List<uint>(_chunks);//Note that this copies' doesn't share.  				chunks.AddRange(append._chunks);  				return new BitString(chunks' append._lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>(AllChunksButLast);  				chunks.Add(_chunks[_chunks.Count - 1] | (append._chunks[0] >> _lastChunkLen));  				for (int idx = 1; idx != append._chunks.Count; ++idx)  				{  					chunks.Add((append._chunks[idx - 1] << -_lastChunkLen) | (append._chunks[idx] >> _lastChunkLen));  				}  				chunks.Add(append._chunks[append._chunks.Count - 1] << -_lastChunkLen);  				while (chunks.Count > (Length + append.Length + 31) / 32)  					chunks.RemoveAt(chunks.Count - 1);  				return new BitString(chunks' (_lastChunkLen + append._lastChunkLen) % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Concat,The following statement contains a magic number: if (Length == 0)  				return append;  			else if (append.Length == 0)  				return this;  			else if (_lastChunkLen == 0)//Not only more efficient case with special handling' but also reasonably likely to appear in real use quite often.  			{  				List<uint> chunks = new List<uint>(_chunks);//Note that this copies' doesn't share.  				chunks.AddRange(append._chunks);  				return new BitString(chunks' append._lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>(AllChunksButLast);  				chunks.Add(_chunks[_chunks.Count - 1] | (append._chunks[0] >> _lastChunkLen));  				for (int idx = 1; idx != append._chunks.Count; ++idx)  				{  					chunks.Add((append._chunks[idx - 1] << -_lastChunkLen) | (append._chunks[idx] >> _lastChunkLen));  				}  				chunks.Add(append._chunks[append._chunks.Count - 1] << -_lastChunkLen);  				while (chunks.Count > (Length + append.Length + 31) / 32)  					chunks.RemoveAt(chunks.Count - 1);  				return new BitString(chunks' (_lastChunkLen + append._lastChunkLen) % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Substring,The following statement contains a magic number: if (start < 0 || length < 0 || start + length > Length)  				throw new ArgumentOutOfRangeException();  			else if (length == 0)  				return Empty;  			else if (start == 0 && length == Length)  				return this;  			else if (start % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(start / 32' (length + 31) / 32);  				if (length % 32 != 0)  					chunks[chunks.Count - 1] = chunks[chunks.Count - 1] & (0xFFFFFFFFu << -length);  				return new BitString(chunks' length % 32);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int i = start / 32 + 1; i < (start + length) / 32 + 1; ++i)  					chunks.Add((_chunks[i - 1] << start) | (_chunks[i] >> -start));  				if (length % 32 != 0 && chunks.Count < length / 32 + 1)  					chunks.Add((_chunks[(start + length - 1) / 32] << start) & (0xFFFFFFFFu << -length));  				return new BitString(chunks' length % 32);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,LShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return RShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(operand / 32' (Length - operand) / 32);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int idx = (operand + 31) / 32; idx != _chunks.Count; ++idx)  					chunks.Add((_chunks[idx - 1] << operand) | (_chunks[idx] >> -operand));  				chunks.Add(_chunks[_chunks.Count - 1] << operand);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,LShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return RShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(operand / 32' (Length - operand) / 32);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int idx = (operand + 31) / 32; idx != _chunks.Count; ++idx)  					chunks.Add((_chunks[idx - 1] << operand) | (_chunks[idx] >> -operand));  				chunks.Add(_chunks[_chunks.Count - 1] << operand);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,LShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return RShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(operand / 32' (Length - operand) / 32);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int idx = (operand + 31) / 32; idx != _chunks.Count; ++idx)  					chunks.Add((_chunks[idx - 1] << operand) | (_chunks[idx] >> -operand));  				chunks.Add(_chunks[_chunks.Count - 1] << operand);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,LShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return RShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(operand / 32' (Length - operand) / 32);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int idx = (operand + 31) / 32; idx != _chunks.Count; ++idx)  					chunks.Add((_chunks[idx - 1] << operand) | (_chunks[idx] >> -operand));  				chunks.Add(_chunks[_chunks.Count - 1] << operand);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,LShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return RShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(operand / 32' (Length - operand) / 32);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				for (int idx = (operand + 31) / 32; idx != _chunks.Count; ++idx)  					chunks.Add((_chunks[idx - 1] << operand) | (_chunks[idx] >> -operand));  				chunks.Add(_chunks[_chunks.Count - 1] << operand);  				chunks.AddRange(new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,RShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return LShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(0' _chunks.Count - operand / 32);  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				chunks.Add(_chunks[0] >> operand);  				for (int idx = 0; idx != (_chunks.Count - operand / 32) - 1; ++idx)  					chunks.Add((_chunks[idx] << -operand) | (_chunks[idx + 1] >> operand));  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,RShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return LShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(0' _chunks.Count - operand / 32);  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				chunks.Add(_chunks[0] >> operand);  				for (int idx = 0; idx != (_chunks.Count - operand / 32) - 1; ++idx)  					chunks.Add((_chunks[idx] << -operand) | (_chunks[idx + 1] >> operand));  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,RShift,The following statement contains a magic number: if (_chunks.Count == 0)  				return Empty;  			else if (operand < 0)  				return LShift(-operand);  			else if (operand == 0)  				return this;  			else if (operand >= Length)  				return new BitString(false' Length);  			else if (operand % 32 == 0)  			{  				List<uint> chunks = _chunks.GetRange(0' _chunks.Count - operand / 32);  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}  			else  			{  				List<uint> chunks = new List<uint>();  				chunks.Add(_chunks[0] >> operand);  				for (int idx = 0; idx != (_chunks.Count - operand / 32) - 1; ++idx)  					chunks.Add((_chunks[idx] << -operand) | (_chunks[idx + 1] >> operand));  				chunks.InsertRange(0' new uint[_chunks.Count - chunks.Count]);  				return new BitString(chunks' _lastChunkLen);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,GetHashCode,The following statement contains a magic number: foreach (uint chunk in _chunks)  				ret ^= Npgsql.PGUtil.RotateShift((int)chunk' ret % 32);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,XFormatString,The following statement contains a magic number: if (!ignoreTrailingBits && _lastChunkLen % 4 != 0)  				throw new FormatException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,XFormatString,The following statement contains a magic number: if (_lastChunkLen != 0)  				sb.Length -= (32 - _lastChunkLen + 3) / 4;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,XFormatString,The following statement contains a magic number: if (_lastChunkLen != 0)  				sb.Length -= (32 - _lastChunkLen + 3) / 4;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,XFormatString,The following statement contains a magic number: if (_lastChunkLen != 0)  				sb.Length -= (32 - _lastChunkLen + 3) / 4;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToString,The following statement contains a magic number: switch (format[0])  			{  				case 'b':  				case 'B':  					return ZeroPad(BFormatString()' padTo).ToString();  				case 'x':  					return ZeroPad(XFormatString(false' false)' padTo).ToString();  				case 'X':  					return ZeroPad(XFormatString(true' false)' padTo).ToString();  				case 'g':  					return ZeroPad(BFormatString()' padTo).Insert(0' "b'").Append('\'').ToString();  				case 'G':  					return ZeroPad(BFormatString()' padTo).Insert(0' "B'").Append('\'').ToString();  				case 'y':  					return ZeroPad(XFormatString(false' false)' padTo).Insert(0' "x'").Append('\'').ToString();  				case 'Y':  					return ZeroPad(XFormatString(true' false)' padTo).Insert(0' "X'").Append('\'').ToString();  				case 'c':  					return ToString((_lastChunkLen % 4 == 0 ? "y" : "g") + padTo.ToString());  				case 'C':  					return ToString((_lastChunkLen % 4 == 0 ? "Y" : "G") + padTo.ToString());  				case 'e':  					return ToString("E" + padTo.ToString()).ToLowerInvariant();  				case 'E':  					if (_lastChunkLen == 1 && _chunks.Count == 1)  						return (_chunks[0] & 0x80000000u) == 0 ? "0" : "1";//both safe in this case for all lengths' and allows for some backwards compatibility from threating bit(1) as if it were boolean.  					else if (_lastChunkLen % 4 == 0)  						return ToString("Y" + padTo.ToString());  					else if (Length < 9)  						return ToString("G" + padTo.ToString());  					else  					{  						StringBuilder sb = XFormatString(true' true).Insert(0' "X'");  						sb.Append("\'||B\'");  						uint lastNibble = _chunks[_chunks.Count - 1] << (_lastChunkLen / 4 * 4);  						for (int i = 0; i < _lastChunkLen % 4; ++i)  						{  							uint mask = 0x80000000u >> i;  							sb.Append((lastNibble & mask) != 0 ? '1' : '0');  						}  						return sb.Append('\'').ToString();  					}  				default:  					throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ReadHexNibbles,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case -1:  					case (int)'\'':  						yield break;  					case (int)'0':  					case (int)'1':  					case (int)'2':  					case (int)'3':  					case (int)'4':  					case (int)'5':  					case (int)'6':  					case (int)'7':  					case (int)'8':  					case (int)'9':  						yield return (uint)tr.Read() - '0';  						break;  					case (int)'a':  					case (int)'b':  					case (int)'c':  					case (int)'d':  					case (int)'e':  					case (int)'f':  						yield return (uint)tr.Read() - 'a' + 10;  						break;  					case (int)'A':  					case (int)'B':  					case (int)'C':  					case (int)'D':  					case (int)'E':  					case (int)'F':  						yield return (uint)tr.Read() - 'A' + 10;  						break;  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ReadHexNibbles,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case -1:  					case (int)'\'':  						yield break;  					case (int)'0':  					case (int)'1':  					case (int)'2':  					case (int)'3':  					case (int)'4':  					case (int)'5':  					case (int)'6':  					case (int)'7':  					case (int)'8':  					case (int)'9':  						yield return (uint)tr.Read() - '0';  						break;  					case (int)'a':  					case (int)'b':  					case (int)'c':  					case (int)'d':  					case (int)'e':  					case (int)'f':  						yield return (uint)tr.Read() - 'a' + 10;  						break;  					case (int)'A':  					case (int)'B':  					case (int)'C':  					case (int)'D':  					case (int)'E':  					case (int)'F':  						yield return (uint)tr.Read() - 'A' + 10;  						break;  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Parse,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case (int)'0':  					case (int)'1':  						parts.Add(new BitString(ReadBinary(tr)));  						break;  					case (int)'x':  					case (int)'X':  						tr.Read();  						if (tr.Read() != (int)'\'')  							throw new FormatException();  						int nibbleCount = 0;  						uint currentChunk = 0;  						List<uint> chunks = new List<uint>();  						foreach (uint nibble in ReadHexNibbles(tr))  						{  							currentChunk = currentChunk << 4 | nibble;  							if (++nibbleCount == 8)  							{  								chunks.Add(currentChunk);  								nibbleCount = 0;  							}  						}  						if (nibbleCount != 0)  							chunks.Add(currentChunk << 32 - nibbleCount * 4);  						parts.Add(new BitString(chunks' nibbleCount * 4));  						break;  					case (int)'\'':  					case (int)'b':  					case (int)'B':  					case (int)'|':  					case (int)' ':  					case (int)'\n':  					case (int)'\r':  					case '\t':  						tr.Read();  						break;  					case -1:  						switch (parts.Count)  						{  							case 0:  								return Empty;  							case 1:  								return parts[0];  							default:  								BitString accum = parts[0];  								for (int i = 1; i != parts.Count; ++i)  									accum = accum.Concat(parts[i]);  								return accum;  						}  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Parse,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case (int)'0':  					case (int)'1':  						parts.Add(new BitString(ReadBinary(tr)));  						break;  					case (int)'x':  					case (int)'X':  						tr.Read();  						if (tr.Read() != (int)'\'')  							throw new FormatException();  						int nibbleCount = 0;  						uint currentChunk = 0;  						List<uint> chunks = new List<uint>();  						foreach (uint nibble in ReadHexNibbles(tr))  						{  							currentChunk = currentChunk << 4 | nibble;  							if (++nibbleCount == 8)  							{  								chunks.Add(currentChunk);  								nibbleCount = 0;  							}  						}  						if (nibbleCount != 0)  							chunks.Add(currentChunk << 32 - nibbleCount * 4);  						parts.Add(new BitString(chunks' nibbleCount * 4));  						break;  					case (int)'\'':  					case (int)'b':  					case (int)'B':  					case (int)'|':  					case (int)' ':  					case (int)'\n':  					case (int)'\r':  					case '\t':  						tr.Read();  						break;  					case -1:  						switch (parts.Count)  						{  							case 0:  								return Empty;  							case 1:  								return parts[0];  							default:  								BitString accum = parts[0];  								for (int i = 1; i != parts.Count; ++i)  									accum = accum.Concat(parts[i]);  								return accum;  						}  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Parse,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case (int)'0':  					case (int)'1':  						parts.Add(new BitString(ReadBinary(tr)));  						break;  					case (int)'x':  					case (int)'X':  						tr.Read();  						if (tr.Read() != (int)'\'')  							throw new FormatException();  						int nibbleCount = 0;  						uint currentChunk = 0;  						List<uint> chunks = new List<uint>();  						foreach (uint nibble in ReadHexNibbles(tr))  						{  							currentChunk = currentChunk << 4 | nibble;  							if (++nibbleCount == 8)  							{  								chunks.Add(currentChunk);  								nibbleCount = 0;  							}  						}  						if (nibbleCount != 0)  							chunks.Add(currentChunk << 32 - nibbleCount * 4);  						parts.Add(new BitString(chunks' nibbleCount * 4));  						break;  					case (int)'\'':  					case (int)'b':  					case (int)'B':  					case (int)'|':  					case (int)' ':  					case (int)'\n':  					case (int)'\r':  					case '\t':  						tr.Read();  						break;  					case -1:  						switch (parts.Count)  						{  							case 0:  								return Empty;  							case 1:  								return parts[0];  							default:  								BitString accum = parts[0];  								for (int i = 1; i != parts.Count; ++i)  									accum = accum.Concat(parts[i]);  								return accum;  						}  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Parse,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case (int)'0':  					case (int)'1':  						parts.Add(new BitString(ReadBinary(tr)));  						break;  					case (int)'x':  					case (int)'X':  						tr.Read();  						if (tr.Read() != (int)'\'')  							throw new FormatException();  						int nibbleCount = 0;  						uint currentChunk = 0;  						List<uint> chunks = new List<uint>();  						foreach (uint nibble in ReadHexNibbles(tr))  						{  							currentChunk = currentChunk << 4 | nibble;  							if (++nibbleCount == 8)  							{  								chunks.Add(currentChunk);  								nibbleCount = 0;  							}  						}  						if (nibbleCount != 0)  							chunks.Add(currentChunk << 32 - nibbleCount * 4);  						parts.Add(new BitString(chunks' nibbleCount * 4));  						break;  					case (int)'\'':  					case (int)'b':  					case (int)'B':  					case (int)'|':  					case (int)' ':  					case (int)'\n':  					case (int)'\r':  					case '\t':  						tr.Read();  						break;  					case -1:  						switch (parts.Count)  						{  							case 0:  								return Empty;  							case 1:  								return parts[0];  							default:  								BitString accum = parts[0];  								for (int i = 1; i != parts.Count; ++i)  									accum = accum.Concat(parts[i]);  								return accum;  						}  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,Parse,The following statement contains a magic number: for (; ; )  				switch (tr.Peek())  				{  					case (int)'0':  					case (int)'1':  						parts.Add(new BitString(ReadBinary(tr)));  						break;  					case (int)'x':  					case (int)'X':  						tr.Read();  						if (tr.Read() != (int)'\'')  							throw new FormatException();  						int nibbleCount = 0;  						uint currentChunk = 0;  						List<uint> chunks = new List<uint>();  						foreach (uint nibble in ReadHexNibbles(tr))  						{  							currentChunk = currentChunk << 4 | nibble;  							if (++nibbleCount == 8)  							{  								chunks.Add(currentChunk);  								nibbleCount = 0;  							}  						}  						if (nibbleCount != 0)  							chunks.Add(currentChunk << 32 - nibbleCount * 4);  						parts.Add(new BitString(chunks' nibbleCount * 4));  						break;  					case (int)'\'':  					case (int)'b':  					case (int)'B':  					case (int)'|':  					case (int)' ':  					case (int)'\n':  					case (int)'\r':  					case '\t':  						tr.Read();  						break;  					case -1:  						switch (parts.Count)  						{  							case 0:  								return Empty;  							case 1:  								return parts[0];  							default:  								BitString accum = parts[0];  								for (int i = 1; i != parts.Count; ++i)  									accum = accum.Concat(parts[i]);  								return accum;  						}  					default:  						throw new FormatException();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByte,The following statement contains a magic number: if (_lastChunkLen > 8)  				throw new InvalidCastException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt16,The following statement contains a magic number: if (_lastChunkLen > 16)  				throw new InvalidCastException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64,The following statement contains a magic number: switch (_chunks.Count)  			{  				case 0:  				case 1:  					return ToUInt32();  				case 2:  					return (((ulong)_chunks[0]) << 32 | (ulong)_chunks[1]) >> 32 - _lastChunkLen;  				default:  					throw new InvalidCastException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64,The following statement contains a magic number: switch (_chunks.Count)  			{  				case 0:  				case 1:  					return ToUInt32();  				case 2:  					return (((ulong)_chunks[0]) << 32 | (ulong)_chunks[1]) >> 32 - _lastChunkLen;  				default:  					throw new InvalidCastException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64,The following statement contains a magic number: switch (_chunks.Count)  			{  				case 0:  				case 1:  					return ToUInt32();  				case 2:  					return (((ulong)_chunks[0]) << 32 | (ulong)_chunks[1]) >> 32 - _lastChunkLen;  				default:  					throw new InvalidCastException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: if (_lastChunkLen % 8 != 0)  				throw new InvalidCastException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  				for (int i = 24; i != -8; i -= 8)  					yield return (byte)(chunk >> i & 0x000000FFu);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  				for (int i = 24; i != -8; i -= 8)  					yield return (byte)(chunk >> i & 0x000000FFu);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  				for (int i = 24; i != -8; i -= 8)  					yield return (byte)(chunk >> i & 0x000000FFu);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: for (int i = 24; i > 24 - _lastChunkLen; i -= 8)  				yield return (byte)(_chunks[_chunks.Count - 1] >> i);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: for (int i = 24; i > 24 - _lastChunkLen; i -= 8)  				yield return (byte)(_chunks[_chunks.Count - 1] >> i);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToByteEnumerable,The following statement contains a magic number: for (int i = 24; i > 24 - _lastChunkLen; i -= 8)  				yield return (byte)(_chunks[_chunks.Count - 1] >> i);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt16Enumerable,The following statement contains a magic number: if (_lastChunkLen % 16 != 0)  				throw new InvalidCastException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt16Enumerable,The following statement contains a magic number: foreach (uint chunk in EnumChunks(_lastChunkLen == 0))  			{  				yield return (ushort)(chunk >> 16);  				yield return (ushort)(chunk & 0xFFFF);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt16Enumerable,The following statement contains a magic number: if (_lastChunkLen == 16)  				yield return (ushort)(_chunks[_chunks.Count] >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt16Enumerable,The following statement contains a magic number: if (_lastChunkLen == 16)  				yield return (ushort)(_chunks[_chunks.Count] >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64Enumerable,The following statement contains a magic number: if (_lastChunkLen != 0 || _chunks.Count % 2 != 0)  				throw new InvalidCastException();
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64Enumerable,The following statement contains a magic number: for (int i = 0; i != _chunks.Count; i += 2)  				yield return (ulong)_chunks[i] << 32 | (ulong)_chunks[i + 1];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BitString,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\BitString.cs,ToUInt64Enumerable,The following statement contains a magic number: for (int i = 0; i != _chunks.Count; i += 2)  				yield return (ulong)_chunks[i] << 32 | (ulong)_chunks[i + 1];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int years = 0;  				int months = 0;  				int days = 0;  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				int idx = str.IndexOf("year");  				if (idx > 0)  				{  					years = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 5);  				}  				idx = str.IndexOf("mon");  				if (idx > 0)  				{  					months = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4);  				}  				idx = str.IndexOf("day");  				if (idx > 0)  				{  					days = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4).Trim();  				}  				if (str.Length > 0)  				{  					bool isNegative = str[0] == '-';  					string[] parts = str.Split(':');  					switch (parts.Length) //One of those times that fall-through would actually be good.  					{  						case 1:  							hours = int.Parse(parts[0]);  							break;  						case 2:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							break;  						default:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  							break;  					}  					if (isNegative)  					{  						minutes *= -1;  						seconds *= -1;  					}  				}  				long ticks = hours * TicksPerHour + minutes * TicksPerMinute + (long)(seconds * TicksPerSecond);  				return new NpgsqlInterval(years * MonthsPerYear + months' days' ticks);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch (Exception)  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int years = 0;  				int months = 0;  				int days = 0;  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				int idx = str.IndexOf("year");  				if (idx > 0)  				{  					years = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 5);  				}  				idx = str.IndexOf("mon");  				if (idx > 0)  				{  					months = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4);  				}  				idx = str.IndexOf("day");  				if (idx > 0)  				{  					days = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4).Trim();  				}  				if (str.Length > 0)  				{  					bool isNegative = str[0] == '-';  					string[] parts = str.Split(':');  					switch (parts.Length) //One of those times that fall-through would actually be good.  					{  						case 1:  							hours = int.Parse(parts[0]);  							break;  						case 2:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							break;  						default:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  							break;  					}  					if (isNegative)  					{  						minutes *= -1;  						seconds *= -1;  					}  				}  				long ticks = hours * TicksPerHour + minutes * TicksPerMinute + (long)(seconds * TicksPerSecond);  				return new NpgsqlInterval(years * MonthsPerYear + months' days' ticks);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch (Exception)  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int years = 0;  				int months = 0;  				int days = 0;  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				int idx = str.IndexOf("year");  				if (idx > 0)  				{  					years = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 5);  				}  				idx = str.IndexOf("mon");  				if (idx > 0)  				{  					months = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4);  				}  				idx = str.IndexOf("day");  				if (idx > 0)  				{  					days = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4).Trim();  				}  				if (str.Length > 0)  				{  					bool isNegative = str[0] == '-';  					string[] parts = str.Split(':');  					switch (parts.Length) //One of those times that fall-through would actually be good.  					{  						case 1:  							hours = int.Parse(parts[0]);  							break;  						case 2:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							break;  						default:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  							break;  					}  					if (isNegative)  					{  						minutes *= -1;  						seconds *= -1;  					}  				}  				long ticks = hours * TicksPerHour + minutes * TicksPerMinute + (long)(seconds * TicksPerSecond);  				return new NpgsqlInterval(years * MonthsPerYear + months' days' ticks);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch (Exception)  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int years = 0;  				int months = 0;  				int days = 0;  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				int idx = str.IndexOf("year");  				if (idx > 0)  				{  					years = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 5);  				}  				idx = str.IndexOf("mon");  				if (idx > 0)  				{  					months = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4);  				}  				idx = str.IndexOf("day");  				if (idx > 0)  				{  					days = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4).Trim();  				}  				if (str.Length > 0)  				{  					bool isNegative = str[0] == '-';  					string[] parts = str.Split(':');  					switch (parts.Length) //One of those times that fall-through would actually be good.  					{  						case 1:  							hours = int.Parse(parts[0]);  							break;  						case 2:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							break;  						default:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  							break;  					}  					if (isNegative)  					{  						minutes *= -1;  						seconds *= -1;  					}  				}  				long ticks = hours * TicksPerHour + minutes * TicksPerMinute + (long)(seconds * TicksPerSecond);  				return new NpgsqlInterval(years * MonthsPerYear + months' days' ticks);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch (Exception)  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int years = 0;  				int months = 0;  				int days = 0;  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				int idx = str.IndexOf("year");  				if (idx > 0)  				{  					years = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 5);  				}  				idx = str.IndexOf("mon");  				if (idx > 0)  				{  					months = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4);  				}  				idx = str.IndexOf("day");  				if (idx > 0)  				{  					days = int.Parse(str.Substring(0' idx));  					str = SafeSubstring(str' idx + 4).Trim();  				}  				if (str.Length > 0)  				{  					bool isNegative = str[0] == '-';  					string[] parts = str.Split(':');  					switch (parts.Length) //One of those times that fall-through would actually be good.  					{  						case 1:  							hours = int.Parse(parts[0]);  							break;  						case 2:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							break;  						default:  							hours = int.Parse(parts[0]);  							minutes = int.Parse(parts[1]);  							seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  							break;  					}  					if (isNegative)  					{  						minutes *= -1;  						seconds *= -1;  					}  				}  				long ticks = hours * TicksPerHour + minutes * TicksPerMinute + (long)(seconds * TicksPerSecond);  				return new NpgsqlInterval(years * MonthsPerYear + months' days' ticks);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch (Exception)  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInterval,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,ToString,The following statement contains a magic number: if (Ticks != 0 || sb.Length == 0)  			{  				if (Ticks < 0)  				{  					sb.Append('-');  				}  				else if (Days < 0 || (Days == 0 && Months < 0))  				{  					sb.Append('+');  				}  				// calculate total seconds and then subtract total whole minutes in seconds to get just the seconds and fractional part  				decimal seconds = _ticks / (decimal)TicksPerSecond - (_ticks / TicksPerMinute) * 60;  				sb.Append(Math.Abs(Hours).ToString("D2")).Append(':').Append(Math.Abs(Minutes).ToString("D2")).Append(':').Append(Math.Abs(seconds).ToString("0#.######"' System.Globalization.CultureInfo.InvariantCulture.NumberFormat));    			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlDate,The following statement contains a magic number: if (year == 0 || year < MinYear || year > MaxYear || month < 1 || month > 12 || day < 1 ||  				(day > (IsLeap(year) ? 366 : 365)))  			{  				throw new ArgumentOutOfRangeException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlDate,The following statement contains a magic number: if (year == 0 || year < MinYear || year > MaxYear || month < 1 || month > 12 || day < 1 ||  				(day > (IsLeap(year) ? 366 : 365)))  			{  				throw new ArgumentOutOfRangeException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlDate,The following statement contains a magic number: if (year == 0 || year < MinYear || year > MaxYear || month < 1 || month > 12 || day < 1 ||  				(day > (IsLeap(year) ? 366 : 365)))  			{  				throw new ArgumentOutOfRangeException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,DaysForYears,The following statement contains a magic number: return calcYear / 400 * DaysIn4Centuries //Blocks of 400 years with their leap and common years  				   + calcYear % 400 / 100 * DaysInCentury //Remaining blocks of 100 years with their leap and common years  				   + calcYear % 100 / 4 * DaysIn4Years //Remaining blocks of 4 years with their leap and common years  				   + calcYear % 4 * DaysInYear //Remaining years' all common  				   + (calcYear < 0 ? -1 : 0);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,IsLeap,The following statement contains a magic number: return (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,IsLeap,The following statement contains a magic number: return (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,IsLeap,The following statement contains a magic number: return (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,AddMonths,The following statement contains a magic number: while (newMonth > 12)  			{  				newMonth -= 12;  				newYear += 1;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,AddMonths,The following statement contains a magic number: while (newMonth > 12)  			{  				newMonth -= 12;  				newYear += 1;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlDate,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,AddMonths,The following statement contains a magic number: while (newMonth < 1)  			{  				newMonth += 12;  				newYear -= 1;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeZone,The following statement contains a magic number: _totalSeconds = hours * 60 * 60 + minutes * 60 + seconds;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeZone,The following statement contains a magic number: _totalSeconds = hours * 60 * 60 + minutes * 60 + seconds;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,NpgsqlTimeZone,The following statement contains a magic number: _totalSeconds = hours * 60 * 60 + minutes * 60 + seconds;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,LocalTimeZone,The following statement contains a magic number: if (date.Year >= 1902 && date.Year <= 2038)  			{  				dt = (DateTime)date;  			}  			else  			{  				dt = new DateTime(2000' date.Month' date.Day);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,LocalTimeZone,The following statement contains a magic number: if (date.Year >= 1902 && date.Year <= 2038)  			{  				dt = (DateTime)date;  			}  			else  			{  				dt = new DateTime(2000' date.Month' date.Day);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,LocalTimeZone,The following statement contains a magic number: if (date.Year >= 1902 && date.Year <= 2038)  			{  				dt = (DateTime)date;  			}  			else  			{  				dt = new DateTime(2000' date.Month' date.Day);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				str = str.Trim();  				bool neg;  				switch (str[0])  				{  					case '+':  						neg = false;  						break;  					case '-':  						neg = true;  						break;  					default:  						throw new FormatException();  				}  				int hours;  				int minutes;  				int seconds;  				string[] parts = str.Substring(1).Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						minutes = seconds = 0;  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = 0;  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = int.Parse(parts[2]);  						break;  				}  				int totalSeconds = (hours * 60 * 60 + minutes * 60 + seconds) * (neg ? -1 : 1);  				return new NpgsqlTimeZone(totalSeconds * NpgsqlInterval.TicksPerSecond);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				str = str.Trim();  				bool neg;  				switch (str[0])  				{  					case '+':  						neg = false;  						break;  					case '-':  						neg = true;  						break;  					default:  						throw new FormatException();  				}  				int hours;  				int minutes;  				int seconds;  				string[] parts = str.Substring(1).Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						minutes = seconds = 0;  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = 0;  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = int.Parse(parts[2]);  						break;  				}  				int totalSeconds = (hours * 60 * 60 + minutes * 60 + seconds) * (neg ? -1 : 1);  				return new NpgsqlTimeZone(totalSeconds * NpgsqlInterval.TicksPerSecond);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				str = str.Trim();  				bool neg;  				switch (str[0])  				{  					case '+':  						neg = false;  						break;  					case '-':  						neg = true;  						break;  					default:  						throw new FormatException();  				}  				int hours;  				int minutes;  				int seconds;  				string[] parts = str.Substring(1).Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						minutes = seconds = 0;  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = 0;  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = int.Parse(parts[2]);  						break;  				}  				int totalSeconds = (hours * 60 * 60 + minutes * 60 + seconds) * (neg ? -1 : 1);  				return new NpgsqlTimeZone(totalSeconds * NpgsqlInterval.TicksPerSecond);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				str = str.Trim();  				bool neg;  				switch (str[0])  				{  					case '+':  						neg = false;  						break;  					case '-':  						neg = true;  						break;  					default:  						throw new FormatException();  				}  				int hours;  				int minutes;  				int seconds;  				string[] parts = str.Substring(1).Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						minutes = seconds = 0;  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = 0;  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = int.Parse(parts[2]);  						break;  				}  				int totalSeconds = (hours * 60 * 60 + minutes * 60 + seconds) * (neg ? -1 : 1);  				return new NpgsqlTimeZone(totalSeconds * NpgsqlInterval.TicksPerSecond);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeZone,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				str = str.Trim();  				bool neg;  				switch (str[0])  				{  					case '+':  						neg = false;  						break;  					case '-':  						neg = true;  						break;  					default:  						throw new FormatException();  				}  				int hours;  				int minutes;  				int seconds;  				string[] parts = str.Substring(1).Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						minutes = seconds = 0;  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = 0;  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = int.Parse(parts[2]);  						break;  				}  				int totalSeconds = (hours * 60 * 60 + minutes * 60 + seconds) * (neg ? -1 : 1);  				return new NpgsqlTimeZone(totalSeconds * NpgsqlInterval.TicksPerSecond);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,ToString,The following statement contains a magic number: decimal seconds = _ticks / (decimal)NpgsqlInterval.TicksPerSecond - (_ticks / NpgsqlInterval.TicksPerMinute) * 60;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTime,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Parse,The following statement contains a magic number: try  			{  				int hours = 0;  				int minutes = 0;  				decimal seconds = 0m;  				string[] parts = str.Split(':');  				switch (parts.Length) //One of those times that fall-through would actually be good.  				{  					case 1:  						hours = int.Parse(parts[0]);  						break;  					case 2:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						break;  					default:  						hours = int.Parse(parts[0]);  						minutes = int.Parse(parts[1]);  						seconds = decimal.Parse(parts[2]' System.Globalization.CultureInfo.InvariantCulture.NumberFormat);  						break;  				}  				if (hours < 0 || hours > 24 || minutes < 0 || minutes > 59 || seconds < 0m || seconds >= 60 ||  					(hours == 24 && (minutes != 0 || seconds != 0m)))  				{  					throw new OverflowException();  				}  				return new NpgsqlTime(hours' minutes' seconds);  			}  			catch (OverflowException)  			{  				throw;  			}  			catch  			{  				throw new FormatException();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,GetHashCode,The following statement contains a magic number: return _localTime.GetHashCode() ^ PGUtil.RotateShift(_timeZone.GetHashCode()' 24);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStamp,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,GetHashCode,The following statement contains a magic number: switch (_type)  			{  				case TimeType.Infinity:  					return int.MaxValue;  				case TimeType.MinusInfinity:  					return int.MinValue;  				default:  					return _date.GetHashCode() ^ PGUtil.RotateShift(_time.GetHashCode()' 16);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStampTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,GetHashCode,The following statement contains a magic number: switch (_type)  			{  				case TimeType.Infinity:  					return int.MaxValue;  				case TimeType.MinusInfinity:  					return int.MinValue;  				default:  					return _date.GetHashCode() ^ PGUtil.RotateShift(_time.GetHashCode()' 16);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,Fastpath,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPath.cs,FastpathV3,The following statement contains a magic number: lock (stream)  			{  				// send the function call    				{  					Int32 l_msgLen = 0;  					l_msgLen += 16;  					for (Int32 i = 0; i < args.Length; i++)  					{  						l_msgLen += args[i].SendSize();  					}    					stream.WriteByte((Byte)'F');  					PGUtil.WriteInt32(stream' l_msgLen);  					PGUtil.WriteInt32(stream' fnid);  					PGUtil.WriteInt16(stream' 1);  					PGUtil.WriteInt16(stream' 1);  					PGUtil.WriteInt16(stream' (short)args.Length);    					for (Int32 i = 0; i < args.Length; i++)  					{  						args[i].Send(stream);  					}    					PGUtil.WriteInt16(stream' 1);    					// This is needed' otherwise data can be lost  					stream.Flush();  				}      				// Now handle the result    				// Now loop' reading the results  				Object result = null; // our result  				Exception error = null;  				Int32 c;  				Boolean l_endQuery = false;    				while (!l_endQuery)  				{  					c = (Char)stream.ReadByte();    					switch (c)  					{  						case 'A': // Asynchronous Notify  							Int32 msglen = PGUtil.ReadInt32(stream' buffer);  							Int32 pid = PGUtil.ReadInt32(stream' buffer);  							String msg = PGUtil.ReadString(stream' queue);  							PGUtil.ReadString(stream' queue);  							String param = PGUtil.ReadString(stream' queue);    							break;  						//------------------------------  						// Error message returned  						case 'E':  							NpgsqlError e = new NpgsqlError(stream' buffer' queue);  							throw new NpgsqlException(e.ToString());    						//------------------------------  						// Notice from backend  						case 'N':  							Int32 l_nlen = PGUtil.ReadInt32(stream' buffer);    							conn.Connector.FireNotice(new NpgsqlError(stream' buffer' queue));    							break;    						case 'V':  							Int32 l_msgLen = PGUtil.ReadInt32(stream' buffer);  							Int32 l_valueLen = PGUtil.ReadInt32(stream' buffer);    							if (l_valueLen == -1)  							{  								//null value  							}  							else if (l_valueLen == 0)  							{  								result = new Byte[0];  							}  							else  							{  								// Return an Integer if  								if (resulttype)  								{  									result = PGUtil.ReadInt32(stream' buffer);  								}  								else  								{  									Byte[] buf = new Byte[l_valueLen];    									Int32 bytes_from_stream = 0;  									Int32 total_bytes_read = 0;  									Int32 size = l_valueLen;  									do  									{  										bytes_from_stream = stream.Read(buf' total_bytes_read' size);  										total_bytes_read += bytes_from_stream;  										size -= bytes_from_stream;  									}  									while (size > 0);    									result = buf;  								}  							}  							break;    						case 'Z':  							//TODO: use size better  							if (PGUtil.ReadInt32(stream' buffer) != 5)  							{  								throw new NpgsqlException("Received Z");  							}  							//TODO: handle transaction status  							Char l_tStatus = (Char)stream.ReadByte();  							l_endQuery = true;  							break;    						default:  							throw new NpgsqlException(string.Format("postgresql.fp.protocol received {0}"' c));  					}  				}    				if (error != null)  				{  					throw error;  				}    				return result;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,Fastpath,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPath.cs,FastpathV3,The following statement contains a magic number: lock (stream)  			{  				// send the function call    				{  					Int32 l_msgLen = 0;  					l_msgLen += 16;  					for (Int32 i = 0; i < args.Length; i++)  					{  						l_msgLen += args[i].SendSize();  					}    					stream.WriteByte((Byte)'F');  					PGUtil.WriteInt32(stream' l_msgLen);  					PGUtil.WriteInt32(stream' fnid);  					PGUtil.WriteInt16(stream' 1);  					PGUtil.WriteInt16(stream' 1);  					PGUtil.WriteInt16(stream' (short)args.Length);    					for (Int32 i = 0; i < args.Length; i++)  					{  						args[i].Send(stream);  					}    					PGUtil.WriteInt16(stream' 1);    					// This is needed' otherwise data can be lost  					stream.Flush();  				}      				// Now handle the result    				// Now loop' reading the results  				Object result = null; // our result  				Exception error = null;  				Int32 c;  				Boolean l_endQuery = false;    				while (!l_endQuery)  				{  					c = (Char)stream.ReadByte();    					switch (c)  					{  						case 'A': // Asynchronous Notify  							Int32 msglen = PGUtil.ReadInt32(stream' buffer);  							Int32 pid = PGUtil.ReadInt32(stream' buffer);  							String msg = PGUtil.ReadString(stream' queue);  							PGUtil.ReadString(stream' queue);  							String param = PGUtil.ReadString(stream' queue);    							break;  						//------------------------------  						// Error message returned  						case 'E':  							NpgsqlError e = new NpgsqlError(stream' buffer' queue);  							throw new NpgsqlException(e.ToString());    						//------------------------------  						// Notice from backend  						case 'N':  							Int32 l_nlen = PGUtil.ReadInt32(stream' buffer);    							conn.Connector.FireNotice(new NpgsqlError(stream' buffer' queue));    							break;    						case 'V':  							Int32 l_msgLen = PGUtil.ReadInt32(stream' buffer);  							Int32 l_valueLen = PGUtil.ReadInt32(stream' buffer);    							if (l_valueLen == -1)  							{  								//null value  							}  							else if (l_valueLen == 0)  							{  								result = new Byte[0];  							}  							else  							{  								// Return an Integer if  								if (resulttype)  								{  									result = PGUtil.ReadInt32(stream' buffer);  								}  								else  								{  									Byte[] buf = new Byte[l_valueLen];    									Int32 bytes_from_stream = 0;  									Int32 total_bytes_read = 0;  									Int32 size = l_valueLen;  									do  									{  										bytes_from_stream = stream.Read(buf' total_bytes_read' size);  										total_bytes_read += bytes_from_stream;  										size -= bytes_from_stream;  									}  									while (size > 0);    									result = buf;  								}  							}  							break;    						case 'Z':  							//TODO: use size better  							if (PGUtil.ReadInt32(stream' buffer) != 5)  							{  								throw new NpgsqlException("Received Z");  							}  							//TODO: handle transaction status  							Char l_tStatus = (Char)stream.ReadByte();  							l_endQuery = true;  							break;    						default:  							throw new NpgsqlException(string.Format("postgresql.fp.protocol received {0}"' c));  					}  				}    				if (error != null)  				{  					throw error;  				}    				return result;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,FastpathArg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPathArg.cs,Send,The following statement contains a magic number: if (type)  			{  				// argument is an integer  				PGUtil.WriteInt32(s' 4);  				PGUtil.WriteInt32(s' value); // integer value of argument  			}  			else  			{  				// argument is a byte array  				PGUtil.WriteInt32(s' bytes.Length);  				s.Write(bytes' 0' bytes.Length);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,FastpathArg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPathArg.cs,SendSize,The following statement contains a magic number: if (type)  			{  				return 8;  			}  			else  			{  				return 4 + bytes.Length;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,FastpathArg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\FastPathArg.cs,SendSize,The following statement contains a magic number: if (type)  			{  				return 8;  			}  			else  			{  				return 4 + bytes.Length;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObject,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObject.cs,LargeObject,The following statement contains a magic number: FastpathArg[] args = new FastpathArg[2];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObject,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObject.cs,Read,The following statement contains a magic number: FastpathArg[] args = new FastpathArg[2];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObject,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObject.cs,Write,The following statement contains a magic number: FastpathArg[] args = new FastpathArg[2];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObject,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObject.cs,Seek,The following statement contains a magic number: FastpathArg[] args = new FastpathArg[3];
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObject,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObject.cs,Seek,The following statement contains a magic number: args[2] = new FastpathArg(refi);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObjectManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObjectManager.cs,LargeObjectManager,The following statement contains a magic number: try  			{  				sql = new StringBuilder();  				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append("SELECT p.proname'p.oid ");  					sql.Append(" FROM pg_catalog.pg_proc p' pg_catalog.pg_namespace n ");  					sql.Append(" WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (");  				}  				else  				{  					sql.Append("SELECT proname'oid FROM pg_proc WHERE ");  				}  				sql.Append(" proname = 'lo_open'");  				sql.Append(" or proname = 'lo_close'");  				sql.Append(" or proname = 'lo_creat'");  				sql.Append(" or proname = 'lo_unlink'");  				sql.Append(" or proname = 'lo_lseek'");  				sql.Append(" or proname = 'lo_tell'");  				sql.Append(" or proname = 'loread'");  				sql.Append(" or proname = 'lowrite'");    				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append(")");  				}    				using (IDbCommand cmd = new NpgsqlCommand(sql.ToString()))  				{  					cmd.Connection = conn;    					this.fp = new Fastpath(conn' conn.Connector.Stream);    					using (IDataReader res = cmd.ExecuteReader())  					{  						if (res == null)  						{  							throw new NpgsqlException("postgresql.lo.init");  						}      						fp.AddFunctions(res);  					}  				}  			}  			finally  			{  				sql = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObjectManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObjectManager.cs,LargeObjectManager,The following statement contains a magic number: try  			{  				sql = new StringBuilder();  				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append("SELECT p.proname'p.oid ");  					sql.Append(" FROM pg_catalog.pg_proc p' pg_catalog.pg_namespace n ");  					sql.Append(" WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (");  				}  				else  				{  					sql.Append("SELECT proname'oid FROM pg_proc WHERE ");  				}  				sql.Append(" proname = 'lo_open'");  				sql.Append(" or proname = 'lo_close'");  				sql.Append(" or proname = 'lo_creat'");  				sql.Append(" or proname = 'lo_unlink'");  				sql.Append(" or proname = 'lo_lseek'");  				sql.Append(" or proname = 'lo_tell'");  				sql.Append(" or proname = 'loread'");  				sql.Append(" or proname = 'lowrite'");    				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append(")");  				}    				using (IDbCommand cmd = new NpgsqlCommand(sql.ToString()))  				{  					cmd.Connection = conn;    					this.fp = new Fastpath(conn' conn.Connector.Stream);    					using (IDataReader res = cmd.ExecuteReader())  					{  						if (res == null)  						{  							throw new NpgsqlException("postgresql.lo.init");  						}      						fp.AddFunctions(res);  					}  				}  			}  			finally  			{  				sql = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObjectManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObjectManager.cs,LargeObjectManager,The following statement contains a magic number: try  			{  				sql = new StringBuilder();  				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append("SELECT p.proname'p.oid ");  					sql.Append(" FROM pg_catalog.pg_proc p' pg_catalog.pg_namespace n ");  					sql.Append(" WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (");  				}  				else  				{  					sql.Append("SELECT proname'oid FROM pg_proc WHERE ");  				}  				sql.Append(" proname = 'lo_open'");  				sql.Append(" or proname = 'lo_close'");  				sql.Append(" or proname = 'lo_creat'");  				sql.Append(" or proname = 'lo_unlink'");  				sql.Append(" or proname = 'lo_lseek'");  				sql.Append(" or proname = 'lo_tell'");  				sql.Append(" or proname = 'loread'");  				sql.Append(" or proname = 'lowrite'");    				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append(")");  				}    				using (IDbCommand cmd = new NpgsqlCommand(sql.ToString()))  				{  					cmd.Connection = conn;    					this.fp = new Fastpath(conn' conn.Connector.Stream);    					using (IDataReader res = cmd.ExecuteReader())  					{  						if (res == null)  						{  							throw new NpgsqlException("postgresql.lo.init");  						}      						fp.AddFunctions(res);  					}  				}  			}  			finally  			{  				sql = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,LargeObjectManager,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\LargeObjectManager.cs,LargeObjectManager,The following statement contains a magic number: try  			{  				sql = new StringBuilder();  				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append("SELECT p.proname'p.oid ");  					sql.Append(" FROM pg_catalog.pg_proc p' pg_catalog.pg_namespace n ");  					sql.Append(" WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (");  				}  				else  				{  					sql.Append("SELECT proname'oid FROM pg_proc WHERE ");  				}  				sql.Append(" proname = 'lo_open'");  				sql.Append(" or proname = 'lo_close'");  				sql.Append(" or proname = 'lo_creat'");  				sql.Append(" or proname = 'lo_unlink'");  				sql.Append(" or proname = 'lo_lseek'");  				sql.Append(" or proname = 'lo_tell'");  				sql.Append(" or proname = 'loread'");  				sql.Append(" or proname = 'lowrite'");    				if (conn.PostgreSqlVersion > new Version(7' 3' 0))  				{  					sql.Append(")");  				}    				using (IDbCommand cmd = new NpgsqlCommand(sql.ToString()))  				{  					cmd.Connection = conn;    					this.fp = new Fastpath(conn' conn.Connector.Stream);    					using (IDataReader res = cmd.ExecuteReader())  					{  						if (res == null)  						{  							throw new NpgsqlException("postgresql.lo.init");  						}      						fp.AddFunctions(res);  					}  				}  			}  			finally  			{  				sql = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: if (BackendData.StartsWith("\\x"))  			{  				// PostgreSQL 8.5+'s bytea_output=hex format  				byte[] data = new byte[byteAStringLength / 2 - 1];  				Int32 len = data.Length;  				for (Int32 i = 0; i < len; i++)  					data[i] = (byte)((CharLookup[BackendData[i * 2 + 2]] << 4) + CharLookup[BackendData[i * 2 + 3]]);  				return data;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: while (byteAPosition < byteAStringLength)  			{  				// The IsDigit is necessary in case we receive a \ as the octal value and not  				// as the indicator of a following octal value in decimal format.  				// i.e.: \201\301P\A  				if (BackendData[byteAPosition] == '\\')  				{  					if (byteAPosition + 1 == byteAStringLength)  					{  						octalValue = '\\';  						byteAPosition++;  					}  					else if (Char.IsDigit(BackendData[byteAPosition + 1]))  					{  						octalValue = Convert.ToByte(BackendData.Substring(byteAPosition + 1' 3)' 8);  						byteAPosition += 4;  					}  					else  					{  						octalValue = '\\';  						byteAPosition += 2;  					}  				}  				else  				{  					octalValue = (Byte)BackendData[byteAPosition];  					byteAPosition++;  				}    				ms.Add((Byte)octalValue);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: while (byteAPosition < byteAStringLength)  			{  				// The IsDigit is necessary in case we receive a \ as the octal value and not  				// as the indicator of a following octal value in decimal format.  				// i.e.: \201\301P\A  				if (BackendData[byteAPosition] == '\\')  				{  					if (byteAPosition + 1 == byteAStringLength)  					{  						octalValue = '\\';  						byteAPosition++;  					}  					else if (Char.IsDigit(BackendData[byteAPosition + 1]))  					{  						octalValue = Convert.ToByte(BackendData.Substring(byteAPosition + 1' 3)' 8);  						byteAPosition += 4;  					}  					else  					{  						octalValue = '\\';  						byteAPosition += 2;  					}  				}  				else  				{  					octalValue = (Byte)BackendData[byteAPosition];  					byteAPosition++;  				}    				ms.Add((Byte)octalValue);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: while (byteAPosition < byteAStringLength)  			{  				// The IsDigit is necessary in case we receive a \ as the octal value and not  				// as the indicator of a following octal value in decimal format.  				// i.e.: \201\301P\A  				if (BackendData[byteAPosition] == '\\')  				{  					if (byteAPosition + 1 == byteAStringLength)  					{  						octalValue = '\\';  						byteAPosition++;  					}  					else if (Char.IsDigit(BackendData[byteAPosition + 1]))  					{  						octalValue = Convert.ToByte(BackendData.Substring(byteAPosition + 1' 3)' 8);  						byteAPosition += 4;  					}  					else  					{  						octalValue = '\\';  						byteAPosition += 2;  					}  				}  				else  				{  					octalValue = (Byte)BackendData[byteAPosition];  					byteAPosition++;  				}    				ms.Add((Byte)octalValue);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: while (byteAPosition < byteAStringLength)  			{  				// The IsDigit is necessary in case we receive a \ as the octal value and not  				// as the indicator of a following octal value in decimal format.  				// i.e.: \201\301P\A  				if (BackendData[byteAPosition] == '\\')  				{  					if (byteAPosition + 1 == byteAStringLength)  					{  						octalValue = '\\';  						byteAPosition++;  					}  					else if (Char.IsDigit(BackendData[byteAPosition + 1]))  					{  						octalValue = Convert.ToByte(BackendData.Substring(byteAPosition + 1' 3)' 8);  						byteAPosition += 4;  					}  					else  					{  						octalValue = '\\';  						byteAPosition += 2;  					}  				}  				else  				{  					octalValue = (Byte)BackendData[byteAPosition];  					byteAPosition++;  				}    				ms.Add((Byte)octalValue);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: StringBuilder res = new StringBuilder(byteArray.Length * 5);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: foreach (byte b in byteArray)  				if (b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C)  					res.Append((char)b);  				else  					res.Append("\\\\")  						.Append((char)('0' + (7 & (b >> 6))))  						.Append((char)('0' + (7 & (b >> 3))))  						.Append((char)('0' + (7 & b)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: foreach (byte b in byteArray)  				if (b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C)  					res.Append((char)b);  				else  					res.Append("\\\\")  						.Append((char)('0' + (7 & (b >> 6))))  						.Append((char)('0' + (7 & (b >> 3))))  						.Append((char)('0' + (7 & b)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: foreach (byte b in byteArray)  				if (b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C)  					res.Append((char)b);  				else  					res.Append("\\\\")  						.Append((char)('0' + (7 & (b >> 6))))  						.Append((char)('0' + (7 & (b >> 3))))  						.Append((char)('0' + (7 & b)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: foreach (byte b in byteArray)  				if (b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C)  					res.Append((char)b);  				else  					res.Append("\\\\")  						.Append((char)('0' + (7 & (b >> 6))))  						.Append((char)('0' + (7 & (b >> 3))))  						.Append((char)('0' + (7 & b)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,BasicNativeToBackendTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBinary,The following statement contains a magic number: foreach (byte b in byteArray)  				if (b >= 0x20 && b < 0x7F && b != 0x27 && b != 0x5C)  					res.Append((char)b);  				else  					res.Append("\\\\")  						.Append((char)('0' + (7 & (b >> 6))))  						.Append((char)('0' + (7 & (b >> 3))))  						.Append((char)('0' + (7 & b)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToPoint,The following statement contains a magic number: return  				new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  								Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBox,The following statement contains a magic number: return  				new NpgsqlBox(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBox,The following statement contains a magic number: return  				new NpgsqlBox(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToBox,The following statement contains a magic number: return  				new NpgsqlBox(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToLSeg,The following statement contains a magic number: return  				new NpgsqlLSeg(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToLSeg,The following statement contains a magic number: return  				new NpgsqlLSeg(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToLSeg,The following statement contains a magic number: return  				new NpgsqlLSeg(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					new NpgsqlPoint(Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[4].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToPath,The following statement contains a magic number: while (m.Success)  			{  				if (open)  				{  					points.Add(  						new NpgsqlPoint(  							Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  							Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));  				}  				else  				{  					// Here we have to do a little hack' because as of 2004-08-11 mono cvs version' the last group is returned with  					// a trailling ')' only when the last character of the string is a ')' which is the case for closed paths  					// returned by backend. This gives parsing exception when converting to single.   					// I still don't know if this is a bug in mono or in my regular expression.  					// Check if there is this character and remove it.    					String group2 = m.Groups[2].ToString();  					if (group2.EndsWith(")"))  					{  						group2 = group2.Remove(group2.Length - 1' 1);  					}    					points.Add(  						new NpgsqlPoint(  							Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  							Single.Parse(group2' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));  				}    				m = m.NextMatch();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToPath,The following statement contains a magic number: while (m.Success)  			{  				if (open)  				{  					points.Add(  						new NpgsqlPoint(  							Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  							Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));  				}  				else  				{  					// Here we have to do a little hack' because as of 2004-08-11 mono cvs version' the last group is returned with  					// a trailling ')' only when the last character of the string is a ')' which is the case for closed paths  					// returned by backend. This gives parsing exception when converting to single.   					// I still don't know if this is a bug in mono or in my regular expression.  					// Check if there is this character and remove it.    					String group2 = m.Groups[2].ToString();  					if (group2.EndsWith(")"))  					{  						group2 = group2.Remove(group2.Length - 1' 1);  					}    					points.Add(  						new NpgsqlPoint(  							Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  							Single.Parse(group2' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));  				}    				m = m.NextMatch();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToPolygon,The following statement contains a magic number: while (m.Success)  			{  				// Here we have to do a little hack' because as of 2004-08-11 mono cvs version' the last group is returned with  				// a trailling ')' only when the last character of the string is a ')' which is the case for closed paths  				// returned by backend. This gives parsing exception when converting to single.   				// I still don't know if this is a bug in mono or in my regular expression.  				// Check if there is this character and remove it.    				String group2 = m.Groups[2].ToString();  				if (group2.EndsWith(")"))  				{  					group2 = group2.Remove(group2.Length - 1' 1);  				}    				points.Add(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(group2' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)));      				m = m.NextMatch();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToCircle,The following statement contains a magic number: return  				new NpgsqlCircle(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ExtendedBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypeConverters.cs,ToCircle,The following statement contains a magic number: return  				new NpgsqlCircle(  					new NpgsqlPoint(Single.Parse(m.Groups[1].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat)'  									Single.Parse(m.Groups[2].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat))'  					Single.Parse(m.Groups[3].ToString()' NumberStyles.Any' CultureInfo.InvariantCulture.NumberFormat));
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlPoint,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return X.GetHashCode() ^ PGUtil.RotateShift(Y.GetHashCode()' sizeof (int)/2);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBox,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Top.GetHashCode() ^ PGUtil.RotateShift(Right.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Bottom.GetHashCode()' sizeof (int)/2) ^                  PGUtil.RotateShift(LowerLeft.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBox,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Top.GetHashCode() ^ PGUtil.RotateShift(Right.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Bottom.GetHashCode()' sizeof (int)/2) ^                  PGUtil.RotateShift(LowerLeft.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBox,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Top.GetHashCode() ^ PGUtil.RotateShift(Right.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Bottom.GetHashCode()' sizeof (int)/2) ^                  PGUtil.RotateShift(LowerLeft.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlBox,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Top.GetHashCode() ^ PGUtil.RotateShift(Right.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Bottom.GetHashCode()' sizeof (int)/2) ^                  PGUtil.RotateShift(LowerLeft.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlLSeg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Start.X.GetHashCode() ^ PGUtil.RotateShift(Start.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(End.X.GetHashCode()' sizeof (int)/2) ^ PGUtil.RotateShift(End.Y.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlLSeg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Start.X.GetHashCode() ^ PGUtil.RotateShift(Start.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(End.X.GetHashCode()' sizeof (int)/2) ^ PGUtil.RotateShift(End.Y.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlLSeg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Start.X.GetHashCode() ^ PGUtil.RotateShift(Start.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(End.X.GetHashCode()' sizeof (int)/2) ^ PGUtil.RotateShift(End.Y.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlLSeg,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Start.X.GetHashCode() ^ PGUtil.RotateShift(Start.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(End.X.GetHashCode()' sizeof (int)/2) ^ PGUtil.RotateShift(End.Y.GetHashCode()' sizeof (int)*3/4);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlPath,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: int ret = 266370105;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlPolygon,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: int ret = 266370105;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlCircle,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Center.X.GetHashCode() ^ PGUtil.RotateShift(Center.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Radius.GetHashCode()' sizeof (int)/2);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlCircle,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return                  Center.X.GetHashCode() ^ PGUtil.RotateShift(Center.Y.GetHashCode()' sizeof (int)/4) ^                  PGUtil.RotateShift(Radius.GetHashCode()' sizeof (int)/2);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInet,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,NpgsqlInet,The following statement contains a magic number: this.mask = 32;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInet,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,NpgsqlInet,The following statement contains a magic number: if (addr.IndexOf('/') > 0)              {                  string[] addrbits = addr.Split('/');                  if (addrbits.GetUpperBound(0) != 1)                  {                      throw new FormatException("Invalid number of parts in CIDR specification");                  }                  this.addr = IPAddress.Parse(addrbits[0]);                  this.mask = int.Parse(addrbits[1]);              }              else              {                  this.addr = IPAddress.Parse(addr);                  this.mask = 32;              }
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInet,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,ToString,The following statement contains a magic number: if (mask != 32)              {                  return string.Format("{0}/{1}"' addr' mask);              }
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlInet,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: return PGUtil.RotateShift(addr.GetHashCode()' mask%32);
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlMacAddress,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypes.cs,GetHashCode,The following statement contains a magic number: int ret = 266370105;
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,LoadTypesMappings,The following statement contains a magic number: using (  				NpgsqlCommand command =  					new NpgsqlCommand(string.Format("SELECT typname' oid FROM pg_type WHERE typname IN ({0})"' InList)' conn))  			{  				using (NpgsqlDataReader dr = command.GetReader(CommandBehavior.SequentialAccess | CommandBehavior.SingleResult))  				{  					while (dr.Read())  					{  						var ni = dr[0] as string;  						var oid = dr[1] as string;  						NpgsqlBackendTypeInfo TypeInfo = NameIndex[ni];  						var id = 0;  						for (int i = 0; i < oid.Length; i++)  							id = id * 10 + oid[i] - 48;  						TypeInfo._OID = id;    						TypeMappings.AddType(TypeInfo);  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTypesHelper,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,LoadTypesMappings,The following statement contains a magic number: using (  				NpgsqlCommand command =  					new NpgsqlCommand(string.Format("SELECT typname' oid FROM pg_type WHERE typname IN ({0})"' InList)' conn))  			{  				using (NpgsqlDataReader dr = command.GetReader(CommandBehavior.SequentialAccess | CommandBehavior.SingleResult))  				{  					while (dr.Read())  					{  						var ni = dr[0] as string;  						var oid = dr[1] as string;  						NpgsqlBackendTypeInfo TypeInfo = NameIndex[ni];  						var id = 0;  						for (int i = 0; i < oid.Length; i++)  							id = id * 10 + oid[i] - 48;  						TypeInfo._OID = id;    						TypeMappings.AddType(TypeInfo);  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlNativeTypeInfo,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\NpgsqlTypesHelper.cs,NpgsqlNativeTypeInfo,The following statement contains a magic number: ni.NumberDecimalDigits = 15;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,ByteBuffer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\ByteBuffer.cs,Add,The following statement contains a magic number: if (Position == Buffer.Length)  			{  				var newBuffer = new byte[Buffer.Length * 2];  				Array.Copy(Buffer' newBuffer' Position);  				Buffer = newBuffer;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,ByteBuffer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\ByteBuffer.cs,GetUtf8String,The following statement contains a magic number: if (Position == 0) return string.Empty;  			else if (Position < 256)  			{  				for (var i = 0; i < Position; i++)  				{  					var ch = Buffer[i];  					if (ch > 126) return UTF8.GetString(Buffer' 0' Position);  					Chars[i] = (char)ch;  				}  				return new string(Chars' 0' Position);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,ByteBuffer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\ByteBuffer.cs,GetUtf8String,The following statement contains a magic number: if (Position == 0) return string.Empty;  			else if (Position < 256)  			{  				for (var i = 0; i < Position; i++)  				{  					var ch = Buffer[i];  					if (ch > 126) return UTF8.GetString(Buffer' 0' Position);  					Chars[i] = (char)ch;  				}  				return new string(Chars' 0' Position);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,ByteBuffer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\ByteBuffer.cs,TryGetInt,The following statement contains a magic number: for (int i = 0; i < Buffer.Length; i++)  			{  				if (i == Position) return value;  				value = (value << 3) + (value << 1) + Buffer[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,ByteBuffer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\ByteBuffer.cs,GetLong,The following statement contains a magic number: for (int i = 0; i < Buffer.Length; i++)  			{  				if (i == Position) return value;  				value = (value << 3) + (value << 1) + Buffer[i] - '0';  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopySerializer,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Copy\NpgsqlCopySerializer.cs,EscapeSequenceFor,The following statement contains a magic number: return  				c == '\t'  					? esc_t  					: c == '\n'  						? esc_n  						: c == '\r'  							? esc_r  							: c == '\b'  								? esc_b  								: c == '\f'  									? esc_f  									: c == '\v'  										? esc_v  										: (c < 32 || c > 127)  											? new byte[] { (byte)('0' + ((c / 64) & 7))' (byte)('0' + ((c / 8) & 7))' (byte)('0' + (c & 7)) }  											: new byte[] { (byte)c };
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_portalName) + 1 +  								  UTF8Encoding.GetByteCount(_preparedStatementName) + 1 + 2 + (_parameterFormatCodes.Length * 2) +  								  2;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_portalName) + 1 +  								  UTF8Encoding.GetByteCount(_preparedStatementName) + 1 + 2 + (_parameterFormatCodes.Length * 2) +  								  2;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_portalName) + 1 +  								  UTF8Encoding.GetByteCount(_preparedStatementName) + 1 + 2 + (_parameterFormatCodes.Length * 2) +  								  2;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_portalName) + 1 +  								  UTF8Encoding.GetByteCount(_preparedStatementName) + 1 + 2 + (_parameterFormatCodes.Length * 2) +  								  2;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: if (_parameterValues != null)  			{  				for (i = 0; i < _parameterValues.Length; i++)  				{  					messageLength += 4;  					if (_parameterValues[i] != null)  					{  						if (((_parameterFormatCodes.Length == 1) && (_parameterFormatCodes[0] == (Int16)FormatCode.Binary)) ||  							((_parameterFormatCodes.Length != 1) && (_parameterFormatCodes[i] == (Int16)FormatCode.Binary)))  						{  							messageLength += ((Byte[])_parameterValues[i]).Length;  						}  						else  						{  							messageLength += UTF8Encoding.GetByteCount((String)_parameterValues[i]);  						}  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: messageLength += 2 + (_resultFormatCodes.Length * 2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBind,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlBind.cs,WriteToStream,The following statement contains a magic number: messageLength += 2 + (_resultFormatCodes.Length * 2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDescribe,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlDescribe.cs,Send,The following statement contains a magic number: PGUtil.WriteInt32(outputStream' 4 + 1 + UTF8Encoding.GetByteCount(portal) + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlExecute,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlExecute.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(outputStream' 4 + UTF8Encoding.GetByteCount(_portalName) + 1 + 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlExecute,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlExecute.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(outputStream' 4 + UTF8Encoding.GetByteCount(_portalName) + 1 + 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlFlush,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlFlush.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(outputStream' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlParse.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_prepareName) + 1 + UTF8Encoding.GetByteCount(_queryString) + 1 +  								  2 + (_parameterIDs.Length * 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlParse.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_prepareName) + 1 + UTF8Encoding.GetByteCount(_queryString) + 1 +  								  2 + (_parameterIDs.Length * 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlParse.cs,WriteToStream,The following statement contains a magic number: Int32 messageLength = 4 + UTF8Encoding.GetByteCount(_prepareName) + 1 + UTF8Encoding.GetByteCount(_queryString) + 1 +  								  2 + (_parameterIDs.Length * 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlPasswordPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlPasswordPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(outputStream' 4 + password.Length + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlQuery,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlQuery.cs,Send,The following statement contains a magic number: PGUtil.WriteInt32(stream' 4 + (int)commandStream.Length + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream'  							  4 + 4 + 5 + (UTF8Encoding.GetByteCount(user_name) + 1) + 9 +  							  (UTF8Encoding.GetByteCount(database_name) + 1) + 10 + 4 + 1);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlStartupPacket,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlStartupPacket.cs,WriteToStream,The following statement contains a magic number: PGUtil.WriteInt32(output_stream' 196608);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlSync,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Message\NpgsqlSync.cs,Send,The following statement contains a magic number: PGUtil.WriteInt32(stream' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,StringRowReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlAsciiRow.cs,ReadNext,The following statement contains a magic number: if (fieldSize >= 32768)  				return ReadLargeObject(field_descr' fieldSize);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,StringRowReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlAsciiRow.cs,AbandonShip,The following statement contains a magic number: try  			{  				Stream.WriteByte((byte)FrontEndMessageCode.Termination);  				PGUtil.WriteInt32(Stream' 4);  				Stream.Flush();  			}  			catch  			{  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlBackEndKeyData,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlBackEndKeyData.cs,NpgsqlBackEndKeyData,The following statement contains a magic number: PGUtil.EatShortStreamBytes(stream' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,NpgsqlCommand,The following statement contains a magic number: timeout = 20;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,NpgsqlCommand,The following statement contains a magic number: timeout = 20;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,CheckFunctionNeedsColumnDefinitionList,The following statement contains a magic number: if (fullName.Length == 2)  			{  				returnRecordQuery =  				"select count(*) > 0 from pg_proc p left join pg_namespace n on p.pronamespace = n.oid where " + predicate + " and n.nspname=:nspname";    				schemaName = (fullName[0].IndexOf("\"") != -1) ? fullName[0] : fullName[0].ToLower();  				procedureName = (fullName[1].IndexOf("\"") != -1) ? fullName[1] : fullName[1].ToLower();  			}  			else  			{  				// Instead of defaulting don't use the nspname' as an alternative' query pg_proc and pg_namespace to try and determine the nspname.  				//schemaName = "public"; // This was removed after build 0.99.3 because the assumption that a function is in public is often incorrect.  				returnRecordQuery =  					"select count(*) > 0 from pg_proc p where " + predicate;    				procedureName = (CommandText.IndexOf("\"") != -1) ? CommandText : CommandText.ToLower();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,CheckFunctionNeedsColumnDefinitionList,The following statement contains a magic number: using (NpgsqlCommand c = new NpgsqlCommand(returnRecordQuery' Connection))  			{  				c.Parameters.Add(new NpgsqlParameter("proargtypes"' NpgsqlDbType.Oidvector));  				c.Parameters.Add(new NpgsqlParameter("proname"' NpgsqlDbType.Name));    				c.Parameters[0].Value = parameterTypes.ToString();  				c.Parameters[1].Value = procedureName;    				if (schemaName != null && schemaName.Length > 0)  				{  					c.Parameters.Add(new NpgsqlParameter("nspname"' NpgsqlDbType.Name));  					c.Parameters[2].Value = schemaName;  				}    				ret = (Boolean)c.ExecuteScalar();  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,ReplaceParameterValue,The following statement contains a magic number: foreach (Match match in results)  			{  				start = match.Index;  				end = match.Index + match.Length;  				String spaces = new String(' '' match.Length - 2);  				withoutquote = withoutquote.Substring(0' start + 1) + spaces + withoutquote.Substring(end - 1);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,ReplaceParameterValue,The following statement contains a magic number: do  			{  				// Now we look for the searched parameters on the "withoutquote" string  				results = Regex.Matches(withoutquote' pattern);  				if (results.Count == 0)  				{  					// If no parameter is found' go out!  					break;  				}  				// We take the first parameter found  				found = true;  				Match match = results[0];  				start = match.Index;  				if ((match.Length - parameterName.Length) == 3)  				{  					// If the found string is not the end of the string  					end = match.Index + match.Length - 1;  				}  				else  				{  					// If the found string is the end of the string  					end = match.Index + match.Length;  				}  				result = result.Substring(0' start + 1) + paramVal + result.Substring(end);  				withoutquote = withoutquote.Substring(0' start + 1) + paramVal + withoutquote.Substring(end);  			}  			while (true);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,NpgsqlConnectionStringBuilder,The following statement contains a magic number: defaults.Add(Keywords.Port' 5432);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,NpgsqlConnectionStringBuilder,The following statement contains a magic number: defaults.Add(Keywords.Timeout' 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,NpgsqlConnectionStringBuilder,The following statement contains a magic number: defaults.Add(Keywords.ConnectionLifeTime' 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,NpgsqlConnectionStringBuilder,The following statement contains a magic number: defaults.Add(Keywords.MaxPoolSize' 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ProcessServerVersion,The following statement contains a magic number: this._supportsPrepare = (ServerVersion >= new Version(7' 3' 0));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ProcessServerVersion,The following statement contains a magic number: this._supportsPrepare = (ServerVersion >= new Version(7' 3' 0));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ProcessServerVersion,The following statement contains a magic number: this._supportsSavepoint = (ServerVersion >= new Version(8' 0' 0));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlContextHolder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnector.cs,ProcessServerMessages,The following statement contains a magic number: try  				{  					while (true)  					{  						Thread.Sleep(1);  						//To give runtime chance to release correctly the lock. See http://pgfoundry.org/forum/message.php?msg_id=1002650 for more information.  						this.connector._notificationAutoResetEvent.WaitOne();    						if (this.connector.Socket.Poll(100' SelectMode.SelectRead))  						{  							// reset any responses just before getting new ones  							this.connector.Mediator.ResetResponses();  							this.state.ProcessBackendResponsesWhileExists(this.connector);  						}    						this.connector._notificationAutoResetEvent.Set();  					}  				}  				catch (IOException ex)  				{  					this.connector._notificationException = ex;  					this.connector._notificationAutoResetEvent.Set();  					this.connector.Close();  				}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,StartTimer,The following statement contains a magic number: Timer = new Timer(1000);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,TimerElapsedHandler,The following statement contains a magic number: try  			{  				foreach (ConnectorQueue Queue in PooledConnectors.Values)  				{  					lock (Queue)  					{  						if (Queue.AvailableCount > 0)  						{  							if (Queue.AvailableCount + Queue.BusyCount > Queue.MinPoolSize)  							{  								if (Queue.InactiveTime >= Queue.ConnectionLifeTime)  								{  									Int32 diff = Queue.AvailableCount + Queue.BusyCount - Queue.MinPoolSize;  									Int32 toBeClosed = (diff + 1) / 2;  									toBeClosed = Math.Min(toBeClosed' Queue.AvailableCount);    									if (diff < 2)  									{  										diff = 2;  									}    									Queue.InactiveTime -= Queue.ConnectionLifeTime / (int)(Math.Log(diff) / Math.Log(2));    									for (Int32 i = 0; i < toBeClosed; ++i)  									{  										Connector = Queue.TakeAvailable();  										Connector.Close();  									}  								}  								else  								{  									Queue.InactiveTime++;  								}  								if (Queue.AvailableCount > 0 || Queue.BusyCount > 0)  									activeConnectionsExist = true;  							}  							else  							{  								Queue.InactiveTime = 0;  							}  						}  						else  						{  							Queue.InactiveTime = 0;  						}  					}  				}  			}  			finally  			{  				if (activeConnectionsExist)  					Timer.Start();  				else  					Timer = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,TimerElapsedHandler,The following statement contains a magic number: try  			{  				foreach (ConnectorQueue Queue in PooledConnectors.Values)  				{  					lock (Queue)  					{  						if (Queue.AvailableCount > 0)  						{  							if (Queue.AvailableCount + Queue.BusyCount > Queue.MinPoolSize)  							{  								if (Queue.InactiveTime >= Queue.ConnectionLifeTime)  								{  									Int32 diff = Queue.AvailableCount + Queue.BusyCount - Queue.MinPoolSize;  									Int32 toBeClosed = (diff + 1) / 2;  									toBeClosed = Math.Min(toBeClosed' Queue.AvailableCount);    									if (diff < 2)  									{  										diff = 2;  									}    									Queue.InactiveTime -= Queue.ConnectionLifeTime / (int)(Math.Log(diff) / Math.Log(2));    									for (Int32 i = 0; i < toBeClosed; ++i)  									{  										Connector = Queue.TakeAvailable();  										Connector.Close();  									}  								}  								else  								{  									Queue.InactiveTime++;  								}  								if (Queue.AvailableCount > 0 || Queue.BusyCount > 0)  									activeConnectionsExist = true;  							}  							else  							{  								Queue.InactiveTime = 0;  							}  						}  						else  						{  							Queue.InactiveTime = 0;  						}  					}  				}  			}  			finally  			{  				if (activeConnectionsExist)  					Timer.Start();  				else  					Timer = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,TimerElapsedHandler,The following statement contains a magic number: try  			{  				foreach (ConnectorQueue Queue in PooledConnectors.Values)  				{  					lock (Queue)  					{  						if (Queue.AvailableCount > 0)  						{  							if (Queue.AvailableCount + Queue.BusyCount > Queue.MinPoolSize)  							{  								if (Queue.InactiveTime >= Queue.ConnectionLifeTime)  								{  									Int32 diff = Queue.AvailableCount + Queue.BusyCount - Queue.MinPoolSize;  									Int32 toBeClosed = (diff + 1) / 2;  									toBeClosed = Math.Min(toBeClosed' Queue.AvailableCount);    									if (diff < 2)  									{  										diff = 2;  									}    									Queue.InactiveTime -= Queue.ConnectionLifeTime / (int)(Math.Log(diff) / Math.Log(2));    									for (Int32 i = 0; i < toBeClosed; ++i)  									{  										Connector = Queue.TakeAvailable();  										Connector.Close();  									}  								}  								else  								{  									Queue.InactiveTime++;  								}  								if (Queue.AvailableCount > 0 || Queue.BusyCount > 0)  									activeConnectionsExist = true;  							}  							else  							{  								Queue.InactiveTime = 0;  							}  						}  						else  						{  							Queue.InactiveTime = 0;  						}  					}  				}  			}  			finally  			{  				if (activeConnectionsExist)  					Timer.Start();  				else  					Timer = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,TimerElapsedHandler,The following statement contains a magic number: try  			{  				foreach (ConnectorQueue Queue in PooledConnectors.Values)  				{  					lock (Queue)  					{  						if (Queue.AvailableCount > 0)  						{  							if (Queue.AvailableCount + Queue.BusyCount > Queue.MinPoolSize)  							{  								if (Queue.InactiveTime >= Queue.ConnectionLifeTime)  								{  									Int32 diff = Queue.AvailableCount + Queue.BusyCount - Queue.MinPoolSize;  									Int32 toBeClosed = (diff + 1) / 2;  									toBeClosed = Math.Min(toBeClosed' Queue.AvailableCount);    									if (diff < 2)  									{  										diff = 2;  									}    									Queue.InactiveTime -= Queue.ConnectionLifeTime / (int)(Math.Log(diff) / Math.Log(2));    									for (Int32 i = 0; i < toBeClosed; ++i)  									{  										Connector = Queue.TakeAvailable();  										Connector.Close();  									}  								}  								else  								{  									Queue.InactiveTime++;  								}  								if (Queue.AvailableCount > 0 || Queue.BusyCount > 0)  									activeConnectionsExist = true;  							}  							else  							{  								Queue.InactiveTime = 0;  							}  						}  						else  						{  							Queue.InactiveTime = 0;  						}  					}  				}  			}  			finally  			{  				if (activeConnectionsExist)  					Timer.Start();  				else  					Timer = null;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,RequestConnector,The following statement contains a magic number: Int32 timeoutMilliseconds = Connection.Timeout * 1000;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,RequestConnector,The following statement contains a magic number: while (Connector == null && timeoutMilliseconds > 0)  			{  				Int32 ST = timeoutMilliseconds > 100 ? 100 : timeoutMilliseconds;    				Thread.Sleep(ST);  				timeoutMilliseconds -= ST;    				Connector = RequestPooledConnectorInternal(Connection);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectorPool,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectorPool.cs,RequestConnector,The following statement contains a magic number: while (Connector == null && timeoutMilliseconds > 0)  			{  				Int32 ST = timeoutMilliseconds > 100 ? 100 : timeoutMilliseconds;    				Thread.Sleep(ST);  				timeoutMilliseconds -= ST;    				Connector = RequestPooledConnectorInternal(Connection);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = false;  				row["IsKey"] = keyList.Contains(GetName(i));  				row["BaseCatalogName"] = "";  				row["BaseSchemaName"] = "";  				row["BaseTableName"] = "";  				row["BaseColumnName"] = GetName(i);  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = true;  				// without other information' must allow dbnull on the client  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = false;  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = false;  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = false;  				row["IsKey"] = keyList.Contains(GetName(i));  				row["BaseCatalogName"] = "";  				row["BaseSchemaName"] = "";  				row["BaseTableName"] = "";  				row["BaseColumnName"] = GetName(i);  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = true;  				// without other information' must allow dbnull on the client  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = false;  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = false;  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = false;  				row["IsKey"] = keyList.Contains(GetName(i));  				row["BaseCatalogName"] = "";  				row["BaseSchemaName"] = "";  				row["BaseTableName"] = "";  				row["BaseColumnName"] = GetName(i);  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = true;  				// without other information' must allow dbnull on the client  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = false;  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = false;  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v2,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = false;  				row["IsKey"] = keyList.Contains(GetName(i));  				row["BaseCatalogName"] = "";  				row["BaseSchemaName"] = "";  				row["BaseTableName"] = "";  				row["BaseColumnName"] = GetName(i);  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = true;  				// without other information' must allow dbnull on the client  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = false;  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = false;  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				string baseColumnName = GetBaseColumnName(columnLookup' i);    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = IsUnique(keyLookup' baseColumnName);  				row["IsKey"] = IsKey(keyLookup' baseColumnName);  				if (CurrentDescription[i].TableOID != 0 && oidTableLookup.ContainsKey(CurrentDescription[i].TableOID))  				{  					row["BaseCatalogName"] = oidTableLookup[CurrentDescription[i].TableOID].Catalog;  					row["BaseSchemaName"] = oidTableLookup[CurrentDescription[i].TableOID].Schema;  					row["BaseTableName"] = oidTableLookup[CurrentDescription[i].TableOID].Name;  				}  				else  				{  					row["BaseCatalogName"] = row["BaseSchemaName"] = row["BaseTableName"] = "";  				}  				row["BaseColumnName"] = baseColumnName;  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = IsNullable(columnLookup' i);  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = !string.Equals((string)row["ColumnName"]' baseColumnName);  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = IsAutoIncrement(columnLookup' i);  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				string baseColumnName = GetBaseColumnName(columnLookup' i);    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = IsUnique(keyLookup' baseColumnName);  				row["IsKey"] = IsKey(keyLookup' baseColumnName);  				if (CurrentDescription[i].TableOID != 0 && oidTableLookup.ContainsKey(CurrentDescription[i].TableOID))  				{  					row["BaseCatalogName"] = oidTableLookup[CurrentDescription[i].TableOID].Catalog;  					row["BaseSchemaName"] = oidTableLookup[CurrentDescription[i].TableOID].Schema;  					row["BaseTableName"] = oidTableLookup[CurrentDescription[i].TableOID].Name;  				}  				else  				{  					row["BaseCatalogName"] = row["BaseSchemaName"] = row["BaseTableName"] = "";  				}  				row["BaseColumnName"] = baseColumnName;  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = IsNullable(columnLookup' i);  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = !string.Equals((string)row["ColumnName"]' baseColumnName);  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = IsAutoIncrement(columnLookup' i);  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				string baseColumnName = GetBaseColumnName(columnLookup' i);    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = IsUnique(keyLookup' baseColumnName);  				row["IsKey"] = IsKey(keyLookup' baseColumnName);  				if (CurrentDescription[i].TableOID != 0 && oidTableLookup.ContainsKey(CurrentDescription[i].TableOID))  				{  					row["BaseCatalogName"] = oidTableLookup[CurrentDescription[i].TableOID].Catalog;  					row["BaseSchemaName"] = oidTableLookup[CurrentDescription[i].TableOID].Schema;  					row["BaseTableName"] = oidTableLookup[CurrentDescription[i].TableOID].Name;  				}  				else  				{  					row["BaseCatalogName"] = row["BaseSchemaName"] = row["BaseTableName"] = "";  				}  				row["BaseColumnName"] = baseColumnName;  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = IsNullable(columnLookup' i);  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = !string.Equals((string)row["ColumnName"]' baseColumnName);  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = IsAutoIncrement(columnLookup' i);  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,FillSchemaTable_v3,The following statement contains a magic number: for (Int16 i = 0; i < CurrentDescription.NumFields; i++)  			{  				DataRow row = schema.NewRow();    				string baseColumnName = GetBaseColumnName(columnLookup' i);    				row["ColumnName"] = GetName(i);  				row["ColumnOrdinal"] = i + 1;  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					(CurrentDescription[i].TypeInfo.Name == "varchar" || CurrentDescription[i].TypeInfo.Name == "bpchar"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier - 4;  				}  				else if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  						 (CurrentDescription[i].TypeInfo.Name == "bit" || CurrentDescription[i].TypeInfo.Name == "varbit"))  				{  					row["ColumnSize"] = CurrentDescription[i].TypeModifier;  				}  				else  				{  					row["ColumnSize"] = (int)CurrentDescription[i].TypeSize;  				}  				if (CurrentDescription[i].TypeModifier != -1 && CurrentDescription[i].TypeInfo != null &&  					CurrentDescription[i].TypeInfo.Name == "numeric")  				{  					row["NumericPrecision"] = ((CurrentDescription[i].TypeModifier - 4) >> 16) & ushort.MaxValue;  					row["NumericScale"] = (CurrentDescription[i].TypeModifier - 4) & ushort.MaxValue;  				}  				else  				{  					row["NumericPrecision"] = 0;  					row["NumericScale"] = 0;  				}  				row["IsUnique"] = IsUnique(keyLookup' baseColumnName);  				row["IsKey"] = IsKey(keyLookup' baseColumnName);  				if (CurrentDescription[i].TableOID != 0 && oidTableLookup.ContainsKey(CurrentDescription[i].TableOID))  				{  					row["BaseCatalogName"] = oidTableLookup[CurrentDescription[i].TableOID].Catalog;  					row["BaseSchemaName"] = oidTableLookup[CurrentDescription[i].TableOID].Schema;  					row["BaseTableName"] = oidTableLookup[CurrentDescription[i].TableOID].Name;  				}  				else  				{  					row["BaseCatalogName"] = row["BaseSchemaName"] = row["BaseTableName"] = "";  				}  				row["BaseColumnName"] = baseColumnName;  				row["DataType"] = GetFieldType(i);  				row["AllowDBNull"] = IsNullable(columnLookup' i);  				if (CurrentDescription[i].TypeInfo != null)  				{  					row["ProviderType"] = CurrentDescription[i].TypeInfo.Name;  				}  				row["IsAliased"] = !string.Equals((string)row["ColumnName"]' baseColumnName);  				row["IsExpression"] = false;  				row["IsIdentity"] = false;  				row["IsAutoIncrement"] = IsAutoIncrement(columnLookup' i);  				row["IsRowVersion"] = false;  				row["IsHidden"] = false;  				row["IsLong"] = false;  				row["IsReadOnly"] = false;    				schema.Rows.Add(row);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetKeys,The following statement contains a magic number: using (NpgsqlConnection metadataConn = Connection.Clone())  			{  				NpgsqlCommand c = new NpgsqlCommand(getKeys' metadataConn);  				c.Parameters.Add(new NpgsqlParameter("tableOid"' NpgsqlDbType.Integer)).Value = tableOid;    				using (NpgsqlDataReader dr = c.GetReader(CommandBehavior.SequentialAccess | CommandBehavior.SingleResult))  				{  					string previousKeyName = null;  					string possiblyUniqueColumn = null;  					string columnName;  					string currentKeyName;  					// loop through adding any column that is primary to the primary key list  					// add any column that is the only column for that key to the unique list  					// unique here doesn't mean general unique constraint (with possibly multiple columns)  					// it means all values in this single column must be unique  					while (dr.Read())  					{  						columnName = dr.GetString(0);  						currentKeyName = dr.GetString(1);  						// if i.indisprimary  						if (dr.GetBoolean(2))  						{  							// add column name as part of the primary key  							lookup.primaryKey.Add(columnName);  						}  						if (currentKeyName != previousKeyName)  						{  							if (possiblyUniqueColumn != null)  							{  								lookup.uniqueColumns.Add(possiblyUniqueColumn);  							}  							possiblyUniqueColumn = columnName;  						}  						else  						{  							possiblyUniqueColumn = null;  						}  						previousKeyName = currentKeyName;  					}  					// if finished reading and have a possiblyUniqueColumn name that is  					// not null' then it is the name of a unique column  					if (possiblyUniqueColumn != null)  					{  						lookup.uniqueColumns.Add(possiblyUniqueColumn);  					}  					return lookup;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlDataReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,GetTableNameFromQuery,The following statement contains a magic number: String tableName = _command.CommandText.Substring(fromClauseIndex + 4).Trim();
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,Table,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,Table,The following statement contains a magic number: Name = rdr.GetString(2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,Table,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,Table,The following statement contains a magic number: Id = rdr.GetInt64(3);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,Column,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,Column,The following statement contains a magic number: TableId = rdr.GetInt64(2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,Column,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,Column,The following statement contains a magic number: ColumnNum = rdr.GetInt16(3);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,Column,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlDataReader.cs,Column,The following statement contains a magic number: ColumnDefault = rdr.GetValue(4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlError,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlError.cs,NpgsqlError,The following statement contains a magic number: if (PGUtil.ReadInt32(stream' buffer) == 1178686529)  			{  				string[] v2Parts = ("FATA" + PGUtil.ReadString(stream' queue)).Split(new char[] { ':' }' 2);  				if (v2Parts.Length == 2)  				{  					_severity = v2Parts[0].Trim();  					_message = v2Parts[1].Trim();  				}  				else  				{  					_severity = string.Empty;  					_message = v2Parts[0].Trim();  				}  			}  			else  			{  				for (char field = (char)stream.ReadByte(); field != 0; field = (char)stream.ReadByte())  				{  					switch (field)  					{  						case 'S':  							_severity = PGUtil.ReadString(stream' queue);  							break;  						case 'C':  							_code = PGUtil.ReadString(stream' queue);  							break;  						case 'M':  							_message = PGUtil.ReadString(stream' queue);  							break;  						case 'D':  							_detail = PGUtil.ReadString(stream' queue);  							break;  						case 'H':  							_hint = PGUtil.ReadString(stream' queue);  							break;  						case 'P':  							_position = PGUtil.ReadString(stream' queue);  							break;  						case 'p':  							_internalPosition = PGUtil.ReadString(stream' queue);  							break;  						case 'q':  							_internalQuery = PGUtil.ReadString(stream' queue);  							break;  						case 'W':  							_where = PGUtil.ReadString(stream' queue);  							break;  						case 'F':  							_file = PGUtil.ReadString(stream' queue);  							break;  						case 'L':  							_line = PGUtil.ReadString(stream' queue);  							break;  						case 'R':  							_routine = PGUtil.ReadString(stream' queue);  							break;  						case 's':  							_schemaName = PGUtil.ReadString(stream' queue);  							break;  						case 't':  							_tableName = PGUtil.ReadString(stream' queue);  							break;  						case 'c':  							_columnName = PGUtil.ReadString(stream' queue);  							break;  						case 'd':  							_datatypeName = PGUtil.ReadString(stream' queue);  							break;  						case 'n':  							_constraintName = PGUtil.ReadString(stream' queue);  							break;  						default:  							// Unknown error field; consume and discard.  							PGUtil.ReadString(stream' queue);  							break;  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlError,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlError.cs,NpgsqlError,The following statement contains a magic number: if (PGUtil.ReadInt32(stream' buffer) == 1178686529)  			{  				string[] v2Parts = ("FATA" + PGUtil.ReadString(stream' queue)).Split(new char[] { ':' }' 2);  				if (v2Parts.Length == 2)  				{  					_severity = v2Parts[0].Trim();  					_message = v2Parts[1].Trim();  				}  				else  				{  					_severity = string.Empty;  					_message = v2Parts[0].Trim();  				}  			}  			else  			{  				for (char field = (char)stream.ReadByte(); field != 0; field = (char)stream.ReadByte())  				{  					switch (field)  					{  						case 'S':  							_severity = PGUtil.ReadString(stream' queue);  							break;  						case 'C':  							_code = PGUtil.ReadString(stream' queue);  							break;  						case 'M':  							_message = PGUtil.ReadString(stream' queue);  							break;  						case 'D':  							_detail = PGUtil.ReadString(stream' queue);  							break;  						case 'H':  							_hint = PGUtil.ReadString(stream' queue);  							break;  						case 'P':  							_position = PGUtil.ReadString(stream' queue);  							break;  						case 'p':  							_internalPosition = PGUtil.ReadString(stream' queue);  							break;  						case 'q':  							_internalQuery = PGUtil.ReadString(stream' queue);  							break;  						case 'W':  							_where = PGUtil.ReadString(stream' queue);  							break;  						case 'F':  							_file = PGUtil.ReadString(stream' queue);  							break;  						case 'L':  							_line = PGUtil.ReadString(stream' queue);  							break;  						case 'R':  							_routine = PGUtil.ReadString(stream' queue);  							break;  						case 's':  							_schemaName = PGUtil.ReadString(stream' queue);  							break;  						case 't':  							_tableName = PGUtil.ReadString(stream' queue);  							break;  						case 'c':  							_columnName = PGUtil.ReadString(stream' queue);  							break;  						case 'd':  							_datatypeName = PGUtil.ReadString(stream' queue);  							break;  						case 'n':  							_constraintName = PGUtil.ReadString(stream' queue);  							break;  						default:  							// Unknown error field; consume and discard.  							PGUtil.ReadString(stream' queue);  							break;  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlError,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlError.cs,NpgsqlError,The following statement contains a magic number: if (PGUtil.ReadInt32(stream' buffer) == 1178686529)  			{  				string[] v2Parts = ("FATA" + PGUtil.ReadString(stream' queue)).Split(new char[] { ':' }' 2);  				if (v2Parts.Length == 2)  				{  					_severity = v2Parts[0].Trim();  					_message = v2Parts[1].Trim();  				}  				else  				{  					_severity = string.Empty;  					_message = v2Parts[0].Trim();  				}  			}  			else  			{  				for (char field = (char)stream.ReadByte(); field != 0; field = (char)stream.ReadByte())  				{  					switch (field)  					{  						case 'S':  							_severity = PGUtil.ReadString(stream' queue);  							break;  						case 'C':  							_code = PGUtil.ReadString(stream' queue);  							break;  						case 'M':  							_message = PGUtil.ReadString(stream' queue);  							break;  						case 'D':  							_detail = PGUtil.ReadString(stream' queue);  							break;  						case 'H':  							_hint = PGUtil.ReadString(stream' queue);  							break;  						case 'P':  							_position = PGUtil.ReadString(stream' queue);  							break;  						case 'p':  							_internalPosition = PGUtil.ReadString(stream' queue);  							break;  						case 'q':  							_internalQuery = PGUtil.ReadString(stream' queue);  							break;  						case 'W':  							_where = PGUtil.ReadString(stream' queue);  							break;  						case 'F':  							_file = PGUtil.ReadString(stream' queue);  							break;  						case 'L':  							_line = PGUtil.ReadString(stream' queue);  							break;  						case 'R':  							_routine = PGUtil.ReadString(stream' queue);  							break;  						case 's':  							_schemaName = PGUtil.ReadString(stream' queue);  							break;  						case 't':  							_tableName = PGUtil.ReadString(stream' queue);  							break;  						case 'c':  							_columnName = PGUtil.ReadString(stream' queue);  							break;  						case 'd':  							_datatypeName = PGUtil.ReadString(stream' queue);  							break;  						case 'n':  							_constraintName = PGUtil.ReadString(stream' queue);  							break;  						default:  							// Unknown error field; consume and discard.  							PGUtil.ReadString(stream' queue);  							break;  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlMediator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlMediator.cs,NpgsqlMediator,The following statement contains a magic number: CommandTimeout = 20;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlMediator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlMediator.cs,NpgsqlMediator,The following statement contains a magic number: CopyBufferSize = 8192;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlMediator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlMediator.cs,ResetResponses,The following statement contains a magic number: CommandTimeout = 20;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlRowDescription,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlRowDescription.cs,NpgsqlRowDescription,The following statement contains a magic number: PGUtil.EatStreamBytes(stream' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlParameterStatus,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Parameter\NpgsqlParameterStatus.cs,NpgsqlParameterStatus,The following statement contains a magic number: PGUtil.EatStreamBytes(stream' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadChar,The following statement contains a magic number: for (int i = 0; i != 4; ++i)  			{  				int byteRead = stream.ReadByte();  				if (byteRead == -1)  				{  					throw new EndOfStreamException();  				}  				buffer[i] = (byte)byteRead;  				if (ValidUTF8Ending(buffer' 0' i + 1)) //catch multi-byte encodings where we have not yet enough bytes.  				{  					return ENCODING_UTF8.GetChars(buffer)[0];  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadChars,The following statement contains a magic number: byte[] buffer = new byte[Math.Min(maxRead' maxChars * 4)];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ValidUTF8Ending,The following statement contains a magic number: for (int i = 0; i + 2 <= count; ++i)  			{  				examine = buffer[index + count - 2 - i];  				if ((examine & masks[i]) == matches[i])  				{  					return true;  				}  				if ((examine & 0xC0) != 0x80)  				{  					return false;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ValidUTF8Ending,The following statement contains a magic number: for (int i = 0; i + 2 <= count; ++i)  			{  				examine = buffer[index + count - 2 - i];  				if ((examine & masks[i]) == matches[i])  				{  					return true;  				}  				if ((examine & 0xC0) != 0x80)  				{  					return false;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,CheckedStreamRead,The following statement contains a magic number: while (size > 0)  			{  				// chunked read of maxReadChunkSize  				int readSize = size > 8192 ? 8192 : size;  				bytes_from_stream = stream.Read(buffer' offset + total_bytes_read' readSize);  				total_bytes_read += bytes_from_stream;  				size -= bytes_from_stream;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,CheckedStreamRead,The following statement contains a magic number: while (size > 0)  			{  				// chunked read of maxReadChunkSize  				int readSize = size > 8192 ? 8192 : size;  				bytes_from_stream = stream.Read(buffer' offset + total_bytes_read' readSize);  				total_bytes_read += bytes_from_stream;  				size -= bytes_from_stream;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadEscapedBytes,The following statement contains a magic number: for (i = 0; i != maxBytes && maxRead > 0; ++i)  			{  				char c = ReadChar(stream' buffer);  				--maxRead;  				if (c == '\\')  				{  					--maxRead;  					switch (c = ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							output[outputIdx++] =  								(byte)  								((int.Parse(c.ToString()) << 6) | (int.Parse(ReadChar(stream' buffer).ToString()) << 3) |  								 int.Parse(ReadChar(stream' buffer).ToString()));  							break;  						default:  							output[outputIdx++] = (byte)c;  							break;  					}  				}  				else  				{  					output[outputIdx++] = (byte)c;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadEscapedBytes,The following statement contains a magic number: for (i = 0; i != maxBytes && maxRead > 0; ++i)  			{  				char c = ReadChar(stream' buffer);  				--maxRead;  				if (c == '\\')  				{  					--maxRead;  					switch (c = ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							output[outputIdx++] =  								(byte)  								((int.Parse(c.ToString()) << 6) | (int.Parse(ReadChar(stream' buffer).ToString()) << 3) |  								 int.Parse(ReadChar(stream' buffer).ToString()));  							break;  						default:  							output[outputIdx++] = (byte)c;  							break;  					}  				}  				else  				{  					output[outputIdx++] = (byte)c;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadEscapedBytes,The following statement contains a magic number: for (i = 0; i != maxBytes && maxRead > 0; ++i)  			{  				char c = ReadChar(stream' buffer);  				--maxRead;  				if (c == '\\')  				{  					--maxRead;  					switch (c = ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							output[outputIdx++] =  								(byte)  								((int.Parse(c.ToString()) << 6) | (int.Parse(ReadChar(stream' buffer).ToString()) << 3) |  								 int.Parse(ReadChar(stream' buffer).ToString()));  							break;  						default:  							output[outputIdx++] = (byte)c;  							break;  					}  				}  				else  				{  					output[outputIdx++] = (byte)c;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,SkipEscapedBytes,The following statement contains a magic number: for (i = 0; i != maxBytes && maxRead > 0; ++i)  			{  				--maxRead;  				if (ReadChar(stream' buffer) == '\\')  				{  					--maxRead;  					switch (ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							EatStreamBytes(stream' 2); //note assumes all representations of '0' through '9' are single-byte.  							break;  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,SkipEscapedBytes,The following statement contains a magic number: for (i = 0; i != maxBytes && maxRead > 0; ++i)  			{  				--maxRead;  				if (ReadChar(stream' buffer) == '\\')  				{  					--maxRead;  					switch (ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							EatStreamBytes(stream' 2); //note assumes all representations of '0' through '9' are single-byte.  							break;  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,WriteInt32,The following statement contains a magic number: stream.WriteByte((byte)(number >> 8));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,WriteInt32,The following statement contains a magic number: stream.WriteByte((byte)(number >> 16));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,WriteInt32,The following statement contains a magic number: stream.WriteByte((byte)(number >> 24));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: CheckedStreamReadShort(stream' buffer' 0' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: var value = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: var value = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: var value = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: var value = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt32,The following statement contains a magic number: var value = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,WriteInt16,The following statement contains a magic number: stream.WriteByte((byte)(number >> 8));
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt16,The following statement contains a magic number: CheckedStreamReadShort(stream' buffer' 2' 2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt16,The following statement contains a magic number: CheckedStreamReadShort(stream' buffer' 2' 2);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt16,The following statement contains a magic number: var value = buffer[2] + (buffer[3] << 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt16,The following statement contains a magic number: var value = buffer[2] + (buffer[3] << 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,ReadInt16,The following statement contains a magic number: var value = buffer[2] + (buffer[3] << 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5.cs,MD5,The following statement contains a magic number: HashSizeValue = 128;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,MD5CryptoServiceProvider,The following statement contains a magic number: _H = new uint[4];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,HashFinal,The following statement contains a magic number: byte[] hash = new byte[16];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,HashFinal,The following statement contains a magic number: for (i = 0; i < 4; i++)  			{  				for (j = 0; j < 4; j++)  				{  					hash[i * 4 + j] = (byte)(_H[i] >> j * 8);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,HashFinal,The following statement contains a magic number: for (i = 0; i < 4; i++)  			{  				for (j = 0; j < 4; j++)  				{  					hash[i * 4 + j] = (byte)(_H[i] >> j * 8);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,HashFinal,The following statement contains a magic number: for (i = 0; i < 4; i++)  			{  				for (j = 0; j < 4; j++)  				{  					hash[i * 4 + j] = (byte)(_H[i] >> j * 8);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,HashFinal,The following statement contains a magic number: for (i = 0; i < 4; i++)  			{  				for (j = 0; j < 4; j++)  				{  					hash[i * 4 + j] = (byte)(_H[i] >> j * 8);  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,Initialize,The following statement contains a magic number: _H[2] = 0x98badcfe;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,Initialize,The following statement contains a magic number: _H[3] = 0x10325476;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: uint[] buff = new uint[16];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: for (i = 0; i < 16; i++)  			{  				buff[i] = (inputBuffer[inputOffset + 4 * i]) | (((uint)(inputBuffer[inputOffset + 4 * i + 1])) << 8) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 2])) << 16) |  						  (((uint)(inputBuffer[inputOffset + 4 * i + 3])) << 24);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = _H[2];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = _H[3];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((a ^ b) & d) ^ b) + (uint)Constants.C2 + buff[2];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((d ^ a) & c) ^ a) + (uint)Constants.C3 + buff[3];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((c ^ d) & b) ^ d) + (uint)Constants.C4 + buff[4];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((b ^ c) & a) ^ c) + (uint)Constants.C5 + buff[5];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((a ^ b) & d) ^ b) + (uint)Constants.C6 + buff[6];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((d ^ a) & c) ^ a) + (uint)Constants.C7 + buff[7];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((c ^ d) & b) ^ d) + (uint)Constants.C8 + buff[8];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((b ^ c) & a) ^ c) + (uint)Constants.C9 + buff[9];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((a ^ b) & d) ^ b) + (uint)Constants.C10 + buff[10];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((d ^ a) & c) ^ a) + (uint)Constants.C11 + buff[11];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((c ^ d) & b) ^ d) + (uint)Constants.C12 + buff[12];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 7) | (a >> 25);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((b ^ c) & a) ^ c) + (uint)Constants.C13 + buff[13];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 12) | (d >> 20);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((a ^ b) & d) ^ b) + (uint)Constants.C14 + buff[14];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 17) | (c >> 15);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((d ^ a) & c) ^ a) + (uint)Constants.C15 + buff[15];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 22) | (b >> 10);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((a ^ b) & c) ^ b) + (uint)Constants.C17 + buff[6];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((d ^ a) & b) ^ a) + (uint)Constants.C18 + buff[11];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((b ^ c) & d) ^ c) + (uint)Constants.C20 + buff[5];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((a ^ b) & c) ^ b) + (uint)Constants.C21 + buff[10];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((d ^ a) & b) ^ a) + (uint)Constants.C22 + buff[15];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((c ^ d) & a) ^ d) + (uint)Constants.C23 + buff[4];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((b ^ c) & d) ^ c) + (uint)Constants.C24 + buff[9];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((a ^ b) & c) ^ b) + (uint)Constants.C25 + buff[14];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((d ^ a) & b) ^ a) + (uint)Constants.C26 + buff[3];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((c ^ d) & a) ^ d) + (uint)Constants.C27 + buff[8];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((b ^ c) & d) ^ c) + (uint)Constants.C28 + buff[13];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 5) | (a >> 27);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((a ^ b) & c) ^ b) + (uint)Constants.C29 + buff[2];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 9) | (d >> 23);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((d ^ a) & b) ^ a) + (uint)Constants.C30 + buff[7];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 14) | (c >> 18);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((c ^ d) & a) ^ d) + (uint)Constants.C31 + buff[12];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 20) | (b >> 12);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (b ^ c ^ d) + (uint)Constants.C32 + buff[5];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (a ^ b ^ c) + (uint)Constants.C33 + buff[8];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (d ^ a ^ b) + (uint)Constants.C34 + buff[11];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (c ^ d ^ a) + (uint)Constants.C35 + buff[14];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (a ^ b ^ c) + (uint)Constants.C37 + buff[4];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (d ^ a ^ b) + (uint)Constants.C38 + buff[7];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (c ^ d ^ a) + (uint)Constants.C39 + buff[10];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (b ^ c ^ d) + (uint)Constants.C40 + buff[13];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (d ^ a ^ b) + (uint)Constants.C42 + buff[3];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (c ^ d ^ a) + (uint)Constants.C43 + buff[6];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (b ^ c ^ d) + (uint)Constants.C44 + buff[9];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 4) | (a >> 28);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (a ^ b ^ c) + (uint)Constants.C45 + buff[12];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 11) | (d >> 21);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (d ^ a ^ b) + (uint)Constants.C46 + buff[15];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 16) | (c >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (c ^ d ^ a) + (uint)Constants.C47 + buff[2];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 23) | (b >> 9);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((~c) | a) ^ b) + (uint)Constants.C49 + buff[7];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((~b) | d) ^ a) + (uint)Constants.C50 + buff[14];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((~a) | c) ^ d) + (uint)Constants.C51 + buff[5];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((~d) | b) ^ c) + (uint)Constants.C52 + buff[12];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((~c) | a) ^ b) + (uint)Constants.C53 + buff[3];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((~b) | d) ^ a) + (uint)Constants.C54 + buff[10];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((~d) | b) ^ c) + (uint)Constants.C56 + buff[8];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((~c) | a) ^ b) + (uint)Constants.C57 + buff[15];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((~b) | d) ^ a) + (uint)Constants.C58 + buff[6];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((~a) | c) ^ d) + (uint)Constants.C59 + buff[13];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a += (((~d) | b) ^ c) + (uint)Constants.C60 + buff[4];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: a = (a << 6) | (a >> 26);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d += (((~c) | a) ^ b) + (uint)Constants.C61 + buff[11];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: d = (d << 10) | (d >> 22);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c += (((~b) | d) ^ a) + (uint)Constants.C62 + buff[2];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: c = (c << 15) | (c >> 17);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b += (((~a) | c) ^ d) + (uint)Constants.C63 + buff[9];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: b = (b << 21) | (b >> 11);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: _H[2] += c;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessBlock,The following statement contains a magic number: _H[3] += d;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: paddingSize = (int)(56 - (inputCount + count) % BLOCK_SIZE_BYTES);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer = new byte[inputCount + paddingSize + 8];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: size *= 8;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 1] = (byte)((size) >> 8);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 2] = (byte)((size) >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 2] = (byte)((size) >> 16);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 3] = (byte)((size) >> 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 3] = (byte)((size) >> 24);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 4] = 0x00;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 5] = 0x00;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 6] = 0x00;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: fooBuffer[inputCount + paddingSize + 7] = 0x00;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: if (inputCount + paddingSize + 8 == 128)  			{  				ProcessBlock(fooBuffer' 64);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: if (inputCount + paddingSize + 8 == 128)  			{  				ProcessBlock(fooBuffer' 64);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,MD5CryptoServiceProvider,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\Security\MD5CryptoServiceProvider.cs,ProcessFinalBlock,The following statement contains a magic number: if (inputCount + paddingSize + 8 == 128)  			{  				ProcessBlock(fooBuffer' 64);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlClosedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlClosedState.cs,Open,The following statement contains a magic number: try  			{  				IPAddress[] ips = ResolveIPHost(context.Host);  				Socket socket = null;    				// try every ip address of the given hostname' use the first reachable one  				foreach (IPAddress ip in ips)  				{  					IPEndPoint ep = new IPEndPoint(ip' context.Port);  					socket = new Socket(ep.AddressFamily' SocketType.Stream' ProtocolType.Tcp);    					try  					{  						IAsyncResult result = socket.BeginConnect(ep' null' null);    						if (!result.AsyncWaitHandle.WaitOne(context.ConnectionTimeout * 1000' true))  						{  							socket.Close();  							throw new Exception(resman.GetString("Exception_ConnectionTimeout"));  						}    						socket.EndConnect(result);    						// connect was successful' leave the loop  						break;  					}  					catch (Exception)  					{  						socket.Close();  					}  				}    				if (socket == null || !socket.Connected)  				{  					throw new Exception(string.Format(resman.GetString("Exception_FailedConnection")' context.Host));  				}    				Stream stream = new NpgsqlNetworkStream(context' socket' true);    				// If the PostgreSQL server has SSL connectors enabled Open SslClientStream if (response == 'S') {  				if (context.SSL || (context.SslMode == SslMode.Require) || (context.SslMode == SslMode.Prefer))  				{  					PGUtil.WriteInt32(stream' 8);  					PGUtil.WriteInt32(stream' 80877103);  					// Receive response    					Char response = (Char)stream.ReadByte();  					if (response == 'S')  					{  						//create empty collection  						X509CertificateCollection clientCertificates = new X509CertificateCollection();    						//trigger the callback to fetch some certificates  						context.DefaultProvideClientCertificatesCallback(clientCertificates);    						stream = new SslClientStream(  							stream'  							context.Host'  							true'  							SecurityProtocolType.Default'  							clientCertificates);    						((SslClientStream)stream).ClientCertSelectionDelegate =  							new CertificateSelectionCallback(context.DefaultCertificateSelectionCallback);  						((SslClientStream)stream).ServerCertValidationDelegate =  							new CertificateValidationCallback(context.DefaultCertificateValidationCallback);  						((SslClientStream)stream).PrivateKeyCertSelectionDelegate =  							new PrivateKeySelectionCallback(context.DefaultPrivateKeySelectionCallback);  					}  					else if (context.SslMode == SslMode.Require)  					{  						throw new InvalidOperationException(resman.GetString("Exception_Ssl_RequestError"));  					}  				}    				context.Stream = new NpgsqlBufferedStream(stream);  				context.Socket = socket;    				ChangeState(context' NpgsqlConnectedState.Instance);  			}  			//FIXME: Exceptions that come from what we are handling should be wrapped - e.g. an error connecting to  			//the server should definitely be presented to the uesr as an NpgsqlError. Exceptions from userland should  			//be passed untouched - e.g. ThreadAbortException because the user started this in a thread they created and  			//then aborted should be passed through.  			//Are there any others that should be pass through? Alternatively' are there a finite number that should  			//be wrapped?  			catch (ThreadAbortException)  			{  				throw;  			}  			catch (Exception e)  			{  				throw new NpgsqlException(e.Message' e);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlClosedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlClosedState.cs,Open,The following statement contains a magic number: try  			{  				IPAddress[] ips = ResolveIPHost(context.Host);  				Socket socket = null;    				// try every ip address of the given hostname' use the first reachable one  				foreach (IPAddress ip in ips)  				{  					IPEndPoint ep = new IPEndPoint(ip' context.Port);  					socket = new Socket(ep.AddressFamily' SocketType.Stream' ProtocolType.Tcp);    					try  					{  						IAsyncResult result = socket.BeginConnect(ep' null' null);    						if (!result.AsyncWaitHandle.WaitOne(context.ConnectionTimeout * 1000' true))  						{  							socket.Close();  							throw new Exception(resman.GetString("Exception_ConnectionTimeout"));  						}    						socket.EndConnect(result);    						// connect was successful' leave the loop  						break;  					}  					catch (Exception)  					{  						socket.Close();  					}  				}    				if (socket == null || !socket.Connected)  				{  					throw new Exception(string.Format(resman.GetString("Exception_FailedConnection")' context.Host));  				}    				Stream stream = new NpgsqlNetworkStream(context' socket' true);    				// If the PostgreSQL server has SSL connectors enabled Open SslClientStream if (response == 'S') {  				if (context.SSL || (context.SslMode == SslMode.Require) || (context.SslMode == SslMode.Prefer))  				{  					PGUtil.WriteInt32(stream' 8);  					PGUtil.WriteInt32(stream' 80877103);  					// Receive response    					Char response = (Char)stream.ReadByte();  					if (response == 'S')  					{  						//create empty collection  						X509CertificateCollection clientCertificates = new X509CertificateCollection();    						//trigger the callback to fetch some certificates  						context.DefaultProvideClientCertificatesCallback(clientCertificates);    						stream = new SslClientStream(  							stream'  							context.Host'  							true'  							SecurityProtocolType.Default'  							clientCertificates);    						((SslClientStream)stream).ClientCertSelectionDelegate =  							new CertificateSelectionCallback(context.DefaultCertificateSelectionCallback);  						((SslClientStream)stream).ServerCertValidationDelegate =  							new CertificateValidationCallback(context.DefaultCertificateValidationCallback);  						((SslClientStream)stream).PrivateKeyCertSelectionDelegate =  							new PrivateKeySelectionCallback(context.DefaultPrivateKeySelectionCallback);  					}  					else if (context.SslMode == SslMode.Require)  					{  						throw new InvalidOperationException(resman.GetString("Exception_Ssl_RequestError"));  					}  				}    				context.Stream = new NpgsqlBufferedStream(stream);  				context.Socket = socket;    				ChangeState(context' NpgsqlConnectedState.Instance);  			}  			//FIXME: Exceptions that come from what we are handling should be wrapped - e.g. an error connecting to  			//the server should definitely be presented to the uesr as an NpgsqlError. Exceptions from userland should  			//be passed untouched - e.g. ThreadAbortException because the user started this in a thread they created and  			//then aborted should be passed through.  			//Are there any others that should be pass through? Alternatively' are there a finite number that should  			//be wrapped?  			catch (ThreadAbortException)  			{  				throw;  			}  			catch (Exception e)  			{  				throw new NpgsqlException(e.Message' e);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlClosedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlClosedState.cs,Open,The following statement contains a magic number: try  			{  				IPAddress[] ips = ResolveIPHost(context.Host);  				Socket socket = null;    				// try every ip address of the given hostname' use the first reachable one  				foreach (IPAddress ip in ips)  				{  					IPEndPoint ep = new IPEndPoint(ip' context.Port);  					socket = new Socket(ep.AddressFamily' SocketType.Stream' ProtocolType.Tcp);    					try  					{  						IAsyncResult result = socket.BeginConnect(ep' null' null);    						if (!result.AsyncWaitHandle.WaitOne(context.ConnectionTimeout * 1000' true))  						{  							socket.Close();  							throw new Exception(resman.GetString("Exception_ConnectionTimeout"));  						}    						socket.EndConnect(result);    						// connect was successful' leave the loop  						break;  					}  					catch (Exception)  					{  						socket.Close();  					}  				}    				if (socket == null || !socket.Connected)  				{  					throw new Exception(string.Format(resman.GetString("Exception_FailedConnection")' context.Host));  				}    				Stream stream = new NpgsqlNetworkStream(context' socket' true);    				// If the PostgreSQL server has SSL connectors enabled Open SslClientStream if (response == 'S') {  				if (context.SSL || (context.SslMode == SslMode.Require) || (context.SslMode == SslMode.Prefer))  				{  					PGUtil.WriteInt32(stream' 8);  					PGUtil.WriteInt32(stream' 80877103);  					// Receive response    					Char response = (Char)stream.ReadByte();  					if (response == 'S')  					{  						//create empty collection  						X509CertificateCollection clientCertificates = new X509CertificateCollection();    						//trigger the callback to fetch some certificates  						context.DefaultProvideClientCertificatesCallback(clientCertificates);    						stream = new SslClientStream(  							stream'  							context.Host'  							true'  							SecurityProtocolType.Default'  							clientCertificates);    						((SslClientStream)stream).ClientCertSelectionDelegate =  							new CertificateSelectionCallback(context.DefaultCertificateSelectionCallback);  						((SslClientStream)stream).ServerCertValidationDelegate =  							new CertificateValidationCallback(context.DefaultCertificateValidationCallback);  						((SslClientStream)stream).PrivateKeyCertSelectionDelegate =  							new PrivateKeySelectionCallback(context.DefaultPrivateKeySelectionCallback);  					}  					else if (context.SslMode == SslMode.Require)  					{  						throw new InvalidOperationException(resman.GetString("Exception_Ssl_RequestError"));  					}  				}    				context.Stream = new NpgsqlBufferedStream(stream);  				context.Socket = socket;    				ChangeState(context' NpgsqlConnectedState.Instance);  			}  			//FIXME: Exceptions that come from what we are handling should be wrapped - e.g. an error connecting to  			//the server should definitely be presented to the uesr as an NpgsqlError. Exceptions from userland should  			//be passed untouched - e.g. ThreadAbortException because the user started this in a thread they created and  			//then aborted should be passed through.  			//Are there any others that should be pass through? Alternatively' are there a finite number that should  			//be wrapped?  			catch (ThreadAbortException)  			{  				throw;  			}  			catch (Exception e)  			{  				throw new NpgsqlException(e.Message' e);  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectedState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlConnectedState.cs,Startup,The following statement contains a magic number: NpgsqlStartupPacket startupPacket = new NpgsqlStartupPacket(296' //Not used.  																		context.Database'  																		context.UserName' ""' ""' "");
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopyInState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlCopyInState.cs,SendCopyData,The following statement contains a magic number: PGUtil.WriteInt32(toServer' len + 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopyInState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlCopyInState.cs,SendCopyDone,The following statement contains a magic number: PGUtil.WriteInt32(toServer' 4);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCopyInState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlCopyInState.cs,SendCopyFail,The following statement contains a magic number: PGUtil.WriteInt32(toServer' 4 + buf.Length);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlReadyState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlReadyState.cs,Close,The following statement contains a magic number: try  			{  				stream.WriteByte((byte)FrontEndMessageCode.Termination);  				PGUtil.WriteInt32(stream' 4);  				stream.Flush();  			}  			catch  			{  				//Error writting termination message to stream' nothing we can do.  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,TestNotify,The following statement contains a magic number: byte[] convertBuffer = new byte[36];
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,TestNotify,The following statement contains a magic number: for (; ; )  			{  				int newByte = stm.ReadByte();  				if (newByte == -1)  				{  					throw new EndOfStreamException();  				}  				buffer.Enqueue((byte)newByte);  				if (buffer.Count > 35)  				{  					buffer.CopyTo(convertBuffer' 0);  					if (ENCODING_UTF8.GetString(convertBuffer) == uuidString)  					{  						for (; ; )  						{  							switch (stm.ReadByte())  							{  								case -1:  									throw new EndOfStreamException();  								case 'Z':  									//context.Query(new NpgsqlCommand("UNLISTEN *"' context));  									using (NpgsqlCommand cmd = new NpgsqlCommand("UNLISTEN *"' context))  									{  										context.Query(cmd);  									}  									return;  							}  						}  					}  					else  					{  						buffer.Dequeue();  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,EmptySync,The following statement contains a magic number: for (; ; )  			{  				switch (newByte = stm.ReadByte())  				{  					case -1:  						throw new EndOfStreamException();  					case 'E':  					case 'I':  					case 'T':  						if (buffer.Count > 4)  						{  							bool match = true;  							int i = 0;  							foreach (byte cmp in buffer)  							{  								if (cmp != messageSought[i++])  								{  									match = false;  									break;  								}  							}  							if (match)  							{  								return;  							}  						}  						break;  					default:  						buffer.Enqueue(newByte);  						if (buffer.Count > 5)  						{  							buffer.Dequeue();  						}  						break;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,EmptySync,The following statement contains a magic number: for (; ; )  			{  				switch (newByte = stm.ReadByte())  				{  					case -1:  						throw new EndOfStreamException();  					case 'E':  					case 'I':  					case 'T':  						if (buffer.Count > 4)  						{  							bool match = true;  							int i = 0;  							foreach (byte cmp in buffer)  							{  								if (cmp != messageSought[i++])  								{  									match = false;  									break;  								}  							}  							if (match)  							{  								return;  							}  						}  						break;  					default:  						buffer.Enqueue(newByte);  						if (buffer.Count > 5)  						{  							buffer.Dequeue();  						}  						break;  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CheckForContextSocketAvailability,The following statement contains a magic number: const int limitOfSeconds = 2147;
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CheckForContextSocketAvailability,The following statement contains a magic number: while ((secondsToWait > limitOfSeconds) && (!socketPoolResponse))  			{    //  				socketPoolResponse = context.Socket.Poll(1000000 * limitOfSeconds' selectMode);  				secondsToWait -= limitOfSeconds;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CheckForContextSocketAvailability,The following statement contains a magic number: return socketPoolResponse || context.Socket.Poll(1000000 * secondsToWait' selectMode);
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The following statement contains a magic number: using (new ContextResetter(context))  			{  				Stream stream = context.Stream;  				NpgsqlMediator mediator = context.Mediator;    				NpgsqlRowDescription lastRowDescription = null;    				var buffer = context.TmpBuffer;  				var queue = context.ArrayBuffer;  				List<NpgsqlError> errors = null;    				for (; ; )  				{  					// Check the first Byte of response.  					BackEndMessageCode message = (BackEndMessageCode)stream.ReadByte();  					switch (message)  					{  						case BackEndMessageCode.ErrorResponse:    							NpgsqlError error = new NpgsqlError(stream' buffer' queue);  							error.ErrorSql = mediator.SqlSent;    							if (errors == null) errors = new List<NpgsqlError>();  							errors.Add(error);    							// Return imediately if it is in the startup state or connected state as  							// there is no more messages to consume.  							// Possible error in the NpgsqlStartupState:  							//        Invalid password.  							// Possible error in the NpgsqlConnectedState:  							//        No pg_hba.conf configured.    							if (!context.RequireReadyForQuery)  							{  								throw new NpgsqlException(errors);  							}    							break;  						case BackEndMessageCode.AuthenticationRequest:    							// Get the length in case we're getting AuthenticationGSSContinue   							int authDataLength = PGUtil.ReadInt32(stream' buffer) - 8;    							AuthenticationRequestType authType = (AuthenticationRequestType)PGUtil.ReadInt32(stream' buffer);  							switch (authType)  							{  								case AuthenticationRequestType.AuthenticationOk:  									break;  								case AuthenticationRequestType.AuthenticationClearTextPassword:  									// Send the PasswordPacket.    									ChangeState(context' NpgsqlStartupState.Instance);  									context.Authenticate(context.Password);    									break;  								case AuthenticationRequestType.AuthenticationMD5Password:  									// Now do the "MD5-Thing"  									// for this the Password has to be:  									// 1. md5-hashed with the username as salt  									// 2. md5-hashed again with the salt we get from the backend      									MD5 md5 = MD5.Create();      									// 1.  									byte[] passwd = context.Password;  									byte[] saltUserName = ENCODING_UTF8.GetBytes(context.UserName);    									byte[] crypt_buf = new byte[passwd.Length + saltUserName.Length];    									passwd.CopyTo(crypt_buf' 0);  									saltUserName.CopyTo(crypt_buf' passwd.Length);      									StringBuilder sb = new StringBuilder();  									byte[] hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}      									String prehash = sb.ToString();    									byte[] prehashbytes = ENCODING_UTF8.GetBytes(prehash);  									crypt_buf = new byte[prehashbytes.Length + 4];      									stream.Read(crypt_buf' prehashbytes.Length' 4);  									// Send the PasswordPacket.  									ChangeState(context' NpgsqlStartupState.Instance);      									// 2.  									prehashbytes.CopyTo(crypt_buf' 0);    									sb = new StringBuilder("md5"); // This is needed as the backend expects md5 result starts with "md5"  									hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}    									context.Authenticate(ENCODING_UTF8.GetBytes(sb.ToString()));    									break;  #if WINDOWS && UNMANAGED    								case AuthenticationRequestType.AuthenticationSSPI:  									{  										if (context.IntegratedSecurity)  										{  											// For SSPI we have to get the IP-Address (hostname doesn't work)  											string ipAddressString = ((IPEndPoint)context.Socket.RemoteEndPoint).Address.ToString();  											context.SSPI = new SSPIHandler(ipAddressString' "POSTGRES");  											ChangeState(context' NpgsqlStartupState.Instance);  											context.Authenticate(context.SSPI.Continue(null));  											break;  										}  										else  										{  											// TODO: correct exception  											throw new Exception();  										}  									}      								case AuthenticationRequestType.AuthenticationGSSContinue:  									{  										byte[] authData = new byte[authDataLength];  										PGUtil.CheckedStreamRead(stream' authData' 0' authDataLength);  										byte[] passwd_read = context.SSPI.Continue(authData);  										if (passwd_read.Length != 0)  										{  											context.Authenticate(passwd_read);  										}  										break;  									}    #endif    								default:  									// Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now.  									if (errors == null) errors = new List<NpgsqlError>();  									errors.Add(  										new NpgsqlError(String.Format(resman.GetString("Exception_AuthenticationMethodNotSupported")' authType)));  									throw new NpgsqlException(errors);  							}  							break;  						case BackEndMessageCode.RowDescription:  							yield return lastRowDescription = new NpgsqlRowDescription(stream' context.OidToNameMapping' context.CompatVersion' buffer' queue);  							break;  						case BackEndMessageCode.ParameterDescription:    							// Do nothing'for instance'  just read...  							int length = PGUtil.ReadInt32(stream' buffer);  							int nb_param = PGUtil.ReadInt16(stream' buffer);  							//WTF  							for (int i = 0; i < nb_param; i++)  							{  								int typeoid = PGUtil.ReadInt32(stream' buffer);  							}    							break;    						case BackEndMessageCode.DataRow:  							yield return new ForwardsOnlyRow(new StringRowReader(lastRowDescription' stream' buffer' queue));  							break;    						case BackEndMessageCode.ReadyForQuery:    							// Possible status bytes returned:  							//   I = Idle (no transaction active).  							//   T = In transaction' ready for more.  							//   E = Error in transaction' queries will fail until transaction aborted.  							// Just eat the status byte' we have no use for it at this time.  							PGUtil.ReadInt32(stream' buffer);  							stream.ReadByte();    							ChangeState(context' NpgsqlReadyState.Instance);    							if (errors != null)  							{  								throw new NpgsqlException(errors);  							}    							yield break;    						case BackEndMessageCode.BackendKeyData:  							// BackendKeyData message.  							NpgsqlBackEndKeyData backend_keydata = new NpgsqlBackEndKeyData(stream' buffer);  							context.BackEndKeyData = backend_keydata;      							// Wait for ReadForQuery message  							break;    						case BackEndMessageCode.NoticeResponse:  							// Notices and errors are identical except that we  							// just throw notices away completely ignored.  							context.FireNotice(new NpgsqlError(stream' buffer' queue));  							break;    						case BackEndMessageCode.CompletedResponse:  							PGUtil.ReadInt32(stream' buffer);  							yield return new CompletedResponse(stream' queue);  							break;  						case BackEndMessageCode.ParseComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.BindComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.EmptyQueryResponse:  							PGUtil.ReadInt32(stream' buffer);  							break;  						case BackEndMessageCode.NotificationResponse:  							// Eat the length  							PGUtil.ReadInt32(stream' buffer);  							context.FireNotification(new NpgsqlNotificationEventArgs(stream' true' buffer' queue));  							if (context.IsNotificationThreadRunning)  							{  								yield break;  							}  							break;  						case BackEndMessageCode.ParameterStatus:  							NpgsqlParameterStatus parameterStatus = new NpgsqlParameterStatus(stream' queue);    							context.AddParameterStatus(parameterStatus);    							if (parameterStatus.Parameter == "server_version")  							{  								// Deal with this here so that if there are   								// changes in a future backend version' we can handle it here in the  								// protocol handler and leave everybody else put of it.  								string versionString = parameterStatus.ParameterValue.Trim();  								for (int idx = 0; idx != versionString.Length; ++idx)  								{  									char c = parameterStatus.ParameterValue[idx];  									if (!char.IsDigit(c) && c != '.')  									{  										versionString = versionString.Substring(0' idx);  										break;  									}  								}  								context.ServerVersion = new Version(versionString);  							}  							break;  						case BackEndMessageCode.NoData:  							// This nodata message may be generated by prepare commands issued with queries which doesn't return rows  							// for example insert' update or delete.  							// Just eat the message.  							PGUtil.ReadInt32(stream' buffer);  							break;    						case BackEndMessageCode.CopyInResponse:  							// Enter COPY sub protocol and start pushing data to server  							ChangeState(context' NpgsqlCopyInState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyOutResponse:  							// Enter COPY sub protocol and start pulling data from server  							ChangeState(context' NpgsqlCopyOutState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyData:  							Int32 len = PGUtil.ReadInt32(stream' buffer) - 4;  							byte[] buf = new byte[len];  							PGUtil.ReadBytes(stream' buf' 0' len);  							context.Mediator.ReceivedCopyData = buf;  							yield break; // read data from server one chunk at a time while staying in copy operation mode    						case BackEndMessageCode.CopyDone:  							PGUtil.ReadInt32(stream' buffer); // CopyDone can not have content so this is always 4  							// This will be followed by normal CommandComplete + ReadyForQuery so no op needed  							break;    						case BackEndMessageCode.IO_ERROR:  							// Connection broken. Mono returns -1 instead of throwing an exception as ms.net does.  							throw new IOException();    						default:  							// This could mean a number of things  							//   We've gotten out of sync with the backend?  							//   We need to implement this type?  							//   Backend has gone insane?  							// FIXME  							// what exception should we really throw here?  							throw new NotSupportedException(String.Format("Backend sent unrecognized response type: {0}"' (Char)message));  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The following statement contains a magic number: using (new ContextResetter(context))  			{  				Stream stream = context.Stream;  				NpgsqlMediator mediator = context.Mediator;    				NpgsqlRowDescription lastRowDescription = null;    				var buffer = context.TmpBuffer;  				var queue = context.ArrayBuffer;  				List<NpgsqlError> errors = null;    				for (; ; )  				{  					// Check the first Byte of response.  					BackEndMessageCode message = (BackEndMessageCode)stream.ReadByte();  					switch (message)  					{  						case BackEndMessageCode.ErrorResponse:    							NpgsqlError error = new NpgsqlError(stream' buffer' queue);  							error.ErrorSql = mediator.SqlSent;    							if (errors == null) errors = new List<NpgsqlError>();  							errors.Add(error);    							// Return imediately if it is in the startup state or connected state as  							// there is no more messages to consume.  							// Possible error in the NpgsqlStartupState:  							//        Invalid password.  							// Possible error in the NpgsqlConnectedState:  							//        No pg_hba.conf configured.    							if (!context.RequireReadyForQuery)  							{  								throw new NpgsqlException(errors);  							}    							break;  						case BackEndMessageCode.AuthenticationRequest:    							// Get the length in case we're getting AuthenticationGSSContinue   							int authDataLength = PGUtil.ReadInt32(stream' buffer) - 8;    							AuthenticationRequestType authType = (AuthenticationRequestType)PGUtil.ReadInt32(stream' buffer);  							switch (authType)  							{  								case AuthenticationRequestType.AuthenticationOk:  									break;  								case AuthenticationRequestType.AuthenticationClearTextPassword:  									// Send the PasswordPacket.    									ChangeState(context' NpgsqlStartupState.Instance);  									context.Authenticate(context.Password);    									break;  								case AuthenticationRequestType.AuthenticationMD5Password:  									// Now do the "MD5-Thing"  									// for this the Password has to be:  									// 1. md5-hashed with the username as salt  									// 2. md5-hashed again with the salt we get from the backend      									MD5 md5 = MD5.Create();      									// 1.  									byte[] passwd = context.Password;  									byte[] saltUserName = ENCODING_UTF8.GetBytes(context.UserName);    									byte[] crypt_buf = new byte[passwd.Length + saltUserName.Length];    									passwd.CopyTo(crypt_buf' 0);  									saltUserName.CopyTo(crypt_buf' passwd.Length);      									StringBuilder sb = new StringBuilder();  									byte[] hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}      									String prehash = sb.ToString();    									byte[] prehashbytes = ENCODING_UTF8.GetBytes(prehash);  									crypt_buf = new byte[prehashbytes.Length + 4];      									stream.Read(crypt_buf' prehashbytes.Length' 4);  									// Send the PasswordPacket.  									ChangeState(context' NpgsqlStartupState.Instance);      									// 2.  									prehashbytes.CopyTo(crypt_buf' 0);    									sb = new StringBuilder("md5"); // This is needed as the backend expects md5 result starts with "md5"  									hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}    									context.Authenticate(ENCODING_UTF8.GetBytes(sb.ToString()));    									break;  #if WINDOWS && UNMANAGED    								case AuthenticationRequestType.AuthenticationSSPI:  									{  										if (context.IntegratedSecurity)  										{  											// For SSPI we have to get the IP-Address (hostname doesn't work)  											string ipAddressString = ((IPEndPoint)context.Socket.RemoteEndPoint).Address.ToString();  											context.SSPI = new SSPIHandler(ipAddressString' "POSTGRES");  											ChangeState(context' NpgsqlStartupState.Instance);  											context.Authenticate(context.SSPI.Continue(null));  											break;  										}  										else  										{  											// TODO: correct exception  											throw new Exception();  										}  									}      								case AuthenticationRequestType.AuthenticationGSSContinue:  									{  										byte[] authData = new byte[authDataLength];  										PGUtil.CheckedStreamRead(stream' authData' 0' authDataLength);  										byte[] passwd_read = context.SSPI.Continue(authData);  										if (passwd_read.Length != 0)  										{  											context.Authenticate(passwd_read);  										}  										break;  									}    #endif    								default:  									// Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now.  									if (errors == null) errors = new List<NpgsqlError>();  									errors.Add(  										new NpgsqlError(String.Format(resman.GetString("Exception_AuthenticationMethodNotSupported")' authType)));  									throw new NpgsqlException(errors);  							}  							break;  						case BackEndMessageCode.RowDescription:  							yield return lastRowDescription = new NpgsqlRowDescription(stream' context.OidToNameMapping' context.CompatVersion' buffer' queue);  							break;  						case BackEndMessageCode.ParameterDescription:    							// Do nothing'for instance'  just read...  							int length = PGUtil.ReadInt32(stream' buffer);  							int nb_param = PGUtil.ReadInt16(stream' buffer);  							//WTF  							for (int i = 0; i < nb_param; i++)  							{  								int typeoid = PGUtil.ReadInt32(stream' buffer);  							}    							break;    						case BackEndMessageCode.DataRow:  							yield return new ForwardsOnlyRow(new StringRowReader(lastRowDescription' stream' buffer' queue));  							break;    						case BackEndMessageCode.ReadyForQuery:    							// Possible status bytes returned:  							//   I = Idle (no transaction active).  							//   T = In transaction' ready for more.  							//   E = Error in transaction' queries will fail until transaction aborted.  							// Just eat the status byte' we have no use for it at this time.  							PGUtil.ReadInt32(stream' buffer);  							stream.ReadByte();    							ChangeState(context' NpgsqlReadyState.Instance);    							if (errors != null)  							{  								throw new NpgsqlException(errors);  							}    							yield break;    						case BackEndMessageCode.BackendKeyData:  							// BackendKeyData message.  							NpgsqlBackEndKeyData backend_keydata = new NpgsqlBackEndKeyData(stream' buffer);  							context.BackEndKeyData = backend_keydata;      							// Wait for ReadForQuery message  							break;    						case BackEndMessageCode.NoticeResponse:  							// Notices and errors are identical except that we  							// just throw notices away completely ignored.  							context.FireNotice(new NpgsqlError(stream' buffer' queue));  							break;    						case BackEndMessageCode.CompletedResponse:  							PGUtil.ReadInt32(stream' buffer);  							yield return new CompletedResponse(stream' queue);  							break;  						case BackEndMessageCode.ParseComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.BindComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.EmptyQueryResponse:  							PGUtil.ReadInt32(stream' buffer);  							break;  						case BackEndMessageCode.NotificationResponse:  							// Eat the length  							PGUtil.ReadInt32(stream' buffer);  							context.FireNotification(new NpgsqlNotificationEventArgs(stream' true' buffer' queue));  							if (context.IsNotificationThreadRunning)  							{  								yield break;  							}  							break;  						case BackEndMessageCode.ParameterStatus:  							NpgsqlParameterStatus parameterStatus = new NpgsqlParameterStatus(stream' queue);    							context.AddParameterStatus(parameterStatus);    							if (parameterStatus.Parameter == "server_version")  							{  								// Deal with this here so that if there are   								// changes in a future backend version' we can handle it here in the  								// protocol handler and leave everybody else put of it.  								string versionString = parameterStatus.ParameterValue.Trim();  								for (int idx = 0; idx != versionString.Length; ++idx)  								{  									char c = parameterStatus.ParameterValue[idx];  									if (!char.IsDigit(c) && c != '.')  									{  										versionString = versionString.Substring(0' idx);  										break;  									}  								}  								context.ServerVersion = new Version(versionString);  							}  							break;  						case BackEndMessageCode.NoData:  							// This nodata message may be generated by prepare commands issued with queries which doesn't return rows  							// for example insert' update or delete.  							// Just eat the message.  							PGUtil.ReadInt32(stream' buffer);  							break;    						case BackEndMessageCode.CopyInResponse:  							// Enter COPY sub protocol and start pushing data to server  							ChangeState(context' NpgsqlCopyInState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyOutResponse:  							// Enter COPY sub protocol and start pulling data from server  							ChangeState(context' NpgsqlCopyOutState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyData:  							Int32 len = PGUtil.ReadInt32(stream' buffer) - 4;  							byte[] buf = new byte[len];  							PGUtil.ReadBytes(stream' buf' 0' len);  							context.Mediator.ReceivedCopyData = buf;  							yield break; // read data from server one chunk at a time while staying in copy operation mode    						case BackEndMessageCode.CopyDone:  							PGUtil.ReadInt32(stream' buffer); // CopyDone can not have content so this is always 4  							// This will be followed by normal CommandComplete + ReadyForQuery so no op needed  							break;    						case BackEndMessageCode.IO_ERROR:  							// Connection broken. Mono returns -1 instead of throwing an exception as ms.net does.  							throw new IOException();    						default:  							// This could mean a number of things  							//   We've gotten out of sync with the backend?  							//   We need to implement this type?  							//   Backend has gone insane?  							// FIXME  							// what exception should we really throw here?  							throw new NotSupportedException(String.Format("Backend sent unrecognized response type: {0}"' (Char)message));  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The following statement contains a magic number: using (new ContextResetter(context))  			{  				Stream stream = context.Stream;  				NpgsqlMediator mediator = context.Mediator;    				NpgsqlRowDescription lastRowDescription = null;    				var buffer = context.TmpBuffer;  				var queue = context.ArrayBuffer;  				List<NpgsqlError> errors = null;    				for (; ; )  				{  					// Check the first Byte of response.  					BackEndMessageCode message = (BackEndMessageCode)stream.ReadByte();  					switch (message)  					{  						case BackEndMessageCode.ErrorResponse:    							NpgsqlError error = new NpgsqlError(stream' buffer' queue);  							error.ErrorSql = mediator.SqlSent;    							if (errors == null) errors = new List<NpgsqlError>();  							errors.Add(error);    							// Return imediately if it is in the startup state or connected state as  							// there is no more messages to consume.  							// Possible error in the NpgsqlStartupState:  							//        Invalid password.  							// Possible error in the NpgsqlConnectedState:  							//        No pg_hba.conf configured.    							if (!context.RequireReadyForQuery)  							{  								throw new NpgsqlException(errors);  							}    							break;  						case BackEndMessageCode.AuthenticationRequest:    							// Get the length in case we're getting AuthenticationGSSContinue   							int authDataLength = PGUtil.ReadInt32(stream' buffer) - 8;    							AuthenticationRequestType authType = (AuthenticationRequestType)PGUtil.ReadInt32(stream' buffer);  							switch (authType)  							{  								case AuthenticationRequestType.AuthenticationOk:  									break;  								case AuthenticationRequestType.AuthenticationClearTextPassword:  									// Send the PasswordPacket.    									ChangeState(context' NpgsqlStartupState.Instance);  									context.Authenticate(context.Password);    									break;  								case AuthenticationRequestType.AuthenticationMD5Password:  									// Now do the "MD5-Thing"  									// for this the Password has to be:  									// 1. md5-hashed with the username as salt  									// 2. md5-hashed again with the salt we get from the backend      									MD5 md5 = MD5.Create();      									// 1.  									byte[] passwd = context.Password;  									byte[] saltUserName = ENCODING_UTF8.GetBytes(context.UserName);    									byte[] crypt_buf = new byte[passwd.Length + saltUserName.Length];    									passwd.CopyTo(crypt_buf' 0);  									saltUserName.CopyTo(crypt_buf' passwd.Length);      									StringBuilder sb = new StringBuilder();  									byte[] hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}      									String prehash = sb.ToString();    									byte[] prehashbytes = ENCODING_UTF8.GetBytes(prehash);  									crypt_buf = new byte[prehashbytes.Length + 4];      									stream.Read(crypt_buf' prehashbytes.Length' 4);  									// Send the PasswordPacket.  									ChangeState(context' NpgsqlStartupState.Instance);      									// 2.  									prehashbytes.CopyTo(crypt_buf' 0);    									sb = new StringBuilder("md5"); // This is needed as the backend expects md5 result starts with "md5"  									hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}    									context.Authenticate(ENCODING_UTF8.GetBytes(sb.ToString()));    									break;  #if WINDOWS && UNMANAGED    								case AuthenticationRequestType.AuthenticationSSPI:  									{  										if (context.IntegratedSecurity)  										{  											// For SSPI we have to get the IP-Address (hostname doesn't work)  											string ipAddressString = ((IPEndPoint)context.Socket.RemoteEndPoint).Address.ToString();  											context.SSPI = new SSPIHandler(ipAddressString' "POSTGRES");  											ChangeState(context' NpgsqlStartupState.Instance);  											context.Authenticate(context.SSPI.Continue(null));  											break;  										}  										else  										{  											// TODO: correct exception  											throw new Exception();  										}  									}      								case AuthenticationRequestType.AuthenticationGSSContinue:  									{  										byte[] authData = new byte[authDataLength];  										PGUtil.CheckedStreamRead(stream' authData' 0' authDataLength);  										byte[] passwd_read = context.SSPI.Continue(authData);  										if (passwd_read.Length != 0)  										{  											context.Authenticate(passwd_read);  										}  										break;  									}    #endif    								default:  									// Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now.  									if (errors == null) errors = new List<NpgsqlError>();  									errors.Add(  										new NpgsqlError(String.Format(resman.GetString("Exception_AuthenticationMethodNotSupported")' authType)));  									throw new NpgsqlException(errors);  							}  							break;  						case BackEndMessageCode.RowDescription:  							yield return lastRowDescription = new NpgsqlRowDescription(stream' context.OidToNameMapping' context.CompatVersion' buffer' queue);  							break;  						case BackEndMessageCode.ParameterDescription:    							// Do nothing'for instance'  just read...  							int length = PGUtil.ReadInt32(stream' buffer);  							int nb_param = PGUtil.ReadInt16(stream' buffer);  							//WTF  							for (int i = 0; i < nb_param; i++)  							{  								int typeoid = PGUtil.ReadInt32(stream' buffer);  							}    							break;    						case BackEndMessageCode.DataRow:  							yield return new ForwardsOnlyRow(new StringRowReader(lastRowDescription' stream' buffer' queue));  							break;    						case BackEndMessageCode.ReadyForQuery:    							// Possible status bytes returned:  							//   I = Idle (no transaction active).  							//   T = In transaction' ready for more.  							//   E = Error in transaction' queries will fail until transaction aborted.  							// Just eat the status byte' we have no use for it at this time.  							PGUtil.ReadInt32(stream' buffer);  							stream.ReadByte();    							ChangeState(context' NpgsqlReadyState.Instance);    							if (errors != null)  							{  								throw new NpgsqlException(errors);  							}    							yield break;    						case BackEndMessageCode.BackendKeyData:  							// BackendKeyData message.  							NpgsqlBackEndKeyData backend_keydata = new NpgsqlBackEndKeyData(stream' buffer);  							context.BackEndKeyData = backend_keydata;      							// Wait for ReadForQuery message  							break;    						case BackEndMessageCode.NoticeResponse:  							// Notices and errors are identical except that we  							// just throw notices away completely ignored.  							context.FireNotice(new NpgsqlError(stream' buffer' queue));  							break;    						case BackEndMessageCode.CompletedResponse:  							PGUtil.ReadInt32(stream' buffer);  							yield return new CompletedResponse(stream' queue);  							break;  						case BackEndMessageCode.ParseComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.BindComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.EmptyQueryResponse:  							PGUtil.ReadInt32(stream' buffer);  							break;  						case BackEndMessageCode.NotificationResponse:  							// Eat the length  							PGUtil.ReadInt32(stream' buffer);  							context.FireNotification(new NpgsqlNotificationEventArgs(stream' true' buffer' queue));  							if (context.IsNotificationThreadRunning)  							{  								yield break;  							}  							break;  						case BackEndMessageCode.ParameterStatus:  							NpgsqlParameterStatus parameterStatus = new NpgsqlParameterStatus(stream' queue);    							context.AddParameterStatus(parameterStatus);    							if (parameterStatus.Parameter == "server_version")  							{  								// Deal with this here so that if there are   								// changes in a future backend version' we can handle it here in the  								// protocol handler and leave everybody else put of it.  								string versionString = parameterStatus.ParameterValue.Trim();  								for (int idx = 0; idx != versionString.Length; ++idx)  								{  									char c = parameterStatus.ParameterValue[idx];  									if (!char.IsDigit(c) && c != '.')  									{  										versionString = versionString.Substring(0' idx);  										break;  									}  								}  								context.ServerVersion = new Version(versionString);  							}  							break;  						case BackEndMessageCode.NoData:  							// This nodata message may be generated by prepare commands issued with queries which doesn't return rows  							// for example insert' update or delete.  							// Just eat the message.  							PGUtil.ReadInt32(stream' buffer);  							break;    						case BackEndMessageCode.CopyInResponse:  							// Enter COPY sub protocol and start pushing data to server  							ChangeState(context' NpgsqlCopyInState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyOutResponse:  							// Enter COPY sub protocol and start pulling data from server  							ChangeState(context' NpgsqlCopyOutState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyData:  							Int32 len = PGUtil.ReadInt32(stream' buffer) - 4;  							byte[] buf = new byte[len];  							PGUtil.ReadBytes(stream' buf' 0' len);  							context.Mediator.ReceivedCopyData = buf;  							yield break; // read data from server one chunk at a time while staying in copy operation mode    						case BackEndMessageCode.CopyDone:  							PGUtil.ReadInt32(stream' buffer); // CopyDone can not have content so this is always 4  							// This will be followed by normal CommandComplete + ReadyForQuery so no op needed  							break;    						case BackEndMessageCode.IO_ERROR:  							// Connection broken. Mono returns -1 instead of throwing an exception as ms.net does.  							throw new IOException();    						default:  							// This could mean a number of things  							//   We've gotten out of sync with the backend?  							//   We need to implement this type?  							//   Backend has gone insane?  							// FIXME  							// what exception should we really throw here?  							throw new NotSupportedException(String.Format("Backend sent unrecognized response type: {0}"' (Char)message));  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,ProcessBackendResponses_Ver_3,The following statement contains a magic number: using (new ContextResetter(context))  			{  				Stream stream = context.Stream;  				NpgsqlMediator mediator = context.Mediator;    				NpgsqlRowDescription lastRowDescription = null;    				var buffer = context.TmpBuffer;  				var queue = context.ArrayBuffer;  				List<NpgsqlError> errors = null;    				for (; ; )  				{  					// Check the first Byte of response.  					BackEndMessageCode message = (BackEndMessageCode)stream.ReadByte();  					switch (message)  					{  						case BackEndMessageCode.ErrorResponse:    							NpgsqlError error = new NpgsqlError(stream' buffer' queue);  							error.ErrorSql = mediator.SqlSent;    							if (errors == null) errors = new List<NpgsqlError>();  							errors.Add(error);    							// Return imediately if it is in the startup state or connected state as  							// there is no more messages to consume.  							// Possible error in the NpgsqlStartupState:  							//        Invalid password.  							// Possible error in the NpgsqlConnectedState:  							//        No pg_hba.conf configured.    							if (!context.RequireReadyForQuery)  							{  								throw new NpgsqlException(errors);  							}    							break;  						case BackEndMessageCode.AuthenticationRequest:    							// Get the length in case we're getting AuthenticationGSSContinue   							int authDataLength = PGUtil.ReadInt32(stream' buffer) - 8;    							AuthenticationRequestType authType = (AuthenticationRequestType)PGUtil.ReadInt32(stream' buffer);  							switch (authType)  							{  								case AuthenticationRequestType.AuthenticationOk:  									break;  								case AuthenticationRequestType.AuthenticationClearTextPassword:  									// Send the PasswordPacket.    									ChangeState(context' NpgsqlStartupState.Instance);  									context.Authenticate(context.Password);    									break;  								case AuthenticationRequestType.AuthenticationMD5Password:  									// Now do the "MD5-Thing"  									// for this the Password has to be:  									// 1. md5-hashed with the username as salt  									// 2. md5-hashed again with the salt we get from the backend      									MD5 md5 = MD5.Create();      									// 1.  									byte[] passwd = context.Password;  									byte[] saltUserName = ENCODING_UTF8.GetBytes(context.UserName);    									byte[] crypt_buf = new byte[passwd.Length + saltUserName.Length];    									passwd.CopyTo(crypt_buf' 0);  									saltUserName.CopyTo(crypt_buf' passwd.Length);      									StringBuilder sb = new StringBuilder();  									byte[] hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}      									String prehash = sb.ToString();    									byte[] prehashbytes = ENCODING_UTF8.GetBytes(prehash);  									crypt_buf = new byte[prehashbytes.Length + 4];      									stream.Read(crypt_buf' prehashbytes.Length' 4);  									// Send the PasswordPacket.  									ChangeState(context' NpgsqlStartupState.Instance);      									// 2.  									prehashbytes.CopyTo(crypt_buf' 0);    									sb = new StringBuilder("md5"); // This is needed as the backend expects md5 result starts with "md5"  									hashResult = md5.ComputeHash(crypt_buf);  									foreach (byte b in hashResult)  									{  										sb.Append(b.ToString("x2"));  									}    									context.Authenticate(ENCODING_UTF8.GetBytes(sb.ToString()));    									break;  #if WINDOWS && UNMANAGED    								case AuthenticationRequestType.AuthenticationSSPI:  									{  										if (context.IntegratedSecurity)  										{  											// For SSPI we have to get the IP-Address (hostname doesn't work)  											string ipAddressString = ((IPEndPoint)context.Socket.RemoteEndPoint).Address.ToString();  											context.SSPI = new SSPIHandler(ipAddressString' "POSTGRES");  											ChangeState(context' NpgsqlStartupState.Instance);  											context.Authenticate(context.SSPI.Continue(null));  											break;  										}  										else  										{  											// TODO: correct exception  											throw new Exception();  										}  									}      								case AuthenticationRequestType.AuthenticationGSSContinue:  									{  										byte[] authData = new byte[authDataLength];  										PGUtil.CheckedStreamRead(stream' authData' 0' authDataLength);  										byte[] passwd_read = context.SSPI.Continue(authData);  										if (passwd_read.Length != 0)  										{  											context.Authenticate(passwd_read);  										}  										break;  									}    #endif    								default:  									// Only AuthenticationClearTextPassword and AuthenticationMD5Password supported for now.  									if (errors == null) errors = new List<NpgsqlError>();  									errors.Add(  										new NpgsqlError(String.Format(resman.GetString("Exception_AuthenticationMethodNotSupported")' authType)));  									throw new NpgsqlException(errors);  							}  							break;  						case BackEndMessageCode.RowDescription:  							yield return lastRowDescription = new NpgsqlRowDescription(stream' context.OidToNameMapping' context.CompatVersion' buffer' queue);  							break;  						case BackEndMessageCode.ParameterDescription:    							// Do nothing'for instance'  just read...  							int length = PGUtil.ReadInt32(stream' buffer);  							int nb_param = PGUtil.ReadInt16(stream' buffer);  							//WTF  							for (int i = 0; i < nb_param; i++)  							{  								int typeoid = PGUtil.ReadInt32(stream' buffer);  							}    							break;    						case BackEndMessageCode.DataRow:  							yield return new ForwardsOnlyRow(new StringRowReader(lastRowDescription' stream' buffer' queue));  							break;    						case BackEndMessageCode.ReadyForQuery:    							// Possible status bytes returned:  							//   I = Idle (no transaction active).  							//   T = In transaction' ready for more.  							//   E = Error in transaction' queries will fail until transaction aborted.  							// Just eat the status byte' we have no use for it at this time.  							PGUtil.ReadInt32(stream' buffer);  							stream.ReadByte();    							ChangeState(context' NpgsqlReadyState.Instance);    							if (errors != null)  							{  								throw new NpgsqlException(errors);  							}    							yield break;    						case BackEndMessageCode.BackendKeyData:  							// BackendKeyData message.  							NpgsqlBackEndKeyData backend_keydata = new NpgsqlBackEndKeyData(stream' buffer);  							context.BackEndKeyData = backend_keydata;      							// Wait for ReadForQuery message  							break;    						case BackEndMessageCode.NoticeResponse:  							// Notices and errors are identical except that we  							// just throw notices away completely ignored.  							context.FireNotice(new NpgsqlError(stream' buffer' queue));  							break;    						case BackEndMessageCode.CompletedResponse:  							PGUtil.ReadInt32(stream' buffer);  							yield return new CompletedResponse(stream' queue);  							break;  						case BackEndMessageCode.ParseComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.BindComplete:  							// Just read up the message length.  							PGUtil.ReadInt32(stream' buffer);  							yield break;  						case BackEndMessageCode.EmptyQueryResponse:  							PGUtil.ReadInt32(stream' buffer);  							break;  						case BackEndMessageCode.NotificationResponse:  							// Eat the length  							PGUtil.ReadInt32(stream' buffer);  							context.FireNotification(new NpgsqlNotificationEventArgs(stream' true' buffer' queue));  							if (context.IsNotificationThreadRunning)  							{  								yield break;  							}  							break;  						case BackEndMessageCode.ParameterStatus:  							NpgsqlParameterStatus parameterStatus = new NpgsqlParameterStatus(stream' queue);    							context.AddParameterStatus(parameterStatus);    							if (parameterStatus.Parameter == "server_version")  							{  								// Deal with this here so that if there are   								// changes in a future backend version' we can handle it here in the  								// protocol handler and leave everybody else put of it.  								string versionString = parameterStatus.ParameterValue.Trim();  								for (int idx = 0; idx != versionString.Length; ++idx)  								{  									char c = parameterStatus.ParameterValue[idx];  									if (!char.IsDigit(c) && c != '.')  									{  										versionString = versionString.Substring(0' idx);  										break;  									}  								}  								context.ServerVersion = new Version(versionString);  							}  							break;  						case BackEndMessageCode.NoData:  							// This nodata message may be generated by prepare commands issued with queries which doesn't return rows  							// for example insert' update or delete.  							// Just eat the message.  							PGUtil.ReadInt32(stream' buffer);  							break;    						case BackEndMessageCode.CopyInResponse:  							// Enter COPY sub protocol and start pushing data to server  							ChangeState(context' NpgsqlCopyInState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyOutResponse:  							// Enter COPY sub protocol and start pulling data from server  							ChangeState(context' NpgsqlCopyOutState.Instance);  							PGUtil.ReadInt32(stream' buffer); // length redundant  							context.CurrentState.StartCopy(context' ReadCopyHeader(stream' buffer));  							yield break;  						// Either StartCopy called us again to finish the operation or control should be passed for user to feed copy data    						case BackEndMessageCode.CopyData:  							Int32 len = PGUtil.ReadInt32(stream' buffer) - 4;  							byte[] buf = new byte[len];  							PGUtil.ReadBytes(stream' buf' 0' len);  							context.Mediator.ReceivedCopyData = buf;  							yield break; // read data from server one chunk at a time while staying in copy operation mode    						case BackEndMessageCode.CopyDone:  							PGUtil.ReadInt32(stream' buffer); // CopyDone can not have content so this is always 4  							// This will be followed by normal CommandComplete + ReadyForQuery so no op needed  							break;    						case BackEndMessageCode.IO_ERROR:  							// Connection broken. Mono returns -1 instead of throwing an exception as ms.net does.  							throw new IOException();    						default:  							// This could mean a number of things  							//   We've gotten out of sync with the backend?  							//   We need to implement this type?  							//   Backend has gone insane?  							// FIXME  							// what exception should we really throw here?  							throw new NotSupportedException(String.Format("Backend sent unrecognized response type: {0}"' (Char)message));  					}  				}  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,CompletedResponse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CompletedResponse,The following statement contains a magic number: if (bRead == ' ' && buffer.GetPosition() == INSERT.Length && buffer.AreSame(INSERT))  			{  				long lioid = 0;  				for (bRead = stream.ReadByte(); bRead > 0 && bRead != ' '; bRead = stream.ReadByte())  					lioid = (lioid << 3) + (lioid << 1) + bRead - 48;  				if (bRead == ' ') LastInsertedOID = lioid;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Npgsql,CompletedResponse,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,CompletedResponse,The following statement contains a magic number: if (bRead == ' ' && buffer.GetPosition() == INSERT.Length && buffer.AreSame(INSERT))  			{  				long lioid = 0;  				for (bRead = stream.ReadByte(); bRead > 0 && bRead != ' '; bRead = stream.ReadByte())  					lioid = (lioid << 3) + (lioid << 1) + bRead - 48;  				if (bRead == ' ') LastInsertedOID = lioid;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count != 2 && count != 3)  				return false;
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count != 2 && count != 3)  				return false;
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count == 2)  			{  				queryBuilder.Append("(");  				visitExpression(methodCall.Arguments[0]);  				if (!equal)  					queryBuilder.Append(" NOT");  				queryBuilder.Append(" LIKE ");  				EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  			}  			else if (count == 3)  			{  				var cmpValue = methodCall.Arguments[2] as ConstantExpression;  				if (methodCall.Arguments[2].Type == typeof(bool) && cmpValue != null)  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					if ((bool)cmpValue.Value)  						queryBuilder.Append(" ILIKE ");  					else  						queryBuilder.Append(" LIKE ");  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else if (methodCall.Arguments[2].Type == typeof(StringComparison))  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					switch ((StringComparison)cmpValue.Value)  					{  						case StringComparison.CurrentCulture:  						case StringComparison.InvariantCulture:  						case StringComparison.Ordinal:  							queryBuilder.Append(" LIKE ");  							break;  						default:  							queryBuilder.Append(" ILIKE ");  							break;  					}  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else return false;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count == 2)  			{  				queryBuilder.Append("(");  				visitExpression(methodCall.Arguments[0]);  				if (!equal)  					queryBuilder.Append(" NOT");  				queryBuilder.Append(" LIKE ");  				EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  			}  			else if (count == 3)  			{  				var cmpValue = methodCall.Arguments[2] as ConstantExpression;  				if (methodCall.Arguments[2].Type == typeof(bool) && cmpValue != null)  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					if ((bool)cmpValue.Value)  						queryBuilder.Append(" ILIKE ");  					else  						queryBuilder.Append(" LIKE ");  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else if (methodCall.Arguments[2].Type == typeof(StringComparison))  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					switch ((StringComparison)cmpValue.Value)  					{  						case StringComparison.CurrentCulture:  						case StringComparison.InvariantCulture:  						case StringComparison.Ordinal:  							queryBuilder.Append(" LIKE ");  							break;  						default:  							queryBuilder.Append(" ILIKE ");  							break;  					}  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else return false;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count == 2)  			{  				queryBuilder.Append("(");  				visitExpression(methodCall.Arguments[0]);  				if (!equal)  					queryBuilder.Append(" NOT");  				queryBuilder.Append(" LIKE ");  				EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  			}  			else if (count == 3)  			{  				var cmpValue = methodCall.Arguments[2] as ConstantExpression;  				if (methodCall.Arguments[2].Type == typeof(bool) && cmpValue != null)  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					if ((bool)cmpValue.Value)  						queryBuilder.Append(" ILIKE ");  					else  						queryBuilder.Append(" LIKE ");  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else if (methodCall.Arguments[2].Type == typeof(StringComparison))  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					switch ((StringComparison)cmpValue.Value)  					{  						case StringComparison.CurrentCulture:  						case StringComparison.InvariantCulture:  						case StringComparison.Ordinal:  							queryBuilder.Append(" LIKE ");  							break;  						default:  							queryBuilder.Append(" ILIKE ");  							break;  					}  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else return false;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count == 2)  			{  				queryBuilder.Append("(");  				visitExpression(methodCall.Arguments[0]);  				if (!equal)  					queryBuilder.Append(" NOT");  				queryBuilder.Append(" LIKE ");  				EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  			}  			else if (count == 3)  			{  				var cmpValue = methodCall.Arguments[2] as ConstantExpression;  				if (methodCall.Arguments[2].Type == typeof(bool) && cmpValue != null)  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					if ((bool)cmpValue.Value)  						queryBuilder.Append(" ILIKE ");  					else  						queryBuilder.Append(" LIKE ");  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else if (methodCall.Arguments[2].Type == typeof(StringComparison))  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					switch ((StringComparison)cmpValue.Value)  					{  						case StringComparison.CurrentCulture:  						case StringComparison.InvariantCulture:  						case StringComparison.Ordinal:  							queryBuilder.Append(" LIKE ");  							break;  						default:  							queryBuilder.Append(" ILIKE ");  							break;  					}  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else return false;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,LikeStringComparison,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\LikeStringComparison.cs,CompareString,The following statement contains a magic number: if (count == 2)  			{  				queryBuilder.Append("(");  				visitExpression(methodCall.Arguments[0]);  				if (!equal)  					queryBuilder.Append(" NOT");  				queryBuilder.Append(" LIKE ");  				EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  			}  			else if (count == 3)  			{  				var cmpValue = methodCall.Arguments[2] as ConstantExpression;  				if (methodCall.Arguments[2].Type == typeof(bool) && cmpValue != null)  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					if ((bool)cmpValue.Value)  						queryBuilder.Append(" ILIKE ");  					else  						queryBuilder.Append(" LIKE ");  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else if (methodCall.Arguments[2].Type == typeof(StringComparison))  				{  					queryBuilder.Append("(");  					visitExpression(methodCall.Arguments[0]);  					if (!equal)  						queryBuilder.Append(" NOT");  					switch ((StringComparison)cmpValue.Value)  					{  						case StringComparison.CurrentCulture:  						case StringComparison.InvariantCulture:  						case StringComparison.Ordinal:  							queryBuilder.Append(" LIKE ");  							break;  						default:  							queryBuilder.Append(" ILIKE ");  							break;  					}  					EscapeForLike(methodCall.Arguments[1]' queryBuilder' visitExpression);  				}  				else return false;  			}
Magic Number,Revenj.DatabasePersistence.Postgres.Plugins.ExpressionSupport,StringMethods,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Plugins\ExpressionSupport\StringMethods.cs,ChooseComparison,The following statement contains a magic number: if (methodCall.Arguments.Count == 2)  			{  				var ce = methodCall.Arguments[1] as ConstantExpression;  				switch ((StringComparison)ce.Value)  				{  					case StringComparison.CurrentCulture:  					case StringComparison.InvariantCulture:  					case StringComparison.Ordinal:  						queryBuilder.Append(" LIKE ");  						break;  					default:  						queryBuilder.Append(" ILIKE ");  						break;  				}  			}  			else queryBuilder.Append(" LIKE ");
Magic Number,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetQuerySourceFromExpression,The following statement contains a magic number: if (sqe != null)  			{  				if (sqe.QueryModel.CanUseMain())  					return GetQuerySourceFromExpression(name' type' sqe.QueryModel.MainFromClause.FromExpression);  				//TODO hack za replaceanje generiranog id-a  				var subquery = SubqueryGeneratorQueryModelVisitor.ParseSubquery(sqe.QueryModel' this);  				var grouping = sqe.QueryModel.ResultOperators.FirstOrDefault(it => it is GroupResultOperator) as GroupResultOperator;  				if (grouping == null && subquery.Selects.Count == 1)  				{  					if (sqe.QueryModel.ResultOperators.Any(it => it is UnionResultOperator || it is ConcatResultOperator))  					{  						var ind = subquery.Selects[0].Sql.IndexOf(" AS ");  						if (ind > 0)  						{  							var asName = subquery.Selects[0].Sql.Substring(ind + 4).Trim().Replace("\""' "");  							if (asName != name)  								subquery.Selects[0].Sql = subquery.Selects[0].Sql.Substring(0' ind + 4) + "\"" + name + "\"";  						}  						else  						{  							subquery.Selects[0].Sql = subquery.Selects[0].Sql + " AS \"" + name + "\"";  						}  						return "(" + subquery.BuildSqlString(true) + ") \"" + name + "\"";  					}  					return "(" + subquery.BuildSqlString(true).Replace("\"" + sqe.QueryModel.MainFromClause.ItemName + "\""' "\"" + name + "\"") + ") \"" + name + "\"";  				}  				return "(" + subquery.BuildSqlString(true) + ") \"" + name + "\"";  			}
Magic Number,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,GetQuerySourceFromExpression,The following statement contains a magic number: if (sqe != null)  			{  				if (sqe.QueryModel.CanUseMain())  					return GetQuerySourceFromExpression(name' type' sqe.QueryModel.MainFromClause.FromExpression);  				//TODO hack za replaceanje generiranog id-a  				var subquery = SubqueryGeneratorQueryModelVisitor.ParseSubquery(sqe.QueryModel' this);  				var grouping = sqe.QueryModel.ResultOperators.FirstOrDefault(it => it is GroupResultOperator) as GroupResultOperator;  				if (grouping == null && subquery.Selects.Count == 1)  				{  					if (sqe.QueryModel.ResultOperators.Any(it => it is UnionResultOperator || it is ConcatResultOperator))  					{  						var ind = subquery.Selects[0].Sql.IndexOf(" AS ");  						if (ind > 0)  						{  							var asName = subquery.Selects[0].Sql.Substring(ind + 4).Trim().Replace("\""' "");  							if (asName != name)  								subquery.Selects[0].Sql = subquery.Selects[0].Sql.Substring(0' ind + 4) + "\"" + name + "\"";  						}  						else  						{  							subquery.Selects[0].Sql = subquery.Selects[0].Sql + " AS \"" + name + "\"";  						}  						return "(" + subquery.BuildSqlString(true) + ") \"" + name + "\"";  					}  					return "(" + subquery.BuildSqlString(true).Replace("\"" + sqe.QueryModel.MainFromClause.ItemName + "\""' "\"" + name + "\"") + ") \"" + name + "\"";  				}  				return "(" + subquery.BuildSqlString(true) + ") \"" + name + "\"";  			}
Magic Number,Revenj.DatabasePersistence.Postgres.QueryGeneration.QueryComposition,QueryParts,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\QueryComposition\QueryParts.cs,ProcessLimitAndOffsetOperators,The following statement contains a magic number: if (first.Count == 1)  			{  				sb.AppendLine("LIMIT 1");  				if (offset.Count == 1)  					sb.AppendLine("OFFSET " + GetSqlExpression(offset[0].Count));  			}  			else if (single.Count == 1)  			{  				if (limit.Count == 0)  					sb.Append("LIMIT 2");  				else  				{  					if (limit.TrueForAll(it => it.Count is ConstantExpression))  					{  						var min = limit.Min(it => (int)(it.Count as ConstantExpression).Value);  						if (min > 1) min = 2;  						sb.Append("LIMIT ").Append(min);  					}  					else  					{  						sb.Append("LIMIT LEAST(2'");  						sb.Append(string.Join("' "' limit.Select(it => GetSqlExpression(it.Count))));  						sb.AppendLine(")");  					}  				}  				if (offset.Count == 1)  					sb.AppendLine("OFFSET " + GetSqlExpression(offset[0].Count));  			}  			else if (limit.Count > 0 && offset.Count == 0)  			{  				sb.Append("LIMIT ");  				if (limit.Count > 1)  					sb.Append("LEAST(")  						.Append(  							string.Join(  								"' "'  								limit.Select(it => GetSqlExpression(it.Count))))  						.AppendLine(")");  				else sb.AppendLine(GetSqlExpression(limit[0].Count));  			}  			else if (limit.Count == 0 && offset.Count > 0)  			{  				sb.AppendLine("OFFSET " + GetSqlExpression(offset[0].Count));  				for (int i = 1; i < offset.Count; i++)  					sb.Append(" + " + GetSqlExpression(offset[i].Count));  			}  			else if (limit.Count == 1 && offset.Count == 1)  			{  				if (ResultOperators.IndexOf(limit[0]) < ResultOperators.IndexOf(offset[0]))  					sb.AppendLine("LIMIT ({0} - {1})".With(GetSqlExpression(limit[0].Count)' GetSqlExpression(offset[0].Count)));  				else  					sb.AppendLine("LIMIT " + GetSqlExpression(limit[0].Count));  				sb.AppendLine("OFFSET " + GetSqlExpression(offset[0].Count));  			}  			else if (limit.Count > 1 || offset.Count > 1)  				throw new NotSupportedException("Unsupported combination of limits and offsets in query. More than one offset and more than one limit found.");
Magic Number,Revenj.DomainPatterns,WeakCache<TValue>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Cache\WeakCache.cs,Find,The following statement contains a magic number: if (dict == null)  			{  				dict = new ConcurrentDictionary<string' TValue>(1' 17);  				Cache.Target = dict;  			}  			else  			{  				TValue item;  				if (dict.TryGetValue(uri' out item))  					return item;  			}
Magic Number,Revenj.DomainPatterns,WeakCache<TValue>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Cache\WeakCache.cs,Find,The following statement contains a magic number: if (dict == null)  			{  				dict = new ConcurrentDictionary<string' TValue>(1' 17);  				Cache.Target = dict;  			}  			else  			{  				foreach (var uri in list)  				{  					TValue item;  					if (dict.TryGetValue(uri' out item))  						result.Add(item);  				}  			}
Magic Number,Revenj.DomainPatterns,WeakCache<TValue>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Cache\WeakCache.cs,FindOne,The following statement contains a magic number: if (dict == null)  			{  				dict = new ConcurrentDictionary<string' TValue>(1' 17);  				Cache.Target = dict;  			}  			else  			{  				TValue item;  				if (dict.TryGetValue(uri[0]' out item))  					return new[] { item };  			}
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetSingleLookup,The following statement contains a magic number: if (SingleLookups == null) SingleLookups = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetManyLookup,The following statement contains a magic number: if (ManyLookups == null) ManyLookups = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetQuerySource,The following statement contains a magic number: if (QuerySources == null) QuerySources = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetQueryRepository,The following statement contains a magic number: if (SearchSources == null) SearchSources = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetRepository,The following statement contains a magic number: if (Repositories == null) Repositories = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetStore,The following statement contains a magic number: if (EventStores == null) EventStores = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DataContext,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DataContext.cs,GetHistory,The following statement contains a magic number: if (Histories == null) Histories = new ConcurrentDictionary<Type' object>(1' 7);
Magic Number,Revenj.DomainPatterns,DomainModel,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DomainModel.cs,DomainModel,The following statement contains a magic number: try  			{  				foreach (var asm in assemblies)  					foreach (var type in asm.GetTypes())  						if (typeof(ISystemAspect).IsAssignableFrom(type))  						{  							var aspect = (ISystemAspect)Activator.CreateInstance(type);  							aspect.Initialize(objectFactory);  						}  			}  			catch (ReflectionTypeLoadException ex)  			{  				var first = (ex.LoaderExceptions ?? new Exception[0]).Take(5).ToList();  				throw new ApplicationException(string.Format(@"Can't load types:   {0}  "' string.Join(Environment.NewLine' first.Select(it => it.Message)))' ex);  			}
Magic Number,Revenj.DomainPatterns,DomainTypeResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DomainTypeResolver.cs,TryToResolveTypeWithoutStrongName,The following statement contains a magic number: var mainTypeName = name.Substring(0' first) + name.Substring(last + 2);
Magic Number,Revenj.DomainPatterns,DomainTypeResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DomainTypeResolver.cs,TryToResolveTypeWithoutStrongName,The following statement contains a magic number: var subTypeNames = name.Substring(first + 2' last - first - 2).Split(new[] { "]'[" }' StringSplitOptions.None);
Magic Number,Revenj.DomainPatterns,DomainTypeResolver,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\DomainTypeResolver.cs,TryToResolveTypeWithoutStrongName,The following statement contains a magic number: var subTypeNames = name.Substring(first + 2' last - first - 2).Split(new[] { "]'[" }' StringSplitOptions.None);
Magic Number,Revenj.DomainPatterns,GlobalEventStore,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\GlobalEventStore.cs,ResolveAndSetupStore,The following statement contains a magic number: try  			{  				var store = locator.Resolve<IDomainEventStore<TEvent>>();  				return events => store.Submit(events.Cast<TEvent>());  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5503'  					"Failed to resolve event store for: {0}. Queued event will not be submitted. Error: {1}"'  					typeof(TEvent).FullName'  					ex);  				return _ => { };  			}
Magic Number,Revenj.DomainPatterns,GlobalEventStore,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\GlobalEventStore.cs,WaitForEvents,The following statement contains a magic number: var bulk = new List<IDomainEvent>(1000);
Magic Number,Revenj.DomainPatterns,GlobalEventStore,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\GlobalEventStore.cs,WaitForEvents,The following statement contains a magic number: while (!IsDisposed)  			{  				try  				{  					if (bulk.Count == 0)  					{  						info = EventQueue.Take();  						bulk.Add(info.Event);  					}  					lastType = info.Type;  					if (lastType == null)  						break;  					int i = 0;  					while (i++ < 1000 && EventQueue.Count > 0)  					{  						info = EventQueue.Take();  						if (info.Type != lastType)  							break;  						bulk.Add(info.Event);  					}  					var action = ResolveStore(lastType);  					try { action(bulk); }  					finally { bulk.Clear(); }  					if (info.Type != lastType)  						bulk.Add(info.Event);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(  						TraceEventType.Error'  						5505'  						"Error during event processing: {0}"'  						ex);  				}  			}
Magic Number,Revenj.DomainPatterns,GlobalEventStore,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\GlobalEventStore.cs,WaitForEvents,The following statement contains a magic number: while (!IsDisposed)  			{  				try  				{  					if (bulk.Count == 0)  					{  						info = EventQueue.Take();  						bulk.Add(info.Event);  					}  					lastType = info.Type;  					if (lastType == null)  						break;  					int i = 0;  					while (i++ < 1000 && EventQueue.Count > 0)  					{  						info = EventQueue.Take();  						if (info.Type != lastType)  							break;  						bulk.Add(info.Event);  					}  					var action = ResolveStore(lastType);  					try { action(bulk); }  					finally { bulk.Clear(); }  					if (info.Type != lastType)  						bulk.Add(info.Event);  				}  				catch (Exception ex)  				{  					TraceSource.TraceEvent(  						TraceEventType.Error'  						5505'  						"Error during event processing: {0}"'  						ex);  				}  			}
Magic Number,Revenj.DomainPatterns,GlobalEventStore,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\GlobalEventStore.cs,Dispose,The following statement contains a magic number: try  			{  				if (Loop.IsAlive)  					Loop.Abort();  			}  			catch (Exception ex)  			{  				TraceSource.TraceEvent(  					TraceEventType.Error'  					5508'  					"Error during event loop closing: {0}"'  					ex);  			}
Magic Number,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,AspectRepository,The following statement contains a magic number: ComponentServices = new ConcurrentDictionary<IComponentRegistration' Type[]>(1' 127);
Magic Number,Revenj.Extensibility,AspectRepository,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Aspects\AspectRepository.cs,Initialize,The following statement contains a magic number: lock (this)  			{  				if (!RequireInitialization)  					return;  				RegisteredCreationTypes = new HashSet<Type>();  				AllCreationTypes = new HashSet<Type>();  				RegisteredMethodTypes = new HashSet<Type>();  				AllMethodTypes = new HashSet<Type>();  				RegisteredRules = new List<KeyValuePair<Func<Type' bool>' IInterceptor>>();  				AllRulesTypes = new List<KeyValuePair<Func<Type' bool>' IInterceptor>>();  				BeforeCreationAspectDictionary = new Dictionary<Type' List<Action>>();  				AfterCreationAspectDictionary = new Dictionary<Type' List<Action<object>>>();  				BeforeMethodAspectDictionary = new Dictionary<KeyValuePair<Type' MethodInfo>' List<Action<object' object[]>>>();  				AroundMethodAspectDictionary = new Dictionary<KeyValuePair<Type' MethodInfo>' List<Func<object' object[]' Func<object[]' object>' object>>>();  				AfterMethodAspectDictionary = new Dictionary<KeyValuePair<Type' MethodInfo>' List<Func<object' object[]' object' object>>>();  				InterceptorsDictionary = new Dictionary<Type' List<IInterceptor>>();  				ComponentServices = new ConcurrentDictionary<IComponentRegistration' Type[]>(1' 127);  				ParentRepository.RegistrationChanged += RefreshCache;  				RefreshCache(null' null);  				RequireInitialization = false;  			}
Magic Number,Revenj.Extensibility,AutofacResolution,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\AutofacMefProvider.cs,AutofacResolution,The following statement contains a magic number: this.Container = container.BeginLifetimeScope(builder =>  				{  					try  					{  						var assemblies = FindPlugins(configuration);  						foreach (var asm in assemblies)  							builder.RegisterComposablePartCatalog(new AssemblyCatalog(asm));  					}  					catch (System.Reflection.ReflectionTypeLoadException ex)  					{  						var sb = new StringBuilder();  						foreach (var le in ex.LoaderExceptions.Take(5))  						{  							sb.AppendLine(le.Message);  							var fle = le as FileLoadException;  							if (fle != null && fle.FusionLog != null)  								sb.AppendLine(fle.FusionLog);  						}  						System.Diagnostics.Debug.WriteLine(ex.ToString());  						var firstFive = sb.ToString();  						System.Diagnostics.Debug.WriteLine(firstFive);  						throw new FrameworkException("Error loading plugins. Can't load plugins. " + firstFive' ex);  					}  					catch (FrameworkException) { throw; }  					catch (Exception ex)  					{  						System.Diagnostics.Debug.WriteLine(ex.ToString());  						throw new FrameworkException("Error loading plugins."' ex);  					}  				});
Magic Number,Revenj.Extensibility,DryIocResolution,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,DryIocResolution,The following statement contains a magic number: try  				{  					var assemblies = FindPlugins(configuration);  					if (assemblies.Count > 0)  					{  						var exports = AttributedModel.Scan(assemblies);  						foreach (var info in exports)  						{  							if (!info.ImplementationType.IsStatic())  							{  								var factory = info.CreateFactory();  								for (var i = 0; i < info.Exports.Length; i++)  								{  									var export = info.Exports[i];  									Container.Register(factory'  										export.ServiceType' export.ServiceKeyInfo.Key' IfAlreadyRegistered.AppendNotKeyed' true);  								}  							}    							if (info.IsFactory)  								AttributedModel.RegisterFactoryMethods(Container' info);  						}  						//this.Container.RegisterExports(exports);  					}  				}  				catch (System.Reflection.ReflectionTypeLoadException ex)  				{  					var firstFive = string.Join(Environment.NewLine' ex.LoaderExceptions.Take(5).Select(it => it.Message));  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					System.Diagnostics.Debug.WriteLine(firstFive);  					throw new FrameworkException("Error loading plugins. Can't load plugins. {0}".With(firstFive)' ex);  				}  				catch (Exception ex)  				{  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					throw new FrameworkException("Error loading plugins."' ex);  				}
Magic Number,Revenj.Extensibility.Autofac.Configuration,DictionaryElementTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\DictionaryElementCollection.cs,GetInstantiableType,The following statement contains a magic number: if (typeof(IDictionary).IsAssignableFrom(destinationType)                      || (destinationType.IsGenericType                      && typeof(IDictionary<'>).IsAssignableFrom(destinationType.GetGenericTypeDefinition())))                  {                      Type[] generics = destinationType.IsGenericType ? destinationType.GetGenericArguments() : new[] { typeof(string)' typeof(object) };                      if (generics.Length != 2)                          return null;                        Type dictType = typeof(Dictionary<'>).MakeGenericType(generics);                        //can we assign this?                      if (destinationType.IsAssignableFrom(dictType))                          return dictType;                  }
Magic Number,Revenj.Extensibility.Autofac.Configuration.Util,ReflectionExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Configuration\Util\ReflectionExtensions.cs,TryGetDeclaringProperty,The following statement contains a magic number: if (mi != null && mi.IsSpecialName && mi.Name.StartsWith("set_"))              {                  prop = mi.DeclaringType.GetProperty(mi.Name.Substring(4));                  return true;              }
Magic Number,Revenj.Extensibility.Autofac.Core.Activators.Reflection,AutowiringPropertyInjector,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Core\Activators\Reflection\AutowiringPropertyInjector.cs,InjectProperties,The following statement contains a magic number: foreach (var property in instanceType.GetProperties(  				BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty))  			{  				var propertyType = property.PropertyType;    				if (propertyType.IsValueType && !propertyType.IsEnum)  					continue;    				if (property.GetIndexParameters().Length != 0)  					continue;    				if (!context.IsRegistered(propertyType))  					continue;    				var accessors = property.GetAccessors(false);  				if (accessors.Length == 1 && accessors[0].ReturnType != typeof(void))  					continue;    				if (!overrideSetValues &&  					accessors.Length == 2 &&  					(property.GetValue(instance' null) != null))  					continue;    				IComponentRegistration registration;  				var service = new TypedService(propertyType);  				if (!context.ComponentRegistry.TryGetRegistration(service' out registration))  					throw new ComponentNotRegisteredException(service);    				var lookup = context.ResolveLookup(service' registration' Enumerable.Empty<Parameter>());  				try  				{  					if (lookup.Preparing)  						lookup.SharedInstanceActivation += (s' ea) => property.SetValue(instance' s' null);  					else  					{  						var propertyValue = lookup.Factory();  						property.SetValue(instance' propertyValue' null);  					}  				}  				catch (DependencyResolutionException dre)  				{  					dre.Lookups.Push(lookup);  					throw;  				}  			}
Magic Number,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,GetParameterMapping,The following statement contains a magic number: if (configuredParameterMapping == ParameterMapping.Adaptive)  			{  				var name = delegateType.Name;  				return name.Length > 5 && name[0] == 'F' && name[1] == 'u' && name[2] == 'n' && name[3] == 'c' && name[4] == '`'  					? ParameterMapping.ByType  					: ParameterMapping.ByName;  			}
Magic Number,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,GetParameterMapping,The following statement contains a magic number: if (configuredParameterMapping == ParameterMapping.Adaptive)  			{  				var name = delegateType.Name;  				return name.Length > 5 && name[0] == 'F' && name[1] == 'u' && name[2] == 'n' && name[3] == 'c' && name[4] == '`'  					? ParameterMapping.ByType  					: ParameterMapping.ByName;  			}
Magic Number,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,GetParameterMapping,The following statement contains a magic number: if (configuredParameterMapping == ParameterMapping.Adaptive)  			{  				var name = delegateType.Name;  				return name.Length > 5 && name[0] == 'F' && name[1] == 'u' && name[2] == 'n' && name[3] == 'c' && name[4] == '`'  					? ParameterMapping.ByType  					: ParameterMapping.ByName;  			}
Magic Number,Revenj.Extensibility.Autofac.Features.GeneratedFactories,FactoryGenerator,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Features\GeneratedFactories\FactoryGenerator.cs,GetParameterMapping,The following statement contains a magic number: if (configuredParameterMapping == ParameterMapping.Adaptive)  			{  				var name = delegateType.Name;  				return name.Length > 5 && name[0] == 'F' && name[1] == 'u' && name[2] == 'n' && name[3] == 'c' && name[4] == '`'  					? ParameterMapping.ByType  					: ParameterMapping.ByName;  			}
Magic Number,Revenj.Extensibility.Autofac.Integration.Mef,RegistrationExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Integration\Mef\RegistrationExtensions.cs,FindType,The following statement contains a magic number: try  			{  				return assemblies  					.Select(a => a.GetType(exportTypeIdentity' false))  					.Where(t => t != null)  					.SingleOrDefault();  			}  			catch (InvalidOperationException)  			{  				var all = assemblies  					.Select(a => a.GetType(exportTypeIdentity' false))  					.Where(t => t != null)  					.Select(t => t.Assembly.FullName)  					.ToList();  				throw new InvalidOperationException("Multiple packages (" + all.Count() + ") for " + exportTypeIdentity + " found in plugins: " + string.Join("' "' all.Take(3)));  			}
Magic Number,Revenj.Extensibility.Autofac.Util,ReflectionExtensions,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Autofac\Util\ReflectionExtensions.cs,TryGetDeclaringProperty,The following statement contains a magic number: if (mi != null && mi.IsSpecialName && mi.Name.StartsWith("set_"))  			{  				prop = mi.DeclaringType.GetProperty(mi.Name.Substring(4));  				return true;  			}
Magic Number,DryIoc,ReflectionTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetImplementedTypes,The following statement contains a magic number: if (baseType == null || baseType == typeof(object))  				results = new Type[sourcePlusInterfaceCount + includingObjectType];  			else  			{  				List<Type> baseBaseTypes = null;  				for (var bb = baseType.GetTypeInfo().BaseType; bb != null && bb != typeof(object); bb = bb.GetTypeInfo().BaseType)  					(baseBaseTypes ?? (baseBaseTypes = new List<Type>(2))).Add(bb);    				if (baseBaseTypes == null)  					results = new Type[sourcePlusInterfaceCount + includingObjectType + 1];  				else  				{  					results = new Type[sourcePlusInterfaceCount + baseBaseTypes.Count + includingObjectType + 1];  					baseBaseTypes.CopyTo(results' sourcePlusInterfaceCount + 1);  				}    				results[sourcePlusInterfaceCount] = baseType;  			}
Magic Number,DryIoc,KV<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((object)Key == null ? 0 : Key.GetHashCode() * 397)  					 ^ ((object)Value == null ? 0 : Value.GetHashCode());  			}
Magic Number,DryIoc,ImTreeMapIntToObj,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc,ImTreeMapIntToObj,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc.Reflection,ReflectionTools,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetImplementedTypes,The following statement contains a magic number: if (baseType == null || baseType == typeof(object))  				results = new Type[sourcePlusInterfaceCount + includingObjectType];  			else  			{  				List<Type> baseBaseTypes = null;  				for (var bb = baseType.GetTypeInfo().BaseType; bb != null && bb != typeof(object); bb = bb.GetTypeInfo().BaseType)  					(baseBaseTypes ?? (baseBaseTypes = new List<Type>(2))).Add(bb);    				if (baseBaseTypes == null)  					results = new Type[sourcePlusInterfaceCount + includingObjectType + 1];  				else  				{  					results = new Type[sourcePlusInterfaceCount + baseBaseTypes.Count + includingObjectType + 1];  					baseBaseTypes.CopyTo(results' sourcePlusInterfaceCount + 1);  				}    				results[sourcePlusInterfaceCount] = baseType;  			}
Magic Number,DryIoc.Reflection,KV<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((object)Key == null ? 0 : Key.GetHashCode() * 397)  					 ^ ((object)Value == null ? 0 : Value.GetHashCode());  			}
Magic Number,DryIoc.Reflection,ImTreeMapIntToObj,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc.Reflection,ImTreeMapIntToObj,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc.Reflection,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc.Reflection,ImTreeMap<K;V>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,KeepBalanced,The following statement contains a magic number: return delta >= 2 ? With(Left.Right.Height - Left.Left.Height == 1 ? Left.RotateLeft() : Left' Right).RotateRight()  				: (delta <= -2 ? With(Left' Right.Left.Height - Right.Right.Height == 1 ? Right.RotateRight() : Right).RotateLeft()  				: this);
Magic Number,DryIoc.MefAttributedModel,DryIocResolution,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,DryIocResolution,The following statement contains a magic number: try  				{  					var assemblies = FindPlugins(configuration);  					if (assemblies.Count > 0)  					{  						var exports = AttributedModel.Scan(assemblies);  						foreach (var info in exports)  						{  							if (!info.ImplementationType.IsStatic())  							{  								var factory = info.CreateFactory();  								for (var i = 0; i < info.Exports.Length; i++)  								{  									var export = info.Exports[i];  									Container.Register(factory'  										export.ServiceType' export.ServiceKeyInfo.Key' IfAlreadyRegistered.AppendNotKeyed' true);  								}  							}    							if (info.IsFactory)  								AttributedModel.RegisterFactoryMethods(Container' info);  						}  						//this.Container.RegisterExports(exports);  					}  				}  				catch (System.Reflection.ReflectionTypeLoadException ex)  				{  					var firstFive = string.Join(Environment.NewLine' ex.LoaderExceptions.Take(5).Select(it => it.Message));  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					System.Diagnostics.Debug.WriteLine(firstFive);  					throw new FrameworkException("Error loading plugins. Can't load plugins. {0}".With(firstFive)' ex);  				}  				catch (Exception ex)  				{  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					throw new FrameworkException("Error loading plugins."' ex);  				}
Magic Number,DryIoc.MefAttributedModel,DryIocResolution,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Plugins\DryIocMefProvider.cs,DryIocResolution,The following statement contains a magic number: try  				{  					var assemblies = FindPlugins(configuration);  					if (assemblies.Count > 0)  					{  						var exports = AttributedModel.Scan(assemblies);  						foreach (var info in exports)  						{  							if (!info.ImplementationType.IsStatic())  							{  								var factory = info.CreateFactory();  								for (var i = 0; i < info.Exports.Length; i++)  								{  									var export = info.Exports[i];  									Container.Register(factory'  										export.ServiceType' export.ServiceKeyInfo.Key' IfAlreadyRegistered.AppendNotKeyed' true);  								}  							}    							if (info.IsFactory)  								AttributedModel.RegisterFactoryMethods(Container' info);  						}  						//this.Container.RegisterExports(exports);  					}  				}  				catch (System.Reflection.ReflectionTypeLoadException ex)  				{  					var firstFive = string.Join(Environment.NewLine' ex.LoaderExceptions.Take(5).Select(it => it.Message));  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					System.Diagnostics.Debug.WriteLine(firstFive);  					throw new FrameworkException("Error loading plugins. Can't load plugins. {0}".With(firstFive)' ex);  				}  				catch (Exception ex)  				{  					System.Diagnostics.Debug.WriteLine(ex.ToString());  					throw new FrameworkException("Error loading plugins."' ex);  				}
Magic Number,Revenj.Security,RepositoryAuthentication,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Security\RepositoryAuthentication.cs,AreEqual,The following statement contains a magic number: try  			{  				bstr = Marshal.SecureStringToBSTR(right);  				int len = Marshal.ReadInt32(bstr' -4);  				var bytes = new byte[len];  				for (var i = 0; i < bytes.Length; i++)  					bytes[i] = Marshal.ReadByte(bstr' i);  				return AreEqual(left' SHA.ComputeHash(Encoding.Convert(Encoding.Unicode' Encoding.UTF8' bytes)));  			}  			finally  			{  				if (bstr != IntPtr.Zero) Marshal.ZeroFreeBSTR(bstr);  			}
Magic Number,Revenj.Serialization,BinarySerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\BinarySerialization.cs,Decompress,The following statement contains a magic number: var array = new byte[8192];
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,Serialize,The following statement contains a magic number: if (cms != null)  			{  				sw = cms.GetWriter();  				buffer = cms.SmallBuffer;  			}  			else  			{  				sw = new InvariantWriter(s);  				buffer = new char[38];  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,JsonSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\JsonSerialization.cs,IsWhiteSpace,The following statement contains a magic number: switch (c)  			{  				case 9:  				case 10:  				case 11:  				case 12:  				case 13:  				case 32:  				case 160:  				case 5760:  				case 8192:  				case 8193:  				case 8194:  				case 8195:  				case 8196:  				case 8197:  				case 8198:  				case 8199:  				case 8200:  				case 8201:  				case 8202:  				case 8232:  				case 8233:  				case 8239:  				case 8287:  				case 12288:  					return true;  				default:  					return false;  			}
Magic Number,Revenj.Serialization,XmlSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\XmlSerialization.cs,Deserialize,The following statement contains a magic number: if (!declaredType.IsAssignableFrom(type) || atr == null)  			{  				if (declaredType.IsClass || declaredType.IsValueType)  					type = declaredType;  				else if (atr == null)  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5201' "{0}"' data);  					throw new FrameworkException(@"Couldn't resolve type from provided Xml.   Root element should embed type attribute with class name or you should provide appropriate type T to Deserialize<T> method.  Trying to deserialize {0}.".With(declaredType.FullName));  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5201' "{0}"' data);  					throw new FrameworkException(@"Can't deserialize provided Xml to {0}.   Type detected for Xml is {1}. Can't deserialize Xml to instance of {1}.".With(declaredType.FullName' type.FullName));  				}  			}
Magic Number,Revenj.Serialization,XmlSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\XmlSerialization.cs,Deserialize,The following statement contains a magic number: if (!declaredType.IsAssignableFrom(type) || atr == null)  			{  				if (declaredType.IsClass || declaredType.IsValueType)  					type = declaredType;  				else if (atr == null)  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5201' "{0}"' data);  					throw new FrameworkException(@"Couldn't resolve type from provided Xml.   Root element should embed type attribute with class name or you should provide appropriate type T to Deserialize<T> method.  Trying to deserialize {0}.".With(declaredType.FullName));  				}  				else  				{  					TraceSource.TraceEvent(TraceEventType.Verbose' 5201' "{0}"' data);  					throw new FrameworkException(@"Can't deserialize provided Xml to {0}.   Type detected for Xml is {1}. Can't deserialize Xml to instance of {1}.".With(declaredType.FullName' type.FullName));  				}  			}
Magic Number,Revenj.Serialization,XmlSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\XmlSerialization.cs,Deserialize,The following statement contains a magic number: using (var dict = XmlDictionaryReader.CreateDictionaryReader(reader))  			{  				var serializer = new DataContractSerializer(type);  				var result = serializer.ReadObject(dict' false' GenericResolver);  				if (context.Context == null)  					return result;  				//TODO NO need for actual xml serializer now  				//implement recursive descent and provide context to all objects  				using (var cms = ChunkedMemoryStream.Create())  				{  					var ns = new NetDataContractSerializer(context);  					try  					{  						ns.Serialize(cms' result);  						cms.Position = 0;  						ns.Binder = GenericBinder;  						return ns.Deserialize(cms);  					}  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5202' "{0}"' ex);  						TraceSource.TraceEvent(TraceEventType.Verbose' 5202' "{0}"' cms);  						throw;  					}  				}  			}
Magic Number,Revenj.Serialization,XmlSerialization,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\XmlSerialization.cs,Deserialize,The following statement contains a magic number: using (var dict = XmlDictionaryReader.CreateDictionaryReader(reader))  			{  				var serializer = new DataContractSerializer(type);  				var result = serializer.ReadObject(dict' false' GenericResolver);  				if (context.Context == null)  					return result;  				//TODO NO need for actual xml serializer now  				//implement recursive descent and provide context to all objects  				using (var cms = ChunkedMemoryStream.Create())  				{  					var ns = new NetDataContractSerializer(context);  					try  					{  						ns.Serialize(cms' result);  						cms.Position = 0;  						ns.Binder = GenericBinder;  						return ns.Deserialize(cms);  					}  					catch (Exception ex)  					{  						TraceSource.TraceEvent(TraceEventType.Error' 5202' "{0}"' ex);  						TraceSource.TraceEvent(TraceEventType.Verbose' 5202' "{0}"' cms);  						throw;  					}  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,BinaryConverter,The following statement contains a magic number: for (int i = 0; i < Environment.ProcessorCount / 2 + 1; i++)  				Buffers.Add(new char[65536]);
Magic Number,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,BinaryConverter,The following statement contains a magic number: for (int i = 0; i < Environment.ProcessorCount / 2 + 1; i++)  				Buffers.Add(new char[65536]);
Magic Number,Revenj.Serialization.Json.Converters,BinaryConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BinaryConverter.cs,Serialize,The following statement contains a magic number: if (value == null)  			{  				sw.Write("null");  			}  			else if (value.Length == 0)  			{  				sw.Write("\"\"");  			}  			else  			{  				char[] base64;  				var took = Buffers.TryTake(out base64);  				if (!took) base64 = new char[65536];  				var total = value.Length / BlockSizeDiv3;  				var remaining = value.Length % BlockSizeDiv3;  				int len;  				sw.Write('"');  				for (int i = 0; i < total; i++)  				{  					len = Convert.ToBase64CharArray(value' i * BlockSizeDiv3' BlockSizeDiv3' base64' 0);  					sw.Write(base64' 0' len);  				}  				len = Convert.ToBase64CharArray(value' total * BlockSizeDiv3' remaining' base64' 0);  				sw.Write(base64' 0' len);  				sw.Write('"');  				Buffers.Add(base64);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: if (TimeZoneWithDaylightSaving == null)  			{  				var offset = CurrentZone.GetUtcOffset(value);  				if (offset.Hours >= 0)  				{  					buffer[end] = '+';  					NumberConverter.Write2(offset.Hours' buffer' end + 1);  				}  				else  				{  					buffer[end] = '-';  					NumberConverter.Write2(-offset.Hours' buffer' end + 1);  				}  				buffer[end + 3] = ':';  				NumberConverter.Write2(offset.Minutes' buffer' end + 4);  			}  			else if (LocalZoneInfo.IsDaylightSavingTime(value))  			{  				buffer[end] = TimeZoneWithDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithDaylightSaving[5];  			}  			else  			{  				buffer[end] = TimeZoneWithoutDaylightSaving[0];  				buffer[end + 1] = TimeZoneWithoutDaylightSaving[1];  				buffer[end + 2] = TimeZoneWithoutDaylightSaving[2];  				buffer[end + 3] = TimeZoneWithoutDaylightSaving[3];  				buffer[end + 4] = TimeZoneWithoutDaylightSaving[4];  				buffer[end + 5] = TimeZoneWithoutDaylightSaving[5];  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: buffer[end + 6] = '"';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithLocal,The following statement contains a magic number: sw.Write(buffer' 0' end + 7);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: buffer[end + 3] = ':';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: NumberConverter.Write2(offset.Minutes' buffer' end + 4);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SaveWithOffset,The following statement contains a magic number: if (offset.Seconds != 0)  			{  				buffer[end + 6] = ':';  				NumberConverter.Write2(offset.Seconds' buffer' end + 4);  				buffer[end + 9] = '"';  				sw.Write(buffer' 0' end + 10);  			}  			else  			{  				buffer[end + 6] = '"';  				sw.Write(buffer' 0' end + 7);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: buffer[11] = '"';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: NumberConverter.Write2(value.Month' buffer' 6);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: NumberConverter.Write2(value.Day' buffer' 9);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,SerializeDate,The following statement contains a magic number: sw.Write(buffer' 0' 12);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Month' buffer' 6);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Day' buffer' 9);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Hour' buffer' 12);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Minute' buffer' 15);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Second' buffer' 18);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Kind == DateTimeKind.Local)  				{  					SaveWithLocal(value' sw' buffer' end);  				}  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else  				{  					buffer[end] = '"';  					sw.Write(buffer' 0' end + 1);  				}  			}  			else  			{  				if (value.Kind == DateTimeKind.Local)  					SaveWithLocal(value' sw' buffer' 20);  				else if (value.Kind == DateTimeKind.Utc)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else  				{  					buffer[20] = '"';  					sw.Write(buffer' 0' 21);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[5] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[8] = '-';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[11] = 'T';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[14] = ':';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: buffer[17] = ':';
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Month' buffer' 6);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Day' buffer' 9);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Hour' buffer' 12);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Minute' buffer' 15);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: NumberConverter.Write2(value.Second' buffer' 18);
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,Serialize,The following statement contains a magic number: if (nano != 0)  			{  				buffer[20] = '.';  				var div = nano / 100;  				var div2 = div / 100;  				var rem = nano - div * 100;  				int end;  				if (rem != 0)  				{  					NumberConverter.Write3(div2' buffer' 21);  					NumberConverter.Write2(div - div2 * 100' buffer' 24);  					NumberConverter.Write2(rem' buffer' 26);  					end = 28;  				}  				else  				{  					var rem2 = div - div2 * 100;  					if (rem2 != 0)  					{  						NumberConverter.Write3(div2' buffer' 21);  						NumberConverter.Write2(div - div2 * 100' buffer' 24);  						end = 26;  					}  					else  					{  						var div3 = div2 / 100;  						if (div2 != div3 * 100)  						{  							NumberConverter.Write3(div2' buffer' 21);  							end = 24;  						}  						else  						{  							buffer[21] = (char)(div3 + '0');  							end = 22;  						}  					}  				}  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[end] = 'Z';  					buffer[end + 1] = '"';  					sw.Write(buffer' 0' end + 2);  				}  				else SaveWithOffset(value.Offset' sw' buffer' end);  			}  			else  			{  				if (value.Offset == TimeSpan.Zero)  				{  					buffer[20] = 'Z';  					buffer[21] = '"';  					sw.Write(buffer' 0' 22);  				}  				else SaveWithOffset(value.Offset' sw' buffer' 20);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: for (int i = 0; i < 6 && (nextToken != '-'); i++' nextToken = sr.Read())  				year = year * 10 + (nextToken - '0');
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: for (int i = 0; i < 6 && (nextToken != '-'); i++' nextToken = sr.Read())  				year = year * 10 + (nextToken - '0');
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: int month = nextToken - 48;
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: if (nextToken != '-')  			{  				month = month * 10 + (nextToken - '0');  				if ((nextToken = sr.Read()) != '-') throw new SerializationException("Expecting '-' at position " + JsonSerialization.PositionInStream(sr) + ". Found " + (char)nextToken);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: int day = nextToken - 48;
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: if (nextToken != '"' && nextToken != ' ' && nextToken != 'T')  			{  				day = day * 10 + (nextToken - '0');  				nextToken = sr.Read();  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeDate,The following statement contains a magic number: for (int i = 0; i < 24 && nextToken != '"'; i++)  				nextToken = sr.Read();
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,DateTimeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DateTimeConverter.cs,DeserializeTimestamp,The following statement contains a magic number: try  			{  				if (i > 0 && buffer[i - 1] == 'Z')  				{  					if (i > 18 && i < 29 && buffer[4] == '-' && buffer[7] == '-'  						&& (buffer[10] == 'T' || buffer[10] == 't' || buffer[10] == ' ')  						&& buffer[13] == ':' && buffer[16] == ':' && AllDigits(buffer' 20' i - 1))  					{  						var year = 1000 * (buffer[0] - '0') + 100 * (buffer[1] - '0') + 10 * (buffer[2] - '0') + buffer[3] - '0';  						var month = 10 * (buffer[5] - '0') + buffer[6] - '0';  						var day = 10 * (buffer[8] - '0') + buffer[9] - '0';  						var hour = 10 * (buffer[11] - '0') + buffer[12] - '0';  						var min = 10 * (buffer[14] - '0') + buffer[15] - '0';  						var sec = 10 * (buffer[17] - '0') + buffer[18] - '0';  						if (buffer[19] == '.')  						{  							int nanos;  							switch (i)  							{  								case 22:  									nanos = 1000000 * (buffer[20] - 48);  									break;  								case 23:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48);  									break;  								case 24:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48);  									break;  								case 25:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48);  									break;  								case 26:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48);  									break;  								case 27:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48);  									break;  								default:  									nanos = 1000000 * (buffer[20] - 48) + 100000 * (buffer[21] - 48) + 10000 * (buffer[22] - 48) + 1000 * (buffer[23] - 48) + 100 * (buffer[24] - 48) + 10 * (buffer[25] - 48) + buffer[26] - 48;  									break;  							}  							return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc).AddTicks(nanos);  						}  						return new DateTime(year' month' day' hour' min' sec' DateTimeKind.Utc);  					}  					return DateTime.Parse(new string(buffer' 0' i)' Invariant' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal);  				}  				return DateTime.Parse(new string(buffer' 0' i)' Invariant);  			}  			catch (Exception ex)  			{  				throw new SerializationException("Error parsing timestamp at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: Lookup = new Pair[256];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: for (char c = 'a'; c <= 'f'; c++)  				Values[c - '0'] = (byte)(c - 'a' + 10);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,GuidConverter,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++)  				Values[c - '0'] = (byte)(c - 'A' + 10);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: var l = Lookup[(a >> 24) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: var l = Lookup[(a >> 24) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[2] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 16) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 16) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[3] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[4] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(a >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[5] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[6] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[a & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[7] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[8] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[9] = '-';
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(b >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(b >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[10] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[11] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[b & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[12] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[13] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[14] = '-';
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(c >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[(c >> 8) & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[15] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[16] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: l = Lookup[c & 255];
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[17] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[18] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[19] = '-';
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[20] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[21] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[22] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[23] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[24] = '-';
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[25] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[26] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[27] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[28] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[29] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[30] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[31] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[32] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[33] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[34] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[35] = l.First;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[36] = l.Second;
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: buffer[37] = '"';
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Serialize,The following statement contains a magic number: sw.Write(buffer' 0' 38);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Deserialize,The following statement contains a magic number: var i = sr.Read(buffer' 0' 33);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Deserialize,The following statement contains a magic number: if (i == 33)  				return ParseGuid32(buffer);  			else if (i == 37)  				return ParseGuid36(buffer);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Deserialize,The following statement contains a magic number: if (i == 33)  				return ParseGuid32(buffer);  			else if (i == 37)  				return ParseGuid36(buffer);
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid32,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 8; x < 12 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 12; x < 16 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[16] - '0'] << 4) + Values[buffer[17] - '0'];  				int e = (Values[buffer[18] - '0'] << 4) + Values[buffer[19] - '0'];  				int f = (Values[buffer[20] - '0'] << 4) + Values[buffer[21] - '0'];  				int g = (Values[buffer[22] - '0'] << 4) + Values[buffer[23] - '0'];  				int h = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int i = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int j = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int k = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: if (buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-')  				return new Guid(new string(buffer' 0' 36));
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: if (buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-')  				return new Guid(new string(buffer' 0' 36));
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: if (buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-')  				return new Guid(new string(buffer' 0' 36));
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: if (buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-')  				return new Guid(new string(buffer' 0' 36));
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: if (buffer[8] != '-' || buffer[13] != '-' || buffer[18] != '-' || buffer[23] != '-')  				return new Guid(new string(buffer' 0' 36));
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,GuidConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,ParseGuid36,The following statement contains a magic number: try  			{  				int a = 0;  				for (int x = 0; x < 8 && x < buffer.Length; x++)  					a = (a << 4) + Values[buffer[x] - '0'];  				int b = 0;  				for (int x = 9; x < 13 && x < buffer.Length; x++)  					b = (b << 4) + Values[buffer[x] - '0'];  				int c = 0;  				for (int x = 14; x < 18 && x < buffer.Length; x++)  					c = (c << 4) + Values[buffer[x] - '0'];  				int d = (Values[buffer[19] - '0'] << 4) + Values[buffer[20] - '0'];  				int e = (Values[buffer[21] - '0'] << 4) + Values[buffer[22] - '0'];  				int f = (Values[buffer[24] - '0'] << 4) + Values[buffer[25] - '0'];  				int g = (Values[buffer[26] - '0'] << 4) + Values[buffer[27] - '0'];  				int h = (Values[buffer[28] - '0'] << 4) + Values[buffer[29] - '0'];  				int i = (Values[buffer[30] - '0'] << 4) + Values[buffer[31] - '0'];  				int j = (Values[buffer[32] - '0'] << 4) + Values[buffer[33] - '0'];  				int k = (Values[buffer[34] - '0'] << 4) + Values[buffer[35] - '0'];  				return new Guid(a' (short)b' (short)c' (byte)d' (byte)e' (byte)f' (byte)g' (byte)h' (byte)i' (byte)j' (byte)k);  			}  			catch (IndexOutOfRangeException)  			{  				return new Guid(new string(buffer' 0' 32));  			}
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var hi = (value >> 4) & 15;
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var hi = (value >> 4) & 15;
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: var lo = value & 15;
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)(hi < 10 ? '0' + hi : 'a' + hi - 10);
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)(hi < 10 ? '0' + hi : 'a' + hi - 10);
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)(lo < 10 ? '0' + lo : 'a' + lo - 10);
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)(lo < 10 ? '0' + lo : 'a' + lo - 10);
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: First = (char)((number / 10) + '0');
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Second = (char)((number % 10) + '0');
Magic Number,Revenj.Serialization.Json.Converters,Pair,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\GuidConverter.cs,Pair,The following statement contains a magic number: Offset = number < 10 ? (byte)1 : (byte)0;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,NumberConverter,The following statement contains a magic number: Numbers = new Pair[100];
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write3,The following statement contains a magic number: var hi = number / 100;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write3,The following statement contains a magic number: var pair = Numbers[number - hi * 100];
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write3,The following statement contains a magic number: buffer[start + 2] = pair.Second;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: var div = number / 100;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: var rem = number - div * 100;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: buffer[start + 2] = pair2.First;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Write4,The following statement contains a magic number: buffer[start + 3] = pair2.Second;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: int pos = 10;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = Numbers[rem];  				buffer[pos--] = num.Second;  				buffer[pos--] = num.First;  				abs = div;  				if (abs == 0) break;  			} while (pos > 1);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = Numbers[rem];  				buffer[pos--] = num.Second;  				buffer[pos--] = num.First;  				abs = div;  				if (abs == 0) break;  			} while (pos > 1);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: sw.Write(buffer' pos + 1' 10 - pos);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: int pos = 20;
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = Numbers[rem];  				buffer[pos--] = num.Second;  				buffer[pos--] = num.First;  				abs = div;  				if (abs == 0) break;  			} while (pos > 1);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: do  			{  				var div = abs / 100;  				var rem = abs - div * 100;  				num = Numbers[rem];  				buffer[pos--] = num.Second;  				buffer[pos--] = num.First;  				abs = div;  				if (abs == 0) break;  			} while (pos > 1);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,Serialize,The following statement contains a magic number: sw.Write(buffer' pos + 1' 20 - pos);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDecimal,The following statement contains a magic number: if (nextToken == '"')  			{  				sr.InitBuffer();  				sr.FillUntil('"');  				nextToken = sr.Read(2);  				try  				{  					return sr.BufferToValue(ConvertToDecimal);  				}  				catch (Exception ex)  				{  					throw new SerializationException("Error parsing decimal at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following statement contains a magic number: if (len > 18)  				return ConvertToDecimalGeneric(buf' len);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.')  				{  					if (scale != 0)  						throw new SerializationException("Multiple '.' found in decimal value: " + new string(buf' 0' len) + ". At position" + JsonSerialization.PositionInStream(sr));  					scale = len - i - 1;  				}  				else  				{  					num = ch - 48;  					if (num < 0 || num > 9)  						return ConvertToDecimalGeneric(buf' len);  					value = (value << 3) + (value << 1) + num;  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.')  				{  					if (scale != 0)  						throw new SerializationException("Multiple '.' found in decimal value: " + new string(buf' 0' len) + ". At position" + JsonSerialization.PositionInStream(sr));  					scale = len - i - 1;  				}  				else  				{  					num = ch - 48;  					if (num < 0 || num > 9)  						return ConvertToDecimalGeneric(buf' len);  					value = (value << 3) + (value << 1) + num;  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.')  				{  					if (scale != 0)  						throw new SerializationException("Multiple '.' found in decimal value: " + new string(buf' 0' len) + ". At position" + JsonSerialization.PositionInStream(sr));  					scale = len - i - 1;  				}  				else  				{  					num = ch - 48;  					if (num < 0 || num > 9)  						return ConvertToDecimalGeneric(buf' len);  					value = (value << 3) + (value << 1) + num;  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following statement contains a magic number: return new decimal((int)value' (int)(value >> 32)' 0' neg' (byte)scale);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeInt,The following statement contains a magic number: if (nextToken == '"')  			{  				sr.InitBuffer();  				sr.FillUntil('"');  				nextToken = sr.Read(2);  				try  				{  					return sr.BufferToValue(ConvertToInt);  				}  				catch (Exception ex)  				{  					throw new SerializationException("Error parsing int at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToIntGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToIntGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToIntGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToIntGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToIntGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToIntGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeLong,The following statement contains a magic number: if (nextToken == '"')  			{  				sr.InitBuffer();  				sr.FillUntil('"');  				nextToken = sr.Read(2);  				try  				{  					return sr.BufferToValue(ConvertToLong);  				}  				catch (Exception ex)  				{  					throw new SerializationException("Error parsing long at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToLongGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToLongGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToLongGeneric(buf' len);  					}  					return value;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToLongGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToLongGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToLongGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeDouble,The following statement contains a magic number: if (nextToken == '"')  			{  				sr.InitBuffer();  				sr.FillUntil('"');  				nextToken = sr.Read(2);  				try  				{  					return sr.BufferToValue(ConvertToDouble);  				}  				catch (Exception ex)  				{  					throw new SerializationException("Error parsing double at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: if (len > 18)  				return ConvertToDoubleGeneric(buf' len);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToDoubleGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToDoubleGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToDoubleGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToDoubleGeneric(buf' len);  				}  				return sign * value / (double)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToDoubleGeneric(buf' len);  				}  				return sign * value / (double)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToDoubleGeneric(buf' len);  				}  				return sign * value / (double)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToDoubleGeneric(buf' len);  				}  				return sign * value / (double)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,DeserializeFloat,The following statement contains a magic number: if (nextToken == '"')  			{  				sr.InitBuffer();  				sr.FillUntil('"');  				nextToken = sr.Read(2);  				try  				{  					return sr.BufferToValue(ConvertToFloat);  				}  				catch (Exception ex)  				{  					throw new SerializationException("Error parsing float at " + JsonSerialization.PositionInStream(sr) + ". " + ex.Message' ex);  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: if (len > 18)  				return ConvertToFloatGeneric(buf' len);
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToFloatGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToFloatGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: for (; i < len; i++)  			{  				ch = buf[i];  				if (ch == '.') break;  				int ind = buf[i] - 48;  				value = (value << 3) + (value << 1) + ind;  				if (ind < 0 || ind > 9)  					return ConvertToFloatGeneric(buf' len);  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToFloatGeneric(buf' len);  				}  				return sign * value / (float)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToFloatGeneric(buf' len);  				}  				return sign * value / (float)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToFloatGeneric(buf' len);  				}  				return sign * value / (float)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following statement contains a magic number: if (ch == '.')  			{  				i++;  				long div = 1;  				for (; i < buf.Length && i < len; i++)  				{  					int ind = buf[i] - 48;  					div = (div << 3) + (div << 1);  					value = (value << 3) + (value << 1) + ind;  					if (ind < 0 || ind > 9)  						return ConvertToFloatGeneric(buf' len);  				}  				return sign * value / (float)div;  			}
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Serialize,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)  			{  				var ch = value[i];  				if (ch < 32 || ch == '"' || ch == '\\')  				{  					SerializeEscaped(i' value' sw);  					return;  				}  			}
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,SerializeEscaped,The following statement contains a magic number: if (escaped != 0)  			{  				var cnt = escaped / 32768;  				var ind = 0;  				for (int i = 0; i < cnt; i++)  				{  					var next = ind + 32768;  					sw.Write(value.Substring(ind' next));  					ind = next;  				}  				sw.Write(value.Substring(ind' escaped));  			}
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,SerializeEscaped,The following statement contains a magic number: if (escaped != 0)  			{  				var cnt = escaped / 32768;  				var ind = 0;  				for (int i = 0; i < cnt; i++)  				{  					var next = ind + 32768;  					sw.Write(value.Substring(ind' next));  					ind = next;  				}  				sw.Write(value.Substring(ind' escaped));  			}
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,SerializePart,The following statement contains a magic number: for (; i < value.Length && i < max; i++)  			{  				c = value[i];  				if (c < 32 || c == '"' || c == '\\')  					break;  			}
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,StringConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\StringConverter.cs,Deserialize,The following statement contains a magic number: do  			{  				nextToken = sr.Read(2);  				switch (nextToken)  				{  					case 'b': sr.AddToBuffer('\b'); break;  					case 't': sr.AddToBuffer('\t'); break;  					case 'r': sr.AddToBuffer('\r'); break;  					case 'n': sr.AddToBuffer('\n'); break;  					case 'f': sr.AddToBuffer('\f'); break;  					case 'u':  						var len = sr.Read(tmp' 0' 4);  						if (len < 4) sr.Read(tmp' len' 4 - len);//the second one must succeed  						sr.AddToBuffer((char)Convert.ToInt32(new string(tmp' 0' 4)' 16));//TODO: optimize to no allocation  						break;  					default:  						sr.AddToBuffer((char)nextToken);  						break;  				}  				nextToken = sr.FillUntil('"'' '\\');  			} while (nextToken == '\\');
Magic Number,Revenj.Serialization.Json.Converters,XmlConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\XmlConverter.cs,Serialize,The following statement contains a magic number: if (StringFormat || minimal)  			{  				using (var cms = ChunkedMemoryStream.Create())  				{  					var writer = cms.GetWriter();  					value.Save(writer' SaveOptions.DisableFormatting);  					writer.Flush();  					cms.Position = 0;  					var reader = cms.GetReader();  					var buf = cms.CharBuffer;  					int len;  					sw.Write('"');  					while ((len = reader.Read(buf' 0' 4096)) > 0)  						StringConverter.SerializePart(buf' len' sw);  					sw.Write('"');  				}  			}  			else  				JsonNet.Serialize(sw' value' typeof(XElement));
Magic Number,Revenj.Utility,DynamicOrderBy,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\DynamicOrderBy.cs,ApplyOrderBy,The following statement contains a magic number: return (IOrderedQueryable<T>)typeof(Queryable).GetMethods().Single(  				method => method.Name == methodName  						&& method.IsGenericMethodDefinition  						&& method.GetGenericArguments().Length == 2  						&& method.GetParameters().Length == 2)  				.MakeGenericMethod(typeof(T)' type)  				.Invoke(null' new object[] { collection' lambda });
Magic Number,Revenj.Utility,DynamicOrderBy,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\DynamicOrderBy.cs,ApplyOrderBy,The following statement contains a magic number: return (IOrderedQueryable<T>)typeof(Queryable).GetMethods().Single(  				method => method.Name == methodName  						&& method.IsGenericMethodDefinition  						&& method.GetGenericArguments().Length == 2  						&& method.GetParameters().Length == 2)  				.MakeGenericMethod(typeof(T)' type)  				.Invoke(null' new object[] { collection' lambda });
Magic Number,Revenj.Utility,PdfConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\PdfConverter.cs,PdfConverter,The following statement contains a magic number: if (!int.TryParse(ct' out PdfConverterTimeout))  				PdfConverterTimeout = 20;
Magic Number,Revenj.Utility,PdfConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\PdfConverter.cs,RunConverter,The following statement contains a magic number: if (!process.WaitForExit(PdfConverterTimeout * 1000))  			{  				try { process.Dispose(); }  				catch { }  				throw new TimeoutException("Timeout creating PDF. ");  			}
Magic Number,Revenj.Utility,AssemblyScanner,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Reflection\AssemblyScanner.cs,GetAllTypes,The following statement contains a magic number: foreach (var assembly in GetAssemblies())  			{  				try  				{  					foreach (var type in assembly.GetTypes().Where(it => it.IsClass || it.IsInterface))  					{  						AllTypes.Add(type);  					}  				}  				catch (ReflectionTypeLoadException ex)  				{  					AllTypes.Clear();  					var first = (ex.LoaderExceptions ?? new Exception[0]).Take(5).ToList();  					throw new ApplicationException(  						string.Format("Error scanning assembly: {0}. Can't load types:{1}{2}"'  							assembly.FullName'  							Environment.NewLine'  							string.Join(Environment.NewLine' first.Select(it => it.Message)))' ex);  				}  			}
Magic Number,Revenj.Utility,StableHashCode,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\StableHashCode.cs,HashString,The following statement contains a magic number: int hash = 23;
Magic Number,Revenj.Utility,StableHashCode,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\StableHashCode.cs,HashString,The following statement contains a magic number: if (text != null)  			{  				foreach (var c in text)  					hash = hash * 31 + c;  			}
Magic Number,Revenj.Utility,BufferedTextReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\BufferedTextReader.cs,FillUntil,The following statement contains a magic number: do  			{  				var i = InBuffer;  				char ch;  				for (; i < BufferEnd && i < Buffer.Length && j < WorkingBuffer.Length; i++' j++)  				{  					ch = Buffer[i];  					if (ch == match)  					{  						InBuffer = i;  						WorkingPosition = j;  						return NextChar = ch;  					}  					WorkingBuffer[j] = ch;  				}  				if (i == BufferEnd)  				{  					TotalBuffersRead += BufferEnd;  					BufferEnd = Reader.Read(Buffer' 0' Buffer.Length);  					InBuffer = 0;  					NextChar = BufferEnd > 0 ? Buffer[0] : -1;  				}  				else  				{  					NextChar = Buffer[i];  					InBuffer = i;  				}  				if (j == WorkingBuffer.Length)  				{  					var tmp = new char[WorkingBuffer.Length * 2];  					Array.Copy(WorkingBuffer' tmp' WorkingBuffer.Length);  					WorkingBuffer = tmp;  				}  			} while (NextChar != -1);
Magic Number,Revenj.Utility,BufferedTextReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\BufferedTextReader.cs,FillUntil,The following statement contains a magic number: do  			{  				var i = InBuffer;  				char ch;  				for (; i < BufferEnd && i < Buffer.Length && j < WorkingBuffer.Length; i++' j++)  				{  					ch = Buffer[i];  					if (ch == match1 || ch == match2)  					{  						InBuffer = i;  						WorkingPosition = j;  						return NextChar = ch;  					}  					WorkingBuffer[j] = ch;  				}  				if (i == BufferEnd)  				{  					TotalBuffersRead += BufferEnd;  					BufferEnd = Reader.Read(Buffer' 0' Buffer.Length);  					InBuffer = 0;  					NextChar = BufferEnd > 0 ? Buffer[0] : -1;  				}  				else  				{  					NextChar = Buffer[i];  					InBuffer = i;  				}  				if (j == WorkingBuffer.Length)  				{  					var tmp = new char[WorkingBuffer.Length * 2];  					Array.Copy(WorkingBuffer' tmp' WorkingBuffer.Length);  					WorkingBuffer = tmp;  				}  			} while (NextChar != -1);
Magic Number,Revenj.Utility,BufferedTextReader,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\BufferedTextReader.cs,AddToBuffer,The following statement contains a magic number: if (WorkingPosition == WorkingBuffer.Length)  			{  				var tmp = new char[WorkingBuffer.Length * 2];  				Array.Copy(WorkingBuffer' tmp' WorkingBuffer.Length);  				WorkingBuffer = tmp;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: var tmpBuf = new byte[3];
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToBase64Writer,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				var block = Blocks[i];  				len = Convert.ToBase64CharArray(block' off' BlockSize - 2' base64' 0);  				sw.Write(base64' 0' len);  				for (int j = 0; j < 2 - off; j++)  					tmpBuf[j] = block[BlockSize - 2 + j + off];  				block = Blocks[i + 1];  				for (int j = 0; j < 1 + off; j++)  					tmpBuf[2 - off + j] = block[j];  				len = Convert.ToBase64CharArray(tmpBuf' 0' 3' base64' 0);  				sw.Write(base64' 0' len);  				off = (off + 1) & 3;  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToPostgresBytea,The following statement contains a magic number: for (int i = 0; i < total; i++)  			{  				block = Blocks[i];  				for (int j = 0; j < block.Length; j++)  				{  					var b = block[j];  					sw.Write(CharMap[b >> 4]);  					sw.Write(CharMap[b & 0xf]);  				}  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,ToPostgresBytea,The following statement contains a magic number: for (int j = 0; j < remaining; j++)  			{  				var b = block[j];  				sw.Write(CharMap[b >> 4]);  				sw.Write(CharMap[b & 0xf]);  			}
Magic Number,Revenj.Utility,ChunkedMemoryStream,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\Streams\ChunkedMemoryStream.cs,Close,The following statement contains a magic number: if (IsShared)  			{  				if (UsedReader)  					Reader.DiscardBufferedData();  				UsedBuffered = UsedReader = UsedWriter = false;  			}  			else if (!disposed && BoundToThread == Thread.CurrentThread.ManagedThreadId)  			{  				disposed = true;  				if (Writer != null && UsedWriter)  					Writer.Flush();  				if (Reader != null && UsedReader)  					Reader.DiscardBufferedData();  				UsedBuffered = UsedReader = UsedWriter = false;  				if (CurrentEstimate < SizeLimit || Blocks.Count > 10000)  				{  					MemoryPool.Push(this);  					CurrentEstimate++;  				}  				else CurrentEstimate = MemoryPool.Count;  			}
Magic Number,Revenj.Utility,StringCache,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\StringCache.cs,StringCache,The following statement contains a magic number: var size = 2;
Magic Number,Revenj.Utility,StringCache,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\StringCache.cs,StringCache,The following statement contains a magic number: for (int i = 0; i < log2; i++)  				size *= 2;
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateFile,The following statement contains a magic number: int retry = 5;
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Magic Number,Revenj.Utility,TemporaryResources,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Utility\TemporaryResources.cs,CreateRandomObject,The following statement contains a magic number: try  			{  				object instance = ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  				var rnd = new Random();  				foreach (var p in instance.GetType().GetProperties())  				{  					var sm = p.GetSetMethod();  					if (sm != null && sm.IsPublic)  					{  						var pt = p.PropertyType;  						if (pt == typeof(string))  						{  							var sb = new StringBuilder();  							for (int i = 0; i < 10; i++)  								sb.Append((char)rnd.Next(65' 92));  							p.SetValue(instance' sb.ToString()' null);  						}  						else if (pt == typeof(DateTime))  							p.SetValue(instance' DateTime.Today' null);  						else if (pt == typeof(int))  							p.SetValue(instance' rnd.Next(1000' 10000)' null);  						else if (pt == typeof(long))  							p.SetValue(instance' (long)rnd.Next(1000' 10000)' null);  						else if (pt == typeof(decimal))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10m' null);  						else if (pt == typeof(double))  							p.SetValue(instance' rnd.NextDouble() * 1000' null);  						else if (pt == typeof(float))  							p.SetValue(instance' rnd.Next(1000' 10000) / 10f' null);  						else if (pt == typeof(byte[]))  						{  							var buf = new byte[rnd.Next(1' 5)];  							rnd.NextBytes(buf);  							p.SetValue(instance' buf' null);  						}  					}  				}  				return instance;  			}  			catch  			{  				return ctor != null ? ctor.Invoke(null) : FormatterServices.GetUninitializedObject(target);  			}
Duplicate Code,Revenj.DatabasePersistence.Postgres.Converters,ArrayTuple,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Converters\ArrayTuple.cs,InsertRecord,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 25)' (30' 49))
Duplicate Code,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeCollection,The method contains a code clone-set at the following line numbers (starting from the method definition): ((2' 28)' (32' 58))
Duplicate Code,Revenj.Serialization.Json.Converters,BoolConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\BoolConverter.cs,DeserializeNullableCollection,The method contains a code clone-set at the following line numbers (starting from the method definition): ((2' 33)' (38' 69))
Duplicate Code,Revenj.Serialization.Json.Converters,DrawingConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\DrawingConverter.cs,DeserializeRectangleF,The method contains a code clone-set at the following line numbers (starting from the method definition): ((11' 31)' (40' 60))
Missing Default,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,ArrayBackendToNativeTypeConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\ArrayHandling.cs,ArrayChunkEnumeration,The following switch statement is missing a default case: switch (source[idx])  				{  					case '"': //beginning or ending a quoted chunk.  						inQuoted = !inQuoted;  						break;  					case ''':  						if (braceCount == 0) //if bracecount is zero we've done our chunk  						{  							yield return source.Substring(startIdx' idx - startIdx);  							startIdx = idx + 1;  						}  						break;  					case '\\': //next character is escaped. Skip it.  						++idx;  						break;  					case '{': //up the brace count if this isn't in a quoted string  						if (!inQuoted)  						{  							++braceCount;  						}  						break;  					case '}': //lower the brace count if this isn't in a quoted string  						if (!inQuoted)  						{  							--braceCount;  						}  						break;  				}
Missing Default,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStamp,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Subtract,The following switch statement is missing a default case: switch (_type)  			{  				case TimeType.Infinity:  				case TimeType.MinusInfinity:  					throw new ArgumentOutOfRangeException("You cannot subtract infinity timestamps");  			}
Missing Default,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStamp,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Subtract,The following switch statement is missing a default case: switch (timestamp._type)  			{  				case TimeType.Infinity:  				case TimeType.MinusInfinity:  					throw new ArgumentOutOfRangeException("You cannot subtract infinity timestamps");  			}
Missing Default,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStampTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Subtract,The following switch statement is missing a default case: switch (_type)  			{  				case TimeType.Infinity:  				case TimeType.MinusInfinity:  					throw new ArgumentOutOfRangeException("You cannot subtract infinity timestamps");  			}
Missing Default,Revenj.DatabasePersistence.Postgres.NpgsqlTypes,NpgsqlTimeStampTZ,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\NpgsqlTypes\DateDatatypes.cs,Subtract,The following switch statement is missing a default case: switch (timestamp._type)  			{  				case TimeType.Infinity:  				case TimeType.MinusInfinity:  					throw new ArgumentOutOfRangeException("You cannot subtract infinity timestamps");  			}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The following switch statement is missing a default case: switch (p.Direction)  							{  								case ParameterDirection.Input:  								case ParameterDirection.InputOutput:  									//Wrap in probably-redundant parentheses. Queries should operate much as if they were in the a parameter or  									//variable in a postgres function. Generally this is the case without the parentheses (hence "probably redundant")  									//but there are exceptions to this rule. E.g. consider the postgres function:  									//  									//CREATE FUNCTION first_param(integer[])RETURNS int AS'select $1[1]'LANGUAGE 'sql' STABLE STRICT;  									//  									//The equivalent commandtext would be "select :param[1]"' but this fails without the parentheses.    									sw.Write('(');  									PassParam(sw' p);  									sw.Write(')');  									break;  							}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,GetClearCommandStream,The following switch statement is missing a default case: switch (parameters[i].Direction)  					{  						case ParameterDirection.Input:  						case ParameterDirection.InputOutput:  							PassParam(sw' parameters[i]);  							len--;  							if (len > 1)  								sw.Write(''');  							break;  					}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlCommand,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlCommand.cs,AddFunctionColumnListSupport,The following switch statement is missing a default case: switch (p.Direction)  				{  					case ParameterDirection.Output:  					case ParameterDirection.InputOutput:  						sw.Write(p.CleanName);  						sw.Write(' ');  						sw.Write(p.TypeInfo.Name);  						sw.Write(''');  						break;  				}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,SetValue,The following switch statement is missing a default case: switch (keyword)  				{  					case Keywords.Host:  						this._host = Convert.ToString(value);  						break;  					case Keywords.Port:  						this._port = Convert.ToInt32(value);  						break;  					case Keywords.Database:  						this._database = Convert.ToString(value);  						break;  					case Keywords.UserName:  						this._username = Convert.ToString(value);  						break;  					case Keywords.Password:  						this._password = System.Text.Encoding.UTF8.GetBytes(Convert.ToString(value));  						break;  					case Keywords.SSL:  						this._ssl = ToBoolean(value);  						break;  					case Keywords.SslMode:  						this._sslmode = ToSslMode(value);  						break;  #pragma warning disable 618  					case Keywords.Encoding:  						break;  #pragma warning restore 618  					case Keywords.Timeout:  						this._timeout = ToInt32(value' 0' TIMEOUT_LIMIT' key_name);  						break;  					case Keywords.SearchPath:  						this._searchpath = Convert.ToString(value);  						break;  					case Keywords.Pooling:  						this._pooling = ToBoolean(value);  						break;  					case Keywords.ConnectionLifeTime:  						this._connection_life_time = Convert.ToInt32(value);  						break;  					case Keywords.MinPoolSize:  						this._min_pool_size = (MaxPoolSize > 0) ? ToInt32(value' 0' MaxPoolSize' key_name) : Convert.ToInt32(value);  						break;  					case Keywords.MaxPoolSize:  						this._max_pool_size = ToInt32(value' 0' POOL_SIZE_LIMIT' key_name);  						break;  					case Keywords.SyncNotification:  						this._sync_notification = ToBoolean(value);  						break;  					case Keywords.CommandTimeout:  						this._command_timeout = Convert.ToInt32(value);  						break;  					case Keywords.Enlist:  						this._enlist = ToBoolean(value);  						break;  					case Keywords.PreloadReader:  						this._preloadReader = ToBoolean(value);  						break;  					case Keywords.UseExtendedTypes:  						this._useExtendedTypes = ToBoolean(value);  						break;  					case Keywords.IntegratedSecurity:  						this._integrated_security = ToIntegratedSecurity(value);  						break;  					case Keywords.Compatible:  						Version ver = new Version(value.ToString());  						if (ver > THIS_VERSION)  							throw new ArgumentException("Attempt to set compatibility with version " + value + " when using version " + THIS_VERSION);  						_compatible = ver;  						break;  					case Keywords.ApplicationName:  						this._application_name = Convert.ToString(value);  						break;  				}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlConnectionStringBuilder,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\NpgsqlConnectionStringBuilder.cs,SetValue,The following switch statement is missing a default case: switch (keyword)  				{  					case Keywords.Port:  					case Keywords.Timeout:  					case Keywords.ConnectionLifeTime:  					case Keywords.MinPoolSize:  					case Keywords.MaxPoolSize:  					case Keywords.CommandTimeout:  						exception_template = resman.GetString("Exception_InvalidIntegerKeyVal");  						break;  					case Keywords.SSL:  					case Keywords.Pooling:  					case Keywords.SyncNotification:  						exception_template = resman.GetString("Exception_InvalidBooleanKeyVal");  						break;  				}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,PGUtil,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\PGUtil.cs,SkipEscapedBytes,The following switch statement is missing a default case: switch (ReadChar(stream' buffer))  					{  						case '0':  						case '1':  						case '2':  						case '3':  						case '4':  						case '5':  						case '6':  						case '7':  						case '8':  						case '9':  							maxRead -= 2;  							EatStreamBytes(stream' 2); //note assumes all representations of '0' through '9' are single-byte.  							break;  					}
Missing Default,Revenj.DatabasePersistence.Postgres.Npgsql,NpgsqlState,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\Npgsql\State\NpgsqlState.cs,TestNotify,The following switch statement is missing a default case: switch (stm.ReadByte())  							{  								case -1:  									throw new EndOfStreamException();  								case 'Z':  									//context.Query(new NpgsqlCommand("UNLISTEN *"' context));  									using (NpgsqlCommand cmd = new NpgsqlCommand("UNLISTEN *"' context))  									{  										context.Query(cmd);  									}  									return;  							}
Missing Default,Revenj.DatabasePersistence.Postgres.QueryGeneration.Visitors,SqlGeneratorExpressionTreeVisitor,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DatabasePersistence\Postgres\QueryGeneration\Visitors\SqlGeneratorExpressionTreeVisitor.cs,VisitBinaryExpression,The following switch statement is missing a default case: switch (expression.NodeType)  			{  				case ExpressionType.Coalesce:  					SqlExpression.Append(" (COALESCE(");  					VisitExpression(left);  					SqlExpression.Append("' ");  					VisitExpression(right);  					SqlExpression.Append("))");  					return expression;  			}
Missing Default,Revenj.DomainPatterns,EagerCache<TValue>,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\DomainPatterns\Cache\EagerCache.cs,Synchronize,The following switch statement is missing a default case: switch (info.Operation)  				{  					case NotifyInfo.OperationEnum.Insert:  					case NotifyInfo.OperationEnum.Change:  						var found = Lookup.Find(info.URI);  						foreach (var f in found)  							Data.TryAdd(f.URI' f);  						break;  					case NotifyInfo.OperationEnum.Delete:  						TValue value;  						foreach (var u in info.URI)  							Data.TryRemove(u' out value);  						break;  					case NotifyInfo.OperationEnum.Update:  						var remaining = Lookup.Find(info.URI);  						foreach (var r in remaining)  							Data.AddOrUpdate(r.URI' r' (_' __) => r);  						break;  				}
Missing Default,DryIoc,ContainerException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Of,The following switch statement is missing a default case: switch (errorCheck) // handle error check when error code is unspecified.  				{  					case ErrorCheck.InvalidCondition:  						errorCode = DryIoc.Error.InvalidCondition;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg0.GetType()));  						break;  					case ErrorCheck.IsNull:  						errorCode = DryIoc.Error.IsNull;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0));  						break;  					case ErrorCheck.IsNotOfType:  						errorCode = DryIoc.Error.IsNotOfType;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg1));  						break;  					case ErrorCheck.TypeIsNotOfType:  						errorCode = DryIoc.Error.TypeIsNotOfType;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg1));  						break;  				}
Missing Default,DryIoc.Reflection,ContainerException,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Extensibility\Container\DryIoc.cs,Of,The following switch statement is missing a default case: switch (errorCheck) // handle error check when error code is unspecified.  				{  					case ErrorCheck.InvalidCondition:  						errorCode = DryIoc.Error.InvalidCondition;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg0.GetType()));  						break;  					case ErrorCheck.IsNull:  						errorCode = DryIoc.Error.IsNull;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0));  						break;  					case ErrorCheck.IsNotOfType:  						errorCode = DryIoc.Error.IsNotOfType;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg1));  						break;  					case ErrorCheck.TypeIsNotOfType:  						errorCode = DryIoc.Error.TypeIsNotOfType;  						message = string.Format(DryIoc.Error.Messages[errorCode]' Print(arg0)' Print(arg1));  						break;  				}
Missing Default,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDecimal,The following switch statement is missing a default case: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					i = 1;  					neg = true;  					break;  			}
Missing Default,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToInt,The following switch statement is missing a default case: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToIntGeneric(buf' len);  					}  					return value;  			}
Missing Default,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToLong,The following switch statement is missing a default case: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					for (i = 1; i < len; i++)  					{  						ch = buf[i];  						int ind = buf[i] - 48;  						value = (value << 3) + (value << 1) - ind;  						if (ind < 0 || ind > 9)  							return ConvertToLongGeneric(buf' len);  					}  					return value;  			}
Missing Default,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToDouble,The following switch statement is missing a default case: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					i = 1;  					sign = -1;  					break;  			}
Missing Default,Revenj.Serialization.Json.Converters,NumberConverter,C:\repos\ngs-doo_revenj\csharp\Core\Revenj.Core\Serialization\Json\Converters\NumberConverter.cs,ConvertToFloat,The following switch statement is missing a default case: switch (ch)  			{  				case '+':  					i = 1;  					break;  				case '-':  					i = 1;  					sign = -1;  					break;  			}
