Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The method has 143 lines of code.
Long Method,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,InitEntities,The method has 257 lines of code.
Complex Method,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,Next,Cyclomatic complexity of the method is 59
Complex Method,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,Cyclomatic complexity of the method is 13
Complex Method,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,Cyclomatic complexity of the method is 20
Complex Method,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,MergeTmxFilesIntoCache,Cyclomatic complexity of the method is 8
Complex Method,L10NSharp,TransUnitUpdater,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\TransUnitUpdater.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,Cyclomatic complexity of the method is 13
Complex Method,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValueNeeded,Cyclomatic complexity of the method is 21
Complex Method,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValuePushed,Cyclomatic complexity of the method is 13
Complex Method,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,SaveChangesInMemory,Cyclomatic complexity of the method is 8
Complex Method,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,Cyclomatic complexity of the method is 25
Complex Method,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellFormatting,Cyclomatic complexity of the method is 8
Complex Method,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnDrawFocusRectangle,Cyclomatic complexity of the method is 8
Complex Method,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,Cyclomatic complexity of the method is 26
Complex Method,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,Cyclomatic complexity of the method is 21
Complex Method,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,Cyclomatic complexity of the method is 8
Complex Method,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,Cyclomatic complexity of the method is 13
Complex Method,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,ParseQueryString,Cyclomatic complexity of the method is 10
Long Parameter List,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,DoExtractingWork,The method has 8 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,Create,The method has 9 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,LocalizationManager,The method has 6 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,RegisterObjectForLocalizing,The method has 6 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,AddString,The method has 5 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetLocalizedString,The method has 6 parameters.
Long Parameter List,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetString,The method has 6 parameters.
Long Parameter List,L10NSharp.UI,EditSourceBeforeTranslatingDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\EditSourceBeforeTranslatingDlg.cs,EditSourceBeforeTranslatingDlg,The method has 5 parameters.
Long Parameter List,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleTranslatorServiceButtonClick,The method has 5 parameters.
Long Parameter List,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The method has 5 parameters.
Long Parameter List,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PopupControl,The method has 6 parameters.
Long Parameter List,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,Paint,The method has 11 parameters.
Long Identifier,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,Create,The length of the parameter directoryOfUserModifiedTmxFiles is 31.
Long Identifier,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,LocalizationManager,The length of the parameter directoryOfUserModifiedTmxFiles is 31.
Long Identifier,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,SetUILanguage,The length of the parameter reapplyLocalizationsToAllObjectsInAllManagers is 45.
Long Identifier,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetUILanguages,The length of the parameter returnOnlyLanguagesHavingLocalizations is 38.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,DoExtractingWork,The length of the statement  "	_getStringMethodOverloads = typeof(LocalizationManager).GetMethods (BindingFlags.Static | BindingFlags.Public).Where (m => m.Name == "GetString" || m.Name == "Localize").Union (typeof(L10NStringExtensions).GetMethods (BindingFlags.Static | BindingFlags.Public).Where (m => m.Name == "Localize")).ToArray (); " is 307.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,DoExtractingWork,The length of the statement  "	var extenderInfo = _extenderInfo.Where (kvp => !kvp.Key.EndsWith (".throwaway")).Select (kvp => kvp.Value).Where (l => l.Id != null && l.Priority != LocalizationPriority.NotLocalizable && (l.Text != null || l.ToolTipText != null || l.ShortcutKeys != null)); " is 257.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetTypesToScan,The length of the statement  "		if (/* fails: assembly.Location.ToLower().Contains("framework") ||*/assembly.FullName.Contains ("mscorlib") || assembly.FullName.StartsWith ("System") || assembly.FullName.StartsWith ("Microsoft")) " is 197.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetTypesToScan,The length of the statement  "			foreach (var type in assembly.GetTypes ().Where (t => !typesToScan.Contains (t)).Where (type => namespaceBeginnings.Count == 0 || namespaceBeginnings.Any (nsb => type.FullName.StartsWith (nsb)))) { " is 197.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindLocalizedStringsInType,The length of the statement  "	methodsInType.AddRange (type.GetConstructors (BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)); " is 139.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindLocalizedStringsInType,The length of the statement  "	methodsInType.AddRange (type.GetMethods (BindingFlags.Static | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)); " is 134.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindGetStringCalls,The length of the statement  "		if (callee.Equals (module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments))) { " is 122.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The length of the statement  "		if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) { " is 140.
Long Statement,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The length of the statement  "		text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null); " is 131.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,Create,The length of the statement  "		lm = new LocalizationManager (appId' appName' appVersion' directoryOfInstalledTmxFiles' directoryOfUserModifiedTmxFiles' namespaceBeginnings); " is 142.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,CreateOrUpdateDefaultTmxFileIfNecessary,The length of the statement  "	if (File.Exists (DefaultStringFilePath) && File.ReadAllText (DefaultStringFilePath).Trim () != string.Empty)//I've seen this happen. " is 132.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,CreateOrUpdateDefaultTmxFileIfNecessary,The length of the statement  "		var verElement = xmlDoc.Element ("header").Elements ("prop").FirstOrDefault (e => (string)e.Attribute ("type") == kAppVersionPropTag); " is 134.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetUILanguages,The length of the statement  "	var langsHavinglocalizations = (LoadedManagers == null ? new List<string> () : LoadedManagers.Values.SelectMany (lm => lm.StringCache.TmxDocument.GetAllVariantLanguagesFound ()).Distinct ().ToList ()); " is 201.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,ShowLocalizationDialogBox,The length of the statement  "	TipDialog.Show ("If you click on an item while you hold alt and shift keys down' this tool will open up with that item already selected."); " is 139.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,ShowLocalizationDialogBox,The length of the statement  "	//TipDialog.Show("If you click on an item while you hold alt and shift keys down' this tool will open up with that item already selected."); " is 140.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,RegisterObjectForLocalizing,The length of the statement  "		// if you hit this ( Index was outside the bounds of the array) try to figure out why. What is the hash (?) value for the obj? " is 126.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetDynamicString,The length of the statement  "		throw new ArgumentException (string.Format ("The application id '{0}' does not have an associated localization manager."' appId)); " is 130.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetIsStringAvailableForLangId,The length of the statement  "	return LoadedManagers.Values.Select (lm => lm.StringCache.GetString (langId' id)).FirstOrDefault (txt => txt != null) != null; " is 126.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,GetStringFromAnyLocalizationManager,The length of the statement  "	return LoadedManagers.Values.Select (lm => lm.StringCache.GetString (UILanguageId' id)).FirstOrDefault (text => text != null); " is 126.
Long Statement,L10NSharp,LocalizationManager,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizationManager.cs,HandleDataGridViewHandleDestroyed,The length of the statement  "	foreach (DataGridViewColumn col in grid.Columns.Cast<DataGridViewColumn> ().Where (col => ObjectCache.ContainsKey (col))) { " is 123.
Long Statement,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,MergeTmxFilesIntoCache,The length of the statement  "				if (defaultTmxDoc.GetTransUnitForId (tu.Id) == null && !tu.Id.EndsWith (kToolTipSuffix) && !tu.Id.EndsWith (kShortcutSuffix)) { " is 127.
Long Statement,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,MergeTmxFilesIntoCache,The length of the statement  "							//ok' no big deal' that what we expect with dynamic strings' by definition... that we won't find them during a static code scan " is 127.
Long Statement,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,CreateEmptyStringFile,The length of the statement  "	//REVIEW: why is this listed twice? I notice that there is no ampersand replacement policy: was this line meant to be for that? " is 127.
Long Statement,L10NSharp,LocalizingInfo,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizingInfo.cs,UpdateTextFromObject,The length of the statement  "	Text = LocalizationManager.StripOffLocalizationInfoFromText (_obj is DataGridViewColumn ? ((DataGridViewColumn)_obj).HeaderText : Utils.GetProperty (_obj' "Text") as string); " is 174.
Long Statement,L10NSharp,LocalizingInfo,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizingInfo.cs,MakeIdForDataGridViewColumn,The length of the statement  "	return (col == null || !col.HeaderText.StartsWith (LocalizationManager.kL10NPrefix) ? null : GetIdFromText (col.HeaderText)); " is 125.
Long Statement,L10NSharp.UI,LanguageChoosingDialog,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LanguageChoosingDialog.cs,Application_Idle,The length of the statement  "		var s = translator.TranslateText (string.Format (_originalMessageTemplate' _requestedCulture.EnglishName' _requestedCulture.NativeName)); " is 137.
Long Statement,L10NSharp.UI,TipDialog,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\TipDialog.cs,AdjustHeights,The length of the statement  "	// "There was a problem connecting to the Internet.\r\nWarning: This machine does not have a live network connection.\r\nConnection attempt failed." " is 148.
Long Statement,L10NSharp.UI,TipDialog,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\TipDialog.cs,GetDesiredTextBoxHeight,The length of the statement  "		const TextFormatFlags flags = TextFormatFlags.NoClipping | TextFormatFlags.NoPadding | TextFormatFlags.TextBoxControl | TextFormatFlags.WordBreak; " is 146.
Long Statement,L10NSharp.UI,TipDialog,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\TipDialog.cs,GetDesiredTextBoxHeight,The length of the statement  "		return TextRenderer.MeasureText (g' _message.Text' _message.Font' new Size (_message.ClientSize.Width' 0)' flags).Height; " is 121.
Long Statement,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,OnPaint,The length of the statement  "		VisualStyleRenderer renderer = new VisualStyleRenderer (Enabled ? VisualStyleElement.TextBox.TextEdit.Normal : VisualStyleElement.TextBox.TextEdit.Disabled); " is 157.
Long Statement,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,PaintNonThemeButton,The length of the statement  "		TextRenderer.DrawText (g' "6"' fnt' m_button.ClientRectangle' SystemColors.ControlDarkDark' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter); " is 159.
Long Statement,L10NSharp.UI,FallbackLanguagesDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\FallbackLanguagesDlg.cs,UpdateDisplay,The length of the statement  "	_buttonAdd.Enabled = (_uiCulture.Name != SelectedAvailableLanguage.Name && !_listBoxFallbackLanguages.Items.Contains (SelectedAvailableLanguage)); " is 146.
Long Statement,L10NSharp.UI,FallbackLanguagesDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\FallbackLanguagesDlg.cs,UpdateDisplay,The length of the statement  "	_buttonMoveUp.Enabled = (_listBoxFallbackLanguages.SelectedIndex > 0 && SelectedFallbackLanguage.Name != LocalizationManager.kDefaultLang); " is 139.
Long Statement,L10NSharp.UI,L10NSharpExtender,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\L10NExtender.cs,LocalizeControls,The length of the statement  "		// Depending on the order in which VS Designer decides to initialize fields' locInfo may be originally created before the Text of the " is 133.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,ShowDialog,The length of the statement  "	var id = (callingManager == null ? viewModel.GetObjIdFromAnyCache (obj) : callingManager.ObjectCache.FirstOrDefault (kvp => kvp.Key == obj).Value); " is 147.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,InitializeColorsAndFonts,The length of the statement  "	_textBoxSrcToolTip.Font = new Font (DefaultDisplayFont.FontFamily' _textBoxSrcToolTip.Font.SizeInPoints' FontStyle.Regular); " is 124.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,UpdateSingleItemView,The length of the statement  "	_textBoxTgtTranslation.Enabled = _textBoxTgtToolTip.Enabled = _groupBoxTgtTranslation.Enabled = (_viewModel.CurrentNode.Id != null && !_viewModel.TgtLangId.StartsWith (LocalizationManager.kDefaultLang)); " is 203.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,UpdateSingleItemView,The length of the statement  "	_textBoxSrcTranslation.Text = _textBoxSrcTranslation.Text.Replace (LocalizedStringCache.s_literalNewline' Environment.NewLine); " is 127.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,UpdateSingleItemView,The length of the statement  "	_textBoxTgtTranslation.Text = _textBoxTgtTranslation.Text.Replace (LocalizedStringCache.s_literalNewline' Environment.NewLine); " is 127.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,OnFormClosing,The length of the statement  "		var result = MessageBox.Show (this' "Would you like to save your changes?"' Application.ProductName' MessageBoxButtons.YesNoCancel); " is 132.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleTranslatorServiceButtonClick,The length of the statement  "		nodesToTranslate = _grid.SelectedRows.Cast<DataGridViewRow> ().OrderBy (r => r.Index).ToDictionary (r => r.Index' r => _viewModel.AllLeafNodesShowingInGrid [r.Index]); " is 167.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleColumnHeaderMouseClick,The length of the statement  "		_viewModel.GridSortOrder = (_grid.Columns [sortColumn].HeaderCell.SortGlyphDirection == SortOrder.Ascending ? SortOrder.Descending : SortOrder.Ascending); " is 154.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The length of the statement  "		e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5); " is 159.
Long Statement,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,_howToDistribute_LinkClicked,The length of the statement  "	using (var dlg = new HowToDistributeDialog (LocalizationManager.EmailForSubmissions' _callingManager.GetTmxPathForLanguage (_viewModel.TgtLangId))) { " is 149.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,SaveChangesInMemory,The length of the statement  "	if (locInfo.Text == (node.GetText (_tgtLangId) ?? string.Empty) && locInfo.ToolTipText == (node.GetToolTip (_tgtLangId) ?? string.Empty) && locInfo.ShortcutKeys == (node.GetShortcutKeys (_tgtLangId) ?? string.Empty)) { " is 218.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,SaveChangesInMemory,The length of the statement  "			node.SavedTranslationInfo [_tgtLangId].ToolTipText = (locInfo.ToolTipText == string.Empty ? null : locInfo.ToolTipText); " is 120.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,SaveChangesInMemory,The length of the statement  "			node.SavedTranslationInfo [_tgtLangId].ShortcutKeys = (locInfo.ShortcutKeys == string.Empty ? null : locInfo.ShortcutKeys); " is 123.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,GetNumberOfTranslatedItemsString,The length of the statement  "	int numStringsTranslated = EnabledManagers.Sum (lm => AllLeafNodes.Count (n => (n.GetHasModifications (false) || lm.StringCache.DoTranslationsExist (TgtLangId' n.Id)))); " is 169.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Translate,The length of the statement  "		_translationWorker.ProgressChanged += ((sender' args) => progressAction (args.ProgressPercentage' (int)args.UserState)); " is 120.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,GetTargetTextForGridIndex,The length of the statement  "	return (AllLeafNodesShowingInGrid [index].GetTranslatedText (_tgtLangId) ?? AllLeafNodesShowingInGrid [index].GetText (_tgtLangId)); " is 132.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,GetTargetToolTipForGridIndex,The length of the statement  "	return (AllLeafNodesShowingInGrid [index].GetTranslatedToolTip (_tgtLangId) ?? AllLeafNodesShowingInGrid [index].GetToolTip (_tgtLangId)); " is 138.
Long Statement,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,ShowEditSourceBeforeTranslatingDlg,The length of the statement  "	using (var dlg = new EditSourceBeforeTranslatingDlg (CurrentNodeSourceText' _srcLangId' _tgtLangId' "Bing"' BingTranslator)) { " is 126.
Long Statement,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The length of the statement  "	var prefixToRemove = (x.TreeView != null && x.TreeView.SelectedNode != null ? x.TreeView.SelectedNode.Name : string.Empty); " is 123.
Long Statement,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The length of the statement  "	return (_sortOrder == SortOrder.Ascending ? string.Compare (xText' yText' false' ci) : string.Compare (yText' xText' false' ci)); " is 129.
Long Statement,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawHotBackground,The length of the statement  "	var clrBrdr = (hotDown ? ProfessionalColors.ButtonPressedHighlightBorder : ProfessionalColors.ButtonSelectedHighlightBorder); " is 125.
Long Statement,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,CanPaintVisualStyle,The length of the statement  "	return (Application.VisualStyleState != VisualStyleState.NoneEnabled && VisualStyleInformation.IsSupportedByOS && VisualStyleInformation.IsEnabledByUser && VisualStyleRenderer.IsSupported); " is 189.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,Paint,The length of the statement  "		base.Paint (g' clipBounds' bounds' rowIndex' state' value' formattedValue' errorText' style' advancedBorderStyle' parts); " is 121.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,Paint,The length of the statement  "	base.Paint (g' clipBounds' bounds' rowIndex' state' value' formattedValue' errorText' style' advancedBorderStyle' parts); " is 121.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawButton,The length of the statement  "		if ((buttonStyle == LmButtonColumn.ButtonType.VisualStyleCombo || buttonStyle == LmButtonColumn.ButtonType.VisualStylePush) && !DrawVisualStyledButton (buttonStyle' g' rcbtn)) { " is 177.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawButton,The length of the statement  "	const TextFormatFlags flags = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.NoPadding | TextFormatFlags.PreserveGraphicsClipping; " is 253.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The length of the statement  "	if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) { " is 181.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The length of the statement  "		var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText); " is 121.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawVisualStyledButton,The length of the statement  "	VisualStyleElement element = (buttonStyle == LmButtonColumn.ButtonType.VisualStyleCombo ? GetVisualStyleComboButton () : GetVisualStylePushButton ()); " is 150.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawCellText,The length of the statement  "	TextFormatFlags flags = TextFormatFlags.LeftAndRightPadding | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.NoPrefix | (useEllipsisPath ? TextFormatFlags.PathEllipsis : TextFormatFlags.EndEllipsis) | TextFormatFlags.PreserveGraphicsClipping; " is 273.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetVisualStylePushButton,The length of the statement  "		element = (_mouseDownOnButton ? VisualStyleElement.Button.PushButton.Pressed : VisualStyleElement.Button.PushButton.Hot); " is 121.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetVisualStyleComboButton,The length of the statement  "		element = (_mouseDownOnButton ? VisualStyleElement.ComboBox.DropDownButton.Pressed : VisualStyleElement.ComboBox.DropDownButton.Hot); " is 133.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The length of the statement  "	int buttonWidth = (OwningButtonColumn == null ? SystemInformation.VerticalScrollBarWidth : OwningButtonColumn.ButtonWidth); " is 123.
Long Statement,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The length of the statement  "	bool paintComboButton = (OwningButtonColumn == null ? false : OwningButtonColumn.ButtonStyle != LmButtonColumn.ButtonType.PlainPush && OwningButtonColumn.ButtonStyle != LmButtonColumn.ButtonType.VisualStylePush); " is 212.
Long Statement,L10NSharp.UI,LmButtonColumn,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonColumn.cs,ShowToolTip,The length of the statement  "	if ((_toolTip != null && _toolTip.Active) || string.IsNullOrEmpty (_buttonToolTip) || DataGridView == null || DataGridView.FindForm () == null) { " is 145.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnSizeChanged,The length of the statement  "	if (!_paintWaterMark && Focused && PaintFullRowFocusRectangle && CurrentCellAddress.Y >= 0 && CurrentCellAddress.Y < RowCount) { " is 128.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnGetComboCellList,The length of the statement  "	return (GetComboCellList == null ? new KeyValuePair<object' IEnumerable<object>> (null' null) : GetComboCellList (this' cell' e)); " is 130.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellToolTipTextNeeded,The length of the statement  "	if (e.RowIndex < NewRowIndex && e.RowIndex >= 0 && GetColumnName (e.ColumnIndex) == "removerow" && GetRemoveRowToolTipText != null) { " is 133.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,MakeFirstVisibleCellCurrentInRow,The length of the statement  "	var visibleCols = Columns.Cast<DataGridViewColumn> ().Where (col => col.Visible).OrderBy (col => col.DisplayIndex).ToArray (); " is 126.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellPainting,The length of the statement  "	else if (e.RowIndex == CurrentCellAddress.Y && e.ColumnIndex >= 0 && Columns [e.ColumnIndex] is DataGridViewCheckBoxColumn) { " is 125.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellPainting,The length of the statement  "	if (e.RowIndex == -1 && e.ColumnIndex == 0 && PaintHeaderAcrossFullGridWidth && ClientSize.Width > Columns.GetColumnsWidth (DataGridViewElementStates.Visible)) { " is 161.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnRowPostPaint,The length of the statement  "	if ((e.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.Selected || !ExtendFullRowSelectRectangleToEdge || e.RowIndex < 0 || e.RowIndex >= RowCount) { " is 174.
Long Statement,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,InvalidateRowInFullRowSelectMode,The length of the statement  "	if (PaintFullRowFocusRectangle && SelectionMode == DataGridViewSelectionMode.FullRowSelect && row >= 0 && row < RowCount) { " is 123.
Long Statement,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,DrawText,The length of the statement  "	const TextFormatFlags kFlags = TextFormatFlags.NoPrefix | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.SingleLine | TextFormatFlags.NoPadding | TextFormatFlags.PreserveGraphicsClipping; " is 224.
Long Statement,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,GetCorrectVisualStyleArrowElement,The length of the statement  "		return (m_state == PaintState.Hot ? VisualStyleElement.Spin.DownHorizontal.Hot : VisualStyleElement.Spin.DownHorizontal.Pressed); " is 129.
Long Statement,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,GetCorrectVisualStyleArrowElement,The length of the statement  "	return (m_state == PaintState.Hot ? VisualStyleElement.Spin.UpHorizontal.Hot : VisualStyleElement.Spin.UpHorizontal.Pressed); " is 125.
Long Statement,L10NSharp.TMXUtils,TMXProp,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\TMXUtils\TMXProp.cs,AddProp,The length of the statement  "	//review: I (jh) was surprised to see that each setting of a property merely added it to this list' so we'd get dozens of the same thing over and over. " is 151.
Long Statement,L10NSharp.TMXUtils,TMXProp,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\TMXUtils\TMXProp.cs,AddProp,The length of the statement  "	//From what I can tell looking around' it seems it is safe to treat these properites as atomic' so I've added this Remove before re-adding with the  " is 147.
Long Statement,L10NSharp.TMXUtils,TMXTags,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\TMXUtils\TMXTags.cs,GetSegmentType,The length of the statement  "	return (string.IsNullOrEmpty (segtype) || !Enum.IsDefined (typeof(TMXSegType)' segtype) ? TMXSegType.undefined : (TMXSegType)Enum.Parse (typeof(TMXSegType)' segtype)); " is 167.
Complex Conditional,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellFormatting,The conditional expression  "gridNodes == null || e.RowIndex >= gridNodes.Count || e.ColumnIndex < 1 || e.ColumnIndex > 2"  is complex.
Complex Conditional,L10NSharp.UI,LocalizeItemDlgViewModel,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,SaveChangesInMemory,The conditional expression  "locInfo == null || locInfo.Id == null || locInfo.UpdateFields == UpdateFields.None || _tgtLangId == _srcLangId"  is complex.
Complex Conditional,L10NSharp.UI,ShortcutKeysEditor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ShortcutKeysEditor.cs,GetStringFromNonModifierKeys,The conditional expression  "keystr.Length == 2 && keystr [0] == 'D' && keystr [1] >= '0' && keystr [1] <= '9'"  is complex.
Complex Conditional,L10NSharp.UI,LmButtonColumn,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonColumn.cs,ShowToolTip,The conditional expression  "(_toolTip != null && _toolTip.Active) || string.IsNullOrEmpty (_buttonToolTip) || DataGridView == null || DataGridView.FindForm () == null"  is complex.
Complex Conditional,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnSizeChanged,The conditional expression  "!_paintWaterMark && Focused && PaintFullRowFocusRectangle && CurrentCellAddress.Y >= 0 && CurrentCellAddress.Y < RowCount"  is complex.
Complex Conditional,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellToolTipTextNeeded,The conditional expression  "e.RowIndex < NewRowIndex && e.RowIndex >= 0 && GetColumnName (e.ColumnIndex) == "removerow" && GetRemoveRowToolTipText != null"  is complex.
Complex Conditional,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellPainting,The conditional expression  "e.RowIndex == -1 && e.ColumnIndex == 0 && PaintHeaderAcrossFullGridWidth && ClientSize.Width > Columns.GetColumnsWidth (DataGridViewElementStates.Visible)"  is complex.
Complex Conditional,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnRowPostPaint,The conditional expression  "(e.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.Selected || !ExtendFullRowSelectRectangleToEdge || e.RowIndex < 0 || e.RowIndex >= RowCount"  is complex.
Complex Conditional,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,InvalidateRowInFullRowSelectMode,The conditional expression  "PaintFullRowFocusRectangle && SelectionMode == DataGridViewSelectionMode.FullRowSelect && row >= 0 && row < RowCount"  is complex.
Complex Conditional,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The conditional expression  "c == '&' || c == '"' || c == '<' || c == '>' || c > 159"  is complex.
Complex Conditional,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Complex Conditional,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlEncode,The conditional expression  "(c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')"  is complex.
Empty Catch Block,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetAllAssemblies,The method has an empty catch block.
Empty Catch Block,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindLocalizedStringsInType,The method has an empty catch block.
Empty Catch Block,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindLocalizedStringsInType,The method has an empty catch block.
Empty Catch Block,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,GetPriority,The method has an empty catch block.
Empty Catch Block,L10NSharp,LocalizedStringCache,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\LocalizedStringCache.cs,GetCategory,The method has an empty catch block.
Empty Catch Block,L10NSharp.UI,LanguageChoosingDialog,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LanguageChoosingDialog.cs,Application_Idle,The method has an empty catch block.
Empty Catch Block,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The method has an empty catch block.
Empty Catch Block,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The method has an empty catch block.
Empty Catch Block,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnCellValidating,The method has an empty catch block.
Empty Catch Block,L10NSharp.UI,Utils,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Utils.cs,GetProperty,The method has an empty catch block.
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadUInt16,The following statement contains a magic number: _position += 2;  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadUInt16,The following statement contains a magic number: return BitConverter.ToUInt16 (_byteArray' _position - 2);  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadInt32,The following statement contains a magic number: _position += 4;  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadInt32,The following statement contains a magic number: return BitConverter.ToInt32 (_byteArray' _position - 4);  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadInt64,The following statement contains a magic number: _position += 8;  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadInt64,The following statement contains a magic number: return BitConverter.ToInt64 (_byteArray' _position - 8);  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadSingle,The following statement contains a magic number: _position += 4;  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadSingle,The following statement contains a magic number: return BitConverter.ToSingle (_byteArray' _position - 4);  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadDouble,The following statement contains a magic number: _position += 8;  
Magic Number,L10NSharp.CodeReader,ILReader,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\ILReader.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble (_byteArray' _position - 8);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,DoExtractingWork,The following statement contains a magic number: worker.ReportProgress (100);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (parameters [3] != null)  	locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (parameters [3] != null)  	locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (parameters [4] != null)  	locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: if (parameters [4] != null)  	locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToLocalizeExtension,The following statement contains a magic number: locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall >= 3 && parameters [2] != null)  	locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: locInfo.Comment = parameters [2];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (paramsInMethodCall == 6) {  	if (parameters [3] != null)  		locInfo.ToolTipText = parameters [3];  	if (parameters [4] != null)  		locInfo.ShortcutKeys = parameters [4];  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (parameters [3] != null)  	locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (parameters [3] != null)  	locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: locInfo.ToolTipText = parameters [3];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (parameters [4] != null)  	locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: if (parameters [4] != null)  	locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,GetInfoForCallToGetStringMethod,The following statement contains a magic number: locInfo.ShortcutKeys = parameters [4];  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: for (int i = 1; i < _instructions.Count; i++) {  	string text = null;  	if (_instructions [i].opCode == OpCodes.Ldstr) {  		text = module.ResolveString ((int)_instructions [i].operand);  		if (text.StartsWith (LocalizationManager.kL10NPrefix)) {  			var locInfo = GetLocInfoForField (caller.ReflectedType.Name' text);  			locInfo.Id = LocalizingInfo.GetIdFromText (text);  			locInfo.Text = LocalizationManager.StripOffLocalizationInfoFromText (text);  			continue;  		}  	}  	if (_instructions [i].opCode != OpCodes.Callvirt && _instructions [i].opCode != OpCodes.Calli && _instructions [i].opCode != OpCodes.Call) {  		continue;  	}  	if (_instructions [i - 1].opCode == OpCodes.Ldnull)  		continue;  	Type[] genericMethodArguments = null;  	var genericTypeArguments = caller.DeclaringType.GetGenericArguments ();  	if ((!caller.IsConstructor) && (!caller.Name.Equals (".cctor")))  		genericMethodArguments = caller.GetGenericArguments ();  	string fldName = null;  	var mi = module.ResolveMethod ((int)_instructions [i].operand' genericTypeArguments' genericMethodArguments);  	if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  		var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  		continue;  	}  	text = (i > 1 && _instructions [i - 1].opCode == OpCodes.Ldstr ? module.ResolveString ((int)_instructions [i - 1].operand) : null);  	if (text == null)  		continue;  	if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  	}  	else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  	}  	else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  	}  	else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  		fldName = GetFieldName (module' _instructions [i - 2]);  		GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  	}  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  	var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  	continue;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizationPriority"' StringComparison.Ordinal)) {  	var priority = (LocalizationPriority)(_instructions [i - 1].opCode.Value - 22);  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Priority = priority;  	continue;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: fldName = GetFieldName (module' _instructions [i - 2]);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  }  else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  }  else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  }  else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizingId"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Id = text;  }  else if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: fldName = GetFieldName (module' _instructions [i - 2]);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizationComment"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Comment = text;  }  else if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: fldName = GetFieldName (module' _instructions [i - 2]);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("SetLocalizableToolTip"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).ToolTipText = text;  }  else if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: fldName = GetFieldName (module' _instructions [i - 2]);  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: if (mi.Name.Equals ("set_Text"' StringComparison.Ordinal)) {  	fldName = GetFieldName (module' _instructions [i - 2]);  	GetLocInfoForField (caller.ReflectedType.Name' fldName).Text = text;  }  
Magic Number,L10NSharp.CodeReader,StringExtractor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\CodeReader\StringExtractor.cs,FindExtenderCalls,The following statement contains a magic number: fldName = GetFieldName (module' _instructions [i - 2]);  
Magic Number,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,The following statement contains a magic number: switch (node.NodeType) {  case HtmlNodeType.Comment:  	// don't output comments  	break;  case HtmlNodeType.Document:  	ConvertContentTo (node' filePath' outText);  	break;  case HtmlNodeType.Text:  	// script and style must not be output  	string parentName = node.ParentNode.Name;  	if ((parentName == "script") || (parentName == "style"))  		break;  	// get text  	html = ((HtmlTextNode)node).Text;  	// is it in fact a special closing node output as text?  	if (HtmlNode.IsOverlappedClosingElement (html))  		break;  	// check the text is meaningful and not a bunch of whitespaces  	if (html.Trim ().Length > 0) {  		string path = node.XPath.Replace ('/'' '.');  		path = path.Substring (0' path.Length - 9);  		int start = filePath.LastIndexOf ('\\') + 1;  		path = filePath.Substring (start' filePath.Length - start) + path;  		outText.Add (new Node (path' HtmlEntity.DeEntitize (html)));  	}  	break;  case HtmlNodeType.Element:  	switch (node.Name) {  	case "p":  		// treat paragraphs as crlf  		//outText.Write("\r\n");  		break;  	}  	if (node.HasChildNodes) {  		ConvertContentTo (node' filePath' outText);  	}  	break;  }  
Magic Number,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,The following statement contains a magic number: if (html.Trim ().Length > 0) {  	string path = node.XPath.Replace ('/'' '.');  	path = path.Substring (0' path.Length - 9);  	int start = filePath.LastIndexOf ('\\') + 1;  	path = filePath.Substring (start' filePath.Length - start) + path;  	outText.Add (new Node (path' HtmlEntity.DeEntitize (html)));  }  
Magic Number,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,The following statement contains a magic number: path = path.Substring (0' path.Length - 9);  
Magic Number,L10NSharp.UI,ColorHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ColorHelper.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb (255' newRed' newGreen' newBlue);  
Magic Number,L10NSharp.UI,ColorHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ColorHelper.cs,MakeDisabledImage,The following statement contains a magic number: for (int x = 0; x < bmp.Width; x++) {  	for (int y = 0; y < bmp.Height; y++) {  		Color clr = bmp.GetPixel (x' y);  		if (clr != clrBase && clr.ToArgb () != 0) {  			float brightness = clr.GetBrightness ();  			bmp.SetPixel (x' y' (brightness > 0.7 ? clrBase : notSoDark));  		}  	}  }  
Magic Number,L10NSharp.UI,ColorHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ColorHelper.cs,MakeDisabledImage,The following statement contains a magic number: for (int y = 0; y < bmp.Height; y++) {  	Color clr = bmp.GetPixel (x' y);  	if (clr != clrBase && clr.ToArgb () != 0) {  		float brightness = clr.GetBrightness ();  		bmp.SetPixel (x' y' (brightness > 0.7 ? clrBase : notSoDark));  	}  }  
Magic Number,L10NSharp.UI,ColorHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ColorHelper.cs,MakeDisabledImage,The following statement contains a magic number: if (clr != clrBase && clr.ToArgb () != 0) {  	float brightness = clr.GetBrightness ();  	bmp.SetPixel (x' y' (brightness > 0.7 ? clrBase : notSoDark));  }  
Magic Number,L10NSharp.UI,ColorHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ColorHelper.cs,MakeDisabledImage,The following statement contains a magic number: bmp.SetPixel (x' y' (brightness > 0.7 ? clrBase : notSoDark));  
Magic Number,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,CustomDropDownComboBox,The following statement contains a magic number: TextBox.Left = Padding.Left + 2;  
Magic Number,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,OnResize,The following statement contains a magic number: TextBox.Width = (ClientSize.Width - Padding.Left - Padding.Right - m_button.Width - 2);  
Magic Number,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,OnPaint,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  	ControlPaint.DrawBorder3D (e.Graphics' ClientRectangle' Border3DStyle.Sunken);  else {  	VisualStyleRenderer renderer = new VisualStyleRenderer (Enabled ? VisualStyleElement.TextBox.TextEdit.Normal : VisualStyleElement.TextBox.TextEdit.Disabled);  	renderer.DrawBackground (e.Graphics' ClientRectangle' e.ClipRectangle);  	// When the textbox background is drawn in normal mode (at least when the  	// theme is one of the standard XP themes)' it's drawn with a white background  	// and not the System Window background color. Therefore' we need to create  	// a rectangle that doesn't include the border. Then fill it with the text  	// box's background color.  	Rectangle rc = renderer.GetBackgroundExtent (e.Graphics' ClientRectangle);  	int dx = (rc.Width - ClientRectangle.Width) / 2;  	int dy = (rc.Height - ClientRectangle.Height) / 2;  	rc = ClientRectangle;  	rc.Inflate (-dx' -dy);  	using (var br = new SolidBrush (TextBox.BackColor))  		e.Graphics.FillRectangle (br' rc);  }  
Magic Number,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,OnPaint,The following statement contains a magic number: if (!Application.RenderWithVisualStyles)  	ControlPaint.DrawBorder3D (e.Graphics' ClientRectangle' Border3DStyle.Sunken);  else {  	VisualStyleRenderer renderer = new VisualStyleRenderer (Enabled ? VisualStyleElement.TextBox.TextEdit.Normal : VisualStyleElement.TextBox.TextEdit.Disabled);  	renderer.DrawBackground (e.Graphics' ClientRectangle' e.ClipRectangle);  	// When the textbox background is drawn in normal mode (at least when the  	// theme is one of the standard XP themes)' it's drawn with a white background  	// and not the System Window background color. Therefore' we need to create  	// a rectangle that doesn't include the border. Then fill it with the text  	// box's background color.  	Rectangle rc = renderer.GetBackgroundExtent (e.Graphics' ClientRectangle);  	int dx = (rc.Width - ClientRectangle.Width) / 2;  	int dy = (rc.Height - ClientRectangle.Height) / 2;  	rc = ClientRectangle;  	rc.Inflate (-dx' -dy);  	using (var br = new SolidBrush (TextBox.BackColor))  		e.Graphics.FillRectangle (br' rc);  }  
Magic Number,L10NSharp.UI,CustomDropDownComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\CustomDropDownComboBox.cs,PaintNonThemeButton,The following statement contains a magic number: using (var fnt = new Font ("Marlett"' 10)) {  	TextRenderer.DrawText (g' "6"' fnt' m_button.ClientRectangle' SystemColors.ControlDarkDark' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);  }  
Magic Number,L10NSharp.UI,FallbackLanguagesDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\FallbackLanguagesDlg.cs,UpdateDisplay,The following statement contains a magic number: _buttonMoveDown.Enabled = (_listBoxFallbackLanguages.SelectedIndex < _listBoxFallbackLanguages.Items.Count - 2);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,InitializeColorsAndFonts,The following statement contains a magic number: _textBoxSrcTranslation.BackColor = PaintingHelper.CalculateColor (SystemColors.Control' Color.White' 140);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,OnShown,The following statement contains a magic number: _grid.ColumnHeadersHeight += 8;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,SaveDialogBoxSettings,The following statement contains a magic number: if (_viewModel.GridSortOrder == SortOrder.None)  	bldr.AppendFormat ("{0}'"' 0);  else  	bldr.AppendFormat ("{0}'"' _viewModel.GridSortOrder == SortOrder.Ascending ? 1 : 2);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,SaveDialogBoxSettings,The following statement contains a magic number: bldr.AppendFormat ("{0}'"' _viewModel.GridSortOrder == SortOrder.Ascending ? 1 : 2);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (settings.Length < 9)  	return;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: try {  	var bounds = Bounds;  	int value;  	if (int.TryParse (settings [2]' out value))  		bounds.X = value;  	if (int.TryParse (settings [3]' out value))  		bounds.Y = value;  	if (int.TryParse (settings [4]' out value))  		bounds.Width = value;  	if (int.TryParse (settings [5]' out value))  		bounds.Height = value;  	Bounds = bounds;  	if (int.TryParse (settings [6]' out value))  		_tmpSplitDistance = value;  	if (int.TryParse (settings [7]' out value))  		_viewModel.GridSortField = (NodeComparer.SortField)value;  	if (int.TryParse (settings [8]' out value))  		_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  	int i = 9;  	foreach (DataGridViewColumn col in _grid.Columns) {  		if (i == settings.Length)  			return;  		if (int.TryParse (settings [i++]' out value))  			col.Width = value;  	}  }  catch {  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [2]' out value))  	bounds.X = value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [3]' out value))  	bounds.Y = value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [4]' out value))  	bounds.Width = value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [5]' out value))  	bounds.Height = value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [6]' out value))  	_tmpSplitDistance = value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [7]' out value))  	_viewModel.GridSortField = (NodeComparer.SortField)value;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [8]' out value))  	_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: if (int.TryParse (settings [8]' out value))  	_viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,GetDialogBoxSettings,The following statement contains a magic number: _viewModel.GridSortOrder = (value == 2 ? SortOrder.Descending : SortOrder.Ascending);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellMouseEnter,The following statement contains a magic number: if (e.ColumnIndex == -1 && e.RowIndex == -1) {  	var pt = PointToClient (MousePosition);  	pt.Y += (SystemInformation.CaptionHeight + Cursor.Size.Height - 3);  	_tooltip.Show ("Select All Rows"' this' pt);  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellMouseEnter,The following statement contains a magic number: pt.Y += (SystemInformation.CaptionHeight + Cursor.Size.Height - 3);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellFormatting,The following statement contains a magic number: if (gridNodes == null || e.RowIndex >= gridNodes.Count || e.ColumnIndex < 1 || e.ColumnIndex > 2)  	return;  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValueNeeded,The following statement contains a magic number: switch (e.ColumnIndex) {  case 0:  	e.Value = _viewModel.GetStringIdForGridIndex (e.RowIndex' parentNode.Name);  	break;  case 1:  	e.Value = _viewModel.GetSourceTextForGridIndex (e.RowIndex);  	break;  case 2:  	e.Value = _viewModel.GetTargetTextForGridIndex (e.RowIndex);  	break;  case 3:  	e.Value = _viewModel.GetSourceToolTipForGridIndex (e.RowIndex);  	break;  case 4:  	e.Value = _viewModel.GetTargetToolTipForGridIndex (e.RowIndex);  	break;  case 5:  	e.Value = _viewModel.GetCommentForGridIndex (e.RowIndex);  	break;  default:  	e.Value = null;  	break;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValueNeeded,The following statement contains a magic number: switch (e.ColumnIndex) {  case 0:  	e.Value = _viewModel.GetStringIdForGridIndex (e.RowIndex' parentNode.Name);  	break;  case 1:  	e.Value = _viewModel.GetSourceTextForGridIndex (e.RowIndex);  	break;  case 2:  	e.Value = _viewModel.GetTargetTextForGridIndex (e.RowIndex);  	break;  case 3:  	e.Value = _viewModel.GetSourceToolTipForGridIndex (e.RowIndex);  	break;  case 4:  	e.Value = _viewModel.GetTargetToolTipForGridIndex (e.RowIndex);  	break;  case 5:  	e.Value = _viewModel.GetCommentForGridIndex (e.RowIndex);  	break;  default:  	e.Value = null;  	break;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValueNeeded,The following statement contains a magic number: switch (e.ColumnIndex) {  case 0:  	e.Value = _viewModel.GetStringIdForGridIndex (e.RowIndex' parentNode.Name);  	break;  case 1:  	e.Value = _viewModel.GetSourceTextForGridIndex (e.RowIndex);  	break;  case 2:  	e.Value = _viewModel.GetTargetTextForGridIndex (e.RowIndex);  	break;  case 3:  	e.Value = _viewModel.GetSourceToolTipForGridIndex (e.RowIndex);  	break;  case 4:  	e.Value = _viewModel.GetTargetToolTipForGridIndex (e.RowIndex);  	break;  case 5:  	e.Value = _viewModel.GetCommentForGridIndex (e.RowIndex);  	break;  default:  	e.Value = null;  	break;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValueNeeded,The following statement contains a magic number: switch (e.ColumnIndex) {  case 0:  	e.Value = _viewModel.GetStringIdForGridIndex (e.RowIndex' parentNode.Name);  	break;  case 1:  	e.Value = _viewModel.GetSourceTextForGridIndex (e.RowIndex);  	break;  case 2:  	e.Value = _viewModel.GetTargetTextForGridIndex (e.RowIndex);  	break;  case 3:  	e.Value = _viewModel.GetSourceToolTipForGridIndex (e.RowIndex);  	break;  case 4:  	e.Value = _viewModel.GetTargetToolTipForGridIndex (e.RowIndex);  	break;  case 5:  	e.Value = _viewModel.GetCommentForGridIndex (e.RowIndex);  	break;  default:  	e.Value = null;  	break;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValuePushed,The following statement contains a magic number: switch (e.ColumnIndex) {  case 2:  	locInfo.Text = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Text;  	break;  case 4:  	locInfo.ToolTipText = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.ToolTip;  	break;  case 5:  	locInfo.Comment = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Comment;  	break;  default:  	return;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValuePushed,The following statement contains a magic number: switch (e.ColumnIndex) {  case 2:  	locInfo.Text = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Text;  	break;  case 4:  	locInfo.ToolTipText = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.ToolTip;  	break;  case 5:  	locInfo.Comment = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Comment;  	break;  default:  	return;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGridCellValuePushed,The following statement contains a magic number: switch (e.ColumnIndex) {  case 2:  	locInfo.Text = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Text;  	break;  case 4:  	locInfo.ToolTipText = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.ToolTip;  	break;  case 5:  	locInfo.Comment = (e.Value as string) ?? string.Empty;  	locInfo.UpdateFields = UpdateFields.Comment;  	break;  default:  	return;  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The following statement contains a magic number: using (var pen = new Pen (PaintingHelper.CalculateColor (Color.Black' Color.White' 45))) {  	e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5);  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The following statement contains a magic number: using (var pen = new Pen (PaintingHelper.CalculateColor (Color.Black' Color.White' 45))) {  	e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5);  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The following statement contains a magic number: using (var pen = new Pen (PaintingHelper.CalculateColor (Color.Black' Color.White' 45))) {  	e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5);  }  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5);  
Magic Number,L10NSharp.UI,LocalizeItemDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlg.cs,HandleGroupSrcTranslationPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' _textBoxSrcTranslation.Left' _textBoxSrcTranslation.Bottom + 5' _textBoxSrcTranslation.Right - 1' _textBoxSrcTranslation.Bottom + 5);  
Magic Number,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The following statement contains a magic number: switch ((int)_sortField) {  case 0:  	xText = x.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	yText = y.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	break;  case 1:  	xText = x.GetText (_srcLangId) ?? string.Empty;  	yText = y.GetText (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 2:  	xText = (x.GetTranslatedText (_tgtLangId) ?? x.GetText (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedText (_tgtLangId) ?? y.GetText (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  case 3:  	xText = x.GetToolTip (_srcLangId) ?? string.Empty;  	yText = y.GetToolTip (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 4:  	xText = (x.GetTranslatedToolTip (_tgtLangId) ?? x.GetToolTip (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedToolTip (_tgtLangId) ?? y.GetToolTip (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  }  
Magic Number,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The following statement contains a magic number: switch ((int)_sortField) {  case 0:  	xText = x.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	yText = y.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	break;  case 1:  	xText = x.GetText (_srcLangId) ?? string.Empty;  	yText = y.GetText (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 2:  	xText = (x.GetTranslatedText (_tgtLangId) ?? x.GetText (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedText (_tgtLangId) ?? y.GetText (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  case 3:  	xText = x.GetToolTip (_srcLangId) ?? string.Empty;  	yText = y.GetToolTip (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 4:  	xText = (x.GetTranslatedToolTip (_tgtLangId) ?? x.GetToolTip (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedToolTip (_tgtLangId) ?? y.GetToolTip (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  }  
Magic Number,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The following statement contains a magic number: switch ((int)_sortField) {  case 0:  	xText = x.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	yText = y.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	break;  case 1:  	xText = x.GetText (_srcLangId) ?? string.Empty;  	yText = y.GetText (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 2:  	xText = (x.GetTranslatedText (_tgtLangId) ?? x.GetText (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedText (_tgtLangId) ?? y.GetText (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  case 3:  	xText = x.GetToolTip (_srcLangId) ?? string.Empty;  	yText = y.GetToolTip (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 4:  	xText = (x.GetTranslatedToolTip (_tgtLangId) ?? x.GetToolTip (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedToolTip (_tgtLangId) ?? y.GetToolTip (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb (255' newRed' newGreen' newBlue);  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawHotBackground,The following statement contains a magic number: using (var br = new LinearGradientBrush (rc' clr1' clr2' 90))  	g.FillRectangle (br' rc);  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: if (makeDark) {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.ActiveCaption' 70);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.ActiveCaption' 0);  }  else {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.GradientActiveCaption' 190);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.GradientActiveCaption' 50);  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: if (makeDark) {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.ActiveCaption' 70);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.ActiveCaption' 0);  }  else {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.GradientActiveCaption' 190);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.GradientActiveCaption' 50);  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: if (makeDark) {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.ActiveCaption' 70);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.ActiveCaption' 0);  }  else {  	clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.GradientActiveCaption' 190);  	clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.GradientActiveCaption' 50);  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.ActiveCaption' 70);  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: clrTop = ColorHelper.CalculateColor (Color.White' SystemColors.GradientActiveCaption' 190);  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: clrBottom = ColorHelper.CalculateColor (SystemColors.ActiveCaption' SystemColors.GradientActiveCaption' 50);  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: try {  	if (rc.Width > 0 && rc.Height > 0) {  		using (var br = new LinearGradientBrush (rc' clrTop' clrBottom' 90))  			g.FillRectangle (br' rc);  	}  }  catch {  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: if (rc.Width > 0 && rc.Height > 0) {  	using (var br = new LinearGradientBrush (rc' clrTop' clrBottom' 90))  		g.FillRectangle (br' rc);  }  
Magic Number,L10NSharp.UI,PaintingHelper,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PaintingHelper.cs,DrawGradientBackground,The following statement contains a magic number: using (var br = new LinearGradientBrush (rc' clrTop' clrBottom' 90))  	g.FillRectangle (br' rc);  
Magic Number,L10NSharp.UI,InitializationProgressDlg,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\InitializationProgressDlg.cs,backgroundWorker_ProgressChanged,The following statement contains a magic number: _progressBar.Value = Math.Min (e.ProgressPercentage' 100);  
Magic Number,L10NSharp.UI,ShortcutKeysEditor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ShortcutKeysEditor.cs,GetStringFromNonModifierKeys,The following statement contains a magic number: if (keystr.Length == 2 && keystr [0] == 'D' && keystr [1] >= '0' && keystr [1] <= '9')  	return keystr [1].ToString ();  
Magic Number,L10NSharp.UI,ShortcutKeysEditor,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\ShortcutKeysEditor.cs,HandleDrawButtonBackground,The following statement contains a magic number: clr = PaintingHelper.CalculateColor (Color.Black' BackColor' 70);  
Magic Number,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PaintArrow,The following statement contains a magic number: dyArrowTip = Math.Min (dyArrowTip' rcHead.Height / 2);  
Magic Number,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PaintArrow,The following statement contains a magic number: if (!drawLeftArrow) {  	// Recalculate the points to draw an arrow on right side' pointing right.   	pt1.X = rcHead.Right - 3;  	pt2.X = rcHead.Right - 9;  	pt3.X = pt2.X;  }  
Magic Number,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PaintArrow,The following statement contains a magic number: if (!drawLeftArrow) {  	// Recalculate the points to draw an arrow on right side' pointing right.   	pt1.X = rcHead.Right - 3;  	pt2.X = rcHead.Right - 9;  	pt3.X = pt2.X;  }  
Magic Number,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PaintArrow,The following statement contains a magic number: pt1.X = rcHead.Right - 3;  
Magic Number,L10NSharp.UI,PopupControl,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\PopupControl.cs,PaintArrow,The following statement contains a magic number: pt2.X = rcHead.Right - 9;  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: if (element != VisualStyleElement.ComboBox.DropDownButton.Normal && element != VisualStyleElement.ComboBox.DropDownButton.Disabled && PaintingHelper.CanPaintVisualStyle (element)) {  	var renderer = new VisualStyleRenderer (element);  	renderer.DrawBackground (g' rc);  }  else {  	var pen = (element == VisualStyleElement.ComboBox.DropDownButton.Disabled ? SystemPens.GrayText : SystemPens.WindowText);  	var x = rc.X + (int)Math.Round ((rc.Width - 7) / 2f' MidpointRounding.AwayFromZero);  	var y = rc.Y + (int)Math.Round ((rc.Height - 4) / 2f' MidpointRounding.AwayFromZero);  	g.DrawLine (pen' x' y' x + 6' y++);  	g.DrawLine (pen' x + 1' y' x + 5' y++);  	g.DrawLine (pen' x + 2' y' x + 4' y);  	g.DrawLine (pen' x + 3' y' x + 3' y + 1);  	return;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x' y' x + 6' y++);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x + 1' y' x + 5' y++);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x + 2' y' x + 4' y);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x + 2' y' x + 4' y);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x + 3' y' x + 3' y + 1);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,DrawMinimalistButton,The following statement contains a magic number: g.DrawLine (pen' x + 3' y' x + 3' y + 1);  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: if (paintComboButton)  	buttonWidth += 2;  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: buttonWidth += 2;  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: if (paintComboButton) {  	rcbtn.Width -= 2;  	rcbtn.Height -= 3;  	rcbtn.X++;  	rcbtn.Y += 2;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: if (paintComboButton) {  	rcbtn.Width -= 2;  	rcbtn.Height -= 3;  	rcbtn.X++;  	rcbtn.Y += 2;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: if (paintComboButton) {  	rcbtn.Width -= 2;  	rcbtn.Height -= 3;  	rcbtn.X++;  	rcbtn.Y += 2;  }  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: rcbtn.Width -= 2;  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: rcbtn.Height -= 3;  
Magic Number,L10NSharp.UI,LmButtonCell,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonCell.cs,GetRectangles,The following statement contains a magic number: rcbtn.Y += 2;  
Magic Number,L10NSharp.UI,LmButtonColumn,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonColumn.cs,LmButtonColumn,The following statement contains a magic number: Width = 100 + ButtonWidth;  
Magic Number,L10NSharp.UI,LmButtonColumn,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmButtonColumn.cs,ShowToolTip,The following statement contains a magic number: pt.X += (int)(sz.Width * 0.6);  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,LmGrid,The following statement contains a magic number: RowHeadersWidth = 22;  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,LmGrid,The following statement contains a magic number: GridColor = Color.FromArgb (clr.R - 30' clr.G - 30' clr.B - 30);  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,LmGrid,The following statement contains a magic number: GridColor = Color.FromArgb (clr.R - 30' clr.G - 30' clr.B - 30);  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,LmGrid,The following statement contains a magic number: GridColor = Color.FromArgb (clr.R - 30' clr.G - 30' clr.B - 30);  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnScroll,The following statement contains a magic number: if (PaintFullRowFocusRectangle && SelectionMode == DataGridViewSelectionMode.FullRowSelect) {  	if (e.ScrollOrientation == ScrollOrientation.HorizontalScroll) {  		InvalidateRowInFullRowSelectMode (CurrentCellAddress.Y);  	}  	else {  		if (CurrentCellAddress.Y >= 0 && CurrentCellAddress.Y < RowCount) {  			Invalidate (new Rectangle (0' ColumnHeadersHeight - 1' ClientSize.Width' 2));  			if (FirstDisplayedScrollingRowIndex == CurrentCellAddress.Y - 1)  				InvalidateRowInFullRowSelectMode (CurrentCellAddress.Y);  		}  	}  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnScroll,The following statement contains a magic number: if (e.ScrollOrientation == ScrollOrientation.HorizontalScroll) {  	InvalidateRowInFullRowSelectMode (CurrentCellAddress.Y);  }  else {  	if (CurrentCellAddress.Y >= 0 && CurrentCellAddress.Y < RowCount) {  		Invalidate (new Rectangle (0' ColumnHeadersHeight - 1' ClientSize.Width' 2));  		if (FirstDisplayedScrollingRowIndex == CurrentCellAddress.Y - 1)  			InvalidateRowInFullRowSelectMode (CurrentCellAddress.Y);  	}  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnScroll,The following statement contains a magic number: if (CurrentCellAddress.Y >= 0 && CurrentCellAddress.Y < RowCount) {  	Invalidate (new Rectangle (0' ColumnHeadersHeight - 1' ClientSize.Width' 2));  	if (FirstDisplayedScrollingRowIndex == CurrentCellAddress.Y - 1)  		InvalidateRowInFullRowSelectMode (CurrentCellAddress.Y);  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,OnScroll,The following statement contains a magic number: Invalidate (new Rectangle (0' ColumnHeadersHeight - 1' ClientSize.Width' 2));  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,HandleEditControlTextBoxPanelPaint,The following statement contains a magic number: if (pnl.Tag == null) {  	txt.Width = pnl.Width - 6;  	txt.Left = 3;  	pnl.Tag = true;  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,HandleEditControlTextBoxPanelPaint,The following statement contains a magic number: if (pnl.Tag == null) {  	txt.Width = pnl.Width - 6;  	txt.Left = 3;  	pnl.Tag = true;  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,HandleEditControlTextBoxPanelPaint,The following statement contains a magic number: txt.Width = pnl.Width - 6;  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,HandleEditControlTextBoxPanelPaint,The following statement contains a magic number: txt.Left = 3;  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,HandleEditControlTextBoxPanelPaint,The following statement contains a magic number: rc.Width -= 3;  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,SelectAdjacentVisibleColumn,The following statement contains a magic number: for (int pass = 0; pass < 2; pass++) {  	for (int i = CurrentCellAddress.X + inc; i >= 0 && i < ColumnCount; i += inc) {  		if (Columns [i].Visible) {  			CurrentCell = this [i' CurrentCellAddress.Y];  			return true;  		}  	}  	inc *= -1;  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,InvalidateRowInFullRowSelectMode,The following statement contains a magic number: if (PaintFullRowFocusRectangle && SelectionMode == DataGridViewSelectionMode.FullRowSelect && row >= 0 && row < RowCount) {  	var rc = GetRowDisplayRectangle (row' false);  	rc.Inflate (1' 2);  	Invalidate (rc);  }  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,InvalidateRowInFullRowSelectMode,The following statement contains a magic number: rc.Inflate (1' 2);  
Magic Number,L10NSharp.UI,LmGrid,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\Grid\LmGrid.cs,CreateDropDownListComboBoxColumn,The following statement contains a magic number: col.MaxDropDownItems = 10;  
Magic Number,L10NSharp.UI,UILanguageComboBox,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\UILanguageComboBox.cs,UILanguageComboBox,The following statement contains a magic number: DropDownHeight = 200;  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,XButton,The following statement contains a magic number: base.Font = new Font ("Marlett"' 9' GraphicsUnit.Point);  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,XButton,The following statement contains a magic number: Size = new Size (16' 16);  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,XButton,The following statement contains a magic number: Size = new Size (16' 16);  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,DrawArrow,The following statement contains a magic number: if (!Font.SizeInPoints.Equals (12))  	Font = new Font (Font.FontFamily' 12' GraphicsUnit.Point);  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,DrawArrow,The following statement contains a magic number: if (!Font.SizeInPoints.Equals (12))  	Font = new Font (Font.FontFamily' 12' GraphicsUnit.Point);  
Magic Number,L10NSharp.UI,XButton,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\XButton.cs,DrawArrow,The following statement contains a magic number: Font = new Font (Font.FontFamily' 12' GraphicsUnit.Point);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: for (int i = 0; i < input.Length; i++) {  	ch = input [i];  	if ((ch < 32 && ch != 9) || ch == 127)  		StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,EncodeHeaderString,The following statement contains a magic number: if ((ch < 32 && ch != 9) || ch == 127)  	StringBuilderAppend (String.Format ("%{0:x2}"' (int)ch)' ref sb);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < s.Length; i++) {  	char c = s [i];  	if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  	#if NET_4_0  					    || c == '\'' #endif  	) {  		needEncode = true;  		break;  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: if (c == '&' || c == '"' || c == '<' || c == '>' || c > 159  #if NET_4_0  				    || c == '\'' #endif  ) {  	needEncode = true;  	break;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else  			output.Append (ch);  		break;  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (s [i]) {  	case '&':  		output.Append ("&amp;");  		break;  	case '>':  		output.Append ("&gt;");  		break;  	case '<':  		output.Append ("&lt;");  		break;  	case '"':  		output.Append ("&quot;");  		break;  	#if NET_4_0  						case '\'': 						output.Append ("&39;"); 						break; #endif  	case '\uff1c':  		output.Append ("&#65308;");  		break;  	case '\uff1e':  		output.Append ("&#65310;");  		break;  	default:  		ch = s [i];  		if (ch > 159 && ch < 256) {  			output.Append ("&#");  			output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else  			output.Append (ch);  		break;  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else  		output.Append (ch);  	break;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: switch (s [i]) {  case '&':  	output.Append ("&amp;");  	break;  case '>':  	output.Append ("&gt;");  	break;  case '<':  	output.Append ("&lt;");  	break;  case '"':  	output.Append ("&quot;");  	break;  #if NET_4_0  					case '\'': 						output.Append ("&39;"); 						break; #endif  case '\uff1c':  	output.Append ("&#65308;");  	break;  case '\uff1e':  	output.Append ("&#65310;");  	break;  default:  	ch = s [i];  	if (ch > 159 && ch < 256) {  		output.Append ("&#");  		output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else  		output.Append (ch);  	break;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else  	output.Append (ch);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlEncode,The following statement contains a magic number: if (ch > 159 && ch < 256) {  	output.Append ("&#");  	output.Append (((int)ch).ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else  	output.Append (ch);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	char c = s [i];  	if (state == 0) {  		if (c == '&') {  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  			state = 1;  		}  		else {  			output.Append (c);  		}  		continue;  	}  	if (c == '&') {  		state = 1;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		output.Append (entity.ToString ());  		entity.Length = 0;  		entity.Append ('&');  		continue;  	}  	if (state == 1) {  		if (c == ';') {  			state = 0;  			output.Append (entity.ToString ());  			output.Append (c);  			entity.Length = 0;  		}  		else {  			number = 0;  			is_hex_value = false;  			if (c != '#') {  				state = 2;  			}  			else {  				state = 3;  			}  			entity.Append (c);  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  	}  	else if (state == 2) {  		entity.Append (c);  		if (c == ';') {  			string key = entity.ToString ();  			if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  				key = Entities [key.Substring (1' key.Length - 2)].ToString ();  			output.Append (key);  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  		}  	}  	else if (state == 3) {  		if (c == ';') {  			#if NET_4_0  									if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  			if (number > 65535) {  				output.Append ("&#");  				output.Append (number.ToString (CultureInfo.InvariantCulture));  				output.Append (";");  			}  			else {  				output.Append ((char)number);  			}  			state = 0;  			entity.Length = 0;  			#if NET_4_0  									rawEntity.Length = 0; #endif  			have_trailing_digits = false;  		}  		else if (is_hex_value && Uri.IsHexDigit (c)) {  			number = number * 16 + Uri.FromHex (c);  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (Char.IsDigit (c)) {  			number = number * 10 + ((int)c - '0');  			have_trailing_digits = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else if (number == 0 && (c == 'x' || c == 'X')) {  			is_hex_value = true;  			#if NET_4_0  									rawEntity.Append (c); #endif  		}  		else {  			state = 2;  			if (have_trailing_digits) {  				entity.Append (number.ToString (CultureInfo.InvariantCulture));  				have_trailing_digits = false;  			}  			entity.Append (c);  		}  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 1) {  	if (c == ';') {  		state = 0;  		output.Append (entity.ToString ());  		output.Append (c);  		entity.Length = 0;  	}  	else {  		number = 0;  		is_hex_value = false;  		if (c != '#') {  			state = 2;  		}  		else {  			state = 3;  		}  		entity.Append (c);  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  }  else if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  }  else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	}  	else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	state = 0;  	output.Append (entity.ToString ());  	output.Append (c);  	entity.Length = 0;  }  else {  	number = 0;  	is_hex_value = false;  	if (c != '#') {  		state = 2;  	}  	else {  		state = 3;  	}  	entity.Append (c);  	#if NET_4_0  							rawEntity.Append (c); #endif  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  }  else {  	state = 3;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c != '#') {  	state = 2;  }  else {  	state = 3;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: state = 3;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 2) {  	entity.Append (c);  	if (c == ';') {  		string key = entity.ToString ();  		if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  			key = Entities [key.Substring (1' key.Length - 2)].ToString ();  		output.Append (key);  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  	}  }  else if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	string key = entity.ToString ();  	if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  		key = Entities [key.Substring (1' key.Length - 2)].ToString ();  	output.Append (key);  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (key.Length > 1 && Entities.ContainsKey (key.Substring (1' key.Length - 2)))  	key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: key = Entities [key.Substring (1' key.Length - 2)].ToString ();  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (state == 3) {  	if (c == ';') {  		#if NET_4_0  								if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  		if (number > 65535) {  			output.Append ("&#");  			output.Append (number.ToString (CultureInfo.InvariantCulture));  			output.Append (";");  		}  		else {  			output.Append ((char)number);  		}  		state = 0;  		entity.Length = 0;  		#if NET_4_0  								rawEntity.Length = 0; #endif  		have_trailing_digits = false;  	}  	else if (is_hex_value && Uri.IsHexDigit (c)) {  		number = number * 16 + Uri.FromHex (c);  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (Char.IsDigit (c)) {  		number = number * 10 + ((int)c - '0');  		have_trailing_digits = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else if (number == 0 && (c == 'x' || c == 'X')) {  		is_hex_value = true;  		#if NET_4_0  								rawEntity.Append (c); #endif  	}  	else {  		state = 2;  		if (have_trailing_digits) {  			entity.Append (number.ToString (CultureInfo.InvariantCulture));  			have_trailing_digits = false;  		}  		entity.Append (c);  	}  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (c == ';') {  	#if NET_4_0  							if (number == 0) 							output.Append (rawEntity.ToString () + ";"); 						else #endif  	if (number > 65535) {  		output.Append ("&#");  		output.Append (number.ToString (CultureInfo.InvariantCulture));  		output.Append (";");  	}  	else {  		output.Append ((char)number);  	}  	state = 0;  	entity.Length = 0;  	#if NET_4_0  							rawEntity.Length = 0; #endif  	have_trailing_digits = false;  }  else if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (number > 65535) {  	output.Append ("&#");  	output.Append (number.ToString (CultureInfo.InvariantCulture));  	output.Append (";");  }  else {  	output.Append ((char)number);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (is_hex_value && Uri.IsHexDigit (c)) {  	number = number * 16 + Uri.FromHex (c);  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: number = number * 16 + Uri.FromHex (c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (Char.IsDigit (c)) {  	number = number * 10 + ((int)c - '0');  	have_trailing_digits = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: number = number * 10 + ((int)c - '0');  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: if (number == 0 && (c == 'x' || c == 'X')) {  	is_hex_value = true;  	#if NET_4_0  							rawEntity.Append (c); #endif  }  else {  	state = 2;  	if (have_trailing_digits) {  		entity.Append (number.ToString (CultureInfo.InvariantCulture));  		have_trailing_digits = false;  	}  	entity.Append (c);  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,HtmlDecode,The following statement contains a magic number: state = 2;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if (c > 255) {  	//FIXME: what happens when there is an internal error?  	//if (!isUnicode)  	//	throw new ArgumentOutOfRangeException ("c"' c' "c must be less than 256");  	int idx;  	int i = (int)c;  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	idx = i >> 12;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 8) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = (i >> 4) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	idx = i & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  	return;  }  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: idx = i >> 12;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 8) & 0x0F;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: idx = (i >> 4) & 0x0F;  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	}  	else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  else  	result.WriteByte ((byte)c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if ((c < '0') || (c < 'A' && c > '9') || (c > 'Z' && c < 'a') || (c > 'z')) {  	if (isUnicode && c > 127) {  		result.WriteByte ((byte)'%');  		result.WriteByte ((byte)'u');  		result.WriteByte ((byte)'0');  		result.WriteByte ((byte)'0');  	}  	else  		result.WriteByte ((byte)'%');  	int idx = ((int)c) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)c) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  else  	result.WriteByte ((byte)c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlEncodeChar,The following statement contains a magic number: if (isUnicode && c > 127) {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'u');  	result.WriteByte ((byte)'0');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)'%');  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlPathEncodeChar,The following statement contains a magic number: if (c < 33 || c > 126) {  	byte[] bIn = Encoding.UTF8.GetBytes (c.ToString ());  	for (int i = 0; i < bIn.Length; i++) {  		result.WriteByte ((byte)'%');  		int idx = ((int)bIn [i]) >> 4;  		result.WriteByte ((byte)hexChars [idx]);  		idx = ((int)bIn [i]) & 0x0F;  		result.WriteByte ((byte)hexChars [idx]);  	}  }  else if (c == ' ') {  	result.WriteByte ((byte)'%');  	result.WriteByte ((byte)'2');  	result.WriteByte ((byte)'0');  }  else  	result.WriteByte ((byte)c);  
Magic Number,System.Web.Util,HttpEncoderFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpEncoderFromMono.cs,UrlPathEncodeChar,The following statement contains a magic number: for (int i = 0; i < bIn.Length; i++) {  	result.WriteByte ((byte)'%');  	int idx = ((int)bIn [i]) >> 4;  	result.WriteByte ((byte)hexChars [idx]);  	idx = ((int)bIn [i]) & 0x0F;  	result.WriteByte ((byte)hexChars [idx]);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,WriteCharBytes,The following statement contains a magic number: if (ch > 255) {  	foreach (byte b in e.GetBytes (new char[] {  		ch  	}))  		buf.Add (b);  }  else  	buf.Add ((byte)ch);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	ch = s [i];  	if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  		if (s [i + 1] == 'u' && i + 5 < len) {  			// unicode hex sequence  			xchar = GetChar (s' i + 2' 4);  			if (xchar != -1) {  				WriteCharBytes (bytes' (char)xchar' e);  				i += 5;  			}  			else  				WriteCharBytes (bytes' '%'' e);  		}  		else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 2;  		}  		else {  			WriteCharBytes (bytes' '%'' e);  		}  		continue;  	}  	if (ch == '+')  		WriteCharBytes (bytes' ' '' e);  	else  		WriteCharBytes (bytes' ch' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (ch == '%' && i + 2 < len && s [i + 1] != '%') {  	if (s [i + 1] == 'u' && i + 5 < len) {  		// unicode hex sequence  		xchar = GetChar (s' i + 2' 4);  		if (xchar != -1) {  			WriteCharBytes (bytes' (char)xchar' e);  			i += 5;  		}  		else  			WriteCharBytes (bytes' '%'' e);  	}  	else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 2;  	}  	else {  		WriteCharBytes (bytes' '%'' e);  	}  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (s [i + 1] == 'u' && i + 5 < len) {  	// unicode hex sequence  	xchar = GetChar (s' i + 2' 4);  	if (xchar != -1) {  		WriteCharBytes (bytes' (char)xchar' e);  		i += 5;  	}  	else  		WriteCharBytes (bytes' '%'' e);  }  else if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (s' i + 2' 4);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 5;  }  else  	WriteCharBytes (bytes' '%'' e);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (s' i + 1' 2)) != -1) {  	WriteCharBytes (bytes' (char)xchar' e);  	i += 2;  }  else {  	WriteCharBytes (bytes' '%'' e);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetInt,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	return c - 'a' + 10;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetInt,The following statement contains a magic number: return c - 'a' + 10;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetInt,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	return c - 'A' + 10;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetInt,The following statement contains a magic number: return c - 'A' + 10;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	int current = GetInt (bytes [i]);  	if (current == -1)  		return -1;  	value = (value << 4) + current;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: value = (value << 4) + current;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = str [i];  	if (c > 127)  		return -1;  	int current = GetInt ((byte)c);  	if (current == -1)  		return -1;  	val = (val << 4) + current;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: if (c > 127)  	return -1;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,GetChar,The following statement contains a magic number: val = (val << 4) + current;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  		if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  			if (acc.Length > 0) {  				output.Append (GetChars (acc' e));  				acc.SetLength (0);  			}  			xchar = GetChar (bytes' i + 2' 4);  			if (xchar != -1) {  				output.Append ((char)xchar);  				i += 5;  				continue;  			}  		}  		else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  			acc.WriteByte ((byte)xchar);  			i += 2;  			continue;  		}  	}  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	if (bytes [i] == '+') {  		output.Append (' ');  	}  	else {  		output.Append ((char)bytes [i]);  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {  	if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  		if (acc.Length > 0) {  			output.Append (GetChars (acc' e));  			acc.SetLength (0);  		}  		xchar = GetChar (bytes' i + 2' 4);  		if (xchar != -1) {  			output.Append ((char)xchar);  			i += 5;  			continue;  		}  	}  	else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  		acc.WriteByte ((byte)xchar);  		i += 2;  		continue;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (bytes [i + 1] == (byte)'u' && i + 5 < end) {  	if (acc.Length > 0) {  		output.Append (GetChars (acc' e));  		acc.SetLength (0);  	}  	xchar = GetChar (bytes' i + 2' 4);  	if (xchar != -1) {  		output.Append ((char)xchar);  		i += 5;  		continue;  	}  }  else if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: xchar = GetChar (bytes' i + 2' 4);  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if (xchar != -1) {  	output.Append ((char)xchar);  	i += 5;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: i += 5;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: if ((xchar = GetChar (bytes' i + 1' 2)) != -1) {  	acc.WriteByte ((byte)xchar);  	i += 2;  	continue;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecode,The following statement contains a magic number: i += 2;  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: for (int i = offset; i < end; i++) {  	char c = (char)bytes [i];  	if (c == '+') {  		c = ' ';  	}  	else if (c == '%' && i < end - 2) {  		int xchar = GetChar (bytes' i + 1' 2);  		if (xchar != -1) {  			c = (char)xchar;  			i += 2;  		}  	}  	result.WriteByte ((byte)c);  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '+') {  	c = ' ';  }  else if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (c == '%' && i < end - 2) {  	int xchar = GetChar (bytes' i + 1' 2);  	if (xchar != -1) {  		c = (char)xchar;  		i += 2;  	}  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: if (xchar != -1) {  	c = (char)xchar;  	i += 2;  }  
Magic Number,L10NSharp.Utility,HttpUtilityFromMono,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Utility\HttpUtilityFromMono.cs,UrlDecodeToBytes,The following statement contains a magic number: i += 2;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.CloseTimeout = new TimeSpan (0' 0' 40);  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.OpenTimeout = new TimeSpan (0' 0' 40);  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReceiveTimeout = new TimeSpan (0' 10' 0);  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.MaxBufferSize = 65536;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.MaxBufferPoolSize = 524288;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.MaxReceivedMessageSize = 65536;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReaderQuotas.MaxDepth = 32;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReaderQuotas.MaxStringContentLength = 8192;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReaderQuotas.MaxArrayLength = 16384;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReaderQuotas.MaxBytesPerRead = 4096;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: binding.ReaderQuotas.MaxNameTableCharCount = 16384;  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: while (m_translator == null && retryCount > 0) {  	try {  		m_translator = new LanguageServiceClient (binding' endpoint);  		var availableLocales = m_translator.GetLanguages (kAppId);  		m_srcCultureId = ValidateLocale (availableLocales' srcLangId);  		m_tgtCultureId = ValidateLocale (availableLocales' tgtLangId);  		break;  	}  	catch {  		m_translator = null;  		Thread.Sleep (300);  		//we only get 7 per second.  		retryCount--;  	}  }  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: try {  	m_translator = new LanguageServiceClient (binding' endpoint);  	var availableLocales = m_translator.GetLanguages (kAppId);  	m_srcCultureId = ValidateLocale (availableLocales' srcLangId);  	m_tgtCultureId = ValidateLocale (availableLocales' tgtLangId);  	break;  }  catch {  	m_translator = null;  	Thread.Sleep (300);  	//we only get 7 per second.  	retryCount--;  }  
Magic Number,L10NSharp.Translators,BingTranslator,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\BingTranslator.cs,BingTranslator,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,L10NSharp.Translators,TranslatorBase,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\Translators\TranslatorBase.cs,PreTranslateProcess,The following statement contains a magic number: for (int i = 0; i <= 9; i++) {  	if (text.Contains ("{" + i + "}"))  		paramCount++;  }  
Missing Default,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,The following switch statement is missing a default case: switch (node.NodeType) {  case HtmlNodeType.Comment:  	// don't output comments  	break;  case HtmlNodeType.Document:  	ConvertContentTo (node' filePath' outText);  	break;  case HtmlNodeType.Text:  	// script and style must not be output  	string parentName = node.ParentNode.Name;  	if ((parentName == "script") || (parentName == "style"))  		break;  	// get text  	html = ((HtmlTextNode)node).Text;  	// is it in fact a special closing node output as text?  	if (HtmlNode.IsOverlappedClosingElement (html))  		break;  	// check the text is meaningful and not a bunch of whitespaces  	if (html.Trim ().Length > 0) {  		string path = node.XPath.Replace ('/'' '.');  		path = path.Substring (0' path.Length - 9);  		int start = filePath.LastIndexOf ('\\') + 1;  		path = filePath.Substring (start' filePath.Length - start) + path;  		outText.Add (new Node (path' HtmlEntity.DeEntitize (html)));  	}  	break;  case HtmlNodeType.Element:  	switch (node.Name) {  	case "p":  		// treat paragraphs as crlf  		//outText.Write("\r\n");  		break;  	}  	if (node.HasChildNodes) {  		ConvertContentTo (node' filePath' outText);  	}  	break;  }  
Missing Default,L10NSharp,HtmlToText,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\HtmlToText.cs,ConvertTo,The following switch statement is missing a default case: switch (node.Name) {  case "p":  	// treat paragraphs as crlf  	//outText.Write("\r\n");  	break;  }  
Missing Default,L10NSharp.UI,NodeComparer,C:\repos\adamk33n3r_L10NSharp\src\L10NSharp\UI\LocalizeItemDlgViewModel.cs,Compare,The following switch statement is missing a default case: switch ((int)_sortField) {  case 0:  	xText = x.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	yText = y.Id.Replace (prefixToRemove' string.Empty).Trim ('.');  	break;  case 1:  	xText = x.GetText (_srcLangId) ?? string.Empty;  	yText = y.GetText (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 2:  	xText = (x.GetTranslatedText (_tgtLangId) ?? x.GetText (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedText (_tgtLangId) ?? y.GetText (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  case 3:  	xText = x.GetToolTip (_srcLangId) ?? string.Empty;  	yText = y.GetToolTip (_srcLangId) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_srcLangId);  	break;  case 4:  	xText = (x.GetTranslatedToolTip (_tgtLangId) ?? x.GetToolTip (_tgtLangId)) ?? string.Empty;  	yText = (y.GetTranslatedToolTip (_tgtLangId) ?? y.GetToolTip (_tgtLangId)) ?? string.Empty;  	ci = CultureInfo.GetCultureInfo (_tgtLangId);  	break;  }  
