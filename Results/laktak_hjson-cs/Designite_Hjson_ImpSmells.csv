Implementation smell,Namespace,Class,File,Method,Description
Long Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The method has 103 lines of code.
Long Method,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,Save,The method has 106 lines of code.
Complex Method,Hjson,DsfMath,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonDsf.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Hjson,JsonPrimitive,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonPrimitive.cs,GetRawString,Cyclomatic complexity of the method is 9
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,skipWhite2,Cyclomatic complexity of the method is 11
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,GetWhite,Cyclomatic complexity of the method is 8
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,ReadCore,Cyclomatic complexity of the method is 39
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readKeyName,Cyclomatic complexity of the method is 9
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readMlString,Cyclomatic complexity of the method is 12
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,Cyclomatic complexity of the method is 23
Complex Method,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,Cyclomatic complexity of the method is 19
Complex Method,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,Cyclomatic complexity of the method is 22
Complex Method,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,Cyclomatic complexity of the method is 37
Complex Method,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,Save,Cyclomatic complexity of the method is 53
Complex Method,Hjson,JsonUtil,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonUtil.cs,ToJson,Cyclomatic complexity of the method is 8
Complex Method,Hjson,JsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonWriter.cs,Save,Cyclomatic complexity of the method is 37
Complex Method,Hjson,JsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonWriter.cs,getEscapedChar,Cyclomatic complexity of the method is 8
Complex Method,Hjson,JsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonReader.cs,ReadCore,Cyclomatic complexity of the method is 33
Long Parameter List,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,Save,The method has 7 parameters.
Long Parameter List,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,writeString,The method has 5 parameters.
Long Statement,Hjson,HjsonDsf,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonDsf.cs,Stringify,The length of the statement  "					throw new Exception ("value may not be empty' start with a quote or contain a punctuator character except colon: " + text); " is 123.
Long Statement,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readKeyName,The length of the statement  "			throw ParseError ("Found '" + ch + "' where a key name was expected (check your syntax or use quotes if the key name includes {}[]': or whitespace)"); " is 150.
Long Statement,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The length of the statement  "		if (ch == ''' || ch == '}' || ch == ']' || ch == '#' || ch == '/' && (text.Length > p + 1 && (text [p + 1] == '/' || text [p + 1] == '*'))) " is 139.
Long Statement,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The length of the statement  "		if (isEol || c == ''' || c == '}' || c == ']' || c == '#' || c == '/' && (PeekChar (1) == '/' || PeekChar (1) == '*')) { " is 120.
Long Statement,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,writeString,The length of the statement  "	if (doEscape || BaseReader.IsWhite (left) || BaseReader.IsWhite (right) || left == '"' || left == '#' || left == '\'' && left1 == '\'' && left2 == '\'' || left == '/' && (left1 == '*' || left1 == '/') || HjsonValue.IsPunctuatorChar (left) || HjsonReader.TryParseNumericLiteral (value' true' out dummy) || startsWithKeyword (value)) { " is 333.
Long Statement,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The length of the statement  "	return ch == ''' || ch == '}' || ch == ']' || ch == '#' || ch == '/' && (text.Length > p + 1 && (text [p + 1] == '/' || text [p + 1] == '*')); " is 142.
Complex Conditional,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The conditional expression  "ch == ''' || ch == '}' || ch == ']' || ch == '#' || ch == '/' && (text.Length > p + 1 && (text [p + 1] == '/' || text [p + 1] == '*'))"  is complex.
Complex Conditional,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The conditional expression  "isEol || c == ''' || c == '}' || c == ']' || c == '#' || c == '/' && (PeekChar (1) == '/' || PeekChar (1) == '*')"  is complex.
Complex Conditional,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The conditional expression  "sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\''"  is complex.
Complex Conditional,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,getWsc,The conditional expression  "c == '\n' || c == '#' || c == '/' && i + 1 < str.Length && (str [i + 1] == '/' || str [i + 1] == '*')"  is complex.
Complex Conditional,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,writeString,The conditional expression  "doEscape || BaseReader.IsWhite (left) || BaseReader.IsWhite (right) || left == '"' || left == '#' || left == '\'' && left1 == '\'' && left2 == '\'' || left == '/' && (left1 == '*' || left1 == '/') || HjsonValue.IsPunctuatorChar (left) || HjsonReader.TryParseNumericLiteral (value' true' out dummy) || startsWithKeyword (value)"  is complex.
Empty Catch Block,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,Read,The method has an empty catch block.
Magic Number,Hjson,DsfHex,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonDsf.cs,Parse,The following statement contains a magic number: if (isHex.IsMatch (text))  	return long.Parse (text.Substring (2)' NumberStyles.HexNumber);  else  	return null;  
Magic Number,Hjson,DsfHex,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonDsf.cs,Parse,The following statement contains a magic number: return long.Parse (text.Substring (2)' NumberStyles.HexNumber);  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readMlString,The following statement contains a magic number: while (true) {  	int ch = PeekChar ();  	if (ch < 0)  		throw ParseError ("Bad multiline string");  	else if (ch == '\'') {  		triple++;  		ReadChar ();  		if (triple == 3) {  			if (sb [sb.Length - 1] == '\n')  				sb.Length--;  			return sb.ToString ();  		} else  			continue;  	} else {  		while (triple > 0) {  			sb.Append ('\'');  			triple--;  		}  	}  	if (ch == '\n') {  		sb.Append ('\n');  		ReadChar ();  		skipIndent (indent);  	} else {  		if (ch != '\r')  			sb.Append ((char)ch);  		ReadChar ();  	}  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readMlString,The following statement contains a magic number: if (ch < 0)  	throw ParseError ("Bad multiline string");  else if (ch == '\'') {  	triple++;  	ReadChar ();  	if (triple == 3) {  		if (sb [sb.Length - 1] == '\n')  			sb.Length--;  		return sb.ToString ();  	} else  		continue;  } else {  	while (triple > 0) {  		sb.Append ('\'');  		triple--;  	}  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readMlString,The following statement contains a magic number: if (ch == '\'') {  	triple++;  	ReadChar ();  	if (triple == 3) {  		if (sb [sb.Length - 1] == '\n')  			sb.Length--;  		return sb.ToString ();  	} else  		continue;  } else {  	while (triple > 0) {  		sb.Append ('\'');  		triple--;  	}  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readMlString,The following statement contains a magic number: if (triple == 3) {  	if (sb [sb.Length - 1] == '\n')  		sb.Length--;  	return sb.ToString ();  } else  	continue;  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: for (int x = 0; ; x++) {  	c = text [p];  	if (c < '0' || c > '9')  		break;  	if (testLeading) {  		if (c == '0')  			leadingZeros++;  		else  			testLeading = false;  	}  	val = val * 10 + (c - '0');  	p++;  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: val = val * 10 + (c - '0');  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: if (text [p] == '.') {  	if (leadingZeros < 0)  		return false;  	int fdigits = 0;  	double frac = 0;  	p++;  	if (text [p] == 0)  		return false;  	double d = 10;  	for (; ;) {  		c = text [p];  		if (c < '0' || '9' < c)  			break;  		p++;  		frac += (c - '0') / d;  		d *= 10;  		fdigits++;  	}  	if (fdigits == 0)  		return false;  	val += frac;  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: if (text [p] == '.') {  	if (leadingZeros < 0)  		return false;  	int fdigits = 0;  	double frac = 0;  	p++;  	if (text [p] == 0)  		return false;  	double d = 10;  	for (; ;) {  		c = text [p];  		if (c < '0' || '9' < c)  			break;  		p++;  		frac += (c - '0') / d;  		d *= 10;  		fdigits++;  	}  	if (fdigits == 0)  		return false;  	val += frac;  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: for (; ;) {  	c = text [p];  	if (c < '0' || '9' < c)  		break;  	p++;  	frac += (c - '0') / d;  	d *= 10;  	fdigits++;  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: d *= 10;  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: if (c == 'e' || c == 'E') {  	// exponent  	int exp = 0' expSign = 1;  	p++;  	if (text [p] == 0)  		return false;  	c = text [p];  	if (c == '-') {  		p++;  		expSign = -1;  	} else if (c == '+')  		p++;  	if (text [p] == 0)  		return false;  	for (; ;) {  		c = text [p];  		if (c < '0' || c > '9')  			break;  		exp = exp * 10 + (c - '0');  		p++;  	}  	if (exp != 0)  		val *= Math.Pow (10' exp * expSign);  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: if (c == 'e' || c == 'E') {  	// exponent  	int exp = 0' expSign = 1;  	p++;  	if (text [p] == 0)  		return false;  	c = text [p];  	if (c == '-') {  		p++;  		expSign = -1;  	} else if (c == '+')  		p++;  	if (text [p] == 0)  		return false;  	for (; ;) {  		c = text [p];  		if (c < '0' || c > '9')  			break;  		exp = exp * 10 + (c - '0');  		p++;  	}  	if (exp != 0)  		val *= Math.Pow (10' exp * expSign);  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: for (; ;) {  	c = text [p];  	if (c < '0' || c > '9')  		break;  	exp = exp * 10 + (c - '0');  	p++;  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: exp = exp * 10 + (c - '0');  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: if (exp != 0)  	val *= Math.Pow (10' exp * expSign);  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,TryParseNumericLiteral,The following statement contains a magic number: val *= Math.Pow (10' exp * expSign);  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: for (; ;) {  	bool isEol = c < 0 || c == '\n';  	if (isEol || c == ''' || c == '}' || c == ']' || c == '#' || c == '/' && (PeekChar (1) == '/' || PeekChar (1) == '*')) {  		if (sb.Length > 0) {  			char ch = sb [0];  			switch (ch) {  			case 'f':  				if (sb.ToString ().Trim () == "false")  					return false;  				break;  			case 'n':  				if (sb.ToString ().Trim () == "null")  					return null;  				break;  			case 't':  				if (sb.ToString ().Trim () == "true")  					return true;  				break;  			default:  				if (ch == '-' || ch >= '0' && ch <= '9') {  					JsonValue res;  					if (TryParseNumericLiteral (sb.ToString ()' false' out res))  						return res;  				}  				break;  			}  		}  		if (isEol) {  			// remove any whitespace at the end (ignored in quoteless strings)  			return HjsonDsf.Parse (dsfProviders' sb.ToString ().Trim ());  		}  	}  	ReadChar ();  	if (c != '\r') {  		sb.Append ((char)c);  		if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  			return readMlString ();  	}  	c = PeekChar ();  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: for (; ;) {  	bool isEol = c < 0 || c == '\n';  	if (isEol || c == ''' || c == '}' || c == ']' || c == '#' || c == '/' && (PeekChar (1) == '/' || PeekChar (1) == '*')) {  		if (sb.Length > 0) {  			char ch = sb [0];  			switch (ch) {  			case 'f':  				if (sb.ToString ().Trim () == "false")  					return false;  				break;  			case 'n':  				if (sb.ToString ().Trim () == "null")  					return null;  				break;  			case 't':  				if (sb.ToString ().Trim () == "true")  					return true;  				break;  			default:  				if (ch == '-' || ch >= '0' && ch <= '9') {  					JsonValue res;  					if (TryParseNumericLiteral (sb.ToString ()' false' out res))  						return res;  				}  				break;  			}  		}  		if (isEol) {  			// remove any whitespace at the end (ignored in quoteless strings)  			return HjsonDsf.Parse (dsfProviders' sb.ToString ().Trim ());  		}  	}  	ReadChar ();  	if (c != '\r') {  		sb.Append ((char)c);  		if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  			return readMlString ();  	}  	c = PeekChar ();  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: if (c != '\r') {  	sb.Append ((char)c);  	if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  		return readMlString ();  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: if (c != '\r') {  	sb.Append ((char)c);  	if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  		return readMlString ();  }  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  	return readMlString ();  
Magic Number,Hjson,HjsonReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonReader.cs,readTfnns,The following statement contains a magic number: if (sb.Length == 3 && sb [0] == '\'' && sb [1] == '\'' && sb [2] == '\'')  	return readMlString ();  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: for (int x = 0; ; x++) {  	c = PeekChar ();  	if (c < '0' || c > '9')  		break;  	if (testLeading) {  		if (c == '0')  			leadingZeros++;  		else  			testLeading = false;  	}  	val = val * 10 + (c - '0');  	ReadChar ();  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: val = val * 10 + (c - '0');  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: if (PeekChar () == '.') {  	int fdigits = 0;  	double frac = 0;  	ReadChar ();  	if (PeekChar () < 0)  		throw ParseError ("Invalid JSON numeric literal; extra dot");  	double d = 10;  	for (; ;) {  		c = PeekChar ();  		if (c < '0' || '9' < c)  			break;  		ReadChar ();  		frac += (c - '0') / d;  		d *= 10;  		fdigits++;  	}  	if (fdigits == 0)  		throw ParseError ("Invalid JSON numeric literal; extra dot");  	val += frac;  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: if (PeekChar () == '.') {  	int fdigits = 0;  	double frac = 0;  	ReadChar ();  	if (PeekChar () < 0)  		throw ParseError ("Invalid JSON numeric literal; extra dot");  	double d = 10;  	for (; ;) {  		c = PeekChar ();  		if (c < '0' || '9' < c)  			break;  		ReadChar ();  		frac += (c - '0') / d;  		d *= 10;  		fdigits++;  	}  	if (fdigits == 0)  		throw ParseError ("Invalid JSON numeric literal; extra dot");  	val += frac;  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: for (; ;) {  	c = PeekChar ();  	if (c < '0' || '9' < c)  		break;  	ReadChar ();  	frac += (c - '0') / d;  	d *= 10;  	fdigits++;  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: d *= 10;  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: if (c == 'e' || c == 'E') {  	// exponent  	int exp = 0' expSign = 1;  	ReadChar ();  	if (PeekChar () < 0)  		throw new ArgumentException ("Invalid JSON numeric literal; incomplete exponent");  	c = PeekChar ();  	if (c == '-') {  		ReadChar ();  		expSign = -1;  	} else if (c == '+')  		ReadChar ();  	if (PeekChar () < 0)  		throw ParseError ("Invalid JSON numeric literal; incomplete exponent");  	for (; ;) {  		c = PeekChar ();  		if (c < '0' || c > '9')  			break;  		exp = exp * 10 + (c - '0');  		ReadChar ();  	}  	if (exp != 0)  		val *= Math.Pow (10' exp * expSign);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: if (c == 'e' || c == 'E') {  	// exponent  	int exp = 0' expSign = 1;  	ReadChar ();  	if (PeekChar () < 0)  		throw new ArgumentException ("Invalid JSON numeric literal; incomplete exponent");  	c = PeekChar ();  	if (c == '-') {  		ReadChar ();  		expSign = -1;  	} else if (c == '+')  		ReadChar ();  	if (PeekChar () < 0)  		throw ParseError ("Invalid JSON numeric literal; incomplete exponent");  	for (; ;) {  		c = PeekChar ();  		if (c < '0' || c > '9')  			break;  		exp = exp * 10 + (c - '0');  		ReadChar ();  	}  	if (exp != 0)  		val *= Math.Pow (10' exp * expSign);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: for (; ;) {  	c = PeekChar ();  	if (c < '0' || c > '9')  		break;  	exp = exp * 10 + (c - '0');  	ReadChar ();  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: exp = exp * 10 + (c - '0');  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: if (exp != 0)  	val *= Math.Pow (10' exp * expSign);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadNumericLiteral,The following statement contains a magic number: val *= Math.Pow (10' exp * expSign);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (; ;) {  	int c = ReadChar ();  	if (c < 0)  		throw ParseError ("JSON string is not closed");  	if (c == '"')  		return sb.ToString ();  	else if (c != '\\') {  		sb.Append ((char)c);  		continue;  	}  	// escaped expression  	c = ReadChar ();  	if (c < 0)  		throw ParseError ("Invalid JSON string literal; incomplete escape sequence");  	switch (c) {  	case '"':  	case '\\':  	case '/':  		sb.Append ((char)c);  		break;  	case 'b':  		sb.Append ('\x8');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		ushort cp = 0;  		for (int i = 0; i < 4; i++) {  			cp <<= 4;  			if ((c = ReadChar ()) < 0)  				throw ParseError ("Incomplete unicode character escape literal");  			if (c >= '0' && c <= '9')  				cp += (ushort)(c - '0');  			else if (c >= 'A' && c <= 'F')  				cp += (ushort)(c - 'A' + 10);  			else if (c >= 'a' && c <= 'f')  				cp += (ushort)(c - 'a' + 10);  			else  				throw ParseError ("Bad \\u char " + (char)c);  		}  		sb.Append ((char)cp);  		break;  	default:  		throw ParseError ("Invalid JSON string literal; unexpected escape character");  	}  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (; ;) {  	int c = ReadChar ();  	if (c < 0)  		throw ParseError ("JSON string is not closed");  	if (c == '"')  		return sb.ToString ();  	else if (c != '\\') {  		sb.Append ((char)c);  		continue;  	}  	// escaped expression  	c = ReadChar ();  	if (c < 0)  		throw ParseError ("Invalid JSON string literal; incomplete escape sequence");  	switch (c) {  	case '"':  	case '\\':  	case '/':  		sb.Append ((char)c);  		break;  	case 'b':  		sb.Append ('\x8');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		ushort cp = 0;  		for (int i = 0; i < 4; i++) {  			cp <<= 4;  			if ((c = ReadChar ()) < 0)  				throw ParseError ("Incomplete unicode character escape literal");  			if (c >= '0' && c <= '9')  				cp += (ushort)(c - '0');  			else if (c >= 'A' && c <= 'F')  				cp += (ushort)(c - 'A' + 10);  			else if (c >= 'a' && c <= 'f')  				cp += (ushort)(c - 'a' + 10);  			else  				throw ParseError ("Bad \\u char " + (char)c);  		}  		sb.Append ((char)cp);  		break;  	default:  		throw ParseError ("Invalid JSON string literal; unexpected escape character");  	}  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (; ;) {  	int c = ReadChar ();  	if (c < 0)  		throw ParseError ("JSON string is not closed");  	if (c == '"')  		return sb.ToString ();  	else if (c != '\\') {  		sb.Append ((char)c);  		continue;  	}  	// escaped expression  	c = ReadChar ();  	if (c < 0)  		throw ParseError ("Invalid JSON string literal; incomplete escape sequence");  	switch (c) {  	case '"':  	case '\\':  	case '/':  		sb.Append ((char)c);  		break;  	case 'b':  		sb.Append ('\x8');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		ushort cp = 0;  		for (int i = 0; i < 4; i++) {  			cp <<= 4;  			if ((c = ReadChar ()) < 0)  				throw ParseError ("Incomplete unicode character escape literal");  			if (c >= '0' && c <= '9')  				cp += (ushort)(c - '0');  			else if (c >= 'A' && c <= 'F')  				cp += (ushort)(c - 'A' + 10);  			else if (c >= 'a' && c <= 'f')  				cp += (ushort)(c - 'a' + 10);  			else  				throw ParseError ("Bad \\u char " + (char)c);  		}  		sb.Append ((char)cp);  		break;  	default:  		throw ParseError ("Invalid JSON string literal; unexpected escape character");  	}  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (; ;) {  	int c = ReadChar ();  	if (c < 0)  		throw ParseError ("JSON string is not closed");  	if (c == '"')  		return sb.ToString ();  	else if (c != '\\') {  		sb.Append ((char)c);  		continue;  	}  	// escaped expression  	c = ReadChar ();  	if (c < 0)  		throw ParseError ("Invalid JSON string literal; incomplete escape sequence");  	switch (c) {  	case '"':  	case '\\':  	case '/':  		sb.Append ((char)c);  		break;  	case 'b':  		sb.Append ('\x8');  		break;  	case 'f':  		sb.Append ('\f');  		break;  	case 'n':  		sb.Append ('\n');  		break;  	case 'r':  		sb.Append ('\r');  		break;  	case 't':  		sb.Append ('\t');  		break;  	case 'u':  		ushort cp = 0;  		for (int i = 0; i < 4; i++) {  			cp <<= 4;  			if ((c = ReadChar ()) < 0)  				throw ParseError ("Incomplete unicode character escape literal");  			if (c >= '0' && c <= '9')  				cp += (ushort)(c - '0');  			else if (c >= 'A' && c <= 'F')  				cp += (ushort)(c - 'A' + 10);  			else if (c >= 'a' && c <= 'f')  				cp += (ushort)(c - 'a' + 10);  			else  				throw ParseError ("Bad \\u char " + (char)c);  		}  		sb.Append ((char)cp);  		break;  	default:  		throw ParseError ("Invalid JSON string literal; unexpected escape character");  	}  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: switch (c) {  case '"':  case '\\':  case '/':  	sb.Append ((char)c);  	break;  case 'b':  	sb.Append ('\x8');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	ushort cp = 0;  	for (int i = 0; i < 4; i++) {  		cp <<= 4;  		if ((c = ReadChar ()) < 0)  			throw ParseError ("Incomplete unicode character escape literal");  		if (c >= '0' && c <= '9')  			cp += (ushort)(c - '0');  		else if (c >= 'A' && c <= 'F')  			cp += (ushort)(c - 'A' + 10);  		else if (c >= 'a' && c <= 'f')  			cp += (ushort)(c - 'a' + 10);  		else  			throw ParseError ("Bad \\u char " + (char)c);  	}  	sb.Append ((char)cp);  	break;  default:  	throw ParseError ("Invalid JSON string literal; unexpected escape character");  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: switch (c) {  case '"':  case '\\':  case '/':  	sb.Append ((char)c);  	break;  case 'b':  	sb.Append ('\x8');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	ushort cp = 0;  	for (int i = 0; i < 4; i++) {  		cp <<= 4;  		if ((c = ReadChar ()) < 0)  			throw ParseError ("Incomplete unicode character escape literal");  		if (c >= '0' && c <= '9')  			cp += (ushort)(c - '0');  		else if (c >= 'A' && c <= 'F')  			cp += (ushort)(c - 'A' + 10);  		else if (c >= 'a' && c <= 'f')  			cp += (ushort)(c - 'a' + 10);  		else  			throw ParseError ("Bad \\u char " + (char)c);  	}  	sb.Append ((char)cp);  	break;  default:  	throw ParseError ("Invalid JSON string literal; unexpected escape character");  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: switch (c) {  case '"':  case '\\':  case '/':  	sb.Append ((char)c);  	break;  case 'b':  	sb.Append ('\x8');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	ushort cp = 0;  	for (int i = 0; i < 4; i++) {  		cp <<= 4;  		if ((c = ReadChar ()) < 0)  			throw ParseError ("Incomplete unicode character escape literal");  		if (c >= '0' && c <= '9')  			cp += (ushort)(c - '0');  		else if (c >= 'A' && c <= 'F')  			cp += (ushort)(c - 'A' + 10);  		else if (c >= 'a' && c <= 'f')  			cp += (ushort)(c - 'a' + 10);  		else  			throw ParseError ("Bad \\u char " + (char)c);  	}  	sb.Append ((char)cp);  	break;  default:  	throw ParseError ("Invalid JSON string literal; unexpected escape character");  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: switch (c) {  case '"':  case '\\':  case '/':  	sb.Append ((char)c);  	break;  case 'b':  	sb.Append ('\x8');  	break;  case 'f':  	sb.Append ('\f');  	break;  case 'n':  	sb.Append ('\n');  	break;  case 'r':  	sb.Append ('\r');  	break;  case 't':  	sb.Append ('\t');  	break;  case 'u':  	ushort cp = 0;  	for (int i = 0; i < 4; i++) {  		cp <<= 4;  		if ((c = ReadChar ()) < 0)  			throw ParseError ("Incomplete unicode character escape literal");  		if (c >= '0' && c <= '9')  			cp += (ushort)(c - '0');  		else if (c >= 'A' && c <= 'F')  			cp += (ushort)(c - 'A' + 10);  		else if (c >= 'a' && c <= 'f')  			cp += (ushort)(c - 'a' + 10);  		else  			throw ParseError ("Bad \\u char " + (char)c);  	}  	sb.Append ((char)cp);  	break;  default:  	throw ParseError ("Invalid JSON string literal; unexpected escape character");  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	cp <<= 4;  	if ((c = ReadChar ()) < 0)  		throw ParseError ("Incomplete unicode character escape literal");  	if (c >= '0' && c <= '9')  		cp += (ushort)(c - '0');  	else if (c >= 'A' && c <= 'F')  		cp += (ushort)(c - 'A' + 10);  	else if (c >= 'a' && c <= 'f')  		cp += (ushort)(c - 'a' + 10);  	else  		throw ParseError ("Bad \\u char " + (char)c);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	cp <<= 4;  	if ((c = ReadChar ()) < 0)  		throw ParseError ("Incomplete unicode character escape literal");  	if (c >= '0' && c <= '9')  		cp += (ushort)(c - '0');  	else if (c >= 'A' && c <= 'F')  		cp += (ushort)(c - 'A' + 10);  	else if (c >= 'a' && c <= 'f')  		cp += (ushort)(c - 'a' + 10);  	else  		throw ParseError ("Bad \\u char " + (char)c);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	cp <<= 4;  	if ((c = ReadChar ()) < 0)  		throw ParseError ("Incomplete unicode character escape literal");  	if (c >= '0' && c <= '9')  		cp += (ushort)(c - '0');  	else if (c >= 'A' && c <= 'F')  		cp += (ushort)(c - 'A' + 10);  	else if (c >= 'a' && c <= 'f')  		cp += (ushort)(c - 'a' + 10);  	else  		throw ParseError ("Bad \\u char " + (char)c);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	cp <<= 4;  	if ((c = ReadChar ()) < 0)  		throw ParseError ("Incomplete unicode character escape literal");  	if (c >= '0' && c <= '9')  		cp += (ushort)(c - '0');  	else if (c >= 'A' && c <= 'F')  		cp += (ushort)(c - 'A' + 10);  	else if (c >= 'a' && c <= 'f')  		cp += (ushort)(c - 'a' + 10);  	else  		throw ParseError ("Bad \\u char " + (char)c);  }  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: cp <<= 4;  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: if (c >= '0' && c <= '9')  	cp += (ushort)(c - '0');  else if (c >= 'A' && c <= 'F')  	cp += (ushort)(c - 'A' + 10);  else if (c >= 'a' && c <= 'f')  	cp += (ushort)(c - 'a' + 10);  else  	throw ParseError ("Bad \\u char " + (char)c);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: if (c >= '0' && c <= '9')  	cp += (ushort)(c - '0');  else if (c >= 'A' && c <= 'F')  	cp += (ushort)(c - 'A' + 10);  else if (c >= 'a' && c <= 'f')  	cp += (ushort)(c - 'a' + 10);  else  	throw ParseError ("Bad \\u char " + (char)c);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	cp += (ushort)(c - 'A' + 10);  else if (c >= 'a' && c <= 'f')  	cp += (ushort)(c - 'a' + 10);  else  	throw ParseError ("Bad \\u char " + (char)c);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: if (c >= 'A' && c <= 'F')  	cp += (ushort)(c - 'A' + 10);  else if (c >= 'a' && c <= 'f')  	cp += (ushort)(c - 'a' + 10);  else  	throw ParseError ("Bad \\u char " + (char)c);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: cp += (ushort)(c - 'A' + 10);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: if (c >= 'a' && c <= 'f')  	cp += (ushort)(c - 'a' + 10);  else  	throw ParseError ("Bad \\u char " + (char)c);  
Magic Number,Hjson,BaseReader,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\BaseReader.cs,ReadStringLiteral,The following statement contains a magic number: cp += (ushort)(c - 'a' + 10);  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,nl,The following statement contains a magic number: tw.Write (new string (' '' level * 2));  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The following statement contains a magic number: if (text.StartsWith ("true") || text.StartsWith ("null"))  	p = 4;  else if (text.StartsWith ("false"))  	p = 5;  else  	return false;  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The following statement contains a magic number: if (text.StartsWith ("true") || text.StartsWith ("null"))  	p = 4;  else if (text.StartsWith ("false"))  	p = 5;  else  	return false;  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The following statement contains a magic number: p = 4;  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The following statement contains a magic number: if (text.StartsWith ("false"))  	p = 5;  else  	return false;  
Magic Number,Hjson,HjsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\HjsonWriter.cs,startsWithKeyword,The following statement contains a magic number: p = 5;  
Magic Number,Hjson,JsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonWriter.cs,nl,The following statement contains a magic number: if (format) {  	tw.Write (JsonValue.eol);  	tw.Write (new string (' '' level * 2));  }  
Magic Number,Hjson,JsonWriter,F:\newReposMay17\laktak_hjson-cs\legacy\Hjson\..\..\Hjson\JsonWriter.cs,nl,The following statement contains a magic number: tw.Write (new string (' '' level * 2));  
