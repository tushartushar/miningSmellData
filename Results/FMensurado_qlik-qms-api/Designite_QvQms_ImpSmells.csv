Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,Cyclomatic complexity of the method is 30
Long Parameter List,QvQms.QMSAPI,IQMS,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,TriggerEDXTask,The method has 5 parameters.
Long Parameter List,QvQms.QMSAPI,IQMS,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,AddSelections,The method has 5 parameters.
Long Parameter List,QvQms.QMSAPI,IQMS,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,GetFieldContentList,The method has 5 parameters.
Long Parameter List,QvQms.QMSAPI,QMSClient,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,TriggerEDXTask,The method has 5 parameters.
Long Parameter List,QvQms.QMSAPI,QMSClient,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,AddSelections,The method has 5 parameters.
Long Parameter List,QvQms.QMSAPI,QMSClient,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,GetFieldContentList,The method has 5 parameters.
Long Identifier,QvQms.QMSAPI,GetTimeLimitedRequestKeyResponse,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,GetTimeLimitedRequestKeyResponse,The length of the parameter GetTimeLimitedRequestKeyResult is 30.
Long Statement,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The length of the statement  "	//    qvsSettings.Folders.UserDocumentMounts.Add(new QVSMount() { Browsable = false' Path = @"\\unc\some"' Name = "MyMount" }); " is 127.
Long Statement,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,WriteTaskInfo,The length of the statement  "		Console.WriteLine (ti.Name + "\t" + apiClient.GetTaskStatus (ti.ID' TaskStatusScope.All).General.Status.ToString () + "\t" + ti.Enabled.ToString () + "\t" + ti.ID.ToString () + "\t" + startAt + "\t" + hourly + "\t" + daily + "\t" + weekly); " is 240.
Long Statement,QvQms.QMSAPI,QTServiceClient,C:\repos\FMensurado_qlik-qms-api\QvQms\Service References\QMSAPI\Reference.cs,GetTimeLimitedRequestKey,The length of the statement  "	QvQms.QMSAPI.GetTimeLimitedRequestKeyResponse retVal = ((QvQms.QMSAPI.IQTService)(this)).GetTimeLimitedRequestKey (inValue); " is 124.
Empty Catch Block,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,WriteTaskInfo,The method has an empty catch block.
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "-ta":  	List<TaskInfo> tasks = apiClient.GetTasks (qms [0].ID);  	WriteTaskHeader ();  	foreach (TaskInfo ti in tasks)  		WriteTaskInfo (ti);  	break;  case "-tf":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <name> parameter.");  	break;  case "-t":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <id> parameter.");  	break;  case "-da":  	OutputUserDocuments (qvs [0].ID);  	break;  case "-du":  	OutputUserDocumentsAccessEntries (qvs [0].ID);  	break;  case "-d-add-access":  	AddAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  case "-d-remove-access":  	RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  }  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "-ta":  	List<TaskInfo> tasks = apiClient.GetTasks (qms [0].ID);  	WriteTaskHeader ();  	foreach (TaskInfo ti in tasks)  		WriteTaskInfo (ti);  	break;  case "-tf":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <name> parameter.");  	break;  case "-t":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <id> parameter.");  	break;  case "-da":  	OutputUserDocuments (qvs [0].ID);  	break;  case "-du":  	OutputUserDocumentsAccessEntries (qvs [0].ID);  	break;  case "-d-add-access":  	AddAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  case "-d-remove-access":  	RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  }  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "-ta":  	List<TaskInfo> tasks = apiClient.GetTasks (qms [0].ID);  	WriteTaskHeader ();  	foreach (TaskInfo ti in tasks)  		WriteTaskInfo (ti);  	break;  case "-tf":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <name> parameter.");  	break;  case "-t":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <id> parameter.");  	break;  case "-da":  	OutputUserDocuments (qvs [0].ID);  	break;  case "-du":  	OutputUserDocumentsAccessEntries (qvs [0].ID);  	break;  case "-d-add-access":  	AddAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  case "-d-remove-access":  	RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  }  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: switch (args [0]) {  case "-ta":  	List<TaskInfo> tasks = apiClient.GetTasks (qms [0].ID);  	WriteTaskHeader ();  	foreach (TaskInfo ti in tasks)  		WriteTaskInfo (ti);  	break;  case "-tf":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <name> parameter.");  	break;  case "-t":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <id> parameter.");  	break;  case "-da":  	OutputUserDocuments (qvs [0].ID);  	break;  case "-du":  	OutputUserDocumentsAccessEntries (qvs [0].ID);  	break;  case "-d-add-access":  	AddAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  case "-d-remove-access":  	RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  }  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 2) {  	TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  	WriteTaskHeader ();  	WriteTaskInfo (ti);  }  else  	throw new ApplicationException ("Missing <name> parameter.");  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: if (args.Length >= 2) {  	TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  	WriteTaskHeader ();  	WriteTaskInfo (ti);  }  else  	throw new ApplicationException ("Missing <id> parameter.");  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: AddAuthorization (qvs [0].ID' args [1]' args [2]);  
Magic Number,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following statement contains a magic number: RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  
Missing Default,QvQms,Program,C:\repos\FMensurado_qlik-qms-api\QvQms\Program.cs,Main,The following switch statement is missing a default case: switch (args [0]) {  case "-ta":  	List<TaskInfo> tasks = apiClient.GetTasks (qms [0].ID);  	WriteTaskHeader ();  	foreach (TaskInfo ti in tasks)  		WriteTaskInfo (ti);  	break;  case "-tf":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.FindTask (qms [0].ID' TaskType.Undefined' args [1]);  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <name> parameter.");  	break;  case "-t":  	if (args.Length >= 2) {  		TaskInfo ti = apiClient.GetTask (new Guid (args [1]));  		WriteTaskHeader ();  		WriteTaskInfo (ti);  	}  	else  		throw new ApplicationException ("Missing <id> parameter.");  	break;  case "-da":  	OutputUserDocuments (qvs [0].ID);  	break;  case "-du":  	OutputUserDocumentsAccessEntries (qvs [0].ID);  	break;  case "-d-add-access":  	AddAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  case "-d-remove-access":  	RemoveAuthorization (qvs [0].ID' args [1]' args [2]);  	break;  }  
