Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragCompletedHandler,Cyclomatic complexity of the method is 11
Complex Method,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,UpdateChildTemplate,Cyclomatic complexity of the method is 9
Complex Method,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,OpenDialogHandler,Cyclomatic complexity of the method is 14
Complex Method,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,SetOpenFlag,Cyclomatic complexity of the method is 15
Complex Method,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,Cyclomatic complexity of the method is 51
Complex Method,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,OnApplyTemplate,Cyclomatic complexity of the method is 8
Complex Method,MaterialDesignThemes.Wpf.Transitions,IndexedItemOffsetMultiplierExtension,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\IndexedItemOffsetMultiplierExtension.cs,ProvideValue,Cyclomatic complexity of the method is 8
Complex Method,MaterialDesignThemes.Wpf.Transitions,SlideWipe,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideWipe.cs,Wipe,Cyclomatic complexity of the method is 8
Complex Method,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,Cyclomatic complexity of the method is 33
Complex Method,MaterialDesignThemes.Wpf.Transitions,Transitioner,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,ActivateFrame,Cyclomatic complexity of the method is 9
Long Parameter List,ControlzEx,PopupEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,_SetWindowPos,The method has 7 parameters.
Long Parameter List,ControlzEx,PopupEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The method has 6 parameters.
Long Parameter List,MaterialDesignThemes.Wpf,ISnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ISnackbarMessageQueue.cs,Enqueue,The method has 5 parameters.
Long Parameter List,MaterialDesignThemes.Wpf,Palette,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Palette.cs,Palette,The method has 6 parameters.
Long Parameter List,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The method has 5 parameters.
Long Parameter List,MaterialDesignThemes.Wpf,SnackbarMessageQueueItem,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueueItem.cs,SnackbarMessageQueueItem,The method has 6 parameters.
Long Identifier,ControlzEx,PackIconBase,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PackIconBase.cs,KindPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,TimePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,DisplayModePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedCheckBoxStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedEditingCheckBoxStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedEditingTextStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,EnableCheckBoxAssistPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,SnackbarMessageQueuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,IsDrawerOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,IsFlippedPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,MessageQueuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,IsActivePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,ListSortDirectionIndicator,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ListSortDirectionIndicator.cs,ListSortDirectionPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,DisplayDatePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,IsPopupOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,PlacementModePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the parameter elementTranslateCoordinateFrom is 30.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,ValuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,MaxPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,MinPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,ShadowAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,SmartHint,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SmartHint.cs,HintProxyPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TextFieldAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TextFieldAssist.cs,TextBoxViewMarginPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,TextPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SelectedTimePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,ToggleButtonAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToggleButtonAssist.cs,OnContentPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Underline,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Underline.cs,IsActivePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Statement,ControlzEx,BadgedEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,OnBadgeChanged,The length of the statement  "	instance.IsBadgeSet = !string.IsNullOrWhiteSpace (e.NewValue as string) || (e.NewValue != null && !(e.NewValue is string)); " is 123.
Long Statement,ControlzEx,BadgedEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,ArrangeOverride,The length of the statement  "	if ((containerDesiredSize.Width <= 0.0 || containerDesiredSize.Height <= 0.0) && !double.IsNaN (_badgeContainer.ActualWidth) && !double.IsInfinity (_badgeContainer.ActualWidth) && !double.IsNaN (_badgeContainer.ActualHeight) && !double.IsInfinity (_badgeContainer.ActualHeight)) { " is 280.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the statement  "		clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second); " is 138.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the statement  "		clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second); " is 138.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GotoVisualState,The length of the statement  "	VisualStateManager.GoToState (this' DisplayMode == ClockDisplayMode.Minutes ? MinutesVisualStateName : HoursVisualStateName' useTransitions); " is 141.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "			GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00"); " is 193.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "			GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#"); " is 196.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "			GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0"); " is 191.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "		GenerateButtons (minutesCanvas' Enumerable.Range (1' 60).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Minutes' Is24Hours)' i => ((i / 5.0) % 1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0"); " is 242.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "		button.SetBinding (ToggleButton.IsCheckedProperty' GetBinding ("Time"' converter: isCheckedConverter' converterParameter: i)); " is 126.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "	var currentDragPosition = new Point (_currentStartPosition.X + dragDeltaEventArgs.HorizontalChange' _currentStartPosition.Y + dragDeltaEventArgs.VerticalChange); " is 161.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "			var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2); " is 150.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "			var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y)); " is 197.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "			time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second); " is 183.
Long Statement,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "		time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second); " is 154.
Long Statement,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The length of the statement  "	OnDragStarted (this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0); " is 146.
Long Statement,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragCompleted,The length of the statement  "	OnDragCompleted (this' dragCompletedEventArgs.HorizontalChange' dragCompletedEventArgs.VerticalChange' dragCompletedEventArgs.Canceled); " is 136.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,SetupBackground,The length of the statement  "	var background = visualAncestry.Select (v => (v as Control).Background ?? (v as Panel).Background ?? (v as Border).Background).FirstOrDefault (v => v != null && !Equals (v' Brushes.Transparent) && v is SolidColorBrush); " is 219.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,ComboBoxCustomPopupPlacementCallback,The length of the statement  "	if (ClassicMode || data.LocationX + data.PopupSize.Width - data.RealOffsetX > data.ScreenWidth || data.LocationX - data.RealOffsetX < 0 || !preferUpIfSafe && data.LocationY - Math.Abs (data.NewDownY) < 0) { " is 206.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,GetPositioningData,The length of the statement  "	return new PositioningData (mainVisual' offsetX' newUpY' newDownY' popupSize' targetSize' locationX' locationY' screenHeight' screenWidth); " is 139.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,UpdateChildTemplate,The length of the statement  "	//                    throw new NotImplementedException($"Unexpected value {placement} of the {nameof(PopupPlacement)} property inside the {nameof(ComboBoxPopup)} control."); " is 174.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,GetClassicPopupPlacement,The length of the statement  "	var newY = data.LocationY + data.PopupSize.Height > data.ScreenHeight ? -(defaultVerticalOffsetIndepent + data.PopupSize.Height) : defaultVerticalOffsetIndepent + data.TargetSize.Height; " is 186.
Long Statement,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,DataGridOnPreviewMouseLeftButtonDown,The length of the statement  "		if (dataGridCell != null && dataGrid.Equals (dataGridCell.GetVisualAncestry ().OfType<DataGrid> ().FirstOrDefault ())) { " is 120.
Long Statement,MaterialDesignThemes.Wpf,DataGridAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,IsDirectHitOnEditComponent,The length of the statement  "	var rect = new Rect (new Point (transformToAncestor.Value.OffsetX' transformToAncestor.Value.OffsetY)' new Size (control.ActualWidth' control.ActualHeight)); " is 157.
Long Statement,MaterialDesignThemes.Wpf,DialogHostEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHostEx.cs,ShowDialog,The length of the statement  "	return await GetOwningDialogHost (childDependencyObject).ShowInternal (content' openedEventHandler' closingEventHandler); " is 121.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "	var targets = LoadedInstances.Where (dh => dialogIdentifier == null || Equals (dh.Identifier' dialogIdentifier)).ToList (); " is 123.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "		throw new InvalidOperationException ("No loaded DialogHost have an Identifier property matching dialogIndetifier argument."); " is 125.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "		throw new InvalidOperationException ("Multiple viable DialogHosts.  Specify a unique Identifier on each DialogHost' especially where multiple Windows are a concern."); " is 167.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the statement  "	VisualStateManager.GoToState (dialogHost' dialogHost.SelectState ()' !TransitionAssist.GetDisableTransitions (dialogHost)); " is 123.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the statement  "		//totally not happy about this' but on immediate validation we can get some weird looking stuff...give WPF a kick to refresh... " is 127.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,AssertTargetableContent,The length of the statement  "		throw new InvalidOperationException ("Content cannot be passed to a dialog via the OpenDialog if DialogContent already has a binding."); " is 136.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,FocusPopup,The length of the statement  "	var focusable = child.VisualDepthFirstTraversal ().OfType<UIElement> ().FirstOrDefault (ui => ui.Focusable && ui.IsVisible); " is 124.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "	VisualStateManager.GoToState (this' !anyOpen ? TemplateAllDrawersAllClosedStateName : TemplateAllDrawersAnyOpenStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions (this)); " is 219.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "	VisualStateManager.GoToState (this' IsLeftDrawerOpen ? TemplateLeftOpenStateName : TemplateLeftClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions (this)); " is 209.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "	VisualStateManager.GoToState (this' IsTopDrawerOpen ? TemplateTopOpenStateName : TemplateTopClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions (this)); " is 206.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "	VisualStateManager.GoToState (this' IsRightDrawerOpen ? TemplateRightOpenStateName : TemplateRightClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions (this)); " is 212.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "	VisualStateManager.GoToState (this' IsBottomDrawerOpen ? TemplateBottomOpenStateName : TemplateBottomClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions (this)); " is 215.
Long Statement,MaterialDesignThemes.Wpf,ListBoxAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ListBoxAssist.cs,ListBoxMouseButtonEvent,The length of the statement  "		ripple.RaiseEvent (new MouseButtonEventArgs (mouseButtonEventArgs.MouseDevice' mouseButtonEventArgs.Timestamp' mouseButtonEventArgs.ChangedButton) { " is 148.
Long Statement,MaterialDesignThemes.Wpf,Screen,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Screen.cs,ToString,The length of the statement  "	return GetType ().Name + "[Bounds=" + Bounds + " WorkingArea=" + WorkingArea + " Primary=" + Primary + " DeviceName=" + DeviceName; " is 131.
Long Statement,MaterialDesignThemes.Wpf,Snackbar,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,GetStoryboardResourceDuration,The length of the statement  "	return storyboard != null && storyboard.Duration.HasTimeSpan ? storyboard.Duration.TimeSpan : new Func<TimeSpan> (() => { " is 121.
Long Statement,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The length of the statement  "	if ((actionContent != null || actionHandler != null || actionArgument != null) && actionContent == null && actionHandler == null && actionArgument == null) { " is 157.
Long Statement,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The length of the statement  "	var snackbarMessageQueueItem = new SnackbarMessageQueueItem (content' actionContent' actionHandler' actionArgument' argumentType' promote); " is 139.
Long Statement,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,PumpAsync,The length of the statement  "			if (_latestShownItem == null || message.IsPromoted || !Equals (_latestShownItem.Item1.Content' message.Content) || !Equals (_latestShownItem.Item1.ActionContent' message.ActionContent) || _latestShownItem.Item2 <= DateTime.Now.Subtract (_messageDuration)) { " is 257.
Long Statement,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,ShowAsync,The length of the statement  "		var mouseNotOverManagedWaitHandle = await snackbar.Dispatcher.InvokeAsync (() => CreateAndShowMessage (snackbar' messageQueueItem' actionClickWaitHandle)); " is 155.
Long Statement,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,ShowAsync,The length of the statement  "		DurationMonitor.Start (_messageDuration.Add (snackbar.ActivateStoryboardDuration)' _pausedEvent' durationPassedWaitHandle' _disposedEvent); " is 139.
Long Statement,MaterialDesignThemes.Wpf,ListSortDirectionIndicator,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ListSortDirectionIndicator.cs,GotoVisualState,The length of the statement  "	var stateName = direction.HasValue ? (direction.Value == System.ComponentModel.ListSortDirection.Ascending ? AscendingStateName : DescendingStateName) : NoneStateName; " is 167.
Long Statement,MaterialDesignThemes.Wpf,MaterialDateDisplay,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,UpdateComponents,The length of the statement  "	ComponentOneContent = DisplayDate.ToString (dateTimeFormatInfo.MonthDayPattern.Replace ("MMMM"' "MMM")' culture).ToTitleCase (culture); " is 135.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The length of the statement  "				if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3) " is 162.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnLayoutUpdated,The length of the statement  "	if (_popupContentControl != null && _popup != null && (PopupMode == PopupBoxPopupMode.MouseOver || PopupMode == PopupBoxPopupMode.MouseOverEager)) { " is 148.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "	if ((PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges || (UnfurlOrientation == Orientation.Horizontal && (PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges)))) { " is 568.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "	var translateCoordinatePath = "(UIElement.RenderTransform).(TransformGroup.Children)[1].(TranslateTransform." + (UnfurlOrientation == Orientation.Horizontal ? "X)" : "Y)"); " is 172.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		var translateTransform = new TranslateTransform (UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom' UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0); " is 209.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame ((double)uiElement.GetAnimationBaseValue (OpacityProperty)' deferredEndKeyTime' sineEase)); " is 148.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		Storyboard.SetTargetProperty (scaleXAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)")); " is 150.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		Storyboard.SetTargetProperty (scaleYAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)")); " is 150.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase)); " is 134.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "		translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase)); " is 135.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,ToggleButtonOnPreviewMouseLeftButtonUp,The length of the statement  "		if (ToggleCheckedContentCommand != null && ToggleCheckedContentCommand.CanExecute (ToggleCheckedContentCommandParameter)) { " is 123.
Long Statement,MaterialDesignThemes.Wpf,PaletteHelper,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,SetLightDark,The length of the statement  "	var existingResourceDictionary = Application.Current.Resources.MergedDictionaries.Where (rd => rd.Source != null).SingleOrDefault (rd => Regex.Match (rd.Source.OriginalString' @"(\/MaterialDesignThemes.Wpf;component\/Themes\/MaterialDesignTheme\.)((Light)|(Dark))").Success); " is 275.
Long Statement,MaterialDesignThemes.Wpf,ShadowAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The length of the statement  "		var doubleAnimation = new DoubleAnimation (shadowLocalInfo.StandardOpacity' new Duration (TimeSpan.FromMilliseconds (350))) { " is 125.
Long Statement,MaterialDesignThemes.Wpf,TextFieldAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TextFieldAssist.cs,ApplyTextBoxViewMargin,The length of the statement  "	var frameworkElement = (textBox.Template.FindName ("PART_ContentHost"' textBox) as ScrollViewer).Content as FrameworkElement; " is 125.
Long Statement,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,OnApplyTemplate,The length of the statement  "		_popup.RemoveHandler (PreviewMouseLeftButtonDownEvent' new MouseButtonEventHandler (PopupOnPreviewMouseLeftButtonDown)); " is 120.
Long Statement,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,IsTimeValid,The length of the statement  "	return DateTime.TryParse (s' CultureInfo.CurrentCulture' DateTimeStyles.AssumeLocal | DateTimeStyles.AllowWhiteSpaces' out time); " is 129.
Long Statement,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,InitializeClock,The length of the statement  "	_clock.SetBinding (Clock.TimeProperty' GetBinding (SelectedTimeProperty' new NullableDateTimeToCurrentDateConverter ())); " is 121.
Long Statement,MaterialDesignThemes.Wpf,ToolTipAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The length of the statement  "		new CustomPopupPlacement (new Point (targetSize.Width / 2 - popupSize.Width / 2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal) " is 134.
Long Statement,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseMouveEventHandler,The length of the statement  "		if (relativePosition.X < 0 || relativePosition.Y < 0 || relativePosition.X >= ripple.ActualWidth || relativePosition.Y >= ripple.ActualHeight) { " is 144.
Long Statement,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,Convert,The length of the statement  "	return (_displayMode == ClockDisplayMode.Hours ? MassageHour (dateTime.Hour' _is24Hours) : MassageMinute (dateTime.Minute)) == i; " is 129.
Long Statement,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ConvertBack,The length of the statement  "	return new DateTime (currentTime.Year' currentTime.Month' currentTime.Day' (_displayMode == ClockDisplayMode.Hours) ? ReverseMassageHour ((int)parameter' currentTime' _is24Hours) : currentTime.Hour' (_displayMode == ClockDisplayMode.Minutes) ? ReverseMassageMinute ((int)parameter) : currentTime.Minute' currentTime.Second); " is 324.
Long Statement,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The length of the statement  "	return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60); " is 161.
Long Statement,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The length of the statement  "	if (!double.TryParse (values [0].ToString ()' out positionAsScaleFactor) || !double.TryParse (values [1].ToString ()' out lower) || !double.TryParse (values [2].ToString ()' out upper)) " is 185.
Long Statement,MaterialDesignThemes.Wpf.Transitions,CircleWipe,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The length of the statement  "	var radius = Math.Sqrt (Math.Pow (toSlide.ActualWidth * horizontalProportion' 2) + Math.Pow (toSlide.ActualHeight * verticalProportion' 2)); " is 140.
Long Statement,MaterialDesignThemes.Wpf.Transitions,IndexedItemOffsetMultiplierExtension,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\IndexedItemOffsetMultiplierExtension.cs,ProvideValue,The length of the statement  "	if (provideValueTarget.TargetObject != null && provideValueTarget.TargetObject.GetType ().FullName == "System.Windows.SharedDp") " is 128.
Long Statement,MaterialDesignThemes.Wpf.Transitions,Transitioner,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,IsTransitionFinishedHandler,The length of the statement  "	foreach (var slide in Items.OfType<object> ().Select (GetSlide).Where (s => s.State == TransitionerSlideState.Previous)) { " is 122.
Long Statement,MaterialDesignThemes.Wpf.Transitions,Transitioner,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The length of the statement  "	if (sourceElement == null || !IsAncestorOf (sourceElement) || !IsSafePositive (ActualWidth) || !IsSafePositive (ActualHeight) || !IsSafePositive (sourceElement.ActualWidth) || !IsSafePositive (sourceElement.ActualHeight)) " is 221.
Long Statement,MaterialDesignThemes.Wpf.Transitions,Transitioner,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The length of the statement  "	var transitionOrigin = sourceElement.TranslatePoint (new Point (sourceElement.ActualWidth / 2' sourceElement.ActualHeight)' this); " is 130.
Long Statement,MaterialDesignThemes.Wpf.Transitions,TransitioningContentBase,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitioningContentBase.cs,OnApplyTemplate,The length of the statement  "	UnregisterNames (MatrixTransformPartName' RotateTransformPartName' ScaleTransformPartName' SkewTransformPartName' TranslateTransformPartName); " is 142.
Complex Conditional,ControlzEx,BadgedEx,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\..\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,ArrangeOverride,The conditional expression  "(containerDesiredSize.Width <= 0.0 || containerDesiredSize.Height <= 0.0) && !double.IsNaN (_badgeContainer.ActualWidth) && !double.IsInfinity (_badgeContainer.ActualWidth) && !double.IsNaN (_badgeContainer.ActualHeight) && !double.IsInfinity (_badgeContainer.ActualHeight)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,ComboBoxCustomPopupPlacementCallback,The conditional expression  "ClassicMode || data.LocationX + data.PopupSize.Width - data.RealOffsetX > data.ScreenWidth || data.LocationX - data.RealOffsetX < 0 || !preferUpIfSafe && data.LocationY - Math.Abs (data.NewDownY) < 0"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The conditional expression  "(actionContent != null || actionHandler != null || actionArgument != null) && actionContent == null && actionHandler == null && actionArgument == null"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,SnackbarMessageQueue,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,PumpAsync,The conditional expression  "_latestShownItem == null || message.IsPromoted || !Equals (_latestShownItem.Item1.Content' message.Content) || !Equals (_latestShownItem.Item1.ActionContent' message.ActionContent) || _latestShownItem.Item2 <= DateTime.Now.Subtract (_messageDuration)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnLayoutUpdated,The conditional expression  "_popupContentControl != null && _popup != null && (PopupMode == PopupBoxPopupMode.MouseOver || PopupMode == PopupBoxPopupMode.MouseOverEager)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The conditional expression  "(PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges || (UnfurlOrientation == Orientation.Horizontal && (PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges)))"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseMouveEventHandler,The conditional expression  "relativePosition.X < 0 || relativePosition.Y < 0 || relativePosition.X >= ripple.ActualWidth || relativePosition.Y >= ripple.ActualHeight"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The conditional expression  "values == null || values.Length != 3 || values [0] == null || values [1] == null || values [2] == null"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,MathMultipleConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\MathMultipleConverter.cs,Convert,The conditional expression  "value == null || value.Length < 2 || value [0] == null || value [1] == null"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Transitions,Transitioner,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The conditional expression  "sourceElement == null || !IsAncestorOf (sourceElement) || !IsSafePositive (ActualWidth) || !IsSafePositive (ActualHeight) || !IsSafePositive (sourceElement.ActualWidth) || !IsSafePositive (sourceElement.ActualHeight)"  is complex.
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  	clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: clock.Time = new DateTime (clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null) {  	if (Is24Hours) {  		GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  	} else  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null) {  	if (Is24Hours) {  		GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  	} else  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null) {  	if (Is24Hours) {  		GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  	} else  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null) {  	if (Is24Hours) {  		GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  	} else  		GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (Is24Hours) {  	GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  } else  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (Is24Hours) {  	GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  } else  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (Is24Hours) {  	GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  } else  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (Is24Hours) {  	GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  } else  	GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (hoursCanvas' Enumerable.Range (13' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusInnerRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (hoursCanvas' Enumerable.Range (1' 12).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (minutesCanvas != null)  	GenerateButtons (minutesCanvas' Enumerable.Range (1' 60).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Minutes' Is24Hours)' i => ((i / 5.0) % 1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (minutesCanvas != null)  	GenerateButtons (minutesCanvas' Enumerable.Range (1' 60).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Minutes' Is24Hours)' i => ((i / 5.0) % 1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (minutesCanvas' Enumerable.Range (1' 60).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Minutes' Is24Hours)' i => ((i / 5.0) % 1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: GenerateButtons (minutesCanvas' Enumerable.Range (1' 60).ToList ()' ButtonRadiusRatio' new ClockItemIsCheckedConverter (() => Time' ClockDisplayMode.Minutes' Is24Hours)' i => ((i / 5.0) % 1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (canvas.Width < 10.0 || Math.Abs (canvas.Height - canvas.Width) > 0.0)  	return;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: _centreCanvas = new Point (canvas.Width / 2' canvas.Height / 2);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: _centreCanvas = new Point (canvas.Width / 2' canvas.Height / 2);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: foreach (var i in range) {  	var button = new ClockItemButton ();  	button.SetBinding (StyleProperty' GetBinding (stylePropertySelector (i)));  	var adjacent = Math.Cos (i * radiansPerItem) * hypotenuseRadius;  	var opposite = Math.Sin (i * radiansPerItem) * hypotenuseRadius;  	button.CentreX = _centreCanvas.X + opposite;  	button.CentreY = _centreCanvas.Y - adjacent;  	button.SetBinding (ToggleButton.IsCheckedProperty' GetBinding ("Time"' converter: isCheckedConverter' converterParameter: i));  	button.SetBinding (Canvas.LeftProperty' GetBinding ("X"' button));  	button.SetBinding (Canvas.TopProperty' GetBinding ("Y"' button));  	button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString (format);  	canvas.Children.Add (button);  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: foreach (var i in range) {  	var button = new ClockItemButton ();  	button.SetBinding (StyleProperty' GetBinding (stylePropertySelector (i)));  	var adjacent = Math.Cos (i * radiansPerItem) * hypotenuseRadius;  	var opposite = Math.Sin (i * radiansPerItem) * hypotenuseRadius;  	button.CentreX = _centreCanvas.X + opposite;  	button.CentreY = _centreCanvas.Y - adjacent;  	button.SetBinding (ToggleButton.IsCheckedProperty' GetBinding ("Time"' converter: isCheckedConverter' converterParameter: i));  	button.SetBinding (Canvas.LeftProperty' GetBinding ("X"' button));  	button.SetBinding (Canvas.TopProperty' GetBinding ("Y"' button));  	button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString (format);  	canvas.Children.Add (button);  }  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString (format);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString (format);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (angle < 0)  	angle += 2 * Math.PI;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: angle += 2 * Math.PI;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours) {  	if (Is24Hours) {  		var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  		var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		var localIsPostMerdiem = sqrt > outerBoundary;  		var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  		if (hour == 12)  			hour = 0;  		else if (hour == 0)  			hour = 12;  		time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  	} else  		time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (Is24Hours) {  	var outerBoundary = (_centreCanvas.X * ButtonRadiusInnerRatio + (_centreCanvas.X * ButtonRadiusRatio - _centreCanvas.X * ButtonRadiusInnerRatio) / 2);  	var sqrt = Math.Sqrt ((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  	var localIsPostMerdiem = sqrt > outerBoundary;  	var hour = (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (localIsPostMerdiem ? 12 : 0);  	if (hour == 12)  		hour = 0;  	else if (hour == 0)  		hour = 12;  	time = new DateTime (Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);  } else  	time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (hour == 12)  	hour = 0;  else if (hour == 0)  	hour = 12;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (hour == 12)  	hour = 0;  else if (hour == 0)  	hour = 12;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (hour == 0)  	hour = 12;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: hour = 12;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: time = new DateTime (Time.Year' Time.Month' Time.Day' (int)Math.Round (6 * angle / Math.PI' MidpointRounding.AwayFromZero) % 12 + (IsPostMeridiem ? 12 : 0)' Time.Minute' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: time = new DateTime (Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round (30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,SetFlags,The following statement contains a magic number: clock.IsPostMeridiem = clock.Time.Hour >= 12;  
Magic Number,MaterialDesignThemes.Wpf,Clock,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,SetFlags,The following statement contains a magic number: clock.IsMiddayHour = clock.Time.Hour == 12;  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The following statement contains a magic number: OnDragStarted (this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0);  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The following statement contains a magic number: OnDragStarted (this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0);  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: Dispatcher.BeginInvoke (new Action (() => {  	X = CentreX - finalSize.Width / 2;  	Y = CentreY - finalSize.Height / 2;  }));  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: Dispatcher.BeginInvoke (new Action (() => {  	X = CentreX - finalSize.Width / 2;  	Y = CentreY - finalSize.Height / 2;  }));  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: X = CentreX - finalSize.Width / 2;  
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: Y = CentreY - finalSize.Height / 2;  
Magic Number,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The following statement contains a magic number: dialogHost.Dispatcher.BeginInvoke (DispatcherPriority.Background' new Action (() => {  	CommandManager.InvalidateRequerySuggested ();  	var child = dialogHost.FocusPopup ();  	//https://github.com/ButchersBoy/MaterialDesignInXamlToolkit/issues/187  	//totally not happy about this' but on immediate validation we can get some weird looking stuff...give WPF a kick to refresh...  	Task.Delay (300).ContinueWith (t => child.Dispatcher.BeginInvoke (new Action (() => child.InvalidateVisual ())));  }));  
Magic Number,MaterialDesignThemes.Wpf,DialogHost,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The following statement contains a magic number: Task.Delay (300).ContinueWith (t => child.Dispatcher.BeginInvoke (new Action (() => child.InvalidateVisual ())));  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMinimum (d' 0.5);  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMaximum (d' 2.0);  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera (new Point3D (w / 2' h / 2' zValue)' -ZAxis' YAxis' FieldOfView);  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera (new Point3D (w / 2' h / 2' zValue)' -ZAxis' YAxis' FieldOfView);  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterX = w / 2;  
Magic Number,MaterialDesignThemes.Wpf,Plane3D,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterY = h / 2;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (IsEnabled && (PopupMode == PopupBoxPopupMode.MouseOverEager || PopupMode == PopupBoxPopupMode.MouseOver)) {  	if (_popupContentControl != null) {  		var inputSource = PresentationSource.FromVisual (_popupContentControl);  		if (inputSource != null) {  			var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  			popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  			var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  			if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  				return;  		}  	}  	SetCurrentValue (IsPopupOpenProperty' true);  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (IsEnabled && (PopupMode == PopupBoxPopupMode.MouseOverEager || PopupMode == PopupBoxPopupMode.MouseOver)) {  	if (_popupContentControl != null) {  		var inputSource = PresentationSource.FromVisual (_popupContentControl);  		if (inputSource != null) {  			var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  			popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  			var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  			if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  				return;  		}  	}  	SetCurrentValue (IsPopupOpenProperty' true);  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (_popupContentControl != null) {  	var inputSource = PresentationSource.FromVisual (_popupContentControl);  	if (inputSource != null) {  		var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  		popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  		var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  		if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  			return;  	}  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (_popupContentControl != null) {  	var inputSource = PresentationSource.FromVisual (_popupContentControl);  	if (inputSource != null) {  		var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  		popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  		var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  		if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  			return;  	}  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (inputSource != null) {  	var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  	popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  	var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  	if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  		return;  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (inputSource != null) {  	var popupScreenPoint = _popupContentControl.PointToScreen (new Point ());  	popupScreenPoint.Offset (-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);  	var expectedPopupScreenPoint = PointToScreen (_popupPointFromLastRequest);  	if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  		return;  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  	return;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (Math.Abs (popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth / 3 || Math.Abs (popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight / 3)  	return;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: if (FlowDirection == FlowDirection.RightToLeft)  	offset.X += targetSize.Width / 2;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: offset.X += targetSize.Width / 2;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode) {  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.BottomAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = targetSize.Height - Math.Abs (offset.Y);  	break;  case PopupBoxPlacementMode.TopAndAlignLeftEdges:  	x = 0 - Math.Abs (offset.X * 3);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignRightEdges:  	x = 0 - popupSize.Width + targetSize.Width - offset.X;  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.TopAndAlignCentres:  	x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  	y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.LeftAndAlignTopEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - Math.Abs (offset.Y * 3);  	break;  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.LeftAndAlignMiddles:  	x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  case PopupBoxPlacementMode.RightAndAlignTopEdges:  	x = targetSize.Width;  	y = 0 - Math.Abs (offset.X * 3);  	break;  case PopupBoxPlacementMode.RightAndAlignBottomEdges:  	x = targetSize.Width;  	y = 0 - (popupSize.Height - targetSize.Height);  	break;  case PopupBoxPlacementMode.RightAndAlignMiddles:  	x = targetSize.Width;  	y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = 0 - Math.Abs (offset.X * 3);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = 0 - Math.Abs (offset.X * 3);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = targetSize.Width / 2 - popupSize.Width / 2 - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = 0 - popupSize.Height - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = 0 - Math.Abs (offset.Y * 3);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: x = 0 - popupSize.Width - Math.Abs (offset.X * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = 0 - Math.Abs (offset.X * 3);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs (offset.Y * 2);  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: if ((PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges || (UnfurlOrientation == Orientation.Horizontal && (PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges)))) {  	controls = controls.Reverse ();  	translateCoordinateFrom = 80;  } else  	translateCoordinateFrom = -80;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: if ((PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges || (UnfurlOrientation == Orientation.Horizontal && (PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges)))) {  	controls = controls.Reverse ();  	translateCoordinateFrom = 80;  } else  	translateCoordinateFrom = -80;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: translateCoordinateFrom = 80;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: translateCoordinateFrom = -80;  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls) {  	var deferredStart = i++ * 20;  	var deferredEnd = deferredStart + 200.0;  	var absoluteZeroKeyTime = KeyTime.FromPercent (0.0);  	var deferredStartKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredStart));  	var deferredEndKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredEnd));  	var elementTranslateCoordinateFrom = translateCoordinateFrom * i;  	var translateTransform = new TranslateTransform (UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom' UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);  	var transformGroup = new TransformGroup {  		Children = new TransformCollection (new Transform[] {  			new ScaleTransform (0' 0)'  			translateTransform  		})  	};  	uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  	uiElement.RenderTransform = transformGroup;  	var opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame ((double)uiElement.GetAnimationBaseValue (OpacityProperty)' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (opacityAnimation' new PropertyPath ("Opacity"));  	Storyboard.SetTarget (opacityAnimation' uiElement);  	var scaleXAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleXAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));  	Storyboard.SetTarget (scaleXAnimation' uiElement);  	var scaleYAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleYAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));  	Storyboard.SetTarget (scaleYAnimation' uiElement);  	var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames ();  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (translateCoordinateAnimation' new PropertyPath (translateCoordinatePath));  	Storyboard.SetTarget (translateCoordinateAnimation' uiElement);  	var storyboard = new Storyboard ();  	storyboard.Children.Add (opacityAnimation);  	storyboard.Children.Add (scaleXAnimation);  	storyboard.Children.Add (scaleYAnimation);  	storyboard.Children.Add (translateCoordinateAnimation);  	if (reverse) {  		storyboard.AutoReverse = true;  		storyboard.Begin ();  		storyboard.Seek (TimeSpan.FromMilliseconds (deferredEnd));  		storyboard.Resume ();  	} else  		storyboard.Begin ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls) {  	var deferredStart = i++ * 20;  	var deferredEnd = deferredStart + 200.0;  	var absoluteZeroKeyTime = KeyTime.FromPercent (0.0);  	var deferredStartKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredStart));  	var deferredEndKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredEnd));  	var elementTranslateCoordinateFrom = translateCoordinateFrom * i;  	var translateTransform = new TranslateTransform (UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom' UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);  	var transformGroup = new TransformGroup {  		Children = new TransformCollection (new Transform[] {  			new ScaleTransform (0' 0)'  			translateTransform  		})  	};  	uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  	uiElement.RenderTransform = transformGroup;  	var opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame ((double)uiElement.GetAnimationBaseValue (OpacityProperty)' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (opacityAnimation' new PropertyPath ("Opacity"));  	Storyboard.SetTarget (opacityAnimation' uiElement);  	var scaleXAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleXAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));  	Storyboard.SetTarget (scaleXAnimation' uiElement);  	var scaleYAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleYAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));  	Storyboard.SetTarget (scaleYAnimation' uiElement);  	var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames ();  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (translateCoordinateAnimation' new PropertyPath (translateCoordinatePath));  	Storyboard.SetTarget (translateCoordinateAnimation' uiElement);  	var storyboard = new Storyboard ();  	storyboard.Children.Add (opacityAnimation);  	storyboard.Children.Add (scaleXAnimation);  	storyboard.Children.Add (scaleYAnimation);  	storyboard.Children.Add (translateCoordinateAnimation);  	if (reverse) {  		storyboard.AutoReverse = true;  		storyboard.Begin ();  		storyboard.Seek (TimeSpan.FromMilliseconds (deferredEnd));  		storyboard.Resume ();  	} else  		storyboard.Begin ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls) {  	var deferredStart = i++ * 20;  	var deferredEnd = deferredStart + 200.0;  	var absoluteZeroKeyTime = KeyTime.FromPercent (0.0);  	var deferredStartKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredStart));  	var deferredEndKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredEnd));  	var elementTranslateCoordinateFrom = translateCoordinateFrom * i;  	var translateTransform = new TranslateTransform (UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom' UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);  	var transformGroup = new TransformGroup {  		Children = new TransformCollection (new Transform[] {  			new ScaleTransform (0' 0)'  			translateTransform  		})  	};  	uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  	uiElement.RenderTransform = transformGroup;  	var opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame ((double)uiElement.GetAnimationBaseValue (OpacityProperty)' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (opacityAnimation' new PropertyPath ("Opacity"));  	Storyboard.SetTarget (opacityAnimation' uiElement);  	var scaleXAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleXAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));  	Storyboard.SetTarget (scaleXAnimation' uiElement);  	var scaleYAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleYAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));  	Storyboard.SetTarget (scaleYAnimation' uiElement);  	var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames ();  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (translateCoordinateAnimation' new PropertyPath (translateCoordinatePath));  	Storyboard.SetTarget (translateCoordinateAnimation' uiElement);  	var storyboard = new Storyboard ();  	storyboard.Children.Add (opacityAnimation);  	storyboard.Children.Add (scaleXAnimation);  	storyboard.Children.Add (scaleYAnimation);  	storyboard.Children.Add (translateCoordinateAnimation);  	if (reverse) {  		storyboard.AutoReverse = true;  		storyboard.Begin ();  		storyboard.Seek (TimeSpan.FromMilliseconds (deferredEnd));  		storyboard.Resume ();  	} else  		storyboard.Begin ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls) {  	var deferredStart = i++ * 20;  	var deferredEnd = deferredStart + 200.0;  	var absoluteZeroKeyTime = KeyTime.FromPercent (0.0);  	var deferredStartKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredStart));  	var deferredEndKeyTime = KeyTime.FromTimeSpan (TimeSpan.FromMilliseconds (deferredEnd));  	var elementTranslateCoordinateFrom = translateCoordinateFrom * i;  	var translateTransform = new TranslateTransform (UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom' UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);  	var transformGroup = new TransformGroup {  		Children = new TransformCollection (new Transform[] {  			new ScaleTransform (0' 0)'  			translateTransform  		})  	};  	uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  	uiElement.RenderTransform = transformGroup;  	var opacityAnimation = new DoubleAnimationUsingKeyFrames ();  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	opacityAnimation.KeyFrames.Add (new EasingDoubleKeyFrame ((double)uiElement.GetAnimationBaseValue (OpacityProperty)' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (opacityAnimation' new PropertyPath ("Opacity"));  	Storyboard.SetTarget (opacityAnimation' uiElement);  	var scaleXAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleXAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleXAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));  	Storyboard.SetTarget (scaleXAnimation' uiElement);  	var scaleYAnimation = new DoubleAnimationUsingKeyFrames ();  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' absoluteZeroKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredStartKeyTime' sineEase));  	scaleYAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (1' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (scaleYAnimation' new PropertyPath ("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));  	Storyboard.SetTarget (scaleYAnimation' uiElement);  	var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames ();  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));  	translateCoordinateAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (0' deferredEndKeyTime' sineEase));  	Storyboard.SetTargetProperty (translateCoordinateAnimation' new PropertyPath (translateCoordinatePath));  	Storyboard.SetTarget (translateCoordinateAnimation' uiElement);  	var storyboard = new Storyboard ();  	storyboard.Children.Add (opacityAnimation);  	storyboard.Children.Add (scaleXAnimation);  	storyboard.Children.Add (scaleYAnimation);  	storyboard.Children.Add (translateCoordinateAnimation);  	if (reverse) {  		storyboard.AutoReverse = true;  		storyboard.Begin ();  		storyboard.Seek (TimeSpan.FromMilliseconds (deferredEnd));  		storyboard.Resume ();  	} else  		storyboard.Begin ();  }  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  
Magic Number,MaterialDesignThemes.Wpf,PopupBox,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: uiElement.SetCurrentValue (RenderTransformOriginProperty' new Point (.5' .5));  
Magic Number,MaterialDesignThemes.Wpf,ShadowAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The following statement contains a magic number: if ((bool)dependencyPropertyChangedEventArgs.NewValue) {  	SetLocalInfo (dependencyObject' new ShadowLocalInfo (dropShadowEffect.Opacity));  	var doubleAnimation = new DoubleAnimation (1' new Duration (TimeSpan.FromMilliseconds (350))) {  		FillBehavior = FillBehavior.HoldEnd  	};  	dropShadowEffect.BeginAnimation (DropShadowEffect.OpacityProperty' doubleAnimation);  } else {  	var shadowLocalInfo = GetLocalInfo (dependencyObject);  	if (shadowLocalInfo == null)  		return;  	var doubleAnimation = new DoubleAnimation (shadowLocalInfo.StandardOpacity' new Duration (TimeSpan.FromMilliseconds (350))) {  		FillBehavior = FillBehavior.HoldEnd  	};  	dropShadowEffect.BeginAnimation (DropShadowEffect.OpacityProperty' doubleAnimation);  }  
Magic Number,MaterialDesignThemes.Wpf,ShadowAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The following statement contains a magic number: if ((bool)dependencyPropertyChangedEventArgs.NewValue) {  	SetLocalInfo (dependencyObject' new ShadowLocalInfo (dropShadowEffect.Opacity));  	var doubleAnimation = new DoubleAnimation (1' new Duration (TimeSpan.FromMilliseconds (350))) {  		FillBehavior = FillBehavior.HoldEnd  	};  	dropShadowEffect.BeginAnimation (DropShadowEffect.OpacityProperty' doubleAnimation);  } else {  	var shadowLocalInfo = GetLocalInfo (dependencyObject);  	if (shadowLocalInfo == null)  		return;  	var doubleAnimation = new DoubleAnimation (shadowLocalInfo.StandardOpacity' new Duration (TimeSpan.FromMilliseconds (350))) {  		FillBehavior = FillBehavior.HoldEnd  	};  	dropShadowEffect.BeginAnimation (DropShadowEffect.OpacityProperty' doubleAnimation);  }  
Magic Number,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: if (_lastValidTime != null) {  	SetCurrentValue (SelectedTimeProperty' _lastValidTime.Value);  	_textBox.Text = _lastValidTime.Value.ToString (_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");  } else {  	SetCurrentValue (SelectedTimeProperty' null);  	_textBox.Text = "";  }  
Magic Number,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: if (_lastValidTime != null) {  	SetCurrentValue (SelectedTimeProperty' _lastValidTime.Value);  	_textBox.Text = _lastValidTime.Value.ToString (_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");  } else {  	SetCurrentValue (SelectedTimeProperty' null);  	_textBox.Text = "";  }  
Magic Number,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: _textBox.Text = _lastValidTime.Value.ToString (_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");  
Magic Number,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: _textBox.Text = _lastValidTime.Value.ToString (_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");  
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new[] {  	new CustomPopupPlacement (new Point (targetSize.Width / 2 - popupSize.Width / 2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)  };  
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new[] {  	new CustomPopupPlacement (new Point (targetSize.Width / 2 - popupSize.Width / 2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)  };  
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new[] {  	new CustomPopupPlacement (new Point (targetSize.Width / 2 - popupSize.Width / 2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)  };  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseButtonEventHandler,The following statement contains a magic number: foreach (var ripple in PressedInstances) {  	// adjust the transition scale time according to the current animated scale  	var scaleTrans = ripple.Template.FindName ("ScaleTransform"' ripple) as ScaleTransform;  	if (scaleTrans != null) {  		double currentScale = scaleTrans.ScaleX;  		var newTime = TimeSpan.FromMilliseconds (300 * (1.0 - currentScale));  		// change the scale animation according to the current scale  		var scaleXKeyFrame = ripple.Template.FindName ("MousePressedToNormalScaleXKeyFrame"' ripple) as EasingDoubleKeyFrame;  		if (scaleXKeyFrame != null) {  			scaleXKeyFrame.KeyTime = KeyTime.FromTimeSpan (newTime);  		}  		var scaleYKeyFrame = ripple.Template.FindName ("MousePressedToNormalScaleYKeyFrame"' ripple) as EasingDoubleKeyFrame;  		if (scaleYKeyFrame != null) {  			scaleYKeyFrame.KeyTime = KeyTime.FromTimeSpan (newTime);  		}  	}  	VisualStateManager.GoToState (ripple' TemplateStateNormal' true);  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseButtonEventHandler,The following statement contains a magic number: if (scaleTrans != null) {  	double currentScale = scaleTrans.ScaleX;  	var newTime = TimeSpan.FromMilliseconds (300 * (1.0 - currentScale));  	// change the scale animation according to the current scale  	var scaleXKeyFrame = ripple.Template.FindName ("MousePressedToNormalScaleXKeyFrame"' ripple) as EasingDoubleKeyFrame;  	if (scaleXKeyFrame != null) {  		scaleXKeyFrame.KeyTime = KeyTime.FromTimeSpan (newTime);  	}  	var scaleYKeyFrame = ripple.Template.FindName ("MousePressedToNormalScaleYKeyFrame"' ripple) as EasingDoubleKeyFrame;  	if (scaleYKeyFrame != null) {  		scaleYKeyFrame.KeyTime = KeyTime.FromTimeSpan (newTime);  	}  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered (this)) {  	var innerContent = (Content as FrameworkElement);  	if (innerContent != null) {  		var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  		RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  		RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  	} else {  		RippleX = ActualWidth / 2 - RippleSize / 2;  		RippleY = ActualHeight / 2 - RippleSize / 2;  	}  } else {  	RippleX = point.X - RippleSize / 2;  	RippleY = point.Y - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (innerContent != null) {  	var position = innerContent.TransformToAncestor (this).Transform (new Point (0' 0));  	RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  	RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  } else {  	RippleX = ActualWidth / 2 - RippleSize / 2;  	RippleY = ActualHeight / 2 - RippleSize / 2;  }  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleX = ActualWidth / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleX = ActualWidth / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleY = ActualHeight / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleY = ActualHeight / 2 - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleX = point.X - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: RippleY = point.Y - RippleSize / 2;  
Magic Number,MaterialDesignThemes.Wpf,Ripple,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnSizeChanged,The following statement contains a magic number: RippleSize = 2 * radius * RippleAssist.GetRippleSizeMultiplier (this);  
Magic Number,MaterialDesignThemes.Wpf,TreeHelper,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TreeHelper.cs,GetVisibleWidth,The following statement contains a magic number: while (start < end) {  	width = (end + start) / 2;  	hitTest = parent.InputHitTest (new Point (location.X + width' location.Y));  	if (IsAncestorTill (hitTest as FrameworkElement' element' parent)) {  		//Speed tweak  		hitTest = parent.InputHitTest (new Point (location.X + width + 1' location.Y));  		if (IsAncestorTill (hitTest as FrameworkElement' element' parent)) {  			start = width;  		} else {  			return width;  		}  	} else {  		end = width;  	}  }  
Magic Number,MaterialDesignThemes.Wpf,TreeHelper,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TreeHelper.cs,GetVisibleWidth,The following statement contains a magic number: width = (end + start) / 2;  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushRoundConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushRoundConverter.cs,Convert,The following statement contains a magic number: return brightness < 123 ? LowValue : HighValue;  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush (solidColorBrush.Color' Colors.Transparent) {  	Center = new Point (.5' .5)'  	GradientOrigin = new Point (.5' .5)'  	RadiusX = .75'  	RadiusY = .75'  	Opacity = .39  };  
Magic Number,MaterialDesignThemes.Wpf.Converters,CalendarDateCoalesceConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CalendarDateCoalesceConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2)  	throw new ArgumentException ("Unexpected"' "values");  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (is24Hours) {  	return val == 0 ? 24 : val;  }  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: return val == 0 ? 24 : val;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val == 0)  	return 12;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: return 12;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val > 12)  	return val - 12;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val > 12)  	return val - 12;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: return val - 12;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageMinute,The following statement contains a magic number: return val == 0 ? 60 : val;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: if (is24Hours) {  	return val == 24 ? 0 : val;  }  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return val == 24 ? 0 : val;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12 ? (val == 12 ? 0 : val) : (val == 12 ? 12 : val + 12);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12 ? (val == 12 ? 0 : val) : (val == 12 ? 12 : val + 12);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12 ? (val == 12 ? 0 : val) : (val == 12 ? 12 : val + 12);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12 ? (val == 12 ? 0 : val) : (val == 12 ? 12 : val + 12);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12 ? (val == 12 ? 0 : val) : (val == 12 ? 12 : val + 12);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageMinute,The following statement contains a magic number: return val == 60 ? 0 : val;  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours ? ((time.Hour > 13) ? time.Hour - 12 : time.Hour) * (360 / 12) : (time.Minute == 0 ? 60 : time.Minute) * (360 / 60);  
Magic Number,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The following statement contains a magic number: if (values == null || values.Length != 3 || values [0] == null || values [1] == null || values [2] == null)  	return Binding.DoNothing;  
Magic Number,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The following statement contains a magic number: if (values == null || values.Length != 3 || values [0] == null || values [1] == null || values [2] == null)  	return Binding.DoNothing;  
Magic Number,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The following statement contains a magic number: if (!double.TryParse (values [0].ToString ()' out positionAsScaleFactor) || !double.TryParse (values [1].ToString ()' out lower) || !double.TryParse (values [2].ToString ()' out upper))  	return Binding.DoNothing;  
Magic Number,MaterialDesignThemes.Wpf.Converters,MathMultipleConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\MathMultipleConverter.cs,Convert,The following statement contains a magic number: if (value == null || value.Length < 2 || value [0] == null || value [1] == null)  	return Binding.DoNothing;  
Magic Number,MaterialDesignThemes.Wpf.Converters,PointValueConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\PointValueConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 2 && values [0] != null && values [1] != null) {  	double x' y;  	if (double.TryParse (values [0].ToString ()' out x) && double.TryParse (values [1].ToString ()' out y))  		return new Point (x' y);  }  
Magic Number,MaterialDesignThemes.Wpf.Converters,CardClipConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\SizeToRectConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2 || !(values [0] is Size) || !(values [1] is Thickness))  	return Binding.DoNothing;  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 5) {  	var fullIndeterminateScaling = values [4].ExtractDouble ();  	if (!double.IsNaN (fullIndeterminateScaling) && fullIndeterminateScaling > 0.0) {  		value = (maximum - minimum) * fullIndeterminateScaling;  	}  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 5) {  	var fullIndeterminateScaling = values [4].ExtractDouble ();  	if (!double.IsNaN (fullIndeterminateScaling) && fullIndeterminateScaling > 0.0) {  		value = (maximum - minimum) * fullIndeterminateScaling;  	}  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double)value > 0.0)) {  	return new Size ((double)value / 2' (double)value / 2);  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double)value > 0.0)) {  	return new Size ((double)value / 2' (double)value / 2);  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: return new Size ((double)value / 2' (double)value / 2);  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: return new Size ((double)value / 2' (double)value / 2);  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 4) {  	var fullIndeterminateScaling = values [3].ExtractDouble ();  	if (!double.IsNaN (fullIndeterminateScaling) && fullIndeterminateScaling > 0.0) {  		value = (maximum - minimum) * fullIndeterminateScaling;  	}  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 4) {  	var fullIndeterminateScaling = values [3].ExtractDouble ();  	if (!double.IsNaN (fullIndeterminateScaling) && fullIndeterminateScaling > 0.0) {  		value = (maximum - minimum) * fullIndeterminateScaling;  	}  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: return percent > 0.5;  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,RotateTransformCentreConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\RotateTransformCentreConverter.cs,Convert,The following statement contains a magic number: return (double)value / 2;  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,RotateTransformConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\RotateTransformConverter.cs,Convert,The following statement contains a magic number: return 360 * percent;  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,StartPointConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\StartPointConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double)value > 0.0)) {  	return new Point ((double)value / 2' 0);  }  
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,StartPointConverter,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\StartPointConverter.cs,Convert,The following statement contains a magic number: return new Point ((double)value / 2' 0);  
Magic Number,MaterialDesignThemes.Wpf.Transitions,SlideOutWipe,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideOutWipe.cs,Wipe,The following statement contains a magic number: scaleAnimation.KeyFrames.Add (new EasingDoubleKeyFrame (.8' endKeyTime));  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind) {  //we need these long winded property paths as combined storyboards wont play directly on transforms  case TransitionEffectKind.None:  	break;  case TransitionEffectKind.ExpandIn:  	return CreateExpandIn (effectSubject);  case TransitionEffectKind.SlideInFromLeft:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromTop:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromRight:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromBottom:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.FadeIn:  	timeline = CreateFadeIn (effectSubject.Offset);  	property = OpacityProperty;  	target = effectSubject;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind) {  //we need these long winded property paths as combined storyboards wont play directly on transforms  case TransitionEffectKind.None:  	break;  case TransitionEffectKind.ExpandIn:  	return CreateExpandIn (effectSubject);  case TransitionEffectKind.SlideInFromLeft:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromTop:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromRight:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromBottom:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.FadeIn:  	timeline = CreateFadeIn (effectSubject.Offset);  	property = OpacityProperty;  	target = effectSubject;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind) {  //we need these long winded property paths as combined storyboards wont play directly on transforms  case TransitionEffectKind.None:  	break;  case TransitionEffectKind.ExpandIn:  	return CreateExpandIn (effectSubject);  case TransitionEffectKind.SlideInFromLeft:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromTop:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromRight:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromBottom:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.FadeIn:  	timeline = CreateFadeIn (effectSubject.Offset);  	property = OpacityProperty;  	target = effectSubject;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind) {  //we need these long winded property paths as combined storyboards wont play directly on transforms  case TransitionEffectKind.None:  	break;  case TransitionEffectKind.ExpandIn:  	return CreateExpandIn (effectSubject);  case TransitionEffectKind.SlideInFromLeft:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromTop:  	timeline = CreateSlide (-300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromRight:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.XProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.SlideInFromBottom:  	timeline = CreateSlide (300' 0' effectSubject.Offset);  	property = TranslateTransform.YProperty;  	targetName = effectSubject.TranslateTransformName;  	break;  case TransitionEffectKind.FadeIn:  	timeline = CreateFadeIn (effectSubject.Offset);  	property = OpacityProperty;  	target = effectSubject;  	break;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: timeline = CreateSlide (-300' 0' effectSubject.Offset);  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: timeline = CreateSlide (-300' 0' effectSubject.Offset);  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: timeline = CreateSlide (300' 0' effectSubject.Offset);  
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: timeline = CreateSlide (300' 0' effectSubject.Offset);  
Missing Default,MaterialDesignThemes.Wpf,ComboBoxPopup,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,UpdateChildTemplate,The following switch statement is missing a default case: switch (placement) {  case ComboBoxPopupPlacement.Classic:  	SetChildTemplateIfNeed (ClassicContentTemplate);  	break;  case ComboBoxPopupPlacement.Down:  	SetChildTemplateIfNeed (DownContentTemplate);  	break;  case ComboBoxPopupPlacement.Up:  	SetChildTemplateIfNeed (UpContentTemplate);  	break;  //                default:  //                    throw new NotImplementedException($"Unexpected value {placement} of the {nameof(PopupPlacement)} property inside the {nameof(ComboBoxPopup)} control.");  }  
Missing Default,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,ProcessKey,The following switch statement is missing a default case: switch (keyEventArgs.Key) {  case Key.System: {  	switch (keyEventArgs.SystemKey) {  	case Key.Down: {  		if ((Keyboard.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {  			TogglePopup ();  			return true;  		}  		break;  	}  	}  	break;  }  case Key.Enter: {  	SetSelectedTime ();  	return true;  }  }  
Missing Default,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,ProcessKey,The following switch statement is missing a default case: switch (keyEventArgs.SystemKey) {  case Key.Down: {  	if ((Keyboard.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {  		TogglePopup ();  		return true;  	}  	break;  }  }  
Missing Default,MaterialDesignThemes.Wpf,TimePicker,F:\newReposMay17\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,DateTimeToString,The following switch statement is missing a default case: switch (SelectedTimeFormat) {  case DatePickerFormat.Short:  	return string.Format (CultureInfo.CurrentCulture' d.ToString (dtfi.ShortTimePattern' dtfi));  case DatePickerFormat.Long:  	return string.Format (CultureInfo.CurrentCulture' d.ToString (dtfi.LongTimePattern' dtfi));  }  
