Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,OnApplyTemplate,Cyclomatic complexity of the method is 8
Complex Method,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,Cyclomatic complexity of the method is 9
Complex Method,MaterialDesignThemes.Wpf.Transitions,IndexedItemOffsetMultiplierExtension,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\IndexedItemOffsetMultiplierExtension.cs,ProvideValue,Cyclomatic complexity of the method is 13
Long Parameter List,ControlzEx,PopupEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,_SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,ControlzEx,PopupEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The method has 6 parameters. Parameters: canvas' range' radiusRatio' isCheckedConverter' stylePropertySelector' format
Long Parameter List,MaterialDesignThemes.Wpf,PositioningData,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,PositioningData,The method has 10 parameters. Parameters: mainVisual' offsetX' newUpY' newDownY' popupSize' targetSize' locationX' locationY' screenHeight' screenWidth
Long Parameter List,MaterialDesignThemes.Wpf,ISnackbarMessageQueue,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ISnackbarMessageQueue.cs,Enqueue,The method has 5 parameters. Parameters: content' actionContent' actionHandler' actionArgument' promote
Long Parameter List,MaterialDesignThemes.Wpf,Palette,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Palette.cs,Palette,The method has 6 parameters. Parameters: primarySwatch' accentSwatch' primaryLightHueIndex' primaryMidHueIndex' primaryDarkHueIndex' accentHueIndex
Long Parameter List,MaterialDesignThemes.Wpf,SnackbarMessageQueue,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The method has 5 parameters. Parameters: content' actionContent' actionHandler' actionArgument' promote
Long Parameter List,MaterialDesignThemes.Wpf,SnackbarMessageQueueItem,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueueItem.cs,SnackbarMessageQueueItem,The method has 6 parameters. Parameters: content' actionContent' actionHandler' actionArgument' argumentType' isPromoted
Long Parameter List,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,ReplacePrimaryColor,The method has 5 parameters. Parameters: swatch' light' mid' dark' allHues
Long Identifier,ControlzEx,PackIconBase<TKind>,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PackIconBase.cs,KindPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,ControlzEx,PopupEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,,The length of the parameter CloseOnMouseLeftButtonDownProperty is 34.
Long Identifier,MaterialDesignThemes.Wpf,Badged,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Badged.cs,,The length of the parameter BadgeChangedStoryboardProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,Chip,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Chip.cs,,The length of the parameter DeleteCommandParameterProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,TimePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,DisplayModePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,,The length of the parameter ButtonRadiusInnerRatioProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,,The length of the parameter ClassicContentTemplateProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedCheckBoxStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedEditingCheckBoxStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,AutoGeneratedEditingTextStylePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,EnableCheckBoxAssistPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,,The length of the parameter AutoGeneratedCheckBoxStyleProperty is 34.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,,The length of the parameter AutoGeneratedEditingCheckBoxStyleProperty is 41.
Long Identifier,MaterialDesignThemes.Wpf,DataGridAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DataGridAssist.cs,,The length of the parameter AutoGeneratedEditingTextStyleProperty is 37.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,SnackbarMessageQueuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter _attachedDialogOpenedEventHandler is 33.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter _attachedDialogClosingEventHandler is 34.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter _closeDialogExecutionParameter is 30.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter _restoreFocusWindowReactivation is 31.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter _currentSnackbarMessageQueueUnPauseAction is 41.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter DialogContentTemplateSelectorProperty is 37.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter DialogContentStringFormatProperty is 33.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter OpenDialogCommandDataContextSourceProperty is 42.
Long Identifier,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,,The length of the parameter CloseOnClickAwayParameterProperty is 33.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,IsDrawerOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter TemplateAllDrawersAllClosedStateName is 36.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter TemplateAllDrawersAnyOpenStateName is 34.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter TopDrawerContentTemplateProperty is 32.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter TopDrawerContentTemplateSelectorProperty is 40.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter TopDrawerContentStringFormatProperty is 36.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter LeftDrawerContentTemplateProperty is 33.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter LeftDrawerContentTemplateSelectorProperty is 41.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter LeftDrawerContentStringFormatProperty is 37.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter RightDrawerContentTemplateProperty is 34.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter RightDrawerContentTemplateSelectorProperty is 42.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter RightDrawerContentStringFormatProperty is 38.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter BottomDrawerContentTemplateProperty is 35.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter BottomDrawerContentTemplateSelectorProperty is 43.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter BottomDrawerContentStringFormatProperty is 39.
Long Identifier,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,,The length of the parameter BottomDrawerBackgroundProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,IsFlippedPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,,The length of the parameter FrontContentTemplateSelectorProperty is 36.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,,The length of the parameter FrontContentStringFormatProperty is 32.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,,The length of the parameter BackContentTemplateSelectorProperty is 35.
Long Identifier,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,,The length of the parameter BackContentStringFormatProperty is 31.
Long Identifier,MaterialDesignThemes.Wpf,ComboBoxHintProxy,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\HintProxyFabric.ComboBox.cs,,The length of the parameter _comboBoxTextChangedEventHandler is 32.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,MessageQueuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,IsActivePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,,The length of the parameter _messageQueueRegistrationCleanUp is 32.
Long Identifier,MaterialDesignThemes.Wpf,Snackbar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Snackbar.cs,,The length of the parameter DeactivateStoryboardCompletedEvent is 34.
Long Identifier,MaterialDesignThemes.Wpf,SnackbarMessage,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessage.cs,,The length of the parameter ActionCommandParameterProperty is 30.
Long Identifier,MaterialDesignThemes.Wpf,SnackbarMessage,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessage.cs,,The length of the parameter ActionContentStringFormatProperty is 33.
Long Identifier,MaterialDesignThemes.Wpf,SnackbarMessage,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessage.cs,,The length of the parameter ActionContentTemplateSelectorProperty is 37.
Long Identifier,MaterialDesignThemes.Wpf,DurationMonitor,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,DurationMonitor,The length of the parameter signalWhenDurationPassedWaitHandle is 34.
Long Identifier,MaterialDesignThemes.Wpf,DurationMonitor,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Start,The length of the parameter signalWhenDurationPassedWaitHandle is 34.
Long Identifier,MaterialDesignThemes.Wpf,ListSortDirectionIndicator,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ListSortDirectionIndicator.cs,ListSortDirectionPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,DisplayDatePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,,The length of the parameter ComponentOneContentPropertyKey is 30.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,,The length of the parameter ComponentTwoContentPropertyKey is 30.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,,The length of the parameter ComponentThreeContentPropertyKey is 32.
Long Identifier,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,,The length of the parameter IsDayInFirstComponentPropertyKey is 32.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,IsPopupOpenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,PlacementModePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the parameter elementTranslateCoordinateFrom is 30.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,,The length of the parameter ToggleCheckedContentTemplateProperty is 36.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,,The length of the parameter ToggleCheckedContentCommandProperty is 35.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,,The length of the parameter ToggleCheckedContentCommandParameterProperty is 44.
Long Identifier,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,,The length of the parameter ToggleCheckedContentClickEvent is 30.
Long Identifier,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,SetLightDark,The length of the parameter existingMahAppsResourceDictionary is 33.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,ValuePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,MaxPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,MinPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,,The length of the parameter ValueItemContainerButtonStyleProperty is 37.
Long Identifier,MaterialDesignThemes.Wpf,RatingBar,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\RatingBar.cs,,The length of the parameter ValueItemTemplateSelectorProperty is 33.
Long Identifier,MaterialDesignThemes.Wpf,ShadowAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,SmartHint,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SmartHint.cs,HintProxyPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,SmartHint,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SmartHint.cs,,The length of the parameter IsContentNullOrEmptyPropertyKey is 31.
Long Identifier,MaterialDesignThemes.Wpf,SmartHint,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SmartHint.cs,,The length of the parameter IsHintInFloatingPositionPropertyKey is 35.
Long Identifier,MaterialDesignThemes.Wpf,SmartHint,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SmartHint.cs,,The length of the parameter IsHintInFloatingPositionProperty is 32.
Long Identifier,MaterialDesignThemes.Wpf,TextFieldAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TextFieldAssist.cs,TextBoxViewMarginPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TextFieldAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TextFieldAssist.cs,,The length of the parameter IncludeSpellingSuggestionsProperty is 34.
Long Identifier,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,TextPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SelectedTimePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,,The length of the parameter ClockHostContentControlStyleProperty is 36.
Long Identifier,MaterialDesignThemes.Wpf,ToggleButtonAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToggleButtonAssist.cs,OnContentPropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf,Underline,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Underline.cs,IsActivePropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Identifier,MaterialDesignThemes.Wpf.Transitions,Transitioner,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,,The length of the parameter AutoApplyTransitionOriginsProperty is 34.
Long Identifier,MaterialDesignThemes.Wpf.Transitions,Transitioner,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,,The length of the parameter DefaultTransitionOriginProperty is 31.
Long Statement,ControlzEx,BadgedEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,OnBadgeChanged,The length of the statement  "            instance.IsBadgeSet = !string.IsNullOrWhiteSpace(e.NewValue as string) || (e.NewValue != null && !(e.NewValue is string)); " is 122.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the statement  "				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second); " is 137.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The length of the statement  "				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second); " is 137.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The length of the statement  "				button.SetBinding(ToggleButton.IsCheckedProperty' GetBinding("Time"' converter: isCheckedConverter' converterParameter: i)); " is 124.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "            var currentDragPosition = new Point(_currentStartPosition.X + dragDeltaEventArgs.HorizontalChange' _currentStartPosition.Y + dragDeltaEventArgs.VerticalChange); " is 160.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y)); " is 196.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The length of the statement  "                time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second); " is 152.
Long Statement,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GetBinding,The length of the statement  "			var result = new Binding(propertyName) {Source = owner ?? this' Converter = converter' ConverterParameter = converterParameter}; " is 128.
Long Statement,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The length of the statement  "            OnDragStarted(this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0); " is 145.
Long Statement,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragCompleted,The length of the statement  "			OnDragCompleted(this' dragCompletedEventArgs.HorizontalChange' dragCompletedEventArgs.VerticalChange' dragCompletedEventArgs.Canceled); " is 135.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,GetPositioningData,The length of the statement  "            if (mainVisual == null) throw new ArgumentException($"{nameof(visualAncestry)} must contains unless one {nameof(Visual)} control inside."); " is 139.
Long Statement,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,UpdateChildTemplate,The length of the statement  "                    //                    throw new NotImplementedException($"Unexpected value {placement} of the {nameof(PopupPlacement)} property inside the {nameof(ComboBoxPopup)} control."); " is 174.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "            var targets = LoadedInstances.Where(dh => dialogIdentifier == null || Equals(dh.Identifier' dialogIdentifier)).ToList(); " is 120.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "                throw new InvalidOperationException("No loaded DialogHost have an Identifier property matching dialogIndetifier argument."); " is 124.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,Show,The length of the statement  "                throw new InvalidOperationException("Multiple viable DialogHosts.  Specify a unique Identifier on each DialogHost' especially where multiple Windows are a concern."); " is 166.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the statement  "            VisualStateManager.GoToState(dialogHost' dialogHost.SelectState()' !TransitionAssist.GetDisableTransitions(dialogHost)); " is 120.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The length of the statement  "                //totally not happy about this' but on immediate validation we can get some weird looking stuff...give WPF a kick to refresh... " is 127.
Long Statement,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,FocusPopup,The length of the statement  "            var focusable = child.VisualDepthFirstTraversal().OfType<UIElement>().FirstOrDefault(ui => ui.Focusable && ui.IsVisible); " is 121.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "                !anyOpen ? TemplateAllDrawersAllClosedStateName : TemplateAllDrawersAnyOpenStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions(this)); " is 182.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "                IsLeftDrawerOpen ? TemplateLeftOpenStateName : TemplateLeftClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions(this)); " is 172.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "                IsTopDrawerOpen ? TemplateTopOpenStateName : TemplateTopClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions(this)); " is 169.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "                IsRightDrawerOpen ? TemplateRightOpenStateName : TemplateRightClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions(this)); " is 175.
Long Statement,MaterialDesignThemes.Wpf,DrawerHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DrawerHost.cs,UpdateVisualStates,The length of the statement  "                IsBottomDrawerOpen ? TemplateBottomOpenStateName : TemplateBottomClosedStateName' useTransitions.HasValue ? useTransitions.Value : !TransitionAssist.GetDisableTransitions(this)); " is 178.
Long Statement,MaterialDesignThemes.Wpf,ListBoxAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ListBoxAssist.cs,ListBoxMouseButtonEvent,The length of the statement  "                ripple.RaiseEvent(new MouseButtonEventArgs(mouseButtonEventArgs.MouseDevice' mouseButtonEventArgs.Timestamp' mouseButtonEventArgs.ChangedButton) " is 144.
Long Statement,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,CreateVisualChild,The length of the statement  "            var frontModel = new Viewport2DVisual3D { Geometry = simpleQuad' Visual = _logicalChild' Material = frontMaterial' Transform = xfGroup }; " is 137.
Long Statement,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The length of the statement  "            // Use GetDescendantBounds for sizing and centering since DesiredSize includes layout whitespace' whereas GetDescendantBounds  " is 125.
Long Statement,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The length of the statement  "            // that it's looking at.  See http://blogs.msdn.com/greg_schechter/archive/2007/04/03/camera-construction-in-parallaxui.aspx " is 124.
Long Statement,MaterialDesignThemes.Wpf,Screen,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Screen.cs,ToString,The length of the statement  "            return GetType().Name + "[Bounds=" + Bounds + " WorkingArea=" + WorkingArea + " Primary=" + Primary + " DeviceName=" + DeviceName; " is 130.
Long Statement,MaterialDesignThemes.Wpf,MaterialDateDisplay,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\MaterialDateDisplay.cs,UpdateComponents,The length of the statement  "            ComponentOneContent = DisplayDate.ToString(dateTimeFormatInfo.MonthDayPattern.Replace("MMMM"' "MMM")' culture).ToTitleCase(culture);     //Day Month folowing culture order. We don't want the month to take too much space " is 219.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "                opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame((double)uiElement.GetAnimationBaseValue(OpacityProperty)' deferredEndKeyTime' sineEase)); " is 145.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "                Storyboard.SetTargetProperty(scaleXAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)")); " is 148.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "                Storyboard.SetTargetProperty(scaleYAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)")); " is 148.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "                translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase)); " is 132.
Long Statement,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The length of the statement  "                translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase)); " is 133.
Long Statement,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,SetLightDark,The length of the statement  "                .SingleOrDefault(rd => Regex.Match(rd.Source.OriginalString' @"(\/MaterialDesignThemes.Wpf;component\/Themes\/MaterialDesignTheme\.)((Light)|(Dark))").Success); " is 160.
Long Statement,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,SetLightDark,The length of the statement  "                $"pack://application:'''/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.{(isDark ? "Dark" : "Light")}.xaml"; " is 123.
Long Statement,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,SetLightDark,The length of the statement  "                .SingleOrDefault(rd => Regex.Match(rd.Source.OriginalString' @"(\/MahApps.Metro;component\/Styles\/Accents\/)((BaseLight)|(BaseDark))").Success); " is 145.
Long Statement,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,QueryPalette,The length of the statement  "            return new Palette(primarySwatch' accentSwatch' primaryLightHueIndex' primaryMidHueIndex' primaryDarkHueIndex' accentHueIndex); " is 127.
Long Statement,MaterialDesignThemes.Wpf,ShadowAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The length of the statement  "                var doubleAnimation = new DoubleAnimation(shadowLocalInfo.StandardOpacity' new Duration(TimeSpan.FromMilliseconds(350))) " is 120.
Long Statement,MaterialDesignThemes.Wpf,TextFieldAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TextFieldAssist.cs,ApplyTextBoxViewMargin,The length of the statement  "            var frameworkElement = (textBox.Template.FindName("PART_ContentHost"' textBox) as ScrollViewer)?.Content as FrameworkElement; " is 125.
Long Statement,MaterialDesignThemes.Wpf,ToolTipAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The length of the statement  "                new CustomPopupPlacement(new Point(targetSize.Width/2 - popupSize.Width/2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)  " is 128.
Long Statement,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,Convert,The length of the statement  "            return (_displayMode == ClockDisplayMode.Hours ? MassageHour(dateTime.Hour' _is24Hours) : MassageMinute(dateTime.Minute)) == i; " is 127.
Long Statement,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ConvertBack,The length of the statement  "				(_displayMode == ClockDisplayMode.Hours) ? ReverseMassageHour((int)parameter' currentTime' _is24Hours) : currentTime.Hour' " is 122.
Long Statement,MaterialDesignThemes.Wpf.Converters,MathMultipleConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\MathMultipleConverter.cs,Convert,The length of the statement  "            if (!double.TryParse(value[0].ToString()' out double value1) || !double.TryParse(value[1].ToString()' out double value2)) " is 121.
Long Statement,MaterialDesignThemes.Wpf.Transitions,CircleWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The length of the statement  "            var radius = Math.Sqrt(Math.Pow(toSlide.ActualWidth * horizontalProportion' 2) + Math.Pow(toSlide.ActualHeight * verticalProportion' 2)); " is 137.
Long Statement,MaterialDesignThemes.Wpf.Transitions,SlideOutWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideOutWipe.cs,Wipe,The length of the statement  "            slideAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(toSlide.ActualHeight' midishKeyTime) { EasingFunction = _sineEase}); " is 122.
Long Statement,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,CreateExpandIn,The length of the statement  "            var endFrame = new EasingDoubleKeyFrame(1' effectSubject.Offset + OffsetTime + Duration) { EasingFunction = new SineEase() }; " is 125.
Long Statement,MaterialDesignThemes.Wpf.Transitions,TransitionEffectTypeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffectTypeConverter.cs,ConvertFrom,The length of the statement  "                throw new XamlParseException($"Could not parse to type {typeof (TransitionEffectKind).FullName} or {typeof (TransitionEffectBase).FullName}."); " is 143.
Long Statement,MaterialDesignThemes.Wpf.Transitions,Transitioner,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The length of the statement  "            var transitionOrigin = sourceElement.TranslatePoint(new Point(sourceElement.ActualWidth / 2' sourceElement.ActualHeight)' this); " is 128.
Long Statement,MaterialDesignThemes.Wpf.Transitions,TransitioningContentBase,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitioningContentBase.cs,OnApplyTemplate,The length of the statement  "            UnregisterNames(MatrixTransformPartName' RotateTransformPartName' ScaleTransformPartName' SkewTransformPartName' TranslateTransformPartName); " is 141.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,ControlzEx,BadgedEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,ArrangeOverride,The conditional expression  "(containerDesiredSize.Width <= 0.0 || containerDesiredSize.Height <= 0.0)                  && !double.IsNaN(_badgeContainer.ActualWidth) && !double.IsInfinity(_badgeContainer.ActualWidth)                  && !double.IsNaN(_badgeContainer.ActualHeight) && !double.IsInfinity(_badgeContainer.ActualHeight)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,ComboBoxCustomPopupPlacementCallback,The conditional expression  "ClassicMode                  || data.LocationX + data.PopupSize.Width - data.RealOffsetX > data.ScreenWidth                  || data.LocationX - data.RealOffsetX < 0                  || !preferUpIfSafe && data.LocationY - Math.Abs(data.NewDownY) < 0"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,SnackbarMessageQueue,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,Enqueue,The conditional expression  "(actionContent != null || actionHandler != null || actionArgument != null)                  &&                  actionContent == null && actionHandler == null && actionArgument == null"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,SnackbarMessageQueue,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,PumpAsync,The conditional expression  "_latestShownItem == null                          || message.IsPromoted                          || !Equals(_latestShownItem.Item1.Content' message.Content)                          || !Equals(_latestShownItem.Item1.ActionContent' message.ActionContent)                          || _latestShownItem.Item2 <= DateTime.Now.Subtract(_messageDuration)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The conditional expression  "IsEnabled && IsLoaded &&                  (PopupMode == PopupBoxPopupMode.MouseOverEager                   || PopupMode == PopupBoxPopupMode.MouseOver)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnLayoutUpdated,The conditional expression  "_popupContentControl != null && _popup != null &&                  (PopupMode == PopupBoxPopupMode.MouseOver || PopupMode == PopupBoxPopupMode.MouseOverEager)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The conditional expression  "(PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges                   || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                   || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges                   || (UnfurlOrientation == Orientation.Horizontal &&                       (                           PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges                           ))                  )"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseMouveEventHandler,The conditional expression  "relativePosition.X < 0                      || relativePosition.Y < 0                      || relativePosition.X >= ripple.ActualWidth                      || relativePosition.Y >= ripple.ActualHeight"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,RangeLengthConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangeLengthConverter.cs,Convert,The conditional expression  "!double.TryParse(values[0].ToString()' out double min)                  || !double.TryParse(values[1].ToString()' out double max)                  || !double.TryParse(values[2].ToString()' out double value)                  || !double.TryParse(values[3].ToString()' out double containerLength)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,MathMultipleConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\MathMultipleConverter.cs,Convert,The conditional expression  "value == null || value.Length < 2 || value[0] == null || value[1] == null"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The conditional expression  "!(values[0] is double) || !(values[1] is double) || !(values[2] is ShadowDepth) ||                  !(values[3] is ShadowEdges)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The conditional expression  "double.IsNaN(width) || double.IsInfinity(width) || double.IsNaN(height) || double.IsInfinity(height)"  is complex.
Complex Conditional,MaterialDesignThemes.Wpf.Transitions,Transitioner,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The conditional expression  "sourceElement == null || !IsAncestorOf(sourceElement) || !IsSafePositive(ActualWidth) ||                  !IsSafePositive(ActualHeight) || !IsSafePositive(sourceElement.ActualWidth) ||                  !IsSafePositive(sourceElement.ActualHeight)"  is complex.
Empty Catch Block,MaterialDesignThemes.Wpf,MouseNotOverManagedWaitHandle,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,UiElementOnMouseLeave,The method has an empty catch block.
Magic Number,ControlzEx,BadgedEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,ArrangeOverride,The following statement contains a magic number: var h = 0 - containerDesiredSize.Width / 2;
Magic Number,ControlzEx,BadgedEx,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\BadgedEx.cs,ArrangeOverride,The following statement contains a magic number: var v = 0 - containerDesiredSize.Height / 2;
Magic Number,ControlzEx,RECT,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,GetHashCode,The following statement contains a magic number: return (_left << 16 | LOWORD(_right)) ^ (_top << 16 | LOWORD(_bottom));
Magic Number,ControlzEx,RECT,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\paket-files\ControlzEx\ControlzEx\src\ControlzEx\PopupEx.cs,GetHashCode,The following statement contains a magic number: return (_left << 16 | LOWORD(_right)) ^ (_top << 16 | LOWORD(_bottom));
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  			else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  			else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  			else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,IsPostMeridiemPropertyChangedCallback,The following statement contains a magic number: if (clock.IsPostMeridiem && clock.Time.Hour < 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour + 12' clock.Time.Minute' clock.Time.Second);  			else if (!clock.IsPostMeridiem && clock.Time.Hour >= 12)  				clock.Time = new DateTime(clock.Time.Year' clock.Time.Month' clock.Time.Day' clock.Time.Hour - 12' clock.Time.Minute' clock.Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null)  	        {  	            if (Is24Hours)  	            {                      GenerateButtons(hoursCanvas' Enumerable.Range(13' 12).ToList()' ButtonRadiusRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");                      GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusInnerRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");                  }                  else  	                GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusRatio'  	                    new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  	        }
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null)  	        {  	            if (Is24Hours)  	            {                      GenerateButtons(hoursCanvas' Enumerable.Range(13' 12).ToList()' ButtonRadiusRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");                      GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusInnerRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");                  }                  else  	                GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusRatio'  	                    new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  	        }
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null)  	        {  	            if (Is24Hours)  	            {                      GenerateButtons(hoursCanvas' Enumerable.Range(13' 12).ToList()' ButtonRadiusRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");                      GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusInnerRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");                  }                  else  	                GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusRatio'  	                    new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  	        }
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (hoursCanvas != null)  	        {  	            if (Is24Hours)  	            {                      GenerateButtons(hoursCanvas' Enumerable.Range(13' 12).ToList()' ButtonRadiusRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "00");                      GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusInnerRatio'                          new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "#");                  }                  else  	                GenerateButtons(hoursCanvas' Enumerable.Range(1' 12).ToList()' ButtonRadiusRatio'  	                    new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Hours' Is24Hours)' i => "ButtonStyle"' "0");  	        }
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (minutesCanvas != null)  	            GenerateButtons(minutesCanvas' Enumerable.Range(1' 60).ToList()' ButtonRadiusRatio'                      new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Minutes' Is24Hours)'  	                i => ((i/5.0)%1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (minutesCanvas != null)  	            GenerateButtons(minutesCanvas' Enumerable.Range(1' 60).ToList()' ButtonRadiusRatio'                      new ClockItemIsCheckedConverter(() => Time' ClockDisplayMode.Minutes' Is24Hours)'  	                i => ((i/5.0)%1) == 0.0 ? "ButtonStyle" : "LesserButtonStyle"' "0");
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: var anglePerItem = 360.0 / range.Count;
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: var radiansPerItem = anglePerItem * (Math.PI / 180);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: if (canvas.Width < 10.0 || Math.Abs(canvas.Height - canvas.Width) > 0.0) return;
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: _centreCanvas = new Point(canvas.Width / 2' canvas.Height / 2);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: _centreCanvas = new Point(canvas.Width / 2' canvas.Height / 2);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: foreach (var i in range)  			{  				var button = new ClockItemButton();  				button.SetBinding(StyleProperty' GetBinding(stylePropertySelector(i)));    				var adjacent = Math.Cos(i*radiansPerItem)*hypotenuseRadius;  				var opposite = Math.Sin(i*radiansPerItem)*hypotenuseRadius;    			    button.CentreX = _centreCanvas.X + opposite;                  button.CentreY = _centreCanvas.Y - adjacent;    				button.SetBinding(ToggleButton.IsCheckedProperty' GetBinding("Time"' converter: isCheckedConverter' converterParameter: i));  				button.SetBinding(Canvas.LeftProperty' GetBinding("X"' button));  				button.SetBinding(Canvas.TopProperty' GetBinding("Y"' button));    				button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString(format);  				canvas.Children.Add(button);  			}
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,GenerateButtons,The following statement contains a magic number: foreach (var i in range)  			{  				var button = new ClockItemButton();  				button.SetBinding(StyleProperty' GetBinding(stylePropertySelector(i)));    				var adjacent = Math.Cos(i*radiansPerItem)*hypotenuseRadius;  				var opposite = Math.Sin(i*radiansPerItem)*hypotenuseRadius;    			    button.CentreX = _centreCanvas.X + opposite;                  button.CentreY = _centreCanvas.Y - adjacent;    				button.SetBinding(ToggleButton.IsCheckedProperty' GetBinding("Time"' converter: isCheckedConverter' converterParameter: i));  				button.SetBinding(Canvas.LeftProperty' GetBinding("X"' button));  				button.SetBinding(Canvas.TopProperty' GetBinding("Y"' button));    				button.Content = (i == 60 ? 0 : (i == 24 ? 0 : i)).ToString(format);  				canvas.Children.Add(button);  			}
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (angle < 0) angle += 2 * Math.PI;
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,ClockItemDragDeltaHandler,The following statement contains a magic number: if (DisplayMode == ClockDisplayMode.Hours)  		    {  		        if (Is24Hours)  		        {  		            var outerBoundary = (_centreCanvas.X*ButtonRadiusInnerRatio +  		                                 (_centreCanvas.X*ButtonRadiusRatio - _centreCanvas.X*ButtonRadiusInnerRatio)/2);  		            var sqrt = Math.Sqrt((_centreCanvas.X - currentDragPosition.X) * (_centreCanvas.X - currentDragPosition.X) + (_centreCanvas.Y - currentDragPosition.Y) * (_centreCanvas.Y - currentDragPosition.Y));  		            var localIsPostMerdiem = sqrt > outerBoundary;    		            var hour = (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (localIsPostMerdiem ? 12 : 0);  		            if (hour == 12)  		                hour = 0;                      else if (hour == 0)                          hour = 12;  		            time = new DateTime(Time.Year' Time.Month' Time.Day' hour' Time.Minute' Time.Second);                  }  		        else  		            time = new DateTime(Time.Year' Time.Month' Time.Day'  		                (int) Math.Round(6*angle/Math.PI' MidpointRounding.AwayFromZero)%12 + (IsPostMeridiem ? 12 : 0)'  		                Time.Minute' Time.Second);  		    }              else                  time = new DateTime(Time.Year' Time.Month' Time.Day' Time.Hour' (int)Math.Round(30 * angle / Math.PI' MidpointRounding.AwayFromZero) % 60' Time.Second);
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,SetFlags,The following statement contains a magic number: clock.IsPostMeridiem = clock.Time.Hour >= 12;
Magic Number,MaterialDesignThemes.Wpf,Clock,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Clock.cs,SetFlags,The following statement contains a magic number: clock.IsMiddayHour = clock.Time.Hour == 12;
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The following statement contains a magic number: OnDragStarted(this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0);
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ThumbOnDragStarted,The following statement contains a magic number: OnDragStarted(this' CentreX + dragStartedEventArgs.HorizontalOffset - Width / 2.0' CentreY + dragStartedEventArgs.VerticalOffset - Height / 2.0);
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: Dispatcher.BeginInvoke(new Action(() =>  			{  				X = CentreX - finalSize.Width/2;  				Y = CentreY - finalSize.Height/2;  			}));
Magic Number,MaterialDesignThemes.Wpf,ClockItemButton,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ClockItemButton.cs,ArrangeOverride,The following statement contains a magic number: Dispatcher.BeginInvoke(new Action(() =>  			{  				X = CentreX - finalSize.Width/2;  				Y = CentreY - finalSize.Height/2;  			}));
Magic Number,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,GetPositioningData,The following statement contains a magic number: const int rtlHorizontalOffset = 20;
Magic Number,MaterialDesignThemes.Wpf,DialogHost,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\DialogHost.cs,IsOpenPropertyChangedCallback,The following statement contains a magic number: dialogHost.Dispatcher.BeginInvoke(DispatcherPriority.Background' new Action(() =>              {                  CommandManager.InvalidateRequerySuggested();                  var child = dialogHost.FocusPopup();                    //https://github.com/ButchersBoy/MaterialDesignInXamlToolkit/issues/187                  //totally not happy about this' but on immediate validation we can get some weird looking stuff...give WPF a kick to refresh...                  Task.Delay(300).ContinueWith(t => child.Dispatcher.BeginInvoke(new Action(() => child.InvalidateVisual())));              }));
Magic Number,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,RemeasureDuringFlip,The following statement contains a magic number: const int storyboardMs = 400;
Magic Number,MaterialDesignThemes.Wpf,Flipper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Flipper.cs,RemeasureDuringFlip,The following statement contains a magic number: const int granularity = 6;
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,CreateVisualChild,The following statement contains a magic number: var m3DGroup = new Model3DGroup              {                  Children = { new DirectionalLight(Colors.White' new Vector3D(0' 0' -1))'                                   new DirectionalLight(Colors.White' new Vector3D(0.1' -0.1' 1))'                                   backModel }              };
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,CreateVisualChild,The following statement contains a magic number: var m3DGroup = new Model3DGroup              {                  Children = { new DirectionalLight(Colors.White' new Vector3D(0' 0' -1))'                                   new DirectionalLight(Colors.White' new Vector3D(0.1' -0.1' 1))'                                   backModel }              };
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMinimum(d' 0.5);
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,SetCachingForObject,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMaximum(d' 2.0);
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: var fovInRadians = FieldOfView * (Math.PI / 180);
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: var zValue = w / Math.Tan(fovInRadians / 2) / ZFactor;
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera(new Point3D(w / 2' h / 2' zValue)'                                                         -ZAxis'                                                         YAxis'                                                         FieldOfView);
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _viewport3D.Camera = new PerspectiveCamera(new Point3D(w / 2' h / 2' zValue)'                                                         -ZAxis'                                                         YAxis'                                                         FieldOfView);
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterX = w / 2;
Magic Number,MaterialDesignThemes.Wpf,Plane3D,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Plane3D.cs,Update3D,The following statement contains a magic number: _rotationTransform.CenterY = h / 2;
Magic Number,MaterialDesignThemes.Wpf,MouseNotOverManagedWaitHandle,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,UiElementOnMouseLeave,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      try                      {                          _disposedWaitHandle.WaitOne(TimeSpan.FromSeconds(2));                      }                      catch (ObjectDisposedException)                      {                          /* we are we suppresing this?                            * as we have switched out wait onto another thread' so we don't block the UI thread' the                           * _cleanUp/Dispose() action might also happen' and the _disposedWaitHandle might get disposed                           * just before we WaitOne. We wond add a lock in the _cleanUp because it might block for 2 seconds.                           * We could use a Monitor.TryEnter in _cleanUp and run clean up after but oh my gosh it's just getting                           * too complicated for this use case' so for the rare times this happens' we can swallow safely                                                    */                      }                    }).ContinueWith(t =>                  {                      if (((UIElement) sender).IsMouseOver) return;                      lock (_waitHandleGate)                      {                          if (!_isWaitHandleDisposed)                              _waitHandle.Set();                      }                  }' TaskScheduler.FromCurrentSynchronizationContext());
Magic Number,MaterialDesignThemes.Wpf,DurationMonitor,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\SnackbarMessageQueue.cs,DurationMonitor,The following statement contains a magic number: var granularity = TimeSpan.FromMilliseconds(200);
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (IsEnabled && IsLoaded &&                  (PopupMode == PopupBoxPopupMode.MouseOverEager                   || PopupMode == PopupBoxPopupMode.MouseOver))              {                  if (_popupContentControl != null)                  {                      //if the invisible popup that is watching the mouse' isn't where we expected it to be                      //then the main popup toggle has been moved off screen...so we shouldn't show the popup content                      var inputSource = PresentationSource.FromVisual(_popupContentControl);                      if (inputSource != null)                      {                          var popupScreenPoint = _popupContentControl.PointToScreen(new Point());                          popupScreenPoint.Offset(-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);                          var expectedPopupScreenPoint = PointToScreen(_popupPointFromLastRequest);                            if (Math.Abs(popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth/3                              ||                              Math.Abs(popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight/3)                              return;                      }                  }                    SetCurrentValue(IsPopupOpenProperty' true);              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,OnMouseEnter,The following statement contains a magic number: if (IsEnabled && IsLoaded &&                  (PopupMode == PopupBoxPopupMode.MouseOverEager                   || PopupMode == PopupBoxPopupMode.MouseOver))              {                  if (_popupContentControl != null)                  {                      //if the invisible popup that is watching the mouse' isn't where we expected it to be                      //then the main popup toggle has been moved off screen...so we shouldn't show the popup content                      var inputSource = PresentationSource.FromVisual(_popupContentControl);                      if (inputSource != null)                      {                          var popupScreenPoint = _popupContentControl.PointToScreen(new Point());                          popupScreenPoint.Offset(-_popupContentControl.Margin.Left' -_popupContentControl.Margin.Top);                          var expectedPopupScreenPoint = PointToScreen(_popupPointFromLastRequest);                            if (Math.Abs(popupScreenPoint.X - expectedPopupScreenPoint.X) > ActualWidth/3                              ||                              Math.Abs(popupScreenPoint.Y - expectedPopupScreenPoint.Y) > ActualHeight/3)                              return;                      }                  }                    SetCurrentValue(IsPopupOpenProperty' true);              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: if (FlowDirection == FlowDirection.RightToLeft)                  offset.X += targetSize.Width / 2;
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,GetPopupPlacement,The following statement contains a magic number: switch (PlacementMode)              {                  case PopupBoxPlacementMode.BottomAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X*3);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.BottomAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = targetSize.Height - Math.Abs(offset.Y);                      break;                  case PopupBoxPlacementMode.TopAndAlignLeftEdges:                      x = 0 - Math.Abs(offset.X * 3);                      y = 0 - popupSize.Height - Math.Abs(offset.Y*2);                      break;                  case PopupBoxPlacementMode.TopAndAlignRightEdges:                      x = 0 - popupSize.Width + targetSize.Width - offset.X;                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.TopAndAlignCentres:                      x = targetSize.Width/2 - popupSize.Width/2 - Math.Abs(offset.X*2);                      y = 0 - popupSize.Height - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.LeftAndAlignTopEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - Math.Abs(offset.Y * 3);                      break;                  case PopupBoxPlacementMode.LeftAndAlignBottomEdges:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.LeftAndAlignMiddles:                      x = 0 - popupSize.Width - Math.Abs(offset.X * 2);                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  case PopupBoxPlacementMode.RightAndAlignTopEdges:                      x = targetSize.Width;                      y = 0 - Math.Abs(offset.X * 3);                      break;                  case PopupBoxPlacementMode.RightAndAlignBottomEdges:                      x = targetSize.Width;                      y = 0 - (popupSize.Height - targetSize.Height);                      break;                  case PopupBoxPlacementMode.RightAndAlignMiddles:                      x = targetSize.Width;                      y = targetSize.Height / 2 - popupSize.Height / 2 - Math.Abs(offset.Y * 2);                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: if ((PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges                   || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                   || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges                   || (UnfurlOrientation == Orientation.Horizontal &&                       (                           PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges                           ))                  ))              {                  controls = controls.Reverse();                  translateCoordinateFrom = 80;              }              else                  translateCoordinateFrom = -80;
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: if ((PlacementMode == PopupBoxPlacementMode.TopAndAlignCentres                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignLeftEdges                   || PlacementMode == PopupBoxPlacementMode.TopAndAlignRightEdges                   || PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                   || PlacementMode == PopupBoxPlacementMode.RightAndAlignBottomEdges                   || (UnfurlOrientation == Orientation.Horizontal &&                       (                           PlacementMode == PopupBoxPlacementMode.LeftAndAlignBottomEdges                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignMiddles                           || PlacementMode == PopupBoxPlacementMode.LeftAndAlignTopEdges                           ))                  ))              {                  controls = controls.Reverse();                  translateCoordinateFrom = 80;              }              else                  translateCoordinateFrom = -80;
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls)              {                                  var deferredStart = i++*20;                  var deferredEnd = deferredStart+200.0;                                    var absoluteZeroKeyTime = KeyTime.FromPercent(0.0);                  var deferredStartKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredStart));                  var deferredEndKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredEnd));                    var elementTranslateCoordinateFrom = translateCoordinateFrom * i;                  var translateTransform = new TranslateTransform(                      UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom'                      UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);                    var transformGroup = new TransformGroup                  {                                          Children = new TransformCollection(new Transform[]                      {                          new ScaleTransform(0' 0)'                          translateTransform                      })                  };                  uiElement.SetCurrentValue(RenderTransformOriginProperty' new Point(.5' .5));                  uiElement.RenderTransform = transformGroup;                    var opacityAnimation = new DoubleAnimationUsingKeyFrames();                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame((double)uiElement.GetAnimationBaseValue(OpacityProperty)' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(opacityAnimation' new PropertyPath("Opacity"));                  Storyboard.SetTarget(opacityAnimation' uiElement);                    var scaleXAnimation = new DoubleAnimationUsingKeyFrames();                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleXAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));                  Storyboard.SetTarget(scaleXAnimation' uiElement);                    var scaleYAnimation = new DoubleAnimationUsingKeyFrames();                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleYAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));                  Storyboard.SetTarget(scaleYAnimation' uiElement);                    var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames();                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredEndKeyTime' sineEase));                    Storyboard.SetTargetProperty(translateCoordinateAnimation' new PropertyPath(translateCoordinatePath));                  Storyboard.SetTarget(translateCoordinateAnimation' uiElement);                    var storyboard = new Storyboard();                                    storyboard.Children.Add(opacityAnimation);                  storyboard.Children.Add(scaleXAnimation);                  storyboard.Children.Add(scaleYAnimation);                  storyboard.Children.Add(translateCoordinateAnimation);                    if (reverse)                  {                      storyboard.AutoReverse = true;                      storyboard.Begin();                      storyboard.Seek(TimeSpan.FromMilliseconds(deferredEnd));                      storyboard.Resume();                  }                  else                      storyboard.Begin();                              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls)              {                                  var deferredStart = i++*20;                  var deferredEnd = deferredStart+200.0;                                    var absoluteZeroKeyTime = KeyTime.FromPercent(0.0);                  var deferredStartKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredStart));                  var deferredEndKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredEnd));                    var elementTranslateCoordinateFrom = translateCoordinateFrom * i;                  var translateTransform = new TranslateTransform(                      UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom'                      UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);                    var transformGroup = new TransformGroup                  {                                          Children = new TransformCollection(new Transform[]                      {                          new ScaleTransform(0' 0)'                          translateTransform                      })                  };                  uiElement.SetCurrentValue(RenderTransformOriginProperty' new Point(.5' .5));                  uiElement.RenderTransform = transformGroup;                    var opacityAnimation = new DoubleAnimationUsingKeyFrames();                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame((double)uiElement.GetAnimationBaseValue(OpacityProperty)' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(opacityAnimation' new PropertyPath("Opacity"));                  Storyboard.SetTarget(opacityAnimation' uiElement);                    var scaleXAnimation = new DoubleAnimationUsingKeyFrames();                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleXAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));                  Storyboard.SetTarget(scaleXAnimation' uiElement);                    var scaleYAnimation = new DoubleAnimationUsingKeyFrames();                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleYAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));                  Storyboard.SetTarget(scaleYAnimation' uiElement);                    var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames();                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredEndKeyTime' sineEase));                    Storyboard.SetTargetProperty(translateCoordinateAnimation' new PropertyPath(translateCoordinatePath));                  Storyboard.SetTarget(translateCoordinateAnimation' uiElement);                    var storyboard = new Storyboard();                                    storyboard.Children.Add(opacityAnimation);                  storyboard.Children.Add(scaleXAnimation);                  storyboard.Children.Add(scaleYAnimation);                  storyboard.Children.Add(translateCoordinateAnimation);                    if (reverse)                  {                      storyboard.AutoReverse = true;                      storyboard.Begin();                      storyboard.Seek(TimeSpan.FromMilliseconds(deferredEnd));                      storyboard.Resume();                  }                  else                      storyboard.Begin();                              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls)              {                                  var deferredStart = i++*20;                  var deferredEnd = deferredStart+200.0;                                    var absoluteZeroKeyTime = KeyTime.FromPercent(0.0);                  var deferredStartKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredStart));                  var deferredEndKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredEnd));                    var elementTranslateCoordinateFrom = translateCoordinateFrom * i;                  var translateTransform = new TranslateTransform(                      UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom'                      UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);                    var transformGroup = new TransformGroup                  {                                          Children = new TransformCollection(new Transform[]                      {                          new ScaleTransform(0' 0)'                          translateTransform                      })                  };                  uiElement.SetCurrentValue(RenderTransformOriginProperty' new Point(.5' .5));                  uiElement.RenderTransform = transformGroup;                    var opacityAnimation = new DoubleAnimationUsingKeyFrames();                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame((double)uiElement.GetAnimationBaseValue(OpacityProperty)' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(opacityAnimation' new PropertyPath("Opacity"));                  Storyboard.SetTarget(opacityAnimation' uiElement);                    var scaleXAnimation = new DoubleAnimationUsingKeyFrames();                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleXAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));                  Storyboard.SetTarget(scaleXAnimation' uiElement);                    var scaleYAnimation = new DoubleAnimationUsingKeyFrames();                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleYAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));                  Storyboard.SetTarget(scaleYAnimation' uiElement);                    var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames();                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredEndKeyTime' sineEase));                    Storyboard.SetTargetProperty(translateCoordinateAnimation' new PropertyPath(translateCoordinatePath));                  Storyboard.SetTarget(translateCoordinateAnimation' uiElement);                    var storyboard = new Storyboard();                                    storyboard.Children.Add(opacityAnimation);                  storyboard.Children.Add(scaleXAnimation);                  storyboard.Children.Add(scaleYAnimation);                  storyboard.Children.Add(translateCoordinateAnimation);                    if (reverse)                  {                      storyboard.AutoReverse = true;                      storyboard.Begin();                      storyboard.Seek(TimeSpan.FromMilliseconds(deferredEnd));                      storyboard.Resume();                  }                  else                      storyboard.Begin();                              }
Magic Number,MaterialDesignThemes.Wpf,PopupBox,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PopupBox.cs,AnimateChildrenIn,The following statement contains a magic number: foreach (var uiElement in controls)              {                                  var deferredStart = i++*20;                  var deferredEnd = deferredStart+200.0;                                    var absoluteZeroKeyTime = KeyTime.FromPercent(0.0);                  var deferredStartKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredStart));                  var deferredEndKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(deferredEnd));                    var elementTranslateCoordinateFrom = translateCoordinateFrom * i;                  var translateTransform = new TranslateTransform(                      UnfurlOrientation == Orientation.Vertical ? 0 : elementTranslateCoordinateFrom'                      UnfurlOrientation == Orientation.Vertical ? elementTranslateCoordinateFrom : 0);                    var transformGroup = new TransformGroup                  {                                          Children = new TransformCollection(new Transform[]                      {                          new ScaleTransform(0' 0)'                          translateTransform                      })                  };                  uiElement.SetCurrentValue(RenderTransformOriginProperty' new Point(.5' .5));                  uiElement.RenderTransform = transformGroup;                    var opacityAnimation = new DoubleAnimationUsingKeyFrames();                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  opacityAnimation.KeyFrames.Add(new EasingDoubleKeyFrame((double)uiElement.GetAnimationBaseValue(OpacityProperty)' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(opacityAnimation' new PropertyPath("Opacity"));                  Storyboard.SetTarget(opacityAnimation' uiElement);                    var scaleXAnimation = new DoubleAnimationUsingKeyFrames();                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleXAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleXAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"));                  Storyboard.SetTarget(scaleXAnimation' uiElement);                    var scaleYAnimation = new DoubleAnimationUsingKeyFrames();                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' absoluteZeroKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredStartKeyTime' sineEase));                  scaleYAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(1' deferredEndKeyTime' sineEase));                  Storyboard.SetTargetProperty(scaleYAnimation' new PropertyPath("(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"));                  Storyboard.SetTarget(scaleYAnimation' uiElement);                    var translateCoordinateAnimation = new DoubleAnimationUsingKeyFrames();                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' absoluteZeroKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(elementTranslateCoordinateFrom' deferredStartKeyTime' sineEase));                  translateCoordinateAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(0' deferredEndKeyTime' sineEase));                    Storyboard.SetTargetProperty(translateCoordinateAnimation' new PropertyPath(translateCoordinatePath));                  Storyboard.SetTarget(translateCoordinateAnimation' uiElement);                    var storyboard = new Storyboard();                                    storyboard.Children.Add(opacityAnimation);                  storyboard.Children.Add(scaleXAnimation);                  storyboard.Children.Add(scaleYAnimation);                  storyboard.Children.Add(translateCoordinateAnimation);                    if (reverse)                  {                      storyboard.AutoReverse = true;                      storyboard.Begin();                      storyboard.Seek(TimeSpan.FromMilliseconds(deferredEnd));                      storyboard.Resume();                  }                  else                      storyboard.Begin();                              }
Magic Number,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,ReplacePrimaryColor,The following statement contains a magic number: ReplaceEntry("AccentColorBrush4"' new SolidColorBrush(light.Color) { Opacity = .82 });
Magic Number,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,ReplacePrimaryColor,The following statement contains a magic number: ReplaceEntry("ProgressBrush"' new LinearGradientBrush(dark.Color' mid.Color' 90.0));
Magic Number,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,ReplacePrimaryColor,The following statement contains a magic number: ReplaceEntry("IdealForegroundDisabledBrush"' new SolidColorBrush(dark.Color) { Opacity = .4 });
Magic Number,MaterialDesignThemes.Wpf,PaletteHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\PaletteHelper.cs,ReplaceEntry,The following statement contains a magic number: if (parentDictionary.Contains(entryName))              {                  var brush = parentDictionary[entryName] as SolidColorBrush;                  if (brush != null && !brush.IsFrozen)                  {                                       var animation = new ColorAnimation                      {                          From = ((SolidColorBrush)parentDictionary[entryName]).Color'                          To = ((SolidColorBrush)newValue).Color'                          Duration = new Duration(TimeSpan.FromMilliseconds(300))                      };                      brush.BeginAnimation(SolidColorBrush.ColorProperty' animation);                  }                  else                      parentDictionary[entryName] = newValue; //Set value normally              }
Magic Number,MaterialDesignThemes.Wpf,ShadowAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The following statement contains a magic number: if ((bool) dependencyPropertyChangedEventArgs.NewValue)              {                  SetLocalInfo(dependencyObject' new ShadowLocalInfo(dropShadowEffect.Opacity));                    var doubleAnimation = new DoubleAnimation(1' new Duration(TimeSpan.FromMilliseconds(350)))                  {                      FillBehavior = FillBehavior.HoldEnd                  };                  dropShadowEffect.BeginAnimation(DropShadowEffect.OpacityProperty' doubleAnimation);                              }              else              {                  var shadowLocalInfo = GetLocalInfo(dependencyObject);                  if (shadowLocalInfo == null) return;                    var doubleAnimation = new DoubleAnimation(shadowLocalInfo.StandardOpacity' new Duration(TimeSpan.FromMilliseconds(350)))                  {                      FillBehavior = FillBehavior.HoldEnd                  };                  dropShadowEffect.BeginAnimation(DropShadowEffect.OpacityProperty' doubleAnimation);              }
Magic Number,MaterialDesignThemes.Wpf,ShadowAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ShadowAssist.cs,DarkenPropertyChangedCallback,The following statement contains a magic number: if ((bool) dependencyPropertyChangedEventArgs.NewValue)              {                  SetLocalInfo(dependencyObject' new ShadowLocalInfo(dropShadowEffect.Opacity));                    var doubleAnimation = new DoubleAnimation(1' new Duration(TimeSpan.FromMilliseconds(350)))                  {                      FillBehavior = FillBehavior.HoldEnd                  };                  dropShadowEffect.BeginAnimation(DropShadowEffect.OpacityProperty' doubleAnimation);                              }              else              {                  var shadowLocalInfo = GetLocalInfo(dependencyObject);                  if (shadowLocalInfo == null) return;                    var doubleAnimation = new DoubleAnimation(shadowLocalInfo.StandardOpacity' new Duration(TimeSpan.FromMilliseconds(350)))                  {                      FillBehavior = FillBehavior.HoldEnd                  };                  dropShadowEffect.BeginAnimation(DropShadowEffect.OpacityProperty' doubleAnimation);              }
Magic Number,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: if (_lastValidTime != null)              {                  SetCurrentValue(SelectedTimeProperty' _lastValidTime.Value);                  _textBox.Text = _lastValidTime.Value.ToString(_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");              }                else              {                  SetCurrentValue(SelectedTimeProperty' null);                  _textBox.Text = "";              }
Magic Number,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,SetInvalidTime,The following statement contains a magic number: if (_lastValidTime != null)              {                  SetCurrentValue(SelectedTimeProperty' _lastValidTime.Value);                  _textBox.Text = _lastValidTime.Value.ToString(_lastValidTime.Value.Hour % 12 > 9 ? "hh:mm tt" : "h:mm tt");              }                else              {                  SetCurrentValue(SelectedTimeProperty' null);                  _textBox.Text = "";              }
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new []              {                  new CustomPopupPlacement(new Point(targetSize.Width/2 - popupSize.Width/2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)               };
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new []              {                  new CustomPopupPlacement(new Point(targetSize.Width/2 - popupSize.Width/2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)               };
Magic Number,MaterialDesignThemes.Wpf,ToolTipAssist,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ToolTipAssist.cs,CustomPopupPlacementCallbackImpl,The following statement contains a magic number: return new []              {                  new CustomPopupPlacement(new Point(targetSize.Width/2 - popupSize.Width/2' targetSize.Height + 14)' PopupPrimaryAxis.Horizontal)               };
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,MouseButtonEventHandler,The following statement contains a magic number: foreach (var ripple in PressedInstances)              {                  // adjust the transition scale time according to the current animated scale                  var scaleTrans = ripple.Template.FindName("ScaleTransform"' ripple) as ScaleTransform;                  if (scaleTrans != null)                  {                      double currentScale = scaleTrans.ScaleX;                      var newTime = TimeSpan.FromMilliseconds(300 * (1.0 - currentScale));                        // change the scale animation according to the current scale                      var scaleXKeyFrame = ripple.Template.FindName("MousePressedToNormalScaleXKeyFrame"' ripple) as EasingDoubleKeyFrame;                      if (scaleXKeyFrame != null)                      {                          scaleXKeyFrame.KeyTime = KeyTime.FromTimeSpan(newTime);                      }                      var scaleYKeyFrame = ripple.Template.FindName("MousePressedToNormalScaleYKeyFrame"' ripple) as EasingDoubleKeyFrame;                      if (scaleYKeyFrame != null) {                          scaleYKeyFrame.KeyTime = KeyTime.FromTimeSpan(newTime);                      }                  }                    VisualStateManager.GoToState(ripple' TemplateStateNormal' true);              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnPreviewMouseLeftButtonDown,The following statement contains a magic number: if (RippleAssist.GetIsCentered(this))              {                  var innerContent = (Content as FrameworkElement);                    if (innerContent != null)                  {                      var position = innerContent.TransformToAncestor(this)                          .Transform(new Point(0' 0));                        RippleX = position.X + innerContent.ActualWidth / 2 - RippleSize / 2;                      RippleY = position.Y + innerContent.ActualHeight / 2 - RippleSize / 2;                  }                  else                  {                      RippleX = ActualWidth / 2 - RippleSize / 2;                      RippleY = ActualHeight / 2 - RippleSize / 2;                  }              }              else              {                  RippleX = point.X - RippleSize / 2;                  RippleY = point.Y - RippleSize / 2;              }
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnSizeChanged,The following statement contains a magic number: var radius = Math.Sqrt(Math.Pow(width' 2) + Math.Pow(height' 2));
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnSizeChanged,The following statement contains a magic number: var radius = Math.Sqrt(Math.Pow(width' 2) + Math.Pow(height' 2));
Magic Number,MaterialDesignThemes.Wpf,Ripple,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Ripple.cs,OnSizeChanged,The following statement contains a magic number: RippleSize = 2 * radius * RippleAssist.GetRippleSizeMultiplier(this);
Magic Number,MaterialDesignThemes.Wpf,TreeHelper,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TreeHelper.cs,GetVisibleWidth,The following statement contains a magic number: while (start < end)              {                  width = (end + start)/2;                  hitTest = parent.InputHitTest(new Point(location.X + width' location.Y));                    if (IsAncestorTill(hitTest as FrameworkElement' element' parent))                  {                      //Speed tweak                      hitTest = parent.InputHitTest(new Point(location.X + width + 1' location.Y));                        if (IsAncestorTill(hitTest as FrameworkElement' element' parent))                      {                          start = width;                      }                      else                      {                          return width;                      }                  }                  else                  {                      end = width;                  }              }
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushRoundConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushRoundConverter.cs,Convert,The following statement contains a magic number: var brightness = 0.3 * color.R + 0.59 * color.G + 0.11 * color.B;
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushRoundConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushRoundConverter.cs,Convert,The following statement contains a magic number: var brightness = 0.3 * color.R + 0.59 * color.G + 0.11 * color.B;
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushRoundConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushRoundConverter.cs,Convert,The following statement contains a magic number: var brightness = 0.3 * color.R + 0.59 * color.G + 0.11 * color.B;
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushRoundConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushRoundConverter.cs,Convert,The following statement contains a magic number: return brightness < 123 ? LowValue : HighValue;
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,BrushToRadialGradientBrushConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\BrushToRadialGradientBrushConverter.cs,Convert,The following statement contains a magic number: return new RadialGradientBrush(solidColorBrush.Color' Colors.Transparent)  			{  				Center = new Point(.5' .5)'  				GradientOrigin = new Point(.5' .5)'  				RadiusX = .75'  				RadiusY = .75'  				Opacity = .39  			};
Magic Number,MaterialDesignThemes.Wpf.Converters,CalendarDateCoalesceConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CalendarDateCoalesceConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2) throw new ArgumentException("Unexpected"' "values");
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (is24Hours)  		    {		          		        return val == 0 ? 24 : val;  		    }
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val == 0) return 12;
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val > 12) return val - 12;
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageHour,The following statement contains a magic number: if (val > 12) return val - 12;
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,MassageMinute,The following statement contains a magic number: return val == 0 ? 60 : val;
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: if (is24Hours)  		    {  		        return val == 24 ? 0 : val;  		    }
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12   				? (val == 12 ? 0 : val)  				: (val == 12 ? 12 : val + 12);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12   				? (val == 12 ? 0 : val)  				: (val == 12 ? 12 : val + 12);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12   				? (val == 12 ? 0 : val)  				: (val == 12 ? 12 : val + 12);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12   				? (val == 12 ? 0 : val)  				: (val == 12 ? 12 : val + 12);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageHour,The following statement contains a magic number: return currentTime.Hour < 12   				? (val == 12 ? 0 : val)  				: (val == 12 ? 12 : val + 12);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockItemIsCheckedConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockItemIsCheckedConverter.cs,ReverseMassageMinute,The following statement contains a magic number: return val == 60 ? 0 : val;
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,ClockLineConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ClockLineConverter.cs,Convert,The following statement contains a magic number: return DisplayMode == ClockDisplayMode.Hours  				? ((time.Hour > 13) ? time.Hour - 12 : time.Hour)*(360/12)  				: (time.Minute == 0 ? 60 : time.Minute)*(360/60);
Magic Number,MaterialDesignThemes.Wpf.Converters,RangeLengthConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangeLengthConverter.cs,Convert,The following statement contains a magic number: if (values == null || values.Length != 4 || values.Any(v => v == null))                  return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,RangeLengthConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangeLengthConverter.cs,Convert,The following statement contains a magic number: if (!double.TryParse(values[0].ToString()' out double min)                  || !double.TryParse(values[1].ToString()' out double max)                  || !double.TryParse(values[2].ToString()' out double value)                  || !double.TryParse(values[3].ToString()' out double containerLength))                    return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,RangeLengthConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangeLengthConverter.cs,Convert,The following statement contains a magic number: if (!double.TryParse(values[0].ToString()' out double min)                  || !double.TryParse(values[1].ToString()' out double max)                  || !double.TryParse(values[2].ToString()' out double value)                  || !double.TryParse(values[3].ToString()' out double containerLength))                    return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The following statement contains a magic number: if(values == null || values.Length != 3 || values.Any(v => v == null))                  return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,RangePositionConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\RangePositionConverterConverter.cs,Convert,The following statement contains a magic number: if (!double.TryParse(values[0].ToString()' out double positionAsScaleFactor)                  || !double.TryParse(values[1].ToString()' out double lower)                  || !double.TryParse(values[2].ToString()' out double upper))                    return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,MathMultipleConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\MathMultipleConverter.cs,Convert,The following statement contains a magic number: if (value == null || value.Length < 2 || value[0] == null || value[1] == null) return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,PointValueConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\PointValueConverter.cs,Convert,The following statement contains a magic number: if (values?.Length == 2 && values[0] != null && values[1] != null)              {                  double x' y;                  if (double.TryParse(values[0].ToString()' out x) &&                      double.TryParse(values[1].ToString()' out y))                        return new Point(x' y);              }
Magic Number,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The following statement contains a magic number: if (values?.Length != 4)              {                  return Binding.DoNothing;              }
Magic Number,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The following statement contains a magic number: if (!(values[0] is double) || !(values[1] is double) || !(values[2] is ShadowDepth) ||                  !(values[3] is ShadowEdges))              {                  return Binding.DoNothing;              }
Magic Number,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The following statement contains a magic number: if (!(values[0] is double) || !(values[1] is double) || !(values[2] is ShadowDepth) ||                  !(values[3] is ShadowEdges))              {                  return Binding.DoNothing;              }
Magic Number,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The following statement contains a magic number: DropShadowEffect dropShadow = ShadowInfo.GetDropShadow((ShadowDepth)values[2]);
Magic Number,MaterialDesignThemes.Wpf.Converters,ShadowEdgeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\ShadowEdgeConverter.cs,Convert,The following statement contains a magic number: ShadowEdges edges = (ShadowEdges)values[3];
Magic Number,MaterialDesignThemes.Wpf.Converters,CardClipConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\SizeToRectConverter.cs,Convert,The following statement contains a magic number: if (values.Length != 2 || !(values[0] is Size) || !(values[1] is Thickness))                  return Binding.DoNothing;
Magic Number,MaterialDesignThemes.Wpf.Converters,TimeToVisibilityConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\TimeToVisibilityConverter.cs,Convert,The following statement contains a magic number: var isPm = ((time.Hour >= 13) || (time.Hour == 0));
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var minimum = values[2].ExtractDouble();
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var maximum = values[3].ExtractDouble();
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 5)              {                  var fullIndeterminateScaling = values[4].ExtractDouble();                  if (!double.IsNaN(fullIndeterminateScaling) && fullIndeterminateScaling > 0.0)                  {                      value = (maximum - minimum)*fullIndeterminateScaling;                                          }              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 5)              {                  var fullIndeterminateScaling = values[4].ExtractDouble();                  if (!double.IsNaN(fullIndeterminateScaling) && fullIndeterminateScaling > 0.0)                  {                      value = (maximum - minimum)*fullIndeterminateScaling;                                          }              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var degrees = 360*percent;
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var radians = degrees*(Math.PI/180);
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var centre = new Point(actualWidth/2' actualWidth/2);
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var centre = new Point(actualWidth/2' actualWidth/2);
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcEndPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcEndPointConverter.cs,Convert,The following statement contains a magic number: var hypotenuseRadius = (actualWidth/2);
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double)value > 0.0))              {                  return new Size((double)value / 2' (double)value / 2);              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,ArcSizeConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\ArcSizeConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double)value > 0.0))              {                  return new Size((double)value / 2' (double)value / 2);              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: var maximum = values[2].ExtractDouble();
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 4)              {                  var fullIndeterminateScaling = values[3].ExtractDouble();                  if (!double.IsNaN(fullIndeterminateScaling) && fullIndeterminateScaling > 0.0)                  {                      value = (maximum - minimum) * fullIndeterminateScaling;                  }              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: if (values.Length == 4)              {                  var fullIndeterminateScaling = values[3].ExtractDouble();                  if (!double.IsNaN(fullIndeterminateScaling) && fullIndeterminateScaling > 0.0)                  {                      value = (maximum - minimum) * fullIndeterminateScaling;                  }              }
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,LargeArcConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\LargeArcConverter.cs,Convert,The following statement contains a magic number: return percent > 0.5;
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,RotateTransformCentreConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\RotateTransformCentreConverter.cs,Convert,The following statement contains a magic number: return (double) value/2;
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,RotateTransformConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\RotateTransformConverter.cs,Convert,The following statement contains a magic number: var maximum = values[2].ExtractDouble();
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,RotateTransformConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\RotateTransformConverter.cs,Convert,The following statement contains a magic number: return 360*percent;
Magic Number,MaterialDesignThemes.Wpf.Converters.CircularProgressBar,StartPointConverter,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Converters\CircularProgressBar\StartPointConverter.cs,Convert,The following statement contains a magic number: if (value is double && ((double) value > 0.0))              {                  return new Point((double)value / 2' 0);              }
Magic Number,MaterialDesignThemes.Wpf.Transitions,CircleWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The following statement contains a magic number: var radius = Math.Sqrt(Math.Pow(toSlide.ActualWidth * horizontalProportion' 2) + Math.Pow(toSlide.ActualHeight * verticalProportion' 2));
Magic Number,MaterialDesignThemes.Wpf.Transitions,CircleWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The following statement contains a magic number: var radius = Math.Sqrt(Math.Pow(toSlide.ActualWidth * horizontalProportion' 2) + Math.Pow(toSlide.ActualHeight * verticalProportion' 2));
Magic Number,MaterialDesignThemes.Wpf.Transitions,CircleWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The following statement contains a magic number: var midKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(200));
Magic Number,MaterialDesignThemes.Wpf.Transitions,CircleWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\CircleWipe.cs,Wipe,The following statement contains a magic number: var endKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(400));
Magic Number,MaterialDesignThemes.Wpf.Transitions,FadeWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\FadeWipe.cs,Wipe,The following statement contains a magic number: var endKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromSeconds(Duration.TotalSeconds/2));
Magic Number,MaterialDesignThemes.Wpf.Transitions,SlideOutWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideOutWipe.cs,Wipe,The following statement contains a magic number: var midishKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(200));
Magic Number,MaterialDesignThemes.Wpf.Transitions,SlideOutWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideOutWipe.cs,Wipe,The following statement contains a magic number: var endKeyTime = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(400));
Magic Number,MaterialDesignThemes.Wpf.Transitions,SlideOutWipe,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\SlideOutWipe.cs,Wipe,The following statement contains a magic number: scaleAnimation.KeyFrames.Add(new EasingDoubleKeyFrame(.8' endKeyTime));
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind)              {                  //we need these long winded property paths as combined storyboards wont play directly on transforms                  case TransitionEffectKind.None:                      break;                  case TransitionEffectKind.ExpandIn:                      return CreateExpandIn(effectSubject);                  case TransitionEffectKind.SlideInFromLeft:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromTop:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromRight:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromBottom:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.FadeIn:                      timeline = CreateFadeIn(effectSubject.Offset);                      property = OpacityProperty;                      target = effectSubject;                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind)              {                  //we need these long winded property paths as combined storyboards wont play directly on transforms                  case TransitionEffectKind.None:                      break;                  case TransitionEffectKind.ExpandIn:                      return CreateExpandIn(effectSubject);                  case TransitionEffectKind.SlideInFromLeft:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromTop:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromRight:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromBottom:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.FadeIn:                      timeline = CreateFadeIn(effectSubject.Offset);                      property = OpacityProperty;                      target = effectSubject;                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind)              {                  //we need these long winded property paths as combined storyboards wont play directly on transforms                  case TransitionEffectKind.None:                      break;                  case TransitionEffectKind.ExpandIn:                      return CreateExpandIn(effectSubject);                  case TransitionEffectKind.SlideInFromLeft:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromTop:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromRight:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromBottom:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.FadeIn:                      timeline = CreateFadeIn(effectSubject.Offset);                      property = OpacityProperty;                      target = effectSubject;                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,Build,The following statement contains a magic number: switch (Kind)              {                  //we need these long winded property paths as combined storyboards wont play directly on transforms                  case TransitionEffectKind.None:                      break;                  case TransitionEffectKind.ExpandIn:                      return CreateExpandIn(effectSubject);                  case TransitionEffectKind.SlideInFromLeft:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromTop:                      timeline = CreateSlide(-300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromRight:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.XProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.SlideInFromBottom:                      timeline = CreateSlide(300' 0' effectSubject.Offset);                      property = TranslateTransform.YProperty;                      targetName = effectSubject.TranslateTransformName;                      break;                  case TransitionEffectKind.FadeIn:                      timeline = CreateFadeIn(effectSubject.Offset);                      property = OpacityProperty;                      target = effectSubject;                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,MaterialDesignThemes.Wpf.Transitions,TransitionEffect,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\TransitionEffect.cs,CreateExpandIn,The following statement contains a magic number: var startFrame = new DiscreteDoubleKeyFrame(.5' effectSubject.Offset + OffsetTime);
Magic Number,MaterialDesignThemes.Wpf.Transitions,Transitioner,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\Transitions\Transitioner.cs,GetNavigationSourcePoint,The following statement contains a magic number: var transitionOrigin = sourceElement.TranslatePoint(new Point(sourceElement.ActualWidth / 2' sourceElement.ActualHeight)' this);
Missing Default,MaterialDesignThemes.Wpf,ComboBoxPopup,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\ComboBoxPopup.cs,UpdateChildTemplate,The following switch statement is missing a default case: switch (placement)              {                  case ComboBoxPopupPlacement.Classic:                      SetChildTemplateIfNeed(ClassicContentTemplate);                      break;                  case ComboBoxPopupPlacement.Down:                      SetChildTemplateIfNeed(DownContentTemplate);                      break;                  case ComboBoxPopupPlacement.Up:                      SetChildTemplateIfNeed(UpContentTemplate);                      break;                      //                default:                      //                    throw new NotImplementedException($"Unexpected value {placement} of the {nameof(PopupPlacement)} property inside the {nameof(ComboBoxPopup)} control.");              }
Missing Default,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,ProcessKey,The following switch statement is missing a default case: switch (keyEventArgs.Key)  			{  				case Key.System:  					{  						switch (keyEventArgs.SystemKey)  						{  							case Key.Down:  								{  									if ((Keyboard.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt)  									{  										TogglePopup();  										return true;  									}    									break;  								}  						}    						break;  					}    				case Key.Enter:  					{  						SetSelectedTime();  						return true;  					}  			}
Missing Default,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,ProcessKey,The following switch statement is missing a default case: switch (keyEventArgs.SystemKey)  						{  							case Key.Down:  								{  									if ((Keyboard.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt)  									{  										TogglePopup();  										return true;  									}    									break;  								}  						}
Missing Default,MaterialDesignThemes.Wpf,TimePicker,C:\repos\ButchersBoy_MaterialDesignInXamlToolkit\MaterialDesignThemes.Wpf\TimePicker.cs,DateTimeToString,The following switch statement is missing a default case: switch (SelectedTimeFormat)  			{  				case DatePickerFormat.Short:  					return string.Format(CultureInfo.CurrentCulture' d.ToString(dtfi.ShortTimePattern' dtfi));					  				case DatePickerFormat.Long:  					return string.Format(CultureInfo.CurrentCulture' d.ToString(dtfi.LongTimePattern' dtfi));					  			}
