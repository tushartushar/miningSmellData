Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ssutil_cli,ProcessModeHandler,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\ProcessModeHandler.cs,GetMode,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Parameter List,Mono.Options,ActionOption,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,ActionOption,The method has 5 parameters. Parameters: prototype' description' count' action' hidden
Long Identifier,ssutil_cli,ProcessModeHandler,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\ProcessModeHandler.cs,,The length of the parameter TypeScriptConcreteNativeTypesHandler is 36.
Long Statement,ssutil_cli,ProcessModeHandler,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\ProcessModeHandler.cs,ResolveNativeTypesHandlerByFilePath,The length of the statement  "            return All.Values.FirstOrDefault(supportedNativeTypesHandler => supportedNativeTypesHandler.IsHandledFileType(filePath) ); " is 122.
Long Statement,Mono.Options,Option,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Parse,The length of the statement  "						c.OptionSet.MessageLocalizer ("Could not convert string `{value}' to type {targetType.Name} for option `{c.OptionName}'."))' " is 124.
Complex Conditional,ssutil_cli,Program,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Program.cs,Main,The conditional expression  "currentMode == CmdMode.AddReference ||                      currentMode == CmdMode.AddRefWithLang ||                      currentMode == CmdMode.AddReferenceWithPath ||                      currentMode == CmdMode.AddReferenceWithPathAndLang"  is complex.
Complex Conditional,Mono.Options,Option,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&  			    ((names.Length == 1 && this.type != OptionValueType.None) ||  			    (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') &&  			    Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   				           delegate (OptionValueCollection v) {  					action (v [0]' v [1]);  				}' hidden);
Magic Number,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)'  					Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)'  					Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				if (p.Hidden)  					continue;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)'  					Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)'  					Description_FirstWidth' Description_RemWidth);  			}
Missing Default,Mono.Options,OptionSet,C:\repos\ServiceStack_ServiceStackVS\src\ssutil-cli\Mono.Options-PCL.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  				case OptionValueType.None:  					c.OptionValues.Add (n);  					c.Option.Invoke (c);  					break;  				case OptionValueType.Optional:  				case OptionValueType.Required:   					ParseValue (v' c);  					break;  				}
