Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,Cyclomatic complexity of the method is 12
Complex Method,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,Cyclomatic complexity of the method is 13
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,OpenAdbConnection,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,StartAdb,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,StopAdb,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,ReadLength,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,ProcessIncomingDeviceData,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,Write,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,FormAdbRequest,The method has an empty catch block.
Empty Catch Block,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The method has an empty catch block.
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: while (IsRunning) {  	try {  		if (_socket == null) {  			_socket = this.OpenAdbConnection ();  			if (_socket == null) {  				AttemptOpenSocketCount++;  				if (AttemptOpenSocketCount > 10) {  					if (this.StartAdb () == false) {  						AttemptStartAdbCount++;  						if (AttemptStartAdbCount >= int.MaxValue) {  							AttemptStartAdbCount = 0;  						}  					}  					else {  						AttemptStartAdbCount = 0;  					}  				}  				this.WaitBeforeContinue ();  			}  			else {  				AttemptOpenSocketCount = 0;  			}  		}  		if (_socket != null && _socket.Connected && !IsMonitoring) {  			// Monitor  			IsMonitoring = this.SendDeviceMonitoringRequest ();  		}  		if (IsMonitoring) {  			byte[] lengthBuffer = new byte[4];  			// store devices  			// read the length of the incoming message  			int length = ReadLength (_socket' lengthBuffer);  			if (length >= 0) {  				// read the incoming message  				ProcessIncomingDeviceData (length);  			}  		}  	}  	catch (IOException) {  		if (_socket != null) {  			_socket.Close ();  		}  		_socket = null;  		IsMonitoring = false;  	}  	catch (Exception) {  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: while (IsRunning) {  	try {  		if (_socket == null) {  			_socket = this.OpenAdbConnection ();  			if (_socket == null) {  				AttemptOpenSocketCount++;  				if (AttemptOpenSocketCount > 10) {  					if (this.StartAdb () == false) {  						AttemptStartAdbCount++;  						if (AttemptStartAdbCount >= int.MaxValue) {  							AttemptStartAdbCount = 0;  						}  					}  					else {  						AttemptStartAdbCount = 0;  					}  				}  				this.WaitBeforeContinue ();  			}  			else {  				AttemptOpenSocketCount = 0;  			}  		}  		if (_socket != null && _socket.Connected && !IsMonitoring) {  			// Monitor  			IsMonitoring = this.SendDeviceMonitoringRequest ();  		}  		if (IsMonitoring) {  			byte[] lengthBuffer = new byte[4];  			// store devices  			// read the length of the incoming message  			int length = ReadLength (_socket' lengthBuffer);  			if (length >= 0) {  				// read the incoming message  				ProcessIncomingDeviceData (length);  			}  		}  	}  	catch (IOException) {  		if (_socket != null) {  			_socket.Close ();  		}  		_socket = null;  		IsMonitoring = false;  	}  	catch (Exception) {  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: try {  	if (_socket == null) {  		_socket = this.OpenAdbConnection ();  		if (_socket == null) {  			AttemptOpenSocketCount++;  			if (AttemptOpenSocketCount > 10) {  				if (this.StartAdb () == false) {  					AttemptStartAdbCount++;  					if (AttemptStartAdbCount >= int.MaxValue) {  						AttemptStartAdbCount = 0;  					}  				}  				else {  					AttemptStartAdbCount = 0;  				}  			}  			this.WaitBeforeContinue ();  		}  		else {  			AttemptOpenSocketCount = 0;  		}  	}  	if (_socket != null && _socket.Connected && !IsMonitoring) {  		// Monitor  		IsMonitoring = this.SendDeviceMonitoringRequest ();  	}  	if (IsMonitoring) {  		byte[] lengthBuffer = new byte[4];  		// store devices  		// read the length of the incoming message  		int length = ReadLength (_socket' lengthBuffer);  		if (length >= 0) {  			// read the incoming message  			ProcessIncomingDeviceData (length);  		}  	}  }  catch (IOException) {  	if (_socket != null) {  		_socket.Close ();  	}  	_socket = null;  	IsMonitoring = false;  }  catch (Exception) {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: try {  	if (_socket == null) {  		_socket = this.OpenAdbConnection ();  		if (_socket == null) {  			AttemptOpenSocketCount++;  			if (AttemptOpenSocketCount > 10) {  				if (this.StartAdb () == false) {  					AttemptStartAdbCount++;  					if (AttemptStartAdbCount >= int.MaxValue) {  						AttemptStartAdbCount = 0;  					}  				}  				else {  					AttemptStartAdbCount = 0;  				}  			}  			this.WaitBeforeContinue ();  		}  		else {  			AttemptOpenSocketCount = 0;  		}  	}  	if (_socket != null && _socket.Connected && !IsMonitoring) {  		// Monitor  		IsMonitoring = this.SendDeviceMonitoringRequest ();  	}  	if (IsMonitoring) {  		byte[] lengthBuffer = new byte[4];  		// store devices  		// read the length of the incoming message  		int length = ReadLength (_socket' lengthBuffer);  		if (length >= 0) {  			// read the incoming message  			ProcessIncomingDeviceData (length);  		}  	}  }  catch (IOException) {  	if (_socket != null) {  		_socket.Close ();  	}  	_socket = null;  	IsMonitoring = false;  }  catch (Exception) {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: if (_socket == null) {  	_socket = this.OpenAdbConnection ();  	if (_socket == null) {  		AttemptOpenSocketCount++;  		if (AttemptOpenSocketCount > 10) {  			if (this.StartAdb () == false) {  				AttemptStartAdbCount++;  				if (AttemptStartAdbCount >= int.MaxValue) {  					AttemptStartAdbCount = 0;  				}  			}  			else {  				AttemptStartAdbCount = 0;  			}  		}  		this.WaitBeforeContinue ();  	}  	else {  		AttemptOpenSocketCount = 0;  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: if (_socket == null) {  	AttemptOpenSocketCount++;  	if (AttemptOpenSocketCount > 10) {  		if (this.StartAdb () == false) {  			AttemptStartAdbCount++;  			if (AttemptStartAdbCount >= int.MaxValue) {  				AttemptStartAdbCount = 0;  			}  		}  		else {  			AttemptStartAdbCount = 0;  		}  	}  	this.WaitBeforeContinue ();  }  else {  	AttemptOpenSocketCount = 0;  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: if (AttemptOpenSocketCount > 10) {  	if (this.StartAdb () == false) {  		AttemptStartAdbCount++;  		if (AttemptStartAdbCount >= int.MaxValue) {  			AttemptStartAdbCount = 0;  		}  	}  	else {  		AttemptStartAdbCount = 0;  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,MonitorDevice,The following statement contains a magic number: if (IsMonitoring) {  	byte[] lengthBuffer = new byte[4];  	// store devices  	// read the length of the incoming message  	int length = ReadLength (_socket' lengthBuffer);  	if (length >= 0) {  		// read the incoming message  		ProcessIncomingDeviceData (length);  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceListener,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceListener.cs,WaitBeforeContinue,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,ReadAdbResponse,The following statement contains a magic number: while (readDiagString) {  	// length string is in next 4 bytes  	byte[] lenBuf = new byte[4];  	if (!Read (socket' lenBuf)) {  		Console.WriteLine ("Expected diagnostic string not found");  		break;  	}  	String lenStr = ReplyToString (lenBuf);  	int len;  	try {  		len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  	}  	catch (FormatException) {  		break;  	}  	byte[] msg = new byte[len];  	if (!Read (socket' msg)) {  		break;  	}  	resp.Message = ReplyToString (msg);  	break;  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,IsOkay,The following statement contains a magic number: return reply [0] == (byte)'O' && reply [1] == (byte)'K' && reply [2] == (byte)'A' && reply [3] == (byte)'Y';  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,IsOkay,The following statement contains a magic number: return reply [0] == (byte)'O' && reply [1] == (byte)'K' && reply [2] == (byte)'A' && reply [3] == (byte)'Y';  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new Exception ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new Exception (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new Exception ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new Exception (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new Exception ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new Exception (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new Exception ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new Exception (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new Exception ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new Exception (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new Exception ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new Exception (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new Exception ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new Exception (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (Socket adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new Exception ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new Exception (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: if (count < 0) {  	break;  }  else if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: try {  	Thread.Sleep (WAIT_TIME * 5);  }  catch (ThreadInterruptedException ie) {  }  
Magic Number,Profiler.DeviceMonitor.Models,DeviceMonitorHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.DeviceMonitor\Models\DeviceMonitorHelper.cs,RunLogService,The following statement contains a magic number: Thread.Sleep (WAIT_TIME * 5);  
