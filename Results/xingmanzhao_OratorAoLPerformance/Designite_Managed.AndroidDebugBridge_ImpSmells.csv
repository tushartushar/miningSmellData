Implementation smell,Namespace,Class,File,Method,Description
Long Method,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The method has 122 lines of code.
Long Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The method has 111 lines of code.
Complex Method,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,Cyclomatic complexity of the method is 12
Complex Method,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ExecuteRemoteCommand,Cyclomatic complexity of the method is 15
Complex Method,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,Cyclomatic complexity of the method is 13
Complex Method,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,Cyclomatic complexity of the method is 14
Complex Method,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,Cyclomatic complexity of the method is 13
Complex Method,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,CheckAdbVersion,Cyclomatic complexity of the method is 13
Complex Method,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,StartAdb,Cyclomatic complexity of the method is 8
Complex Method,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,Cyclomatic complexity of the method is 11
Complex Method,Managed.Adb,ErrorCodeHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ErrorCodeHelper.cs,ErrorCodeToString,Cyclomatic complexity of the method is 16
Complex Method,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,Cyclomatic complexity of the method is 32
Complex Method,Managed.Adb,BatteryReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\BatteryReceiver.cs,ProcessNewLines,Cyclomatic complexity of the method is 18
Complex Method,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,Cyclomatic complexity of the method is 34
Complex Method,Managed.Adb,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MultilineReceiver.cs,AddOutput,Cyclomatic complexity of the method is 8
Complex Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,GetFileType,Cyclomatic complexity of the method is 8
Complex Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,Cyclomatic complexity of the method is 17
Complex Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPush,Cyclomatic complexity of the method is 10
Complex Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPullFile,Cyclomatic complexity of the method is 17
Complex Method,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPull,Cyclomatic complexity of the method is 12
Complex Method,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,Cyclomatic complexity of the method is 8
Complex Method,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,Combine,Cyclomatic complexity of the method is 11
Long Parameter List,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ExecuteRemoteRootCommand,The method has 5 parameters.
Long Parameter List,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ExecuteRemoteCommand,The method has 5 parameters.
Long Parameter List,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,HandleChunk,The method has 5 parameters.
Long Parameter List,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,handleUnknownChunk,The method has 5 parameters.
Long Parameter List,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,CreateClient,The method has 5 parameters.
Long Parameter List,Managed.Adb,FileEntry,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileEntry.cs,FileEntry,The method has 5 parameters.
Long Parameter List,Managed.Adb,FileListingService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileListingService.cs,GetChildren,The method has 5 parameters.
Long Parameter List,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Mount,The method has 5 parameters.
Long Parameter List,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The method has 5 parameters.
Long Statement,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,FormAdbRequest,The length of the statement  "	System.Diagnostics.Debug.Assert (result.Length == req.Length + 5' String.Format ("result: {1}{0}\nreq: {3}{2}"' result.Length' result.GetString (AdbHelper.DEFAULT_ENCODING)' req.Length' req)); " is 192.
Long Statement,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RemoveForward,The length of the statement  "		byte[] request = FormAdbRequest (String.Format ("host-serial:{0}:killforward:tcp:{1};tcp:{2}"' device.SerialNumber' localPort' remotePort)); " is 140.
Long Statement,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,The length of the statement  "		Log.d (TAG' "image params: bpp=" + imageParams.Bpp + "' size=" + imageParams.Size + "' width=" + imageParams.Width + "' height=" + imageParams.Height); " is 151.
Long Statement,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,CreateBridge,The length of the statement  "		if (!String.IsNullOrEmpty (AdbOsLocation) && string.Compare (AdbOsLocation' osLocation' true) == 0 && !forceNewBridge) { " is 120.
Long Statement,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The length of the statement  "				String message = String.Format ("Required minimum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MIN' microVersion); " is 177.
Long Statement,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The length of the statement  "				String message = String.Format ("Required maximum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MAX' microVersion); " is 177.
Long Statement,Managed.Adb,BatteryInfo,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\BatteryInfo.cs,ToString,The length of the statement  "	this.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty | BindingFlags.GetProperty | BindingFlags.IgnoreCase).ForEach (p =>  { " is 172.
Long Statement,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,handleUnknownChunk,The length of the statement  "		Log.w ("ddms"' "WARNING: received unknown chunk " + name (type) + ": len=" + data.Length + "' reply=" + isReply + "' msgId=0x" + msgId.ToString ("X8")); " is 152.
Long Statement,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,allocBuffer,The length of the statement  "				using ( EndianBinaryReader ebr = new EndianBinaryReader(CHUNK_ORDER == ByteOrder.LittleEndian ? EndianBitConverter.Little : EndianBitConverter.Big' ms ) ) {" is 156.
Long Statement,Managed.Adb,Debugger,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Debugger.cs,ToString,The length of the statement  "	return "[Debugger " + ListenPort + "-->" + Client.ClientData /*.Pid*/+ ((ConnectionState != ConnectionStates.Ready) ? " inactive]" : " active]"); " is 145.
Long Statement,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,RemountMountPoint,The length of the statement  "	String command = String.Format ("mount -o {0}'remount -t {1} {2} {3}"' readOnly ? "ro" : "rw"' mnt.FileSystem' mnt.Block' mnt.Name); " is 132.
Long Statement,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,ExecuteShellCommand,The length of the statement  "	AdbHelper.Instance.ExecuteRemoteCommand (AndroidDebugBridge.SocketAddress' string.Format (command' commandArgs)' this' receiver); " is 129.
Long Statement,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,ExecuteShellCommand,The length of the statement  "	AdbHelper.Instance.ExecuteRemoteCommand (AndroidDebugBridge.SocketAddress' string.Format (command' commandArgs)' this' receiver); " is 129.
Long Statement,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,ExecuteRootShellCommand,The length of the statement  "	AdbHelper.Instance.ExecuteRemoteRootCommand (AndroidDebugBridge.SocketAddress' string.Format (command' commandArgs)' this' receiver' timeout); " is 142.
Long Statement,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The length of the statement  "	return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24; " is 123.
Long Statement,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The length of the statement  "	return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56; " is 315.
Long Statement,Managed.Adb,FileEntry,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileEntry.cs,CheckAppPackageStatus,The length of the statement  "		IsApplicationPackage = String.Compare (FileListingService.DIRECTORY_APP' segments [1]' false) == 0 && (String.Compare (FileListingService.DIRECTORY_SYSTEM' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_DATA' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_SD' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_SDEXT' segments [0]' false) == 0); " is 422.
Long Statement,Managed.Adb,FileListingService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileListingService.cs,FindFileEntry,The length of the statement  "	if ((String.Compare (current.FullPath' path' false) == 0 || String.Compare (current.FullResolvedPath' path' false) == 0 || String.Compare (current.FullPath' rpath' false) == 0 || String.Compare (current.FullResolvedPath' rpath' false) == 0)) { " is 243.
Long Statement,Managed.Adb,FilePermission,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,ToString,The length of the statement  "	return perm.AppendFormat ("{0}"' CanRead ? "r" : "-").AppendFormat ("{0}"' CanWrite ? "w" : "-").AppendFormat ("{0}"' CanExecute ? CanDelete ? "x" : "t" : "-").ToString (); " is 172.
Long Statement,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Delete,The length of the statement  "		Device.ExecuteShellCommand ("rm -f {0} {1}"' cer' fileEntry.IsDirectory ? "-r" : String.Empty' fileEntry.FullResolvedPath); " is 123.
Long Statement,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Mount,The length of the statement  "		Device.ExecuteShellCommand ("busybox mount {0} {4} -t {1} {2} {3}"' cer' mountPoint.IsReadOnly ? "-r" : "-w"' mountPoint.FileSystem' mountPoint.Block' mountPoint.Name' !String.IsNullOrEmpty (options) ? String.Format ("-o {0}"' options) : String.Empty); " is 252.
Long Statement,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Mount,The length of the statement  "		Device.ExecuteShellCommand ("mount {0} {4} -t {1} {2} {3}"' cer' mountPoint.IsReadOnly ? "-r" : "-w"' mountPoint.FileSystem' mountPoint.Block' mountPoint.Name' !String.IsNullOrEmpty (options) ? String.Format ("-o {0}"' options) : String.Empty); " is 244.
Long Statement,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Unmount,The length of the statement  "		Device.ExecuteShellCommand ("busybox umount {1} {0}"' cer' !String.IsNullOrEmpty (options) ? String.Format ("-o {0}"' options) : String.Empty' mountPoint); " is 155.
Long Statement,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,Unmount,The length of the statement  "		Device.ExecuteShellCommand ("umount {1} {0}"' cer' !String.IsNullOrEmpty (options) ? String.Format ("-o {0}"' options) : String.Empty' mountPoint); " is 147.
Long Statement,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,GetLogFormatString,The length of the statement  "	return String.Format ("{0:00}:{1:00} {2}/{3}: {4}\n"' (msec / 60000) % 60' (msec / 1000) % 60' logLevel.Letter' tag' message); " is 126.
Long Statement,Managed.Adb,PackageManager,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\PackageManager.cs,GetApkPath,The length of the statement  "		throw new FileNotFoundException (String.Format ("The package '{0}' is not installed on the device: {1}"' package' Device.SerialNumber)); " is 136.
Long Statement,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ToString,The length of the statement  "	return String.Format ("height: {0}\nwidth: {1}\nbpp: {2}\nro: {3}\nrl: {4}\ngo: {5}\ngl: {6}\nbo: {7}\nbl: {8}\nao: {9}\nal: {10}\ns: {11}"' this.Height' this.Width' this.Bpp' this.Red.Offset' this.Red.Length' this.Green.Offset' this.Green.Length' this.Blue.Offset' this.Blue.Length' this.Alpha.Offset' this.Alpha.Length' this.Size); " is 333.
Long Statement,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The length of the statement  "			date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture); " is 156.
Long Statement,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The length of the statement  "			date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture); " is 155.
Long Statement,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The length of the statement  "		var m = line.Match (RE_MOUNTPOINT_PATTERN' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace); " is 131.
Long Statement,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The length of the statement  "				Match m = Regex.Match ( line' RE_MOUNTPOINT_PATTERN' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace );" is 142.
Long Statement,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,Combine,The length of the statement  "		throw new ArgumentNullException ((path1 == null) ? "path1" : ((path2 == null) ? "path2" : ((path3 == null) ? "path3" : "path4"))); " is 130.
Long Statement,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,CombineNoChecks,The length of the statement  "	if (ch != DirectorySeparatorChar && ch != AltDirectorySeparatorChar && ch2 != DirectorySeparatorChar && ch2 != AltDirectorySeparatorChar) { " is 139.
Long Statement,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The length of the statement  "			while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) { " is 131.
Long Statement,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The length of the statement  "		BitmapData bmpData = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppRgb565); " is 135.
Long Statement,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The length of the statement  "		BitmapData bmpData = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppRgb565); " is 135.
Long Statement,Managed.Adb.MoreLinq,MoreEnumerable,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\MoreLinq\AssertCount.cs,OnAssertCountFailure,The length of the statement  "	var message = cmp < 0 ? "Sequence contains too few elements when exactly {0} were expected." : "Sequence contains too many elements when exactly {0} were expected."; " is 165.
Complex Conditional,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The conditional expression  "(((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))"  is complex.
Complex Conditional,Managed.Adb,FileListingService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileListingService.cs,FindFileEntry,The conditional expression  "(String.Compare (current.FullPath' path' false) == 0 || String.Compare (current.FullResolvedPath' path' false) == 0 || String.Compare (current.FullPath' rpath' false) == 0 || String.Compare (current.FullResolvedPath' rpath' false) == 0)"  is complex.
Complex Conditional,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,CheckInvalidPathChars,The conditional expression  "((num2 == 0x22) || (num2 == 60)) || (((num2 == 0x3e) || (num2 == 0x7c)) || (num2 < 0x20))"  is complex.
Complex Conditional,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,Combine,The conditional expression  "((path1 == null) || (path2 == null)) || ((path3 == null) || (path4 == null))"  is complex.
Complex Conditional,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,CombineNoChecks,The conditional expression  "ch != DirectorySeparatorChar && ch != AltDirectorySeparatorChar && ch2 != DirectorySeparatorChar && ch2 != AltDirectorySeparatorChar"  is complex.
Complex Conditional,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,IsPathRooted,The conditional expression  "(length >= 1 && (path [0] == DirectorySeparatorChar || path [0] == AltDirectorySeparatorChar)) || (length == 1)"  is complex.
Empty Catch Block,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,AndroidDebugBridge,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,StopAdb,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,StopAdb,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,GrabProcessOutput,The method has an empty catch block.
Empty Catch Block,Managed.Adb,BusyBox,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\BusyBox.cs,Install,The method has an empty catch block.
Empty Catch Block,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,RefreshMountPoints,The method has an empty catch block.
Empty Catch Block,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,RefreshEnvironmentVariables,The method has an empty catch block.
Empty Catch Block,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,RefreshProperties,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,Stop,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,RemoveDevice,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,QueryNewDeviceForInfo,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,QueryNewDeviceForEnvironmentVariables,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,QueryNewDeviceForMountingPoint,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,StartMonitoringDevice,The method has an empty catch block.
Empty Catch Block,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,ReadLength,The method has an empty catch block.
Empty Catch Block,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,MakeDirectory,The method has an empty catch block.
Empty Catch Block,Managed.Adb,FileSystem,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileSystem.cs,MakeDirectory,The method has an empty catch block.
Empty Catch Block,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,Close,The method has an empty catch block.
Empty Catch Block,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,Cancel,The method has an empty catch block.
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,Backup,The following statement contains a magic number: using (var socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	socket.Connect (address);  	socket.Blocking = true;  	if (!Write (socket' request)) {  		throw new IOException ("failed asking to backup device");  	}  	var resp = ReadAdbResponse (socket' false);  	if (!resp.IOSuccess || !resp.Okay) {  		Log.e (TAG' "Got timeout or unhappy response from ADB req: " + resp.Message);  		socket.Close ();  		return;  	}  	var data = new byte[6000];  	int count = -1;  	while (count != 0) {  		count = socket.Receive (data);  		Console.Write ("received: {0}"' count);  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetAdbVersion,The following statement contains a magic number: try {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	if (!Write (adbChan' request))  		throw new IOException ("failed asking for adb version");  	AdbResponse resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (!resp.IOSuccess || !resp.Okay) {  		Log.e (TAG' "Got timeout or unhappy response from ADB fb req: " + resp.Message);  		adbChan.Close ();  		return -1;  	}  	reply = new byte[4];  	if (!Read (adbChan' reply)) {  		Log.e (TAG' "error in getting data length");  		adbChan.Close ();  		return -1;  	}  	String lenHex = reply.GetString (AdbHelper.DEFAULT_ENCODING);  	int len = int.Parse (lenHex' System.Globalization.NumberStyles.HexNumber);  	// the protocol version.  	reply = new byte[len];  	if (!Read (adbChan' reply)) {  		Log.e (TAG' "did not get the version info");  		adbChan.Close ();  		return -1;  	}  	String sReply = reply.GetString (AdbHelper.DEFAULT_ENCODING);  	return int.Parse (sReply' System.Globalization.NumberStyles.HexNumber);  }  catch (Exception ex) {  	Console.WriteLine (ex);  	throw;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetAdbVersion,The following statement contains a magic number: reply = new byte[4];  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,FormAdbRequest,The following statement contains a magic number: System.Diagnostics.Debug.Assert (result.Length == req.Length + 5' String.Format ("result: {1}{0}\nreq: {3}{2}"' result.Length' result.GetString (AdbHelper.DEFAULT_ENCODING)' req.Length' req));  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: while (readDiagString) {  	// length string is in next 4 bytes  	byte[] lenBuf = new byte[4];  	if (!Read (socket' lenBuf)) {  		Console.WriteLine ("Expected diagnostic string not found");  		break;  	}  	String lenStr = ReplyToString (lenBuf);  	int len;  	try {  		len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  	}  	catch (FormatException) {  		Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  		Log.e (TAG' "reply was {0}"' ReplyToString (reply));  		break;  	}  	byte[] msg = new byte[len];  	if (!Read (socket' msg)) {  		Log.e (TAG' "Failed reading diagnostic string' len={0}"' len);  		break;  	}  	resp.Message = ReplyToString (msg);  	Log.e (TAG' "Got reply '{0}'' diag='{1}'"' ReplyToString (reply)' resp.Message);  	break;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: while (readDiagString) {  	// length string is in next 4 bytes  	byte[] lenBuf = new byte[4];  	if (!Read (socket' lenBuf)) {  		Console.WriteLine ("Expected diagnostic string not found");  		break;  	}  	String lenStr = ReplyToString (lenBuf);  	int len;  	try {  		len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  	}  	catch (FormatException) {  		Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  		Log.e (TAG' "reply was {0}"' ReplyToString (reply));  		break;  	}  	byte[] msg = new byte[len];  	if (!Read (socket' msg)) {  		Log.e (TAG' "Failed reading diagnostic string' len={0}"' len);  		break;  	}  	resp.Message = ReplyToString (msg);  	Log.e (TAG' "Got reply '{0}'' diag='{1}'"' ReplyToString (reply)' resp.Message);  	break;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: while (readDiagString) {  	// length string is in next 4 bytes  	byte[] lenBuf = new byte[4];  	if (!Read (socket' lenBuf)) {  		Console.WriteLine ("Expected diagnostic string not found");  		break;  	}  	String lenStr = ReplyToString (lenBuf);  	int len;  	try {  		len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  	}  	catch (FormatException) {  		Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  		Log.e (TAG' "reply was {0}"' ReplyToString (reply));  		break;  	}  	byte[] msg = new byte[len];  	if (!Read (socket' msg)) {  		Log.e (TAG' "Failed reading diagnostic string' len={0}"' len);  		break;  	}  	resp.Message = ReplyToString (msg);  	Log.e (TAG' "Got reply '{0}'' diag='{1}'"' ReplyToString (reply)' resp.Message);  	break;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: try {  	len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  }  catch (FormatException) {  	Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  	Log.e (TAG' "reply was {0}"' ReplyToString (reply));  	break;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: try {  	len = int.Parse (lenStr' System.Globalization.NumberStyles.HexNumber);  }  catch (FormatException) {  	Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  	Log.e (TAG' "reply was {0}"' ReplyToString (reply));  	break;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ReadAdbResponse,The following statement contains a magic number: Log.e (TAG' "Expected digits' got '{0}' : {1} {2} {3} {4}"' lenBuf [0]' lenBuf [1]' lenBuf [2]' lenBuf [3]);  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,IsOkay,The following statement contains a magic number: return reply [0] == (byte)'O' && reply [1] == (byte)'K' && reply [2] == (byte)'A' && reply [3] == (byte)'Y';  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,IsOkay,The following statement contains a magic number: return reply [0] == (byte)'O' && reply [1] == (byte)'K' && reply [2] == (byte)'A' && reply [3] == (byte)'Y';  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetDevices,The following statement contains a magic number: try {  	socket.Connect (address);  	socket.Blocking = true;  	if (!Write (socket' request)) {  		throw new AdbException ("failed asking for devices");  	}  	AdbResponse resp = ReadAdbResponse (socket' false/* readDiagString */);  	if (!resp.IOSuccess || !resp.Okay) {  		Log.e (TAG' "Got timeout or unhappy response from ADB fb req: " + resp.Message);  		socket.Close ();  		return null;  	}  	reply = new byte[4];  	if (!Read (socket' reply)) {  		Log.e (TAG' "error in getting data length");  		socket.Close ();  		return null;  	}  	String lenHex = Encoding.Default.GetString (reply);  	int len = int.Parse (lenHex' System.Globalization.NumberStyles.HexNumber);  	reply = new byte[len];  	if (!Read (socket' reply)) {  		Log.e (TAG' "error in getting data");  		socket.Close ();  		return null;  	}  	List<Device> s = new List<Device> ();  	String[] data = Encoding.Default.GetString (reply).Split (new string[] {  		"\r\n"'  		"\n"  	}' StringSplitOptions.RemoveEmptyEntries);  	data.ForEach (item =>  {  		s.Add (Device.CreateFromAdbData (item));  	});  	return s;  }  finally {  	socket.Close ();  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetDevices,The following statement contains a magic number: reply = new byte[4];  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,The following statement contains a magic number: try {  	adbChan.Connect (adbSockAddr);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	if (!Write (adbChan' request))  		throw new AdbException ("failed asking for frame buffer");  	AdbResponse resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (!resp.IOSuccess || !resp.Okay) {  		Log.w (TAG' "Got timeout or unhappy response from ADB fb req: " + resp.Message);  		adbChan.Close ();  		return null;  	}  	// first the protocol version.  	reply = new byte[4];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got partial reply from ADB fb:");  		adbChan.Close ();  		return null;  	}  	BinaryReader buf;  	int version = 0;  	using (MemoryStream ms = new MemoryStream (reply)) {  		buf = new BinaryReader (ms);  		version = buf.ReadInt16 ();  	}  	// get the header size (this is a count of int)  	int headerSize = RawImage.GetHeaderSize (version);  	// read the header  	reply = new byte[headerSize * 4];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got partial reply from ADB fb:");  		adbChan.Close ();  		return null;  	}  	using (MemoryStream ms = new MemoryStream (reply)) {  		buf = new BinaryReader (ms);  		// fill the RawImage with the header  		if (imageParams.ReadHeader (version' buf) == false) {  			Log.w (TAG' "Unsupported protocol: " + version);  			return null;  		}  	}  	Log.d (TAG' "image params: bpp=" + imageParams.Bpp + "' size=" + imageParams.Size + "' width=" + imageParams.Width + "' height=" + imageParams.Height);  	if (!Write (adbChan' nudge))  		throw new AdbException ("failed nudging");  	reply = new byte[imageParams.Size];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got truncated reply from ADB fb data");  		adbChan.Close ();  		return null;  	}  	imageParams.Data = reply;  }  finally {  	if (adbChan != null) {  		adbChan.Close ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,The following statement contains a magic number: try {  	adbChan.Connect (adbSockAddr);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	if (!Write (adbChan' request))  		throw new AdbException ("failed asking for frame buffer");  	AdbResponse resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (!resp.IOSuccess || !resp.Okay) {  		Log.w (TAG' "Got timeout or unhappy response from ADB fb req: " + resp.Message);  		adbChan.Close ();  		return null;  	}  	// first the protocol version.  	reply = new byte[4];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got partial reply from ADB fb:");  		adbChan.Close ();  		return null;  	}  	BinaryReader buf;  	int version = 0;  	using (MemoryStream ms = new MemoryStream (reply)) {  		buf = new BinaryReader (ms);  		version = buf.ReadInt16 ();  	}  	// get the header size (this is a count of int)  	int headerSize = RawImage.GetHeaderSize (version);  	// read the header  	reply = new byte[headerSize * 4];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got partial reply from ADB fb:");  		adbChan.Close ();  		return null;  	}  	using (MemoryStream ms = new MemoryStream (reply)) {  		buf = new BinaryReader (ms);  		// fill the RawImage with the header  		if (imageParams.ReadHeader (version' buf) == false) {  			Log.w (TAG' "Unsupported protocol: " + version);  			return null;  		}  	}  	Log.d (TAG' "image params: bpp=" + imageParams.Bpp + "' size=" + imageParams.Size + "' width=" + imageParams.Width + "' height=" + imageParams.Height);  	if (!Write (adbChan' nudge))  		throw new AdbException ("failed nudging");  	reply = new byte[imageParams.Size];  	if (!Read (adbChan' reply)) {  		Log.w (TAG' "got truncated reply from ADB fb data");  		adbChan.Close ();  		return null;  	}  	imageParams.Data = reply;  }  finally {  	if (adbChan != null) {  		adbChan.Close ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,The following statement contains a magic number: reply = new byte[4];  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,GetFrameBuffer,The following statement contains a magic number: reply = new byte[headerSize * 4];  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,ExecuteRemoteCommand,The following statement contains a magic number: try {  	socket.Connect (endPoint);  	socket.ReceiveTimeout = maxTimeToOutputResponse;  	socket.SendTimeout = maxTimeToOutputResponse;  	socket.Blocking = true;  	SetDevice (socket' device);  	byte[] request = FormAdbRequest ("shell:" + command);  	if (!Write (socket' request)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse resp = ReadAdbResponse (socket' false/* readDiagString */);  	if (!resp.IOSuccess || !resp.Okay) {  		throw new AdbException ("sad result from adb: " + resp.Message);  	}  	byte[] data = new byte[16384];  	int count = -1;  	while (count != 0) {  		if (rcvr != null && rcvr.IsCancelled) {  			Log.w (TAG' "execute: cancelled");  			throw new OperationCanceledException ();  		}  		count = socket.Receive (data);  		if (count == 0) {  			// we're at the end' we flush the output  			rcvr.Flush ();  			Log.w (TAG' "execute '" + command + "' on '" + device + "' : EOF hit. Read: " + count);  		}  		else {  			string[] cmd = command.Trim ().Split (new char[] {  				' '  			}' StringSplitOptions.RemoveEmptyEntries);  			string sdata = data.GetString (0' count' AdbHelper.DEFAULT_ENCODING);  			var sdataTrimmed = sdata.Trim ();  			if (sdataTrimmed.EndsWith (String.Format ("{0}: not found"' cmd [0]))) {  				Log.w (TAG' "The remote execution returned: '{0}: not found'"' cmd [0]);  				throw new FileNotFoundException (string.Format ("The remote execution returned: '{0}: not found'"' cmd [0]));  			}  			if (sdataTrimmed.EndsWith ("No such file or directory")) {  				Log.w (TAG' "The remote execution returned: {0}"' sdataTrimmed);  				throw new FileNotFoundException (String.Format ("The remote execution returned: {0}"' sdataTrimmed));  			}  			// for "unknown options"  			if (sdataTrimmed.Contains ("Unknown option")) {  				Log.w (TAG' "The remote execution returned: {0}"' sdataTrimmed);  				throw new UnknownOptionException (sdataTrimmed);  			}  			// for "aborting" commands  			if (sdataTrimmed.IsMatch ("Aborting.$")) {  				Log.w (TAG' "The remote execution returned: {0}"' sdataTrimmed);  				throw new CommandAbortingException (sdataTrimmed);  			}  			// for busybox applets   			// cmd: applet not found  			if (sdataTrimmed.IsMatch ("applet not found$") && cmd.Length > 1) {  				Log.w (TAG' "The remote execution returned: '{0}'"' sdataTrimmed);  				throw new FileNotFoundException (string.Format ("The remote execution returned: '{0}'"' sdataTrimmed));  			}  			// checks if the permission to execute the command was denied.  			// workitem: 16822  			if (sdataTrimmed.IsMatch ("(permission|access) denied$")) {  				Log.w (TAG' "The remote execution returned: '{0}'"' sdataTrimmed);  				throw new PermissionDeniedException (String.Format ("The remote execution returned: '{0}'"' sdataTrimmed));  			}  			// Add the data to the receiver  			if (rcvr != null) {  				rcvr.AddOutput (data' 0' count);  			}  		}  	}  }  catch (SocketException s) {  	throw new ShellCommandUnresponsiveException ();  }  finally {  	if (socket != null) {  		socket.Close ();  	}  	rcvr.Flush ();  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		var request = FormAdbRequest ("log:" + logName);  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	var request = FormAdbRequest ("log:" + logName);  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: if (count < 0) {  	break;  }  else if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	Thread.Sleep (WAIT_TIME * 5);  }  catch (ThreadInterruptedException ie) {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: Thread.Sleep (WAIT_TIME * 5);  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		//var request = FormAdbRequest("log:" + logName);  		var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  catch (Exception) {  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		//var request = FormAdbRequest("log:" + logName);  		var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  catch (Exception) {  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		//var request = FormAdbRequest("log:" + logName);  		var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  catch (Exception) {  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  		adbChan.Connect (address);  		adbChan.Blocking = true;  		// if the device is not -1' then we first tell adb we're looking to talk  		// to a specific device  		SetDevice (adbChan' device);  		//var request = FormAdbRequest("log:" + logName);  		var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  		if (!Write (adbChan' request)) {  			throw new AdbException ("failed asking for log");  		}  		var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  		if (resp.Okay == false) {  			throw new AdbCommandRejectedException (resp.Message);  		}  		byte[] data = new byte[16384];  		using (var ms = new MemoryStream (data)) {  			int offset = 0;  			while (true) {  				int count;  				if (rcvr != null && rcvr.IsCancelled) {  					break;  				}  				var buffer = new byte[4 * 1024];  				count = adbChan.Receive (buffer);  				if (count < 0) {  					break;  				}  				else if (count == 0) {  					try {  						Thread.Sleep (WAIT_TIME * 5);  					}  					catch (ThreadInterruptedException ie) {  					}  				}  				else {  					ms.Write (buffer' offset' count);  					offset += count;  					if (rcvr != null) {  						var d = ms.ToArray ();  						rcvr.ParseNewData (d' 0' d.Length);  					}  				}  			}  		}  	}  }  catch (Exception) {  }  finally {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	//var request = FormAdbRequest("log:" + logName);  	var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	//var request = FormAdbRequest("log:" + logName);  	var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	//var request = FormAdbRequest("log:" + logName);  	var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var adbChan = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp)) {  	adbChan.Connect (address);  	adbChan.Blocking = true;  	// if the device is not -1' then we first tell adb we're looking to talk  	// to a specific device  	SetDevice (adbChan' device);  	//var request = FormAdbRequest("log:" + logName);  	var request = FormAdbRequest (string.Format ("shell:cat dev/log/{0}"' logName));  	if (!Write (adbChan' request)) {  		throw new AdbException ("failed asking for log");  	}  	var resp = ReadAdbResponse (adbChan' false/* readDiagString */);  	if (resp.Okay == false) {  		throw new AdbCommandRejectedException (resp.Message);  	}  	byte[] data = new byte[16384];  	using (var ms = new MemoryStream (data)) {  		int offset = 0;  		while (true) {  			int count;  			if (rcvr != null && rcvr.IsCancelled) {  				break;  			}  			var buffer = new byte[4 * 1024];  			count = adbChan.Receive (buffer);  			if (count < 0) {  				break;  			}  			else if (count == 0) {  				try {  					Thread.Sleep (WAIT_TIME * 5);  				}  				catch (ThreadInterruptedException ie) {  				}  			}  			else {  				ms.Write (buffer' offset' count);  				offset += count;  				if (rcvr != null) {  					var d = ms.ToArray ();  					rcvr.ParseNewData (d' 0' d.Length);  				}  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: using (var ms = new MemoryStream (data)) {  	int offset = 0;  	while (true) {  		int count;  		if (rcvr != null && rcvr.IsCancelled) {  			break;  		}  		var buffer = new byte[4 * 1024];  		count = adbChan.Receive (buffer);  		if (count < 0) {  			break;  		}  		else if (count == 0) {  			try {  				Thread.Sleep (WAIT_TIME * 5);  			}  			catch (ThreadInterruptedException ie) {  			}  		}  		else {  			ms.Write (buffer' offset' count);  			offset += count;  			if (rcvr != null) {  				var d = ms.ToArray ();  				rcvr.ParseNewData (d' 0' d.Length);  			}  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: while (true) {  	int count;  	if (rcvr != null && rcvr.IsCancelled) {  		break;  	}  	var buffer = new byte[4 * 1024];  	count = adbChan.Receive (buffer);  	if (count < 0) {  		break;  	}  	else if (count == 0) {  		try {  			Thread.Sleep (WAIT_TIME * 5);  		}  		catch (ThreadInterruptedException ie) {  		}  	}  	else {  		ms.Write (buffer' offset' count);  		offset += count;  		if (rcvr != null) {  			var d = ms.ToArray ();  			rcvr.ParseNewData (d' 0' d.Length);  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: if (count < 0) {  	break;  }  else if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: if (count == 0) {  	try {  		Thread.Sleep (WAIT_TIME * 5);  	}  	catch (ThreadInterruptedException ie) {  	}  }  else {  	ms.Write (buffer' offset' count);  	offset += count;  	if (rcvr != null) {  		var d = ms.ToArray ();  		rcvr.ParseNewData (d' 0' d.Length);  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: try {  	Thread.Sleep (WAIT_TIME * 5);  }  catch (ThreadInterruptedException ie) {  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunLogService,The following statement contains a magic number: Thread.Sleep (WAIT_TIME * 5);  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline && (receiver != null)) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		receiver.CancelAction = action;  		this.SetDevice (socket' device);  		//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  		byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  		if (!this.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  					//continue;  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Dispose ();  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline && (receiver != null)) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		receiver.CancelAction = action;  		this.SetDevice (socket' device);  		//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  		byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  		if (!this.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  					//continue;  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Dispose ();  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline && (receiver != null)) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		receiver.CancelAction = action;  		this.SetDevice (socket' device);  		//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  		byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  		if (!this.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  					//continue;  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Dispose ();  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline && (receiver != null)) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		receiver.CancelAction = action;  		this.SetDevice (socket' device);  		//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  		byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  		if (!this.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  					//continue;  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Dispose ();  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline && (receiver != null)) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		receiver.CancelAction = action;  		this.SetDevice (socket' device);  		//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  		byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  		if (!this.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  					//continue;  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Dispose ();  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	receiver.CancelAction = action;  	this.SetDevice (socket' device);  	//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  	byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  	if (!this.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				//continue;  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Dispose ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	receiver.CancelAction = action;  	this.SetDevice (socket' device);  	//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  	byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  	if (!this.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				//continue;  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Dispose ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	receiver.CancelAction = action;  	this.SetDevice (socket' device);  	//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  	byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  	if (!this.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				//continue;  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Dispose ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	receiver.CancelAction = action;  	this.SetDevice (socket' device);  	//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  	byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  	if (!this.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				//continue;  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Dispose ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	receiver.CancelAction = action;  	this.SetDevice (socket' device);  	//byte[] data = Instance.FormAdbRequest(string.Format("shell:cat {0}"' filePath));  	byte[] data = Instance.FormAdbRequest (string.Format ("log:{0}"' filePath));  	if (!this.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				//continue;  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Dispose ();  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			//continue;  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			//continue;  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			//continue;  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			//continue;  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: while ((device.IsOnline && (receiver != null)) && !receiver.IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			//continue;  		}  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		//continue;  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		//continue;  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		//continue;  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		//continue;  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		//continue;  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	//continue;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	//continue;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	//continue;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	//continue;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	receiver.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	//continue;  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Managed.Adb,AdbHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AdbHelper.cs,RunCatLog,The following statement contains a magic number: stream.WriteByte (10);  
Magic Number,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	Match matcher = Regex.Match (line' ADB_VERSION_PATTERN);  	if (matcher.Success) {  		int majorVersion = int.Parse (matcher.Groups [1].Value);  		int minorVersion = int.Parse (matcher.Groups [2].Value);  		int microVersion = int.Parse (matcher.Groups [3].Value);  		// check only the micro version for now.  		if (microVersion < ADB_VERSION_MICRO_MIN) {  			String message = String.Format ("Required minimum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MIN' microVersion);  			Log.LogAndDisplay (LogLevel.Error' ADB' message);  		}  		else if (ADB_VERSION_MICRO_MAX != -1 && microVersion > ADB_VERSION_MICRO_MAX) {  			String message = String.Format ("Required maximum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MAX' microVersion);  			Log.LogAndDisplay (LogLevel.Error' ADB' message);  		}  		else {  			VersionCheck = true;  		}  		return true;  	}  }  
Magic Number,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line)) {  	Match matcher = Regex.Match (line' ADB_VERSION_PATTERN);  	if (matcher.Success) {  		int majorVersion = int.Parse (matcher.Groups [1].Value);  		int minorVersion = int.Parse (matcher.Groups [2].Value);  		int microVersion = int.Parse (matcher.Groups [3].Value);  		// check only the micro version for now.  		if (microVersion < ADB_VERSION_MICRO_MIN) {  			String message = String.Format ("Required minimum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MIN' microVersion);  			Log.LogAndDisplay (LogLevel.Error' ADB' message);  		}  		else if (ADB_VERSION_MICRO_MAX != -1 && microVersion > ADB_VERSION_MICRO_MAX) {  			String message = String.Format ("Required maximum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MAX' microVersion);  			Log.LogAndDisplay (LogLevel.Error' ADB' message);  		}  		else {  			VersionCheck = true;  		}  		return true;  	}  }  
Magic Number,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The following statement contains a magic number: if (matcher.Success) {  	int majorVersion = int.Parse (matcher.Groups [1].Value);  	int minorVersion = int.Parse (matcher.Groups [2].Value);  	int microVersion = int.Parse (matcher.Groups [3].Value);  	// check only the micro version for now.  	if (microVersion < ADB_VERSION_MICRO_MIN) {  		String message = String.Format ("Required minimum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MIN' microVersion);  		Log.LogAndDisplay (LogLevel.Error' ADB' message);  	}  	else if (ADB_VERSION_MICRO_MAX != -1 && microVersion > ADB_VERSION_MICRO_MAX) {  		String message = String.Format ("Required maximum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MAX' microVersion);  		Log.LogAndDisplay (LogLevel.Error' ADB' message);  	}  	else {  		VersionCheck = true;  	}  	return true;  }  
Magic Number,Managed.Adb,AndroidDebugBridge,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\AndroidDebugBridge.cs,ScanVersionLine,The following statement contains a magic number: if (matcher.Success) {  	int majorVersion = int.Parse (matcher.Groups [1].Value);  	int minorVersion = int.Parse (matcher.Groups [2].Value);  	int microVersion = int.Parse (matcher.Groups [3].Value);  	// check only the micro version for now.  	if (microVersion < ADB_VERSION_MICRO_MIN) {  		String message = String.Format ("Required minimum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MIN' microVersion);  		Log.LogAndDisplay (LogLevel.Error' ADB' message);  	}  	else if (ADB_VERSION_MICRO_MAX != -1 && microVersion > ADB_VERSION_MICRO_MAX) {  		String message = String.Format ("Required maximum version of adb: {0}.{1}.{2}. Current version is {0}.{1}.{3}"' majorVersion' minorVersion' ADB_VERSION_MICRO_MAX' microVersion);  		Log.LogAndDisplay (LogLevel.Error' ADB' message);  	}  	else {  		VersionCheck = true;  	}  	return true;  }  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,type,The following statement contains a magic number: if (typeName.Length != 4) {  	Log.e ("ddms"' "Type name must be 4 letter long");  	throw new ArgumentException ("Type name must be 4 letter long");  }  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,type,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	val <<= 8;  	val |= (byte)typeName [i];  }  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,type,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	val <<= 8;  	val |= (byte)typeName [i];  }  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,type,The following statement contains a magic number: val <<= 8;  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,name,The following statement contains a magic number: ascii [0] = (char)((type >> 24) & 0xff);  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,name,The following statement contains a magic number: ascii [1] = (char)((type >> 16) & 0xff);  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,name,The following statement contains a magic number: ascii [2] = (char)((type >> 8) & 0xff);  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,name,The following statement contains a magic number: ascii [2] = (char)((type >> 8) & 0xff);  
Magic Number,Managed.Adb,ChunkHandler,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\ChunkHandler.cs,name,The following statement contains a magic number: ascii [3] = (char)(type & 0xff);  
Magic Number,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,CreateFromAdbData,The following statement contains a magic number: if (m.Success) {  	return new Device (m.Groups [1].Value' GetStateFromString (m.Groups [2].Value));  }  else {  	throw new ArgumentException ("Invalid device list data");  }  
Magic Number,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,CreateFromAdbData,The following statement contains a magic number: return new Device (m.Groups [1].Value' GetStateFromString (m.Groups [2].Value));  
Magic Number,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,GetBatteryInfo,The following statement contains a magic number: return GetBatteryInfo (5 * 60 * 1000);  
Magic Number,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,GetBatteryInfo,The following statement contains a magic number: return GetBatteryInfo (5 * 60 * 1000);  
Magic Number,Managed.Adb,Device,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Device.cs,GetBatteryInfo,The following statement contains a magic number: return GetBatteryInfo (5 * 60 * 1000);  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitor,The following statement contains a magic number: LengthBuffer = new byte[4];  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitor,The following statement contains a magic number: LengthBuffer2 = new byte[4];  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The following statement contains a magic number: do {  	try {  		if (MainAdbConnection == null) {  			Log.d (TAG' "Opening adb connection");  			MainAdbConnection = OpenAdbConnection ();  			if (MainAdbConnection == null) {  				ConnectionAttemptCount++;  				Console.WriteLine ("Connection attempts: {0}"' ConnectionAttemptCount);  				Log.e (TAG' "Connection attempts: {0}"' ConnectionAttemptCount);  				if (ConnectionAttemptCount > 10) {  					if (Server.Start () == false) {  						RestartAttemptCount++;  						Console.WriteLine ("adb restart attempts: {0}"' RestartAttemptCount);  						Log.e (TAG' "adb restart attempts: {0}"' RestartAttemptCount);  					}  					else {  						RestartAttemptCount = 0;  					}  				}  				WaitBeforeContinue ();  			}  			else {  				Log.d (TAG' "Connected to adb for device monitoring");  				ConnectionAttemptCount = 0;  			}  		}  		if (MainAdbConnection != null && !IsMonitoring && MainAdbConnection.Connected) {  			IsMonitoring = SendDeviceListMonitoringRequest ();  		}  		if (IsMonitoring) {  			// read the length of the incoming message  			int length = ReadLength (MainAdbConnection' LengthBuffer);  			if (length >= 0) {  				// read the incoming message  				ProcessIncomingDeviceData (length);  				// flag the fact that we have build the list at least once.  				HasInitialDeviceList = true;  			}  		}  	}  	catch (IOException ioe) {  		if (!IsRunning) {  			Log.e (TAG' "Adb connection Error: "' ioe);  			IsMonitoring = false;  			if (MainAdbConnection != null) {  				try {  					MainAdbConnection.Close ();  				}  				catch (IOException) {  					// we can safely ignore that one.  				}  				MainAdbConnection = null;  			}  		}  	}  	catch (Exception ex) {  		//Console.WriteLine ( ex );  	}  }  while (IsRunning);  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The following statement contains a magic number: try {  	if (MainAdbConnection == null) {  		Log.d (TAG' "Opening adb connection");  		MainAdbConnection = OpenAdbConnection ();  		if (MainAdbConnection == null) {  			ConnectionAttemptCount++;  			Console.WriteLine ("Connection attempts: {0}"' ConnectionAttemptCount);  			Log.e (TAG' "Connection attempts: {0}"' ConnectionAttemptCount);  			if (ConnectionAttemptCount > 10) {  				if (Server.Start () == false) {  					RestartAttemptCount++;  					Console.WriteLine ("adb restart attempts: {0}"' RestartAttemptCount);  					Log.e (TAG' "adb restart attempts: {0}"' RestartAttemptCount);  				}  				else {  					RestartAttemptCount = 0;  				}  			}  			WaitBeforeContinue ();  		}  		else {  			Log.d (TAG' "Connected to adb for device monitoring");  			ConnectionAttemptCount = 0;  		}  	}  	if (MainAdbConnection != null && !IsMonitoring && MainAdbConnection.Connected) {  		IsMonitoring = SendDeviceListMonitoringRequest ();  	}  	if (IsMonitoring) {  		// read the length of the incoming message  		int length = ReadLength (MainAdbConnection' LengthBuffer);  		if (length >= 0) {  			// read the incoming message  			ProcessIncomingDeviceData (length);  			// flag the fact that we have build the list at least once.  			HasInitialDeviceList = true;  		}  	}  }  catch (IOException ioe) {  	if (!IsRunning) {  		Log.e (TAG' "Adb connection Error: "' ioe);  		IsMonitoring = false;  		if (MainAdbConnection != null) {  			try {  				MainAdbConnection.Close ();  			}  			catch (IOException) {  				// we can safely ignore that one.  			}  			MainAdbConnection = null;  		}  	}  }  catch (Exception ex) {  	//Console.WriteLine ( ex );  }  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The following statement contains a magic number: if (MainAdbConnection == null) {  	Log.d (TAG' "Opening adb connection");  	MainAdbConnection = OpenAdbConnection ();  	if (MainAdbConnection == null) {  		ConnectionAttemptCount++;  		Console.WriteLine ("Connection attempts: {0}"' ConnectionAttemptCount);  		Log.e (TAG' "Connection attempts: {0}"' ConnectionAttemptCount);  		if (ConnectionAttemptCount > 10) {  			if (Server.Start () == false) {  				RestartAttemptCount++;  				Console.WriteLine ("adb restart attempts: {0}"' RestartAttemptCount);  				Log.e (TAG' "adb restart attempts: {0}"' RestartAttemptCount);  			}  			else {  				RestartAttemptCount = 0;  			}  		}  		WaitBeforeContinue ();  	}  	else {  		Log.d (TAG' "Connected to adb for device monitoring");  		ConnectionAttemptCount = 0;  	}  }  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The following statement contains a magic number: if (MainAdbConnection == null) {  	ConnectionAttemptCount++;  	Console.WriteLine ("Connection attempts: {0}"' ConnectionAttemptCount);  	Log.e (TAG' "Connection attempts: {0}"' ConnectionAttemptCount);  	if (ConnectionAttemptCount > 10) {  		if (Server.Start () == false) {  			RestartAttemptCount++;  			Console.WriteLine ("adb restart attempts: {0}"' RestartAttemptCount);  			Log.e (TAG' "adb restart attempts: {0}"' RestartAttemptCount);  		}  		else {  			RestartAttemptCount = 0;  		}  	}  	WaitBeforeContinue ();  }  else {  	Log.d (TAG' "Connected to adb for device monitoring");  	ConnectionAttemptCount = 0;  }  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,DeviceMonitorLoop,The following statement contains a magic number: if (ConnectionAttemptCount > 10) {  	if (Server.Start () == false) {  		RestartAttemptCount++;  		Console.WriteLine ("adb restart attempts: {0}"' RestartAttemptCount);  		Log.e (TAG' "adb restart attempts: {0}"' RestartAttemptCount);  	}  	else {  		RestartAttemptCount = 0;  	}  }  
Magic Number,Managed.Adb,DeviceMonitor,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\DeviceMonitor.cs,WaitBeforeContinue,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitsToArray,The following statement contains a magic number: dest [offset + 1] = (byte)((value & 0x0000FF00) >> 8);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitsToArray,The following statement contains a magic number: dest [offset + 2] = (byte)((value & 0x00FF0000) >> 16);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitsToArray,The following statement contains a magic number: dest [offset + 2] = (byte)((value & 0x00FF0000) >> 16);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitsToArray,The following statement contains a magic number: dest [offset + 3] = (byte)((value & 0xFF000000) >> 24);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitsToArray,The following statement contains a magic number: dest [offset + 3] = (byte)((value & 0xFF000000) >> 24);  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 1]) & 0x000000FF) << 8;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 2]) & 0x000000FF) << 16;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 2]) & 0x000000FF) << 16;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 3]) & 0x000000FF) << 24;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap32bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 3]) & 0x000000FF) << 24;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,SwapU16bitFromArray,The following statement contains a magic number: v |= (((int)value [offset + 1]) & 0x000000FF) << 8;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 1]) & 0x00000000000000FFL) << 8;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 2]) & 0x00000000000000FFL) << 16;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 2]) & 0x00000000000000FFL) << 16;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 3]) & 0x00000000000000FFL) << 24;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 3]) & 0x00000000000000FFL) << 24;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 4]) & 0x00000000000000FFL) << 32;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 4]) & 0x00000000000000FFL) << 32;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 5]) & 0x00000000000000FFL) << 40;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 5]) & 0x00000000000000FFL) << 40;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 6]) & 0x00000000000000FFL) << 48;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 6]) & 0x00000000000000FFL) << 48;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 7]) & 0x00000000000000FFL) << 56;  
Magic Number,Managed.Adb,ArrayHelper,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\ArrayHelper.cs,Swap64bitFromArray,The following statement contains a magic number: v |= (((long)value [offset + 7]) & 0x00000000000000FFL) << 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (UInt16)((value & 0xFFU) << 8 | (value & 0xFF00U) >> 8);  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (UInt16)((value & 0xFFU) << 8 | (value & 0xFF00U) >> 8);  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x000000FFU) << 24 | (value & 0x0000FF00U) << 8 | (value & 0x00FF0000U) >> 8 | (value & 0xFF000000U) >> 24;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,ReverseBytes,The following statement contains a magic number: return (value & 0x00000000000000FFUL) << 56 | (value & 0x000000000000FF00UL) << 40 | (value & 0x0000000000FF0000UL) << 24 | (value & 0x00000000FF000000UL) << 8 | (value & 0x000000FF00000000UL) >> 8 | (value & 0x0000FF0000000000UL) >> 24 | (value & 0x00FF000000000000UL) >> 40 | (value & 0xFF00000000000000UL) >> 56;  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: for (int i = 0; i < source.Count (); i += step) {  	var b = new byte[step];  	for (int x = b.Length - 1; x >= 0; --x) {  		b [(step - 1) - x] = source [i + x];  	}  	b [2] = source [i + 0];  	b [1] = source [i + 1];  	b [0] = source [i + 2];  	b [3] = source [i + 3];  	action (b);  }  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: for (int i = 0; i < source.Count (); i += step) {  	var b = new byte[step];  	for (int x = b.Length - 1; x >= 0; --x) {  		b [(step - 1) - x] = source [i + x];  	}  	b [2] = source [i + 0];  	b [1] = source [i + 1];  	b [0] = source [i + 2];  	b [3] = source [i + 3];  	action (b);  }  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: for (int i = 0; i < source.Count (); i += step) {  	var b = new byte[step];  	for (int x = b.Length - 1; x >= 0; --x) {  		b [(step - 1) - x] = source [i + x];  	}  	b [2] = source [i + 0];  	b [1] = source [i + 1];  	b [0] = source [i + 2];  	b [3] = source [i + 3];  	action (b);  }  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: for (int i = 0; i < source.Count (); i += step) {  	var b = new byte[step];  	for (int x = b.Length - 1; x >= 0; --x) {  		b [(step - 1) - x] = source [i + x];  	}  	b [2] = source [i + 0];  	b [1] = source [i + 1];  	b [0] = source [i + 2];  	b [3] = source [i + 3];  	action (b);  }  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: b [2] = source [i + 0];  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: b [0] = source [i + 2];  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: b [3] = source [i + 3];  
Magic Number,Managed.Adb,MadbExtensions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Extensions\BytesHelper.cs,IntReverseForRawImage,The following statement contains a magic number: b [3] = source [i + 3];  
Magic Number,Managed.Adb,FileEntry,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FileEntry.cs,CheckAppPackageStatus,The following statement contains a magic number: if (this.Type == FileListingService.FileTypes.File && segments.Length == 3 && IsApplicationFileName) {  	IsApplicationPackage = String.Compare (FileListingService.DIRECTORY_APP' segments [1]' false) == 0 && (String.Compare (FileListingService.DIRECTORY_SYSTEM' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_DATA' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_SD' segments [0]' false) == 0 || String.Compare (FileListingService.DIRECTORY_SDEXT' segments [0]' false) == 0);  }  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: if (permissions.Length > 9) {  	permissions = permissions.Substring (1' 9);  }  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: if (permissions.Length > 9) {  	permissions = permissions.Substring (1' 9);  }  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: permissions = permissions.Substring (1' 9);  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: if (permissions.Length < 9) {  	throw new ArgumentException (String.Format ("Invalid permissions string: {0}"' permissions));  }  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: User = new FilePermission (permissions.Substring (0' 3));  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: Group = new FilePermission (permissions.Substring (3' 3));  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: Group = new FilePermission (permissions.Substring (3' 3));  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: Other = new FilePermission (permissions.Substring (6' 3));  
Magic Number,Managed.Adb,FilePermissions,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermissions,The following statement contains a magic number: Other = new FilePermission (permissions.Substring (6' 3));  
Magic Number,Managed.Adb,FilePermission,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermission,The following statement contains a magic number: this.CanExecute = string.Compare (linuxPermissions.Substring (2' 1)' "x"' false) == 0 || string.Compare (linuxPermissions.Substring (2' 1)' "t"' false) == 0;  
Magic Number,Managed.Adb,FilePermission,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermission,The following statement contains a magic number: this.CanExecute = string.Compare (linuxPermissions.Substring (2' 1)' "x"' false) == 0 || string.Compare (linuxPermissions.Substring (2' 1)' "t"' false) == 0;  
Magic Number,Managed.Adb,FilePermission,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\FilePermission.cs,FilePermission,The following statement contains a magic number: this.CanDelete = this.CanWrite && string.Compare (linuxPermissions.Substring (2' 1)' "t"' false) != 0;  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,Log,The following statement contains a magic number: SpaceLine [0] = SpaceLine [1] = SpaceLine [2] = SpaceLine [3] = '0';  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,Log,The following statement contains a magic number: SpaceLine [0] = SpaceLine [1] = SpaceLine [2] = SpaceLine [3] = '0';  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,Log,The following statement contains a magic number: SpaceLine [4] = '-';  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (length != 0) {  	if (length > 16) {  		// full line  		count = 16;  	}  	else {  		// partial line; re-copy blanks to clear end  		count = length;  		needErase = true;  	}  	if (needErase) {  		Array.Copy (SpaceLine' 0' line' 0' SpaceLine.Length);  		needErase = false;  	}  	// output the address (currently limited to 4 hex digits)  	addr = baseAddr;  	addr &= 0xffff;  	ch = 3;  	while (addr != 0) {  		line [ch] = HEXDIGIT [addr & 0x0f];  		ch--;  		addr >>= 4;  	}  	// output hex digits and ASCII chars  	ch = kHexOffset;  	for (i = 0; i < count; i++) {  		byte val = data [offset + i];  		line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  		line [ch++] = HEXDIGIT [val & 0x0f];  		ch++;  		if (val >= 0x20 && val < 0x7f)  			line [kAscOffset + i] = (char)val;  		else  			line [kAscOffset + i] = '.';  	}  	WriteLine (level' tag' new String (line));  	// advance to next chunk of data  	length -= count;  	offset += count;  	baseAddr += count;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (length != 0) {  	if (length > 16) {  		// full line  		count = 16;  	}  	else {  		// partial line; re-copy blanks to clear end  		count = length;  		needErase = true;  	}  	if (needErase) {  		Array.Copy (SpaceLine' 0' line' 0' SpaceLine.Length);  		needErase = false;  	}  	// output the address (currently limited to 4 hex digits)  	addr = baseAddr;  	addr &= 0xffff;  	ch = 3;  	while (addr != 0) {  		line [ch] = HEXDIGIT [addr & 0x0f];  		ch--;  		addr >>= 4;  	}  	// output hex digits and ASCII chars  	ch = kHexOffset;  	for (i = 0; i < count; i++) {  		byte val = data [offset + i];  		line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  		line [ch++] = HEXDIGIT [val & 0x0f];  		ch++;  		if (val >= 0x20 && val < 0x7f)  			line [kAscOffset + i] = (char)val;  		else  			line [kAscOffset + i] = '.';  	}  	WriteLine (level' tag' new String (line));  	// advance to next chunk of data  	length -= count;  	offset += count;  	baseAddr += count;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (length != 0) {  	if (length > 16) {  		// full line  		count = 16;  	}  	else {  		// partial line; re-copy blanks to clear end  		count = length;  		needErase = true;  	}  	if (needErase) {  		Array.Copy (SpaceLine' 0' line' 0' SpaceLine.Length);  		needErase = false;  	}  	// output the address (currently limited to 4 hex digits)  	addr = baseAddr;  	addr &= 0xffff;  	ch = 3;  	while (addr != 0) {  		line [ch] = HEXDIGIT [addr & 0x0f];  		ch--;  		addr >>= 4;  	}  	// output hex digits and ASCII chars  	ch = kHexOffset;  	for (i = 0; i < count; i++) {  		byte val = data [offset + i];  		line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  		line [ch++] = HEXDIGIT [val & 0x0f];  		ch++;  		if (val >= 0x20 && val < 0x7f)  			line [kAscOffset + i] = (char)val;  		else  			line [kAscOffset + i] = '.';  	}  	WriteLine (level' tag' new String (line));  	// advance to next chunk of data  	length -= count;  	offset += count;  	baseAddr += count;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (length != 0) {  	if (length > 16) {  		// full line  		count = 16;  	}  	else {  		// partial line; re-copy blanks to clear end  		count = length;  		needErase = true;  	}  	if (needErase) {  		Array.Copy (SpaceLine' 0' line' 0' SpaceLine.Length);  		needErase = false;  	}  	// output the address (currently limited to 4 hex digits)  	addr = baseAddr;  	addr &= 0xffff;  	ch = 3;  	while (addr != 0) {  		line [ch] = HEXDIGIT [addr & 0x0f];  		ch--;  		addr >>= 4;  	}  	// output hex digits and ASCII chars  	ch = kHexOffset;  	for (i = 0; i < count; i++) {  		byte val = data [offset + i];  		line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  		line [ch++] = HEXDIGIT [val & 0x0f];  		ch++;  		if (val >= 0x20 && val < 0x7f)  			line [kAscOffset + i] = (char)val;  		else  			line [kAscOffset + i] = '.';  	}  	WriteLine (level' tag' new String (line));  	// advance to next chunk of data  	length -= count;  	offset += count;  	baseAddr += count;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (length != 0) {  	if (length > 16) {  		// full line  		count = 16;  	}  	else {  		// partial line; re-copy blanks to clear end  		count = length;  		needErase = true;  	}  	if (needErase) {  		Array.Copy (SpaceLine' 0' line' 0' SpaceLine.Length);  		needErase = false;  	}  	// output the address (currently limited to 4 hex digits)  	addr = baseAddr;  	addr &= 0xffff;  	ch = 3;  	while (addr != 0) {  		line [ch] = HEXDIGIT [addr & 0x0f];  		ch--;  		addr >>= 4;  	}  	// output hex digits and ASCII chars  	ch = kHexOffset;  	for (i = 0; i < count; i++) {  		byte val = data [offset + i];  		line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  		line [ch++] = HEXDIGIT [val & 0x0f];  		ch++;  		if (val >= 0x20 && val < 0x7f)  			line [kAscOffset + i] = (char)val;  		else  			line [kAscOffset + i] = '.';  	}  	WriteLine (level' tag' new String (line));  	// advance to next chunk of data  	length -= count;  	offset += count;  	baseAddr += count;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: if (length > 16) {  	// full line  	count = 16;  }  else {  	// partial line; re-copy blanks to clear end  	count = length;  	needErase = true;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: if (length > 16) {  	// full line  	count = 16;  }  else {  	// partial line; re-copy blanks to clear end  	count = length;  	needErase = true;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: count = 16;  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: ch = 3;  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: while (addr != 0) {  	line [ch] = HEXDIGIT [addr & 0x0f];  	ch--;  	addr >>= 4;  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: addr >>= 4;  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: for (i = 0; i < count; i++) {  	byte val = data [offset + i];  	line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  	line [ch++] = HEXDIGIT [val & 0x0f];  	ch++;  	if (val >= 0x20 && val < 0x7f)  		line [kAscOffset + i] = (char)val;  	else  		line [kAscOffset + i] = '.';  }  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,HexDump,The following statement contains a magic number: line [ch++] = HEXDIGIT [(val >> 4) & 0x0f];  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,GetLogFormatString,The following statement contains a magic number: return String.Format ("{0:00}:{1:00} {2}/{3}: {4}\n"' (msec / 60000) % 60' (msec / 1000) % 60' logLevel.Letter' tag' message);  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,GetLogFormatString,The following statement contains a magic number: return String.Format ("{0:00}:{1:00} {2}/{3}: {4}\n"' (msec / 60000) % 60' (msec / 1000) % 60' logLevel.Letter' tag' message);  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,GetLogFormatString,The following statement contains a magic number: return String.Format ("{0:00}:{1:00} {2}/{3}: {4}\n"' (msec / 60000) % 60' (msec / 1000) % 60' logLevel.Letter' tag' message);  
Magic Number,Managed.Adb,Log,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Log.cs,GetLogFormatString,The following statement contains a magic number: return String.Format ("{0:00}:{1:00} {2}/{3}: {4}\n"' (msec / 60000) % 60' (msec / 1000) % 60' logLevel.Letter' tag' message);  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Verbose = new LogLevelInfo {  	Priority = 2'  	Value = "verbose"'  	Letter = 'V'  };  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Debug = new LogLevelInfo {  	Priority = 3'  	Value = "debug"'  	Letter = 'D'  };  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Info = new LogLevelInfo {  	Priority = 4'  	Value = "info"'  	Letter = 'I'  };  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Warn = new LogLevelInfo {  	Priority = 5'  	Value = "warn"'  	Letter = 'W'  };  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Error = new LogLevelInfo {  	Priority = 6'  	Value = "error"'  	Letter = 'E'  };  
Magic Number,Managed.Adb,LogLevel,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\LogLevel.cs,LogLevel,The following statement contains a magic number: Assert = new LogLevelInfo {  	Priority = 7'  	Value = "assert"'  	Letter = 'A'  };  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: switch (version) {  case 1:  /* RGBA_8888 */case 2:  /* RGBX_8888 */case 3:  /* RGB_888 */case 4:  /* RGB_565 */case 5:  	/* BGRA_8888 */this.Bpp = (int)buf.ReadInt32 ();  	this.Size = (int)buf.ReadInt32 ();  	this.Width = (int)buf.ReadInt32 ();  	// 480  	this.Height = (int)buf.ReadInt32 ();  	// 800  	this.Red.Offset = (int)buf.ReadInt32 ();  	// 8  	this.Red.Length = (int)buf.ReadInt32 ();  	// 8  	this.Blue.Offset = (int)buf.ReadInt32 ();  	// 0  	this.Blue.Length = (int)buf.ReadInt32 ();  	// 8  	this.Green.Offset = (int)buf.ReadInt32 ();  	// 16  	this.Green.Length = (int)buf.ReadInt32 ();  	// 8  	this.Alpha.Offset = (int)buf.ReadInt32 ();  	// 24  	this.Alpha.Length = (int)buf.ReadInt32 ();  	// 8  	break;  default:  	// compatibility mode with original protocol  	this.Bpp = 16;  	// read actual values.  	this.Size = buf.ReadInt32 ();  	this.Width = buf.ReadInt32 ();  	this.Height = buf.ReadInt32 ();  	// create default values for the rest. Format is 565  	this.Red.Offset = 11;  	this.Red.Length = 5;  	this.Green.Offset = 5;  	this.Green.Length = 6;  	this.Blue.Offset = 0;  	this.Blue.Length = 5;  	this.Alpha.Offset = 0;  	this.Alpha.Length = 0;  	break;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Bpp = 16;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Red.Offset = 11;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Red.Length = 5;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Green.Offset = 5;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Green.Length = 6;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ReadHeader,The following statement contains a magic number: this.Blue.Length = 5;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: return 3;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following statement contains a magic number: return 12;  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ToImage,The following statement contains a magic number: try {  	bitmap = new Bitmap (this.Width' this.Height' format);  	bitmapdata = bitmap.LockBits (new Rectangle (0' 0' this.Width' this.Height)' ImageLockMode.WriteOnly' format);  	image = new Bitmap (this.Width' this.Height' format);  	var tdata = Data;  	if (Bpp == 32) {  		tdata = Swap (tdata);  	}  	Marshal.Copy (tdata' 0' bitmapdata.Scan0' this.Size);  	bitmap.UnlockBits (bitmapdata);  	using (Graphics g = Graphics.FromImage (image)) {  		g.DrawImage (bitmap' new Point (0' 0));  		return image;  	}  }  catch (Exception) {  	throw;  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ToImage,The following statement contains a magic number: if (Bpp == 32) {  	tdata = Swap (tdata);  }  
Magic Number,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,ToImage,The following statement contains a magic number: return ToImage (this.Bpp == 32 ? PixelFormat.Format32bppArgb : PixelFormat.Format16bppRgb565);  
Magic Number,Managed.Adb,EnvironmentVariablesReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\EnvironmentVariablesReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	if (String.IsNullOrEmpty (line) || line.StartsWith ("#")) {  		continue;  	}  	Match m = Regex.Match (line' ENV_PATTERN);  	if (m.Success) {  		String label = m.Groups [1].Value.Trim ();  		String value = m.Groups [2].Value.Trim ();  		if (label.Length > 0) {  			if (Device.EnvironmentVariables.ContainsKey (label)) {  				Device.EnvironmentVariables [label] = value;  			}  			else {  				Device.EnvironmentVariables.Add (label' value);  			}  		}  	}  }  
Magic Number,Managed.Adb,EnvironmentVariablesReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\EnvironmentVariablesReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	String label = m.Groups [1].Value.Trim ();  	String value = m.Groups [2].Value.Trim ();  	if (label.Length > 0) {  		if (Device.EnvironmentVariables.ContainsKey (label)) {  			Device.EnvironmentVariables [label] = value;  		}  		else {  			Device.EnvironmentVariables.Add (label' value);  		}  	}  }  
Magic Number,Managed.Adb,GetPropReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\GetPropReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	if (String.IsNullOrEmpty (line) || line.StartsWith ("#") || line.StartsWith ("$")) {  		continue;  	}  	var m = line.Match (GETPROP_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		String label = m.Groups [1].Value.Trim ();  		String value = m.Groups [2].Value.Trim ();  		if (label.Length > 0) {  			Device.Properties.Add (label' value);  		}  	}  }  
Magic Number,Managed.Adb,GetPropReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\GetPropReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	String label = m.Groups [1].Value.Trim ();  	String value = m.Groups [2].Value.Trim ();  	if (label.Length > 0) {  		Device.Properties.Add (label' value);  	}  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	// no need to handle empty lines.  	if (line.Length == 0) {  		continue;  	}  	// run the line through the regexp  	var m = line.Trim ().Match (FileListingService.LS_PATTERN_EX' RegexOptions.Compiled);  	if (!m.Success) {  		Log.v ("madb"' "no match on file pattern: {0}"' line);  		continue;  	}  	// get the name  	String name = m.Groups [9].Value;  	if (String.Compare (name' "."' true) == 0 || String.Compare (name' ".."' true) == 0) {  		// we don't care if the entry is a "." or ".."  		continue;  	}  	// get the rest of the groups  	String permissions = m.Groups [1].Value;  	String owner = m.Groups [2].Value;  	String group = m.Groups [3].Value;  	bool isExec = String.Compare (m.Groups [10].Value' "*"' true) == 0;  	long size = 0;  	String sizeData = m.Groups [4].Value.Trim ();  	long.TryParse (String.IsNullOrEmpty (sizeData) ? "0" : sizeData' out size);  	String date1 = m.Groups [5].Value.Trim ();  	String date2 = m.Groups [6].Value.Trim ();  	String date3 = m.Groups [7].Value.Trim ();  	DateTime date = DateTime.Now.GetEpoch ();  	String time = m.Groups [8].Value.Trim ();  	if (String.IsNullOrEmpty (time)) {  		time = date.ToString ("HH:mm");  	}  	if (date1.Length == 3) {  		// check if we don't have a year and use current if we don't  		String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  	}  	else if (date1.Length == 4) {  		date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  	}  	String info = null;  	String linkName = null;  	// and the type  	FileListingService.FileTypes objectType = FileListingService.FileTypes.Other;  	switch (permissions [0]) {  	case '-':  		objectType = FileListingService.FileTypes.File;  		break;  	case 'b':  		objectType = FileListingService.FileTypes.Block;  		break;  	case 'c':  		objectType = FileListingService.FileTypes.Character;  		break;  	case 'd':  		objectType = FileListingService.FileTypes.Directory;  		break;  	case 'l':  		objectType = FileListingService.FileTypes.Link;  		break;  	case 's':  		objectType = FileListingService.FileTypes.Socket;  		break;  	case 'p':  		objectType = FileListingService.FileTypes.FIFO;  		break;  	}  	// now check what we may be linking to  	if (objectType == FileListingService.FileTypes.Link) {  		String[] segments = name.Split (new string[] {  			" -> "  		}' StringSplitOptions.RemoveEmptyEntries);  		// we should have 2 segments  		if (segments.Length == 2) {  			// update the entry name to not contain the link  			name = segments [0];  			// and the link name  			info = segments [1];  			// now get the path to the link  			String[] pathSegments = info.Split (new String[] {  				FileListingService.FILE_SEPARATOR  			}' StringSplitOptions.RemoveEmptyEntries);  			if (pathSegments.Length == 1) {  				// the link is to something in the same directory'  				// unless the link is ..  				if (String.Compare (".."' pathSegments [0]' false) == 0) {  					// set the type and we're done.  					objectType = FileListingService.FileTypes.DirectoryLink;  				}  				else {  					// either we found the object already  					// or we'll find it later.  				}  			}  		}  		else {  		}  		linkName = info;  		// add an arrow in front to specify it's a link.  		info = String.Format (LINK_FORMAT' info);  	}  	// get the entry' either from an existing one' or a new one  	FileEntry entry = GetExistingEntry (name);  	if (entry == null) {  		entry = new FileEntry (Parent.Device' Parent' name' objectType' false/* isRoot */);  	}  	// add some misc info  	entry.Permissions = new FilePermissions (permissions);  	entry.Size = size;  	entry.Date = date;  	entry.Owner = owner;  	entry.Group = group;  	entry.IsExecutable = isExec;  	entry.LinkName = linkName;  	if (objectType == FileListingService.FileTypes.Link) {  		entry.Info = info;  	}  	Entries.Add (entry);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 3) {  	// check if we don't have a year and use current if we don't  	String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  }  else if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 3) {  	// check if we don't have a year and use current if we don't  	String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  }  else if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 3) {  	// check if we don't have a year and use current if we don't  	String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  }  else if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 3) {  	// check if we don't have a year and use current if we don't  	String tyear = String.IsNullOrEmpty (date3) ? DateTime.Now.Year.ToString () : date3;  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  }  else if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' tyear' time)' "MMM-dd-yyyy HH:mm"' CultureInfo.CurrentCulture);  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (date1.Length == 4) {  	date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: date = DateTime.ParseExact (String.Format ("{0}-{1}-{2} {3}"' date1' date2.PadLeft (2' '0')' date3' time)' "yyyy-MM-dd HH:mm"' CultureInfo.CurrentCulture);  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (objectType == FileListingService.FileTypes.Link) {  	String[] segments = name.Split (new string[] {  		" -> "  	}' StringSplitOptions.RemoveEmptyEntries);  	// we should have 2 segments  	if (segments.Length == 2) {  		// update the entry name to not contain the link  		name = segments [0];  		// and the link name  		info = segments [1];  		// now get the path to the link  		String[] pathSegments = info.Split (new String[] {  			FileListingService.FILE_SEPARATOR  		}' StringSplitOptions.RemoveEmptyEntries);  		if (pathSegments.Length == 1) {  			// the link is to something in the same directory'  			// unless the link is ..  			if (String.Compare (".."' pathSegments [0]' false) == 0) {  				// set the type and we're done.  				objectType = FileListingService.FileTypes.DirectoryLink;  			}  			else {  				// either we found the object already  				// or we'll find it later.  			}  		}  	}  	else {  	}  	linkName = info;  	// add an arrow in front to specify it's a link.  	info = String.Format (LINK_FORMAT' info);  }  
Magic Number,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (segments.Length == 2) {  	// update the entry name to not contain the link  	name = segments [0];  	// and the link name  	info = segments [1];  	// now get the path to the link  	String[] pathSegments = info.Split (new String[] {  		FileListingService.FILE_SEPARATOR  	}' StringSplitOptions.RemoveEmptyEntries);  	if (pathSegments.Length == 1) {  		// the link is to something in the same directory'  		// unless the link is ..  		if (String.Compare (".."' pathSegments [0]' false) == 0) {  			// set the type and we're done.  			objectType = FileListingService.FileTypes.DirectoryLink;  		}  		else {  			// either we found the object already  			// or we'll find it later.  		}  	}  }  else {  }  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	var m = line.Match (RE_MOUNTPOINT_PATTERN' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);  	if (m.Success) {  		String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  		String name = m.Groups [2].Value.Trim ();  		String fs = m.Groups [3].Value.Trim ();  		bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  		MountPoint mnt = new MountPoint (block' name' fs' ro);  		String key = name.Substring (1);  		// currently does not support multiple mounts to the same location...  		if (!Device.MountPoints.ContainsKey (name)) {  			Device.MountPoints.Add (name' mnt);  		}  	}  });  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	var m = line.Match (RE_MOUNTPOINT_PATTERN' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);  	if (m.Success) {  		String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  		String name = m.Groups [2].Value.Trim ();  		String fs = m.Groups [3].Value.Trim ();  		bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  		MountPoint mnt = new MountPoint (block' name' fs' ro);  		String key = name.Substring (1);  		// currently does not support multiple mounts to the same location...  		if (!Device.MountPoints.ContainsKey (name)) {  			Device.MountPoints.Add (name' mnt);  		}  	}  });  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	var m = line.Match (RE_MOUNTPOINT_PATTERN' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.IgnorePatternWhitespace);  	if (m.Success) {  		String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  		String name = m.Groups [2].Value.Trim ();  		String fs = m.Groups [3].Value.Trim ();  		bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  		MountPoint mnt = new MountPoint (block' name' fs' ro);  		String key = name.Substring (1);  		// currently does not support multiple mounts to the same location...  		if (!Device.MountPoints.ContainsKey (name)) {  			Device.MountPoints.Add (name' mnt);  		}  	}  });  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  	String name = m.Groups [2].Value.Trim ();  	String fs = m.Groups [3].Value.Trim ();  	bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  	MountPoint mnt = new MountPoint (block' name' fs' ro);  	String key = name.Substring (1);  	// currently does not support multiple mounts to the same location...  	if (!Device.MountPoints.ContainsKey (name)) {  		Device.MountPoints.Add (name' mnt);  	}  }  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  	String name = m.Groups [2].Value.Trim ();  	String fs = m.Groups [3].Value.Trim ();  	bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  	MountPoint mnt = new MountPoint (block' name' fs' ro);  	String key = name.Substring (1);  	// currently does not support multiple mounts to the same location...  	if (!Device.MountPoints.ContainsKey (name)) {  		Device.MountPoints.Add (name' mnt);  	}  }  
Magic Number,Managed.Adb,MountPointReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MountPointReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	String block = m.Groups [1].Value.Trim ().Replace ("//"' "/");  	String name = m.Groups [2].Value.Trim ();  	String fs = m.Groups [3].Value.Trim ();  	bool ro = String.Compare ("ro"' m.Groups [4].Value.Trim ()' false) == 0;  	MountPoint mnt = new MountPoint (block' name' fs' ro);  	String key = name.Substring (1);  	// currently does not support multiple mounts to the same location...  	if (!Device.MountPoints.ContainsKey (name)) {  		Device.MountPoints.Add (name' mnt);  	}  }  
Magic Number,Managed.Adb,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MultilineReceiver.cs,AddOutput,The following statement contains a magic number: if (!IsCancelled) {  	String s = null;  	try {  		s = Encoding.GetEncoding (ENCODING).GetString (data' offset' length);  		//$NON-NLS-1$  	}  	catch (DecoderFallbackException) {  		// normal encoding didn't work' try the default one  		s = Encoding.Default.GetString (data' offset' length);  	}  	// ok we've got a string  	if (!String.IsNullOrEmpty (s)) {  		// if we had an unfinished line we add it.  		if (!String.IsNullOrEmpty (UnfinishedLine)) {  			s = UnfinishedLine + s;  			UnfinishedLine = null;  		}  		// now we split the lines  		//Lines.Clear ( );  		int start = 0;  		do {  			int index = s.IndexOf (NEWLINE' start);  			//$NON-NLS-1$  			// if \r\n was not found' this is an unfinished line  			// and we store it to be processed for the next packet  			if (index == -1) {  				UnfinishedLine = s.Substring (start);  				break;  			}  			// so we found a \r\n;  			// extract the line  			String line = s.Substring (start' index - start);  			if (TrimLines) {  				line = line.Trim ();  			}  			Lines.Add (line);  			// move start to after the \r\n we found  			start = index + 2;  		}  		while (true);  	}  }  
Magic Number,Managed.Adb,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MultilineReceiver.cs,AddOutput,The following statement contains a magic number: if (!String.IsNullOrEmpty (s)) {  	// if we had an unfinished line we add it.  	if (!String.IsNullOrEmpty (UnfinishedLine)) {  		s = UnfinishedLine + s;  		UnfinishedLine = null;  	}  	// now we split the lines  	//Lines.Clear ( );  	int start = 0;  	do {  		int index = s.IndexOf (NEWLINE' start);  		//$NON-NLS-1$  		// if \r\n was not found' this is an unfinished line  		// and we store it to be processed for the next packet  		if (index == -1) {  			UnfinishedLine = s.Substring (start);  			break;  		}  		// so we found a \r\n;  		// extract the line  		String line = s.Substring (start' index - start);  		if (TrimLines) {  			line = line.Trim ();  		}  		Lines.Add (line);  		// move start to after the \r\n we found  		start = index + 2;  	}  	while (true);  }  
Magic Number,Managed.Adb,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MultilineReceiver.cs,AddOutput,The following statement contains a magic number: do {  	int index = s.IndexOf (NEWLINE' start);  	//$NON-NLS-1$  	// if \r\n was not found' this is an unfinished line  	// and we store it to be processed for the next packet  	if (index == -1) {  		UnfinishedLine = s.Substring (start);  		break;  	}  	// so we found a \r\n;  	// extract the line  	String line = s.Substring (start' index - start);  	if (TrimLines) {  		line = line.Trim ();  	}  	Lines.Add (line);  	// move start to after the \r\n we found  	start = index + 2;  }  while (true);  
Magic Number,Managed.Adb,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\MultilineReceiver.cs,AddOutput,The following statement contains a magic number: start = index + 2;  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: lines.ForEach (line =>  {  	if (line.Trim ().Length > 0) {  		var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = null;  			if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  				entry = PackageManager.Packages [m.Groups [1].Value];  				if (entry != null) {  					entry.Info = m.Groups [2].Value;  				}  			}  			else {  				try {  					entry = FileEntry.Find (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  				catch (PermissionDeniedException) {  					// root required for device packages  					entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  					entry.Info = m.Groups [2].Value;  					PackageManager.Packages.Add (m.Groups [2].Value' entry);  				}  			}  		}  	}  });  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Trim ().Length > 0) {  	var m = line.Match (PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = null;  		if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  			entry = PackageManager.Packages [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  			}  		}  		else {  			try {  				entry = FileEntry.Find (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  			catch (PermissionDeniedException) {  				// root required for device packages  				entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  				entry.Info = m.Groups [2].Value;  				PackageManager.Packages.Add (m.Groups [2].Value' entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = null;  	if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  		entry = PackageManager.Packages [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  		}  	}  	else {  		try {  			entry = FileEntry.Find (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  		catch (PermissionDeniedException) {  			// root required for device packages  			entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  			entry.Info = m.Groups [2].Value;  			PackageManager.Packages.Add (m.Groups [2].Value' entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (PackageManager.Packages.ContainsKey (m.Groups [2].Value)) {  	entry = PackageManager.Packages [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  	}  }  else {  	try {  		entry = FileEntry.Find (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  	catch (PermissionDeniedException) {  		// root required for device packages  		entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  		entry.Info = m.Groups [2].Value;  		PackageManager.Packages.Add (m.Groups [2].Value' entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (entry != null) {  	entry.Info = m.Groups [2].Value;  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: entry.Info = m.Groups [2].Value;  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: try {  	entry = FileEntry.Find (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  catch (PermissionDeniedException) {  	// root required for device packages  	entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: try {  	entry = FileEntry.Find (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  catch (PermissionDeniedException) {  	// root required for device packages  	entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: try {  	entry = FileEntry.Find (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  catch (PermissionDeniedException) {  	// root required for device packages  	entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: try {  	entry = FileEntry.Find (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  catch (PermissionDeniedException) {  	// root required for device packages  	entry = FileEntry.CreateNoPermissions (Device' m.Groups [1].Value);  	entry.Info = m.Groups [2].Value;  	PackageManager.Packages.Add (m.Groups [2].Value' entry);  }  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: entry.Info = m.Groups [2].Value;  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: PackageManager.Packages.Add (m.Groups [2].Value' entry);  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: entry.Info = m.Groups [2].Value;  
Magic Number,Managed.Adb,PackageManagerReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: PackageManager.Packages.Add (m.Groups [2].Value' entry);  
Magic Number,Managed.Adb,PackageManagerListingReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: foreach (String line in lines) {  	if (line.Length > 0) {  		// get the filepath and package from the line  		Match m = Regex.Match (line' PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  		if (m.Success) {  			// get the children with that path  			FileEntry entry = Map [m.Groups [1].Value];  			if (entry != null) {  				entry.Info = m.Groups [2].Value;  				Receiver.RefreshEntry (entry);  			}  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerListingReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (line.Length > 0) {  	// get the filepath and package from the line  	Match m = Regex.Match (line' PackageManagerReceiver.PM_PACKAGE_PATTERN' RegexOptions.Compiled);  	if (m.Success) {  		// get the children with that path  		FileEntry entry = Map [m.Groups [1].Value];  		if (entry != null) {  			entry.Info = m.Groups [2].Value;  			Receiver.RefreshEntry (entry);  		}  	}  }  
Magic Number,Managed.Adb,PackageManagerListingReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (m.Success) {  	// get the children with that path  	FileEntry entry = Map [m.Groups [1].Value];  	if (entry != null) {  		entry.Info = m.Groups [2].Value;  		Receiver.RefreshEntry (entry);  	}  }  
Magic Number,Managed.Adb,PackageManagerListingReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: if (entry != null) {  	entry.Info = m.Groups [2].Value;  	Receiver.RefreshEntry (entry);  }  
Magic Number,Managed.Adb,PackageManagerListingReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\PackageManagerReceiver.cs,ProcessNewLines,The following statement contains a magic number: entry.Info = m.Groups [2].Value;  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateRequest,The following statement contains a magic number: Array.Copy (command' 0' array' 0' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateRequest,The following statement contains a magic number: value.Swap32bitsToArray (array' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateFileRequest,The following statement contains a magic number: Array.Copy (command' 0' array' 0' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateFileRequest,The following statement contains a magic number: path.Length.Swap32bitsToArray (array' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateFileRequest,The following statement contains a magic number: Array.Copy (path' 0' array' 8' path.Length);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateSendFileRequest,The following statement contains a magic number: Array.Copy (command' 0' array' 0' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateSendFileRequest,The following statement contains a magic number: (path.Length + modeContent.Length).Swap32bitsToArray (array' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateSendFileRequest,The following statement contains a magic number: Array.Copy (path' 0' array' 8' path.Length);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,CreateSendFileRequest,The following statement contains a magic number: Array.Copy (modeContent' 0' array' 8 + path.Length' modeContent.Length);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	byte[] remotePathContent = remotePath.GetBytes (AdbHelper.DEFAULT_ENCODING);  	if (remotePathContent.Length > REMOTE_PATH_MAX_LENGTH) {  		return new SyncResult (ErrorCodeHelper.RESULT_REMOTE_PATH_LENGTH);  	}  	// this shouldn't happen but still...  	if (!File.Exists (local)) {  		return new SyncResult (ErrorCodeHelper.RESULT_NO_LOCAL_FILE);  	}  	// create the stream to read the file  	fs = new FileStream (local' System.IO.FileMode.Open' FileAccess.Read);  	// create the header for the action  	msg = CreateSendFileRequest (SEND.GetBytes ()' remotePathContent' (FileMode)0644);  }  catch (EncoderFallbackException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_REMOTE_PATH_ENCODING' e);  }  catch (FileNotFoundException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_FILE_READ_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: msg = CreateSendFileRequest (SEND.GetBytes ()' remotePathContent' (FileMode)0644);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: if (DataBuffer == null) {  	DataBuffer = new byte[SYNC_DATA_MAX + 8];  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: DataBuffer = new byte[SYNC_DATA_MAX + 8];  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: while (true) {  	// check if we're canceled  	if (monitor.IsCanceled) {  		return new SyncResult (ErrorCodeHelper.RESULT_CANCELED);  	}  	// read up to SYNC_DATA_MAX  	int readCount = 0;  	try {  		readCount = fs.Read (DataBuffer' 8' SYNC_DATA_MAX);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_FILE_READ_ERROR' e);  	}  	if (readCount == 0) {  		// we reached the end of the file  		break;  	}  	// now send the data to the device  	// first write the amount read  	ArrayHelper.Swap32bitsToArray (readCount' DataBuffer' 4);  	// now write it  	try {  		AdbHelper.Instance.Write (Channel' DataBuffer' readCount + 8' timeOut);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  	}  	// and advance the monitor  	monitor.Advance (readCount);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: while (true) {  	// check if we're canceled  	if (monitor.IsCanceled) {  		return new SyncResult (ErrorCodeHelper.RESULT_CANCELED);  	}  	// read up to SYNC_DATA_MAX  	int readCount = 0;  	try {  		readCount = fs.Read (DataBuffer' 8' SYNC_DATA_MAX);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_FILE_READ_ERROR' e);  	}  	if (readCount == 0) {  		// we reached the end of the file  		break;  	}  	// now send the data to the device  	// first write the amount read  	ArrayHelper.Swap32bitsToArray (readCount' DataBuffer' 4);  	// now write it  	try {  		AdbHelper.Instance.Write (Channel' DataBuffer' readCount + 8' timeOut);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  	}  	// and advance the monitor  	monitor.Advance (readCount);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: while (true) {  	// check if we're canceled  	if (monitor.IsCanceled) {  		return new SyncResult (ErrorCodeHelper.RESULT_CANCELED);  	}  	// read up to SYNC_DATA_MAX  	int readCount = 0;  	try {  		readCount = fs.Read (DataBuffer' 8' SYNC_DATA_MAX);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_FILE_READ_ERROR' e);  	}  	if (readCount == 0) {  		// we reached the end of the file  		break;  	}  	// now send the data to the device  	// first write the amount read  	ArrayHelper.Swap32bitsToArray (readCount' DataBuffer' 4);  	// now write it  	try {  		AdbHelper.Instance.Write (Channel' DataBuffer' readCount + 8' timeOut);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  	}  	// and advance the monitor  	monitor.Advance (readCount);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	readCount = fs.Read (DataBuffer' 8' SYNC_DATA_MAX);  }  catch (IOException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_FILE_READ_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: readCount = fs.Read (DataBuffer' 8' SYNC_DATA_MAX);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: ArrayHelper.Swap32bitsToArray (readCount' DataBuffer' 4);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	AdbHelper.Instance.Write (Channel' DataBuffer' readCount + 8' timeOut);  }  catch (IOException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: AdbHelper.Instance.Write (Channel' DataBuffer' readCount + 8' timeOut);  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	// create the DONE message  	long time = DateTime.Now.CurrentTimeMillis () / 1000;  	msg = CreateRequest (DONE' (int)time);  	// and send it.  	AdbHelper.Instance.Write (Channel' msg' -1' timeOut);  	// read the result' in a byte array containing 2 ints  	// (id' size)  	byte[] result = new byte[8];  	AdbHelper.Instance.Read (Channel' result' -1/* full length */' timeOut);  	if (!CheckResult (result' OKAY.GetBytes ())) {  		if (CheckResult (result' FAIL.GetBytes ())) {  			// read some error message...  			int len = ArrayHelper.Swap32bitFromArray (result' 4);  			AdbHelper.Instance.Read (Channel' DataBuffer' len' timeOut);  			// output the result?  			String message = DataBuffer.GetString (0' len);  			Log.e ("ddms"' "transfer error: " + message);  			return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR' message);  		}  		return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR);  	}  }  catch (IOException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	// create the DONE message  	long time = DateTime.Now.CurrentTimeMillis () / 1000;  	msg = CreateRequest (DONE' (int)time);  	// and send it.  	AdbHelper.Instance.Write (Channel' msg' -1' timeOut);  	// read the result' in a byte array containing 2 ints  	// (id' size)  	byte[] result = new byte[8];  	AdbHelper.Instance.Read (Channel' result' -1/* full length */' timeOut);  	if (!CheckResult (result' OKAY.GetBytes ())) {  		if (CheckResult (result' FAIL.GetBytes ())) {  			// read some error message...  			int len = ArrayHelper.Swap32bitFromArray (result' 4);  			AdbHelper.Instance.Read (Channel' DataBuffer' len' timeOut);  			// output the result?  			String message = DataBuffer.GetString (0' len);  			Log.e ("ddms"' "transfer error: " + message);  			return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR' message);  		}  		return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR);  	}  }  catch (IOException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: try {  	// create the DONE message  	long time = DateTime.Now.CurrentTimeMillis () / 1000;  	msg = CreateRequest (DONE' (int)time);  	// and send it.  	AdbHelper.Instance.Write (Channel' msg' -1' timeOut);  	// read the result' in a byte array containing 2 ints  	// (id' size)  	byte[] result = new byte[8];  	AdbHelper.Instance.Read (Channel' result' -1/* full length */' timeOut);  	if (!CheckResult (result' OKAY.GetBytes ())) {  		if (CheckResult (result' FAIL.GetBytes ())) {  			// read some error message...  			int len = ArrayHelper.Swap32bitFromArray (result' 4);  			AdbHelper.Instance.Read (Channel' DataBuffer' len' timeOut);  			// output the result?  			String message = DataBuffer.GetString (0' len);  			Log.e ("ddms"' "transfer error: " + message);  			return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR' message);  		}  		return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR);  	}  }  catch (IOException e) {  	return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: if (!CheckResult (result' OKAY.GetBytes ())) {  	if (CheckResult (result' FAIL.GetBytes ())) {  		// read some error message...  		int len = ArrayHelper.Swap32bitFromArray (result' 4);  		AdbHelper.Instance.Read (Channel' DataBuffer' len' timeOut);  		// output the result?  		String message = DataBuffer.GetString (0' len);  		Log.e ("ddms"' "transfer error: " + message);  		return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR' message);  	}  	return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPushFile,The following statement contains a magic number: if (CheckResult (result' FAIL.GetBytes ())) {  	// read some error message...  	int len = ArrayHelper.Swap32bitFromArray (result' 4);  	AdbHelper.Instance.Read (Channel' DataBuffer' len' timeOut);  	// output the result?  	String message = DataBuffer.GetString (0' len);  	Log.e ("ddms"' "transfer error: " + message);  	return new SyncResult (ErrorCodeHelper.RESULT_UNKNOWN_ERROR' message);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPullFile,The following statement contains a magic number: using (fos) {  	// loop to get data until we're done.  	while (true) {  		// check if we're cancelled  		if (monitor.IsCanceled) {  			return new SyncResult (ErrorCodeHelper.RESULT_CANCELED);  		}  		// if we're done' we stop the loop  		if (CheckResult (pullResult' DONE.GetBytes ())) {  			break;  		}  		if (CheckResult (pullResult' DATA.GetBytes ()) == false) {  			// hmm there's an error  			return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR);  		}  		int length = ArrayHelper.Swap32bitFromArray (pullResult' 4);  		if (length > SYNC_DATA_MAX) {  			// buffer overrun!  			// error and exit  			return new SyncResult (ErrorCodeHelper.RESULT_BUFFER_OVERRUN);  		}  		try {  			// now read the length we received  			AdbHelper.Instance.Read (Channel' data' length' timeOut);  			// get the header for the next packet.  			AdbHelper.Instance.Read (Channel' pullResult' -1' timeOut);  		}  		catch (IOException e) {  			Console.WriteLine (e);  			return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  		}  		// write the content in the file  		try {  			fos.Write (data' 0' data.Length);  		}  		catch (IOException e) {  			return new SyncResult (ErrorCodeHelper.RESULT_FILE_WRITE_ERROR' e);  		}  		monitor.Advance (length);  	}  	try {  		fos.Flush ();  	}  	catch (IOException e) {  		Console.WriteLine (e);  		return new SyncResult (ErrorCodeHelper.RESULT_FILE_WRITE_ERROR' e);  	}  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,DoPullFile,The following statement contains a magic number: while (true) {  	// check if we're cancelled  	if (monitor.IsCanceled) {  		return new SyncResult (ErrorCodeHelper.RESULT_CANCELED);  	}  	// if we're done' we stop the loop  	if (CheckResult (pullResult' DONE.GetBytes ())) {  		break;  	}  	if (CheckResult (pullResult' DATA.GetBytes ()) == false) {  		// hmm there's an error  		return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR);  	}  	int length = ArrayHelper.Swap32bitFromArray (pullResult' 4);  	if (length > SYNC_DATA_MAX) {  		// buffer overrun!  		// error and exit  		return new SyncResult (ErrorCodeHelper.RESULT_BUFFER_OVERRUN);  	}  	try {  		// now read the length we received  		AdbHelper.Instance.Read (Channel' data' length' timeOut);  		// get the header for the next packet.  		AdbHelper.Instance.Read (Channel' pullResult' -1' timeOut);  	}  	catch (IOException e) {  		Console.WriteLine (e);  		return new SyncResult (ErrorCodeHelper.RESULT_CONNECTION_ERROR' e);  	}  	// write the content in the file  	try {  		fos.Write (data' 0' data.Length);  	}  	catch (IOException e) {  		return new SyncResult (ErrorCodeHelper.RESULT_FILE_WRITE_ERROR' e);  	}  	monitor.Advance (length);  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,ReadMode,The following statement contains a magic number: try {  	// create the stat request message.  	byte[] msg = CreateFileRequest (STAT' path);  	AdbHelper.Instance.Write (Channel' msg' -1/* full length */' DdmPreferences.Timeout);  	// read the result' in a byte array containing 4 ints  	// (id' mode' size' time)  	byte[] statResult = new byte[16];  	AdbHelper.Instance.Read (Channel' statResult' -1/* full length */' DdmPreferences.Timeout);  	// check we have the proper data back  	if (CheckResult (statResult' Encoding.Default.GetBytes (STAT)) == false) {  		return FileMode.UNKNOWN;  	}  	// we return the mode (2nd int in the array)  	return (FileMode)statResult.Swap32bitFromArray (4);  }  catch (IOException e) {  	Log.w ("SyncService"' e);  	return FileMode.UNKNOWN;  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,ReadMode,The following statement contains a magic number: try {  	// create the stat request message.  	byte[] msg = CreateFileRequest (STAT' path);  	AdbHelper.Instance.Write (Channel' msg' -1/* full length */' DdmPreferences.Timeout);  	// read the result' in a byte array containing 4 ints  	// (id' mode' size' time)  	byte[] statResult = new byte[16];  	AdbHelper.Instance.Read (Channel' statResult' -1/* full length */' DdmPreferences.Timeout);  	// check we have the proper data back  	if (CheckResult (statResult' Encoding.Default.GetBytes (STAT)) == false) {  		return FileMode.UNKNOWN;  	}  	// we return the mode (2nd int in the array)  	return (FileMode)statResult.Swap32bitFromArray (4);  }  catch (IOException e) {  	Log.w ("SyncService"' e);  	return FileMode.UNKNOWN;  }  
Magic Number,Managed.Adb,SyncService,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\SyncService.cs,ReadMode,The following statement contains a magic number: return (FileMode)statResult.Swap32bitFromArray (4);  
Magic Number,Managed.Adb.Conversion,BigEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\BigEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: for (int i = 0; i < bytes; i++) {  	buffer [endOffset - i] = unchecked((byte)(value & 0xff));  	value = value >> 8;  }  
Magic Number,Managed.Adb.Conversion,BigEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\BigEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: value = value >> 8;  
Magic Number,Managed.Adb.Conversion,BigEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\BigEndianBitConverter.cs,FromBytes,The following statement contains a magic number: for (int i = 0; i < bytesToConvert; i++) {  	ret = unchecked((ret << 8) | buffer [startIndex + i]);  }  
Magic Number,Managed.Adb.Conversion,BigEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\BigEndianBitConverter.cs,FromBytes,The following statement contains a magic number: ret = unchecked((ret << 8) | buffer [startIndex + i]);  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent == 0) {  	exponent++;  }  // Normal numbers; leave exponent as it is but add extra  // bit to the front of the mantissa  else {  	mantissa = mantissa | (1L << 52);  }  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: mantissa = mantissa | (1L << 52);  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: exponent -= 1075;  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent < 0) {  	for (int i = 0; i < -exponent; i++)  		ad.MultiplyBy (5);  	ad.Shift (-exponent);  }  // Otherwise' we need to repeatedly multiply by 2  else {  	for (int i = 0; i < exponent; i++)  		ad.MultiplyBy (2);  }  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: if (exponent < 0) {  	for (int i = 0; i < -exponent; i++)  		ad.MultiplyBy (5);  	ad.Shift (-exponent);  }  // Otherwise' we need to repeatedly multiply by 2  else {  	for (int i = 0; i < exponent; i++)  		ad.MultiplyBy (2);  }  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: for (int i = 0; i < -exponent; i++)  	ad.MultiplyBy (5);  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: ad.MultiplyBy (5);  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: for (int i = 0; i < exponent; i++)  	ad.MultiplyBy (2);  
Magic Number,Managed.Adb.Conversion,DoubleConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\DoubleConverter.cs,ToExactString,The following statement contains a magic number: ad.MultiplyBy (2);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToChar,The following statement contains a magic number: return unchecked((char)(CheckedFromBytes (value' startIndex' 2)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToInt16,The following statement contains a magic number: return unchecked((short)(CheckedFromBytes (value' startIndex' 2)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToInt32,The following statement contains a magic number: return unchecked((int)(CheckedFromBytes (value' startIndex' 4)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToInt64,The following statement contains a magic number: return CheckedFromBytes (value' startIndex' 8);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToUInt16,The following statement contains a magic number: return unchecked((ushort)(CheckedFromBytes (value' startIndex' 2)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToUInt32,The following statement contains a magic number: return unchecked((uint)(CheckedFromBytes (value' startIndex' 4)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToUInt64,The following statement contains a magic number: return unchecked((ulong)(CheckedFromBytes (value' startIndex' 8)));  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	parts [i] = ToInt32 (value' startIndex + i * 4);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	parts [i] = ToInt32 (value' startIndex + i * 4);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,ToDecimal,The following statement contains a magic number: parts [i] = ToInt32 (value' startIndex + i * 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' bytes' i * 4);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' bytes' i * 4);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' bytes' i * 4);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: CopyBytesImpl (parts [i]' 4' bytes' i * 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: CopyBytesImpl (parts [i]' 4' bytes' i * 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' buffer' i * 4 + index);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' buffer' i * 4 + index);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	CopyBytesImpl (parts [i]' 4' buffer' i * 4 + index);  }  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytesImpl (parts [i]' 4' buffer' i * 4 + index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytesImpl (parts [i]' 4' buffer' i * 4 + index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 2);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (DoubleToInt64Bits (value)' 8);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 2);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 8);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (SingleToInt32Bits (value)' 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 2);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (value' 4);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,GetBytes,The following statement contains a magic number: return GetBytes (unchecked((long)value)' 8);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 2' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (DoubleToInt64Bits (value)' 8' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 2' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 4' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 8' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (SingleToInt32Bits (value)' 4' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 2' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (value' 4' buffer' index);  
Magic Number,Managed.Adb.Conversion,EndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\EndianBitConverter.cs,CopyBytes,The following statement contains a magic number: CopyBytes (unchecked((long)value)' 8' buffer' index);  
Magic Number,Managed.Adb.Conversion,LittleEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\LittleEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: for (int i = 0; i < bytes; i++) {  	buffer [i + index] = unchecked((byte)(value & 0xff));  	value = value >> 8;  }  
Magic Number,Managed.Adb.Conversion,LittleEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\LittleEndianBitConverter.cs,CopyBytesImpl,The following statement contains a magic number: value = value >> 8;  
Magic Number,Managed.Adb.Conversion,LittleEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\LittleEndianBitConverter.cs,FromBytes,The following statement contains a magic number: for (int i = 0; i < bytesToConvert; i++) {  	ret = unchecked((ret << 8) | buffer [startIndex + bytesToConvert - 1 - i]);  }  
Magic Number,Managed.Adb.Conversion,LittleEndianBitConverter,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Conversion\LittleEndianBitConverter.cs,FromBytes,The following statement contains a magic number: ret = unchecked((ret << 8) | buffer [startIndex + bytesToConvert - 1 - i]);  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,CheckInvalidPathChars,The following statement contains a magic number: for (int i = 0; i < path.Length; i++) {  	int num2 = path [i];  	if (((num2 == 0x22) || (num2 == 60)) || (((num2 == 0x3e) || (num2 == 0x7c)) || (num2 < 0x20))) {  		throw new ArgumentException ("Path contains invalid characters");  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,CheckInvalidPathChars,The following statement contains a magic number: if (((num2 == 0x22) || (num2 == 60)) || (((num2 == 0x3e) || (num2 == 0x7c)) || (num2 < 0x20))) {  	throw new ArgumentException ("Path contains invalid characters");  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 1) && IsDirectorySeparator (path [0])) {  	num = 1;  	if ((length >= 2) && IsDirectorySeparator (path [1])) {  		num = 2;  		int num3 = 2;  		while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  			num++;  		}  	}  	return num;  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 1) && IsDirectorySeparator (path [0])) {  	num = 1;  	if ((length >= 2) && IsDirectorySeparator (path [1])) {  		num = 2;  		int num3 = 2;  		while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  			num++;  		}  	}  	return num;  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 1) && IsDirectorySeparator (path [0])) {  	num = 1;  	if ((length >= 2) && IsDirectorySeparator (path [1])) {  		num = 2;  		int num3 = 2;  		while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  			num++;  		}  	}  	return num;  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2) && IsDirectorySeparator (path [1])) {  	num = 2;  	int num3 = 2;  	while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2) && IsDirectorySeparator (path [1])) {  	num = 2;  	int num3 = 2;  	while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2) && IsDirectorySeparator (path [1])) {  	num = 2;  	int num3 = 2;  	while ((num < length) && (((path [num] != DirectorySeparatorChar) && (path [num] != AltDirectorySeparatorChar)) || (--num3 > 0))) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: num = 2;  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2)) {  	num = 2;  	if ((length >= 3) && IsDirectorySeparator (path [2])) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2)) {  	num = 2;  	if ((length >= 3) && IsDirectorySeparator (path [2])) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2)) {  	num = 2;  	if ((length >= 3) && IsDirectorySeparator (path [2])) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 2)) {  	num = 2;  	if ((length >= 3) && IsDirectorySeparator (path [2])) {  		num++;  	}  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: num = 2;  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 3) && IsDirectorySeparator (path [2])) {  	num++;  }  
Magic Number,Managed.Adb.IO,LinuxPath,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\LinuxPath.cs,GetRootLength,The following statement contains a magic number: if ((length >= 3) && IsDirectorySeparator (path [2])) {  	num++;  }  
Magic Number,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The following statement contains a magic number: try {  	Bitmap bmp = image as Bitmap;  	BitmapData bmpData = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppRgb565);  	using (FileStream fs = new FileStream (file' FileMode.Create' FileAccess.Write' FileShare.Read)) {  		byte[] buffer = new byte[307200];  		Marshal.Copy (bmpData.Scan0' buffer' 0' buffer.Length);  		fs.Write (buffer' 0' buffer.Length);  	}  	bmp.UnlockBits (bmpData);  	return true;  }  catch {  	return false;  }  
Magic Number,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The following statement contains a magic number: using (FileStream fs = new FileStream (file' FileMode.Create' FileAccess.Write' FileShare.Read)) {  	byte[] buffer = new byte[307200];  	Marshal.Copy (bmpData.Scan0' buffer' 0' buffer.Length);  	fs.Write (buffer' 0' buffer.Length);  }  
Magic Number,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The following statement contains a magic number: try {  	Bitmap bmp = image as Bitmap;  	BitmapData bmpData = bmp.LockBits (new Rectangle (0' 0' bmp.Width' bmp.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppRgb565);  	using (stream) {  		byte[] buffer = new byte[307200];  		Marshal.Copy (bmpData.Scan0' buffer' 0' buffer.Length);  		stream.Write (buffer' 0' buffer.Length);  	}  	bmp.UnlockBits (bmpData);  	return true;  }  catch {  	return false;  }  
Magic Number,Managed.Adb.IO,Rgb565,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\IO\Rgb565.cs,ToRgb565,The following statement contains a magic number: using (stream) {  	byte[] buffer = new byte[307200];  	Marshal.Copy (bmpData.Scan0' buffer' 0' buffer.Length);  	stream.Write (buffer' 0' buffer.Length);  }  
Magic Number,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Managed.Adb.Logs,LogReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Logs\LogReceiver.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Missing Default,Managed.Adb,RawImage,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\RawImage.cs,GetHeaderSize,The following switch statement is missing a default case: switch (version) {  case 16:  	// compatibility mode  	return 3;  // size' width' height  case 1:  case 2:  case 3:  case 4:  case 5:  	return 12;  // bpp' size' width' height' 4*(length' offset)  }  
Missing Default,Managed.Adb,ListingServiceReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Managed.AndroidDebugBridge\Receivers\ListingServiceReceiver.cs,ProcessNewLines,The following switch statement is missing a default case: switch (permissions [0]) {  case '-':  	objectType = FileListingService.FileTypes.File;  	break;  case 'b':  	objectType = FileListingService.FileTypes.Block;  	break;  case 'c':  	objectType = FileListingService.FileTypes.Character;  	break;  case 'd':  	objectType = FileListingService.FileTypes.Directory;  	break;  case 'l':  	objectType = FileListingService.FileTypes.Link;  	break;  case 's':  	objectType = FileListingService.FileTypes.Socket;  	break;  case 'p':  	objectType = FileListingService.FileTypes.FIFO;  	break;  }  
