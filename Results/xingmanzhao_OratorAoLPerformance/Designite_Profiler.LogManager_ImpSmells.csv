Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetValueAsDouble,Cyclomatic complexity of the method is 9
Complex Method,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,Cyclomatic complexity of the method is 17
Complex Method,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,Cyclomatic complexity of the method is 10
Complex Method,Profiler.LogManager.Models,EventValueDescription,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventValueDescription.cs,GetObjectFromString,Cyclomatic complexity of the method is 9
Complex Method,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,Cyclomatic complexity of the method is 22
Complex Method,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,Cyclomatic complexity of the method is 19
Complex Method,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,Start,Cyclomatic complexity of the method is 8
Complex Method,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,Cyclomatic complexity of the method is 13
Complex Method,Profiler.LogManager.Models,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\MultiLineReceiver.cs,AddOutput,Cyclomatic complexity of the method is 8
Long Parameter List,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,EventContainer,The method has 7 parameters.
Long Parameter List,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GcEventContainer,The method has 7 parameters.
Long Statement,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,Init,The length of the statement  "		//device.ExecuteShellCommand("cat /system/etc/event-log-tags"' new TagReceiver(new Action<string>(this.ProcessTagLine))' DdmPreferences.LongTimeout); " is 149.
Long Statement,Profiler.LogManager.Models,EventValueDescription,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventValueDescription.cs,ToString,The length of the statement  "		return string.Format ("{0} ({1}' {2})"' this.Name' this.EventValueType.ToString ().ToLower ()' this.ValueType.ToString ().ToLower ()); " is 134.
Long Statement,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The length of the statement  "		return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data); " is 125.
Long Statement,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,OnLogDataReceived,The length of the statement  "	//                this._writer.WriteLine(string.Format("[{0}] [{1}:] {2}"' logData.LocalTimestamp.ToString("MM-dd HH:mm:ss.fff")' logData.SourceBuffer' logData.ToString(this.OutputFormat' this.TimestampMode))); " is 210.
Long Statement,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,OnLogDataReceived,The length of the statement  "	//                this._writer.WriteLine(string.Format("[{0}] {1}"' logData.LocalTimestamp.ToString("MM-dd HH:mm:ss.fff")' logData.ToString(this.OutputFormat' this.TimestampMode))); " is 181.
Long Statement,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CreateLogWriter,The length of the statement  "	//this._writer = new StreamWriter(new FileStream(this.m_logFile' System.IO.FileMode.Create' FileAccess.Write' FileShare.Read)); " is 127.
Long Statement,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CreateLogWriter,The length of the statement  "	this._writer = TextWriter.Synchronized (new StreamWriter (new FileStream (this.m_logFile' System.IO.FileMode.Create' FileAccess.Write' FileShare.Read))); " is 153.
Long Statement,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,Start,The length of the statement  "					//AdbHelper.Instance.RunCatLog(AndroidDebugBridge.SocketAddress' _device' string.Format("{0}{1}"' LOG_PATH' _logBuffer.ToString().ToLower())' _L_Receiver); " is 155.
Long Statement,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,Start,The length of the statement  "					//AdbHelper.Instance.RunCatLog(AndroidDebugBridge.SocketAddress' _device' _logBuffer.ToString().ToLower()' _L_Receiver); " is 120.
Long Statement,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,Start,The length of the statement  "					this.RunCatLog (AndroidDebugBridge.SocketAddress' _device' string.Format ("{0}{1}"' LOG_PATH' _logBuffer.ToString ().ToLower ())); " is 130.
Long Statement,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,ClearLogBuffer,The length of the statement  "	//this._device.ExecuteShellCommand(string.Format("logcat -c -b {0}"' this._logBuffer.ToString().ToLower())' NullOutputReceiver.Instance' TABInterface.DEFAULT_ADB_TIMEOUT); " is 171.
Complex Conditional,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The conditional expression  "(((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))"  is complex.
Empty Catch Block,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValue,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsString,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CheckLogDataSize,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CreateLogWriter,The method has an empty catch block.
Empty Catch Block,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,Start,The method has an empty catch block.
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: if (match.Success) {  	try {  		EventValueType type;  		if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  			return null;  		}  		switch (type) {  		case EventValueType.INT:  			return int.Parse (match.Groups [2].Value);  		case EventValueType.LONG:  			return long.Parse (match.Groups [2].Value);  		case EventValueType.STRING:  			return match.Groups [2].Value;  		}  	}  	catch (Exception) {  		return null;  	}  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: if (match.Success) {  	try {  		EventValueType type;  		if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  			return null;  		}  		switch (type) {  		case EventValueType.INT:  			return int.Parse (match.Groups [2].Value);  		case EventValueType.LONG:  			return long.Parse (match.Groups [2].Value);  		case EventValueType.STRING:  			return match.Groups [2].Value;  		}  	}  	catch (Exception) {  		return null;  	}  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: if (match.Success) {  	try {  		EventValueType type;  		if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  			return null;  		}  		switch (type) {  		case EventValueType.INT:  			return int.Parse (match.Groups [2].Value);  		case EventValueType.LONG:  			return long.Parse (match.Groups [2].Value);  		case EventValueType.STRING:  			return match.Groups [2].Value;  		}  	}  	catch (Exception) {  		return null;  	}  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: try {  	EventValueType type;  	if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  		return null;  	}  	switch (type) {  	case EventValueType.INT:  		return int.Parse (match.Groups [2].Value);  	case EventValueType.LONG:  		return long.Parse (match.Groups [2].Value);  	case EventValueType.STRING:  		return match.Groups [2].Value;  	}  }  catch (Exception) {  	return null;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: try {  	EventValueType type;  	if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  		return null;  	}  	switch (type) {  	case EventValueType.INT:  		return int.Parse (match.Groups [2].Value);  	case EventValueType.LONG:  		return long.Parse (match.Groups [2].Value);  	case EventValueType.STRING:  		return match.Groups [2].Value;  	}  }  catch (Exception) {  	return null;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: try {  	EventValueType type;  	if (!Enum.TryParse<EventValueType> (match.Groups [1].Value' out type)) {  		return null;  	}  	switch (type) {  	case EventValueType.INT:  		return int.Parse (match.Groups [2].Value);  	case EventValueType.LONG:  		return long.Parse (match.Groups [2].Value);  	case EventValueType.STRING:  		return match.Groups [2].Value;  	}  }  catch (Exception) {  	return null;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: switch (type) {  case EventValueType.INT:  	return int.Parse (match.Groups [2].Value);  case EventValueType.LONG:  	return long.Parse (match.Groups [2].Value);  case EventValueType.STRING:  	return match.Groups [2].Value;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: switch (type) {  case EventValueType.INT:  	return int.Parse (match.Groups [2].Value);  case EventValueType.LONG:  	return long.Parse (match.Groups [2].Value);  case EventValueType.STRING:  	return match.Groups [2].Value;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: switch (type) {  case EventValueType.INT:  	return int.Parse (match.Groups [2].Value);  case EventValueType.LONG:  	return long.Parse (match.Groups [2].Value);  case EventValueType.STRING:  	return match.Groups [2].Value;  }  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: return int.Parse (match.Groups [2].Value);  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: return long.Parse (match.Groups [2].Value);  
Magic Number,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following statement contains a magic number: return match.Groups [2].Value;  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,Parse,The following statement contains a magic number: if (entry.Length < 4) {  	return null;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,Parse,The following statement contains a magic number: startIndex += 4;  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - dataOffset) >= 1) {  	num = dataOffset;  	switch (eventData [num++]) {  	case 0:  		if ((eventData.Length - num) >= 4) {  			int item = BitConverter.ToInt32 (eventData' num);  			num += 4;  			list.Add (item);  			goto Label_011C;  		}  		return -1;  	case 1:  		if ((eventData.Length - num) >= 8) {  			long num4 = BitConverter.ToInt64 (eventData' num);  			num += 8;  			list.Add (num4);  			goto Label_011C;  		}  		return -1;  	case 2:  		if ((eventData.Length - num) >= 4) {  			int count = BitConverter.ToInt32 (eventData' num);  			num += 4;  			if ((eventData.Length - num) < count) {  				return -1;  			}  			try {  				string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  				list.Add (str);  			}  			catch (Exception) {  			}  			num += count;  			goto Label_011C;  		}  		return -1;  	case 3:  		if ((eventData.Length - num) >= 1) {  			int num6 = eventData [num++];  			List<object> list2 = new List<object> ();  			for (int i = 0; i < num6; i++) {  				int num8 = this.ParseBinaryEvent (eventData' num' list2);  				if (num8 == -1) {  					return num8;  				}  				num += num8;  			}  			list.AddRange (list2);  			goto Label_011C;  		}  		return -1;  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 4) {  	int item = BitConverter.ToInt32 (eventData' num);  	num += 4;  	list.Add (item);  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 4) {  	int item = BitConverter.ToInt32 (eventData' num);  	num += 4;  	list.Add (item);  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: num += 4;  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 8) {  	long num4 = BitConverter.ToInt64 (eventData' num);  	num += 8;  	list.Add (num4);  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 8) {  	long num4 = BitConverter.ToInt64 (eventData' num);  	num += 8;  	list.Add (num4);  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: num += 8;  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 4) {  	int count = BitConverter.ToInt32 (eventData' num);  	num += 4;  	if ((eventData.Length - num) < count) {  		return -1;  	}  	try {  		string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  		list.Add (str);  	}  	catch (Exception) {  	}  	num += count;  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: if ((eventData.Length - num) >= 4) {  	int count = BitConverter.ToInt32 (eventData' num);  	num += 4;  	if ((eventData.Length - num) < count) {  		return -1;  	}  	try {  		string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  		list.Add (str);  	}  	catch (Exception) {  	}  	num += count;  	goto Label_011C;  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following statement contains a magic number: num += 4;  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: foreach (string str in strArray) {  	Match match = this.PATTERN_DESCRIPTION.Match (str);  	if (match.Success) {  		try {  			string name = match.Groups [1].Value;  			EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  			string str3 = match.Groups [3].Value;  			if (!string.IsNullOrEmpty (str3)) {  				ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  				list.Add (new EventValueDescription (name' type' valueType));  			}  			else {  				list.Add (new EventValueDescription (name' type));  			}  		}  		catch (FormatException) {  		}  		catch (Exception) {  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: foreach (string str in strArray) {  	Match match = this.PATTERN_DESCRIPTION.Match (str);  	if (match.Success) {  		try {  			string name = match.Groups [1].Value;  			EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  			string str3 = match.Groups [3].Value;  			if (!string.IsNullOrEmpty (str3)) {  				ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  				list.Add (new EventValueDescription (name' type' valueType));  			}  			else {  				list.Add (new EventValueDescription (name' type));  			}  		}  		catch (FormatException) {  		}  		catch (Exception) {  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: if (match.Success) {  	try {  		string name = match.Groups [1].Value;  		EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  		string str3 = match.Groups [3].Value;  		if (!string.IsNullOrEmpty (str3)) {  			ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  			list.Add (new EventValueDescription (name' type' valueType));  		}  		else {  			list.Add (new EventValueDescription (name' type));  		}  	}  	catch (FormatException) {  	}  	catch (Exception) {  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: if (match.Success) {  	try {  		string name = match.Groups [1].Value;  		EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  		string str3 = match.Groups [3].Value;  		if (!string.IsNullOrEmpty (str3)) {  			ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  			list.Add (new EventValueDescription (name' type' valueType));  		}  		else {  			list.Add (new EventValueDescription (name' type));  		}  	}  	catch (FormatException) {  	}  	catch (Exception) {  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: try {  	string name = match.Groups [1].Value;  	EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  	string str3 = match.Groups [3].Value;  	if (!string.IsNullOrEmpty (str3)) {  		ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  		list.Add (new EventValueDescription (name' type' valueType));  	}  	else {  		list.Add (new EventValueDescription (name' type));  	}  }  catch (FormatException) {  }  catch (Exception) {  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessDescription,The following statement contains a magic number: try {  	string name = match.Groups [1].Value;  	EventValueType type = (EventValueType)int.Parse (match.Groups [2].Value);  	string str3 = match.Groups [3].Value;  	if (!string.IsNullOrEmpty (str3)) {  		ValueType valueType = (ValueType)int.Parse (str3.Substring (1));  		list.Add (new EventValueDescription (name' type' valueType));  	}  	else {  		list.Add (new EventValueDescription (name' type));  	}  }  catch (FormatException) {  }  catch (Exception) {  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line) && (line [0] != '#')) {  	Match match = this.PATTERN_TAG_WITH_DESC.Match (line);  	if (match.Success) {  		try {  			int key = int.Parse (match.Groups [1].Value);  			string str = match.Groups [2].Value;  			if ((str != null) && !this.mTagMap.ContainsKey (key)) {  				this.mTagMap.Add (key' str);  			}  			if (key == 0x4e21) {  				this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  			}  			else {  				string str2 = match.Groups [3].Value;  				if (!string.IsNullOrEmpty (str2)) {  					EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  					if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  						this.mValueDescriptionMap.Add (key' descriptionArray);  					}  				}  			}  		}  		catch (Exception) {  		}  	}  	else {  		match = this.PATTERN_SIMPLE_TAG.Match (line);  		if (match.Success) {  			int num2 = int.Parse (match.Groups [1].Value);  			string str3 = match.Groups [2].Value;  			if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  				this.mTagMap.Add (num2' str3);  			}  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line) && (line [0] != '#')) {  	Match match = this.PATTERN_TAG_WITH_DESC.Match (line);  	if (match.Success) {  		try {  			int key = int.Parse (match.Groups [1].Value);  			string str = match.Groups [2].Value;  			if ((str != null) && !this.mTagMap.ContainsKey (key)) {  				this.mTagMap.Add (key' str);  			}  			if (key == 0x4e21) {  				this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  			}  			else {  				string str2 = match.Groups [3].Value;  				if (!string.IsNullOrEmpty (str2)) {  					EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  					if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  						this.mValueDescriptionMap.Add (key' descriptionArray);  					}  				}  			}  		}  		catch (Exception) {  		}  	}  	else {  		match = this.PATTERN_SIMPLE_TAG.Match (line);  		if (match.Success) {  			int num2 = int.Parse (match.Groups [1].Value);  			string str3 = match.Groups [2].Value;  			if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  				this.mTagMap.Add (num2' str3);  			}  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (!string.IsNullOrEmpty (line) && (line [0] != '#')) {  	Match match = this.PATTERN_TAG_WITH_DESC.Match (line);  	if (match.Success) {  		try {  			int key = int.Parse (match.Groups [1].Value);  			string str = match.Groups [2].Value;  			if ((str != null) && !this.mTagMap.ContainsKey (key)) {  				this.mTagMap.Add (key' str);  			}  			if (key == 0x4e21) {  				this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  			}  			else {  				string str2 = match.Groups [3].Value;  				if (!string.IsNullOrEmpty (str2)) {  					EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  					if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  						this.mValueDescriptionMap.Add (key' descriptionArray);  					}  				}  			}  		}  		catch (Exception) {  		}  	}  	else {  		match = this.PATTERN_SIMPLE_TAG.Match (line);  		if (match.Success) {  			int num2 = int.Parse (match.Groups [1].Value);  			string str3 = match.Groups [2].Value;  			if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  				this.mTagMap.Add (num2' str3);  			}  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (match.Success) {  	try {  		int key = int.Parse (match.Groups [1].Value);  		string str = match.Groups [2].Value;  		if ((str != null) && !this.mTagMap.ContainsKey (key)) {  			this.mTagMap.Add (key' str);  		}  		if (key == 0x4e21) {  			this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  		}  		else {  			string str2 = match.Groups [3].Value;  			if (!string.IsNullOrEmpty (str2)) {  				EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  				if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  					this.mValueDescriptionMap.Add (key' descriptionArray);  				}  			}  		}  	}  	catch (Exception) {  	}  }  else {  	match = this.PATTERN_SIMPLE_TAG.Match (line);  	if (match.Success) {  		int num2 = int.Parse (match.Groups [1].Value);  		string str3 = match.Groups [2].Value;  		if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  			this.mTagMap.Add (num2' str3);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (match.Success) {  	try {  		int key = int.Parse (match.Groups [1].Value);  		string str = match.Groups [2].Value;  		if ((str != null) && !this.mTagMap.ContainsKey (key)) {  			this.mTagMap.Add (key' str);  		}  		if (key == 0x4e21) {  			this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  		}  		else {  			string str2 = match.Groups [3].Value;  			if (!string.IsNullOrEmpty (str2)) {  				EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  				if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  					this.mValueDescriptionMap.Add (key' descriptionArray);  				}  			}  		}  	}  	catch (Exception) {  	}  }  else {  	match = this.PATTERN_SIMPLE_TAG.Match (line);  	if (match.Success) {  		int num2 = int.Parse (match.Groups [1].Value);  		string str3 = match.Groups [2].Value;  		if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  			this.mTagMap.Add (num2' str3);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (match.Success) {  	try {  		int key = int.Parse (match.Groups [1].Value);  		string str = match.Groups [2].Value;  		if ((str != null) && !this.mTagMap.ContainsKey (key)) {  			this.mTagMap.Add (key' str);  		}  		if (key == 0x4e21) {  			this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  		}  		else {  			string str2 = match.Groups [3].Value;  			if (!string.IsNullOrEmpty (str2)) {  				EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  				if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  					this.mValueDescriptionMap.Add (key' descriptionArray);  				}  			}  		}  	}  	catch (Exception) {  	}  }  else {  	match = this.PATTERN_SIMPLE_TAG.Match (line);  	if (match.Success) {  		int num2 = int.Parse (match.Groups [1].Value);  		string str3 = match.Groups [2].Value;  		if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  			this.mTagMap.Add (num2' str3);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: try {  	int key = int.Parse (match.Groups [1].Value);  	string str = match.Groups [2].Value;  	if ((str != null) && !this.mTagMap.ContainsKey (key)) {  		this.mTagMap.Add (key' str);  	}  	if (key == 0x4e21) {  		this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  	}  	else {  		string str2 = match.Groups [3].Value;  		if (!string.IsNullOrEmpty (str2)) {  			EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  			if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  				this.mValueDescriptionMap.Add (key' descriptionArray);  			}  		}  	}  }  catch (Exception) {  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: try {  	int key = int.Parse (match.Groups [1].Value);  	string str = match.Groups [2].Value;  	if ((str != null) && !this.mTagMap.ContainsKey (key)) {  		this.mTagMap.Add (key' str);  	}  	if (key == 0x4e21) {  		this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  	}  	else {  		string str2 = match.Groups [3].Value;  		if (!string.IsNullOrEmpty (str2)) {  			EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  			if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  				this.mValueDescriptionMap.Add (key' descriptionArray);  			}  		}  	}  }  catch (Exception) {  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (key == 0x4e21) {  	this.mValueDescriptionMap.Add (key' GcEventContainer.ValueDescriptions);  }  else {  	string str2 = match.Groups [3].Value;  	if (!string.IsNullOrEmpty (str2)) {  		EventValueDescription[] descriptionArray = this.ProcessDescription (str2);  		if ((descriptionArray != null) && !this.mValueDescriptionMap.ContainsKey (key)) {  			this.mValueDescriptionMap.Add (key' descriptionArray);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ProcessTagLine,The following statement contains a magic number: if (match.Success) {  	int num2 = int.Parse (match.Groups [1].Value);  	string str3 = match.Groups [2].Value;  	if ((str3 != null) && !this.mTagMap.ContainsKey (num2)) {  		this.mTagMap.Add (num2' str3);  	}  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,Float12ToInt,The following statement contains a magic number: return (long)((f12 & 0x1ff) << ((f12 >> 9) * 4));  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,Float12ToInt,The following statement contains a magic number: return (long)((f12 & 0x1ff) << ((f12 >> 9) * 4));  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following statement contains a magic number: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ObjectToString,The following statement contains a magic number: for (int i = 1; i < 20; i++) {  	list.Add (this.GetValueAsLong (i));  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: this.processId = Encoding.Default.GetString (bytes' 0' 5);  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  
Magic Number,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following statement contains a magic number: this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0}/{1}({2}): {3}"' new object[] {  	this.Priority.ToString () [0]'  	this.Tag.PadRight (8' ' ')'  	this.ProcessId.ToString ().PadLeft (5' ' ')'  	this.Data  });  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0}/{1}({2}): {3}"' new object[] {  	this.Priority.ToString () [0]'  	this.Tag.PadRight (8' ' ')'  	this.ProcessId.ToString ().PadLeft (5' ' ')'  	this.Data  });  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  	time.ToString ("MM-dd HH:mm:ss.fff")'  	this.Priority.ToString () [0]'  	this.Tag.PadRight (8' ' ')'  	this.ProcessId'  	this.Data  });  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  	time.ToString ("MM-dd HH:mm:ss.fff")'  	this.ProcessId.ToString ().PadLeft (5' ' ')'  	this.ThreadId.ToString ().PadLeft (5' ' ')'  	this.Priority.ToString () [0]'  	this.Tag'  	this.Data  });  
Magic Number,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following statement contains a magic number: return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  	time.ToString ("MM-dd HH:mm:ss.fff")'  	this.ProcessId.ToString ().PadLeft (5' ' ')'  	this.ThreadId.ToString ().PadLeft (5' ' ')'  	this.Priority.ToString () [0]'  	this.Tag'  	this.Data  });  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,Logger,The following statement contains a magic number: _receivedLogQueue = new BlockingCollection<ILogData> (1000);  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CheckLogDataSize,The following statement contains a magic number: if ((this.m_logFile != null) && ((this.m_logIndex % 0x3e8) == 0)) {  	FileInfo info = new FileInfo (this.m_logFile);  	if (info.Length > 0x5f5e100L) {  		int num;  		this.m_isRecording = false;  		this.m_logIndex = 0;  		if (this._writer != null) {  			try {  				this._writer.Flush ();  				this._writer.Dispose ();  			}  			catch (ObjectDisposedException) {  			}  		}  		string directoryName = Path.GetDirectoryName (this.m_logFile);  		string fileName = Path.GetFileName (this.m_logFile);  		string fileNameWithoutExtension = Path.GetFileNameWithoutExtension (fileName);  		if (fileName.Contains ("_")) {  			num = Convert.ToInt16 (fileNameWithoutExtension.Split (new char[] {  				'_'  			}).Last<string> ());  			string str4 = fileNameWithoutExtension.Split (new char[] {  				'_'  			}).First<string> ();  			num++;  			fileName = string.Join (""' new string[] {  				str4'  				"_"'  				num.ToString ()'  				".txt"  			});  		}  		else {  			num = 2;  			fileName = string.Join (""' new string[] {  				fileNameWithoutExtension'  				"_"'  				num.ToString ()'  				".txt"  			});  		}  		this.m_logFile = Path.Combine (directoryName' fileName);  		this.CreateLogWriter ();  		this.m_isRecording = true;  	}  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CheckLogDataSize,The following statement contains a magic number: if (info.Length > 0x5f5e100L) {  	int num;  	this.m_isRecording = false;  	this.m_logIndex = 0;  	if (this._writer != null) {  		try {  			this._writer.Flush ();  			this._writer.Dispose ();  		}  		catch (ObjectDisposedException) {  		}  	}  	string directoryName = Path.GetDirectoryName (this.m_logFile);  	string fileName = Path.GetFileName (this.m_logFile);  	string fileNameWithoutExtension = Path.GetFileNameWithoutExtension (fileName);  	if (fileName.Contains ("_")) {  		num = Convert.ToInt16 (fileNameWithoutExtension.Split (new char[] {  			'_'  		}).Last<string> ());  		string str4 = fileNameWithoutExtension.Split (new char[] {  			'_'  		}).First<string> ();  		num++;  		fileName = string.Join (""' new string[] {  			str4'  			"_"'  			num.ToString ()'  			".txt"  		});  	}  	else {  		num = 2;  		fileName = string.Join (""' new string[] {  			fileNameWithoutExtension'  			"_"'  			num.ToString ()'  			".txt"  		});  	}  	this.m_logFile = Path.Combine (directoryName' fileName);  	this.CreateLogWriter ();  	this.m_isRecording = true;  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CheckLogDataSize,The following statement contains a magic number: if (fileName.Contains ("_")) {  	num = Convert.ToInt16 (fileNameWithoutExtension.Split (new char[] {  		'_'  	}).Last<string> ());  	string str4 = fileNameWithoutExtension.Split (new char[] {  		'_'  	}).First<string> ();  	num++;  	fileName = string.Join (""' new string[] {  		str4'  		"_"'  		num.ToString ()'  		".txt"  	});  }  else {  	num = 2;  	fileName = string.Join (""' new string[] {  		fileNameWithoutExtension'  		"_"'  		num.ToString ()'  		".txt"  	});  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,CheckLogDataSize,The following statement contains a magic number: num = 2;  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,StartReceivedLogQueue,The following statement contains a magic number: while (!_receivedLogQueue.IsCompleted) {  	ILogData logData = _receivedLogQueue.Take ();  	if (logData != null) {  		if (this.LogDataReceivedEvent != null) {  			LogDataReceivedEventArgs args = new LogDataReceivedEventArgs ();  			args.Log = logData;  			this.LogDataReceivedEvent (this' args);  			Thread.Sleep (100);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,StartReceivedLogQueue,The following statement contains a magic number: if (logData != null) {  	if (this.LogDataReceivedEvent != null) {  		LogDataReceivedEventArgs args = new LogDataReceivedEventArgs ();  		args.Log = logData;  		this.LogDataReceivedEvent (this' args);  		Thread.Sleep (100);  	}  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,StartReceivedLogQueue,The following statement contains a magic number: if (this.LogDataReceivedEvent != null) {  	LogDataReceivedEventArgs args = new LogDataReceivedEventArgs ();  	args.Log = logData;  	this.LogDataReceivedEvent (this' args);  	Thread.Sleep (100);  }  
Magic Number,Profiler.LogManager.Models,Logger,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\Logger.cs,StartReceivedLogQueue,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		CancelAction = action;  		AdbHelper.Instance.SetDevice (socket' device);  		byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  		//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  		if (!AdbHelper.Instance.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while (device.IsOnline && !IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Close ();  			socket.Dispose ();  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		CancelAction = action;  		AdbHelper.Instance.SetDevice (socket' device);  		byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  		//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  		if (!AdbHelper.Instance.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while (device.IsOnline && !IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Close ();  			socket.Dispose ();  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		CancelAction = action;  		AdbHelper.Instance.SetDevice (socket' device);  		byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  		//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  		if (!AdbHelper.Instance.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while (device.IsOnline && !IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Close ();  			socket.Dispose ();  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		CancelAction = action;  		AdbHelper.Instance.SetDevice (socket' device);  		byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  		//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  		if (!AdbHelper.Instance.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while (device.IsOnline && !IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Close ();  			socket.Dispose ();  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (device.IsOnline) {  	int num = 0x1400;  	Action action = null;  	Socket socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	try {  		socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  		socket.ReceiveTimeout = -1;  		socket.ReceiveBufferSize = num + 1;  		socket.Blocking = true;  		socket.Connect (AndroidDebugBridge.SocketAddress);  		if (action == null) {  			action = delegate {  				if (socket != null) {  					socket.Close ();  				}  			};  		}  		CancelAction = action;  		AdbHelper.Instance.SetDevice (socket' device);  		byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  		//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  		if (!AdbHelper.Instance.Write (socket' data)) {  			throw new AdbException ("failed submitting shell command");  		}  		AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  		if (!response.IOSuccess || !response.Okay) {  			throw new AdbException ("sad result from adb: " + response.Message);  		}  		byte[] buffer = new byte[num + 1];  		byte num2 = 0;  		while (device.IsOnline && !IsCancelled) {  			int num3 = socket.Receive (buffer);  			if (num3 > 0) {  				using (MemoryStream stream = new MemoryStream ()) {  					for (int i = 0; i < num3; i++) {  						if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  							stream.WriteByte (10);  							i++;  						}  						else {  							stream.WriteByte (buffer [i]);  						}  						if (i == (num3 - 1)) {  							num2 = buffer [i];  						}  					}  					this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  				}  			}  		}  	}  	catch (SocketException exception) {  		if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  			Log.e ("Socket error while receiving response"' exception);  		}  	}  	finally {  		if (socket != null) {  			socket.Close ();  			socket.Dispose ();  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	CancelAction = action;  	AdbHelper.Instance.SetDevice (socket' device);  	byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  	//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  	if (!AdbHelper.Instance.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while (device.IsOnline && !IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Close ();  		socket.Dispose ();  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	CancelAction = action;  	AdbHelper.Instance.SetDevice (socket' device);  	byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  	//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  	if (!AdbHelper.Instance.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while (device.IsOnline && !IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Close ();  		socket.Dispose ();  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	CancelAction = action;  	AdbHelper.Instance.SetDevice (socket' device);  	byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  	//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  	if (!AdbHelper.Instance.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while (device.IsOnline && !IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Close ();  		socket.Dispose ();  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	CancelAction = action;  	AdbHelper.Instance.SetDevice (socket' device);  	byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  	//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  	if (!AdbHelper.Instance.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while (device.IsOnline && !IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Close ();  		socket.Dispose ();  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: try {  	socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.Linger' new LingerOption (true' 0));  	socket.ReceiveTimeout = -1;  	socket.ReceiveBufferSize = num + 1;  	socket.Blocking = true;  	socket.Connect (AndroidDebugBridge.SocketAddress);  	if (action == null) {  		action = delegate {  			if (socket != null) {  				socket.Close ();  			}  		};  	}  	CancelAction = action;  	AdbHelper.Instance.SetDevice (socket' device);  	byte[] data = AdbHelper.Instance.FormAdbRequest (string.Format ("shell:cat {0}"' filePath));  	//byte[] data = AdbHelper.Instance.FormAdbRequest(string.Format("log:{0}"' filePath));  	if (!AdbHelper.Instance.Write (socket' data)) {  		throw new AdbException ("failed submitting shell command");  	}  	AdbResponse response = AdbHelper.Instance.ReadAdbResponse (socket' false);  	if (!response.IOSuccess || !response.Okay) {  		throw new AdbException ("sad result from adb: " + response.Message);  	}  	byte[] buffer = new byte[num + 1];  	byte num2 = 0;  	while (device.IsOnline && !IsCancelled) {  		int num3 = socket.Receive (buffer);  		if (num3 > 0) {  			using (MemoryStream stream = new MemoryStream ()) {  				for (int i = 0; i < num3; i++) {  					if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  						stream.WriteByte (10);  						i++;  					}  					else {  						stream.WriteByte (buffer [i]);  					}  					if (i == (num3 - 1)) {  						num2 = buffer [i];  					}  				}  				this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  			}  		}  	}  }  catch (SocketException exception) {  	if (exception.SocketErrorCode != SocketError.ConnectionAborted) {  		Log.e ("Socket error while receiving response"' exception);  	}  }  finally {  	if (socket != null) {  		socket.Close ();  		socket.Dispose ();  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: while (device.IsOnline && !IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: while (device.IsOnline && !IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: while (device.IsOnline && !IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: while (device.IsOnline && !IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: while (device.IsOnline && !IsCancelled) {  	int num3 = socket.Receive (buffer);  	if (num3 > 0) {  		using (MemoryStream stream = new MemoryStream ()) {  			for (int i = 0; i < num3; i++) {  				if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  					stream.WriteByte (10);  					i++;  				}  				else {  					stream.WriteByte (buffer [i]);  				}  				if (i == (num3 - 1)) {  					num2 = buffer [i];  				}  			}  			this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  		}  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if (num3 > 0) {  	using (MemoryStream stream = new MemoryStream ()) {  		for (int i = 0; i < num3; i++) {  			if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  				stream.WriteByte (10);  				i++;  			}  			else {  				stream.WriteByte (buffer [i]);  			}  			if (i == (num3 - 1)) {  				num2 = buffer [i];  			}  		}  		this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream ()) {  	for (int i = 0; i < num3; i++) {  		if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  			stream.WriteByte (10);  			i++;  		}  		else {  			stream.WriteByte (buffer [i]);  		}  		if (i == (num3 - 1)) {  			num2 = buffer [i];  		}  	}  	this.ParseNewData (stream.ToArray ()' 0' (int)stream.Length);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: for (int i = 0; i < num3; i++) {  	if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  		stream.WriteByte (10);  		i++;  	}  	else {  		stream.WriteByte (buffer [i]);  	}  	if (i == (num3 - 1)) {  		num2 = buffer [i];  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: if ((((num3 > (i + 1)) && (buffer [i] == 13)) && (buffer [i + 1] == 10)) || ((num2 == 13) && (buffer [i] == 10))) {  	stream.WriteByte (10);  	i++;  }  else {  	stream.WriteByte (buffer [i]);  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,RunCatLog,The following statement contains a magic number: stream.WriteByte (10);  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,CreateEntry,The following statement contains a magic number: offset += 4;  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,NewEntry,The following statement contains a magic number: if ((this._logBuffer == LogBuffer.Events) && (this.m_eventParser != null)) {  	EventContainer container = this.m_eventParser.Parse (entry);  	if (container != null) {  		LogData data = new LogData {  			LocalTimestamp = now'  			SourceBuffer = this._logBuffer'  			Priority = LogPriority.Info'  			ProcessId = entry.ProcessId'  			ThreadId = entry.ThreadId'  			Seconds = entry.NanoSeconds'  			NanoSeconds = entry.NanoSeconds'  			Tag = container.TagName'  			Data = container.ToString ().TrimEnd (new char[] {  				'\r''  				'\n''  				' '  			})'  			EventData = container  		};  		this.OnDataReceived (data);  	}  }  else if (entry.Data.Length > 1) {  	int num = 0xff & entry.Data [0];  	string input = this._encoding.GetString (entry.Data' 1' entry.Data.Length - 1);  	Match match = this._messageRegex.Match (input);  	if (match.Success) {  		LogData data2 = new LogData {  			LocalTimestamp = now'  			SourceBuffer = this._logBuffer'  			Priority = (LogPriority)num'  			ProcessId = entry.ProcessId'  			ThreadId = entry.ThreadId'  			Seconds = entry.NanoSeconds'  			NanoSeconds = entry.NanoSeconds'  			Tag = match.Groups [1].Value'  			Data = match.Groups [2].Value.TrimEnd (new char[] {  				'\r''  				'\n''  				' '  			})  		};  		this.OnDataReceived (data2);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,NewEntry,The following statement contains a magic number: if (entry.Data.Length > 1) {  	int num = 0xff & entry.Data [0];  	string input = this._encoding.GetString (entry.Data' 1' entry.Data.Length - 1);  	Match match = this._messageRegex.Match (input);  	if (match.Success) {  		LogData data2 = new LogData {  			LocalTimestamp = now'  			SourceBuffer = this._logBuffer'  			Priority = (LogPriority)num'  			ProcessId = entry.ProcessId'  			ThreadId = entry.ThreadId'  			Seconds = entry.NanoSeconds'  			NanoSeconds = entry.NanoSeconds'  			Tag = match.Groups [1].Value'  			Data = match.Groups [2].Value.TrimEnd (new char[] {  				'\r''  				'\n''  				' '  			})  		};  		this.OnDataReceived (data2);  	}  }  
Magic Number,Profiler.LogManager.Models,LogListerner,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogListerner.cs,NewEntry,The following statement contains a magic number: if (match.Success) {  	LogData data2 = new LogData {  		LocalTimestamp = now'  		SourceBuffer = this._logBuffer'  		Priority = (LogPriority)num'  		ProcessId = entry.ProcessId'  		ThreadId = entry.ThreadId'  		Seconds = entry.NanoSeconds'  		NanoSeconds = entry.NanoSeconds'  		Tag = match.Groups [1].Value'  		Data = match.Groups [2].Value.TrimEnd (new char[] {  			'\r''  			'\n''  			' '  		})  	};  	this.OnDataReceived (data2);  }  
Magic Number,Profiler.LogManager.Models,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\MultiLineReceiver.cs,AddOutput,The following statement contains a magic number: if (!this.IsCancelled) {  	string str = null;  	try {  		str = Encoding.GetEncoding ("ISO-8859-1").GetString (data' offset' length);  	}  	catch (DecoderFallbackException) {  		str = Encoding.Default.GetString (data' offset' length);  	}  	if (!string.IsNullOrEmpty (str)) {  		if (!string.IsNullOrEmpty (this.UnfinishedLine)) {  			str = this.UnfinishedLine + str;  			this.UnfinishedLine = null;  		}  		int startIndex = 0;  		while (true) {  			int index = str.IndexOf ("\r\n"' startIndex);  			if (index == -1) {  				this.UnfinishedLine = str.Substring (startIndex);  				return;  			}  			string line = str.Substring (startIndex' index - startIndex);  			if (this.TrimLines) {  				line = line.Trim ();  			}  			this.AddLine (line);  			startIndex = index + 2;  		}  	}  }  
Magic Number,Profiler.LogManager.Models,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\MultiLineReceiver.cs,AddOutput,The following statement contains a magic number: if (!string.IsNullOrEmpty (str)) {  	if (!string.IsNullOrEmpty (this.UnfinishedLine)) {  		str = this.UnfinishedLine + str;  		this.UnfinishedLine = null;  	}  	int startIndex = 0;  	while (true) {  		int index = str.IndexOf ("\r\n"' startIndex);  		if (index == -1) {  			this.UnfinishedLine = str.Substring (startIndex);  			return;  		}  		string line = str.Substring (startIndex' index - startIndex);  		if (this.TrimLines) {  			line = line.Trim ();  		}  		this.AddLine (line);  		startIndex = index + 2;  	}  }  
Magic Number,Profiler.LogManager.Models,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\MultiLineReceiver.cs,AddOutput,The following statement contains a magic number: while (true) {  	int index = str.IndexOf ("\r\n"' startIndex);  	if (index == -1) {  		this.UnfinishedLine = str.Substring (startIndex);  		return;  	}  	string line = str.Substring (startIndex' index - startIndex);  	if (this.TrimLines) {  		line = line.Trim ();  	}  	this.AddLine (line);  	startIndex = index + 2;  }  
Magic Number,Profiler.LogManager.Models,MultiLineReceiver,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\MultiLineReceiver.cs,AddOutput,The following statement contains a magic number: startIndex = index + 2;  
Missing Default,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetObjectFromStorageString,The following switch statement is missing a default case: switch (type) {  case EventValueType.INT:  	return int.Parse (match.Groups [2].Value);  case EventValueType.LONG:  	return long.Parse (match.Groups [2].Value);  case EventValueType.STRING:  	return match.Groups [2].Value;  }  
Missing Default,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetType,The following switch statement is missing a default case: switch (this.GetType (obj2)) {  case EventValueType.LIST:  case EventValueType.TREE:  	return EventValueType.TREE;  }  
Missing Default,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetValue,The following switch statement is missing a default case: switch (this.GetType (data)) {  case EventValueType.INT:  case EventValueType.LONG:  case EventValueType.STRING:  	return data;  case EventValueType.LIST: {  	if (!recursive) {  		break;  	}  	object[] objArray = (object[])data;  	if ((valueIndex < 0) || (valueIndex >= objArray.Length)) {  		break;  	}  	return this.GetValue (objArray [valueIndex]' valueIndex' false);  }  }  
Missing Default,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetValueAsDouble,The following switch statement is missing a default case: switch (this.GetType (data)) {  case EventValueType.INT:  case EventValueType.LONG:  	return (double)data;  case EventValueType.STRING:  	throw new InvalidCastException ();  case EventValueType.LIST:  	if (recursive) {  		object[] objArray = (object[])data;  		if ((valueIndex >= 0) && (valueIndex < objArray.Length)) {  			return this.GetValueAsDouble (objArray [valueIndex]' valueIndex' false);  		}  	}  	break;  }  
Missing Default,Profiler.LogManager.Models,EventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventContainer.cs,GetValueAsString,The following switch statement is missing a default case: switch (type) {  case EventValueType.INT:  case EventValueType.LONG:  case EventValueType.STRING:  	return data.ToString ();  case EventValueType.LIST: {  	if (!recursive) {  		throw new InvalidCastException ("getValueAsString() doesn't support EventValueType.TREE");  	}  	object[] objArray = (object[])data;  	if ((valueIndex < 0) || (valueIndex >= objArray.Length)) {  		break;  	}  	return this.GetValueAsString (objArray [valueIndex]' valueIndex' false);  }  }  
Missing Default,Profiler.LogManager.Models,EventLogParser,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventLogParser.cs,ParseBinaryEvent,The following switch statement is missing a default case: switch (eventData [num++]) {  case 0:  	if ((eventData.Length - num) >= 4) {  		int item = BitConverter.ToInt32 (eventData' num);  		num += 4;  		list.Add (item);  		goto Label_011C;  	}  	return -1;  case 1:  	if ((eventData.Length - num) >= 8) {  		long num4 = BitConverter.ToInt64 (eventData' num);  		num += 8;  		list.Add (num4);  		goto Label_011C;  	}  	return -1;  case 2:  	if ((eventData.Length - num) >= 4) {  		int count = BitConverter.ToInt32 (eventData' num);  		num += 4;  		if ((eventData.Length - num) < count) {  			return -1;  		}  		try {  			string str = Encoding.GetEncoding ("UTF-8").GetString (eventData' num' count);  			list.Add (str);  		}  		catch (Exception) {  		}  		num += count;  		goto Label_011C;  	}  	return -1;  case 3:  	if ((eventData.Length - num) >= 1) {  		int num6 = eventData [num++];  		List<object> list2 = new List<object> ();  		for (int i = 0; i < num6; i++) {  			int num8 = this.ParseBinaryEvent (eventData' num' list2);  			if (num8 == -1) {  				return num8;  			}  			num += num8;  		}  		list.AddRange (list2);  		goto Label_011C;  	}  	return -1;  }  
Missing Default,Profiler.LogManager.Models,EventValueDescription,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\EventValueDescription.cs,CheckForType,The following switch statement is missing a default case: switch (this.EventValueType) {  case EventValueType.INT:  	return (value is int);  case EventValueType.LONG:  	return (value is long);  case EventValueType.STRING:  	return (value is string);  case EventValueType.LIST:  	return (value is object[]);  }  
Missing Default,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,GetValueAsLong,The following switch statement is missing a default case: switch (valueIndex) {  case 0:  	throw new InvalidCastException ();  case 1:  	return this.gcTime;  case 2:  	return this.objectsFreed;  case 3:  	return this.bytesFreed;  case 4:  	return this.softLimit;  case 5:  	return this.actualSize;  case 6:  	return this.allowedSize;  case 7:  	return this.objectsAllocated;  case 8:  	return this.bytesAllocated;  case 9:  	return (this.actualSize - this.zActualSize);  case 10:  	return (this.allowedSize - this.zAllowedSize);  case 11:  	return (this.objectsAllocated - this.zObjectsAllocated);  case 12:  	return (this.bytesAllocated - this.zBytesAllocated);  case 13:  	return this.zActualSize;  case 14:  	return this.zAllowedSize;  case 15:  	return this.zObjectsAllocated;  case 0x10:  	return this.zBytesAllocated;  case 0x11:  	return this.externalLimit;  case 0x12:  	return this.externalBytesAllocated;  case 0x13:  	return this.dlmallocFootprint;  case 20:  	return this.mallinfoTotalAllocatedSpace;  }  
Missing Default,Profiler.LogManager.Models,GcEventContainer,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\GcEventContainer.cs,ParseDvmHeapInfo,The following switch statement is missing a default case: switch (index) {  case 0: {  	this.gcTime = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesFreed = Float12ToInt ((int)(data & 0xfffL));  	byte[] bytes = Put64bitsToArray (data);  	this.processId = Encoding.Default.GetString (bytes' 0' 5);  	return;  }  case 1:  	this.objectsFreed = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.actualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.allowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.objectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.bytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 2:  	this.softLimit = Float12ToInt ((int)((data >> 0x30) & 0xfffL));  	this.zActualSize = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.zAllowedSize = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.zObjectsAllocated = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.zBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  case 3:  	this.dlmallocFootprint = Float12ToInt ((int)((data >> 0x24) & 0xfffL));  	this.mallinfoTotalAllocatedSpace = Float12ToInt ((int)((data >> 0x18) & 0xfffL));  	this.externalLimit = Float12ToInt ((int)((data >> 12) & 0xfffL));  	this.externalBytesAllocated = Float12ToInt ((int)(data & 0xfffL));  	return;  }  
Missing Default,Profiler.LogManager.Models,LogData,C:\repos\xingmanzhao_OratorAoLPerformance\Profiler.LogManager\Models\LogData.cs,ToString,The following switch statement is missing a default case: switch (format) {  case OutputFormat.Brief:  	return string.Format ("{0}/{1}({2}): {3}"' new object[] {  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.Data  	});  case OutputFormat.Process:  	return string.Format ("{0}({1}) {2}"' this.Priority.ToString () [0]' this.ProcessId.ToString ().PadLeft (5' ' ')' this.Data);  case OutputFormat.Tag:  	return string.Format ("{0}/{1}: {2}"' this.Priority.ToString () [0]' this.Tag' this.Data);  case OutputFormat.Raw:  	return this.Data;  case OutputFormat.Time:  	return string.Format ("{0} {1}/{2}( {3}): {4}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag.PadRight (8' ' ')'  		this.ProcessId'  		this.Data  	});  case OutputFormat.ThreadTime:  	return string.Format ("{0} {1} {2} {3} {4}: {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId.ToString ().PadLeft (5' ' ')'  		this.ThreadId.ToString ().PadLeft (5' ' ')'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.Long:  	return string.Format ("[ {0} {1}: {2} {3}/{4} ]\r\n{5}\r\n"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.ProcessId'  		this.ThreadId'  		this.Priority.ToString () [0]'  		this.Tag'  		this.Data  	});  case OutputFormat.ADBMimic:  	return string.Format ("{0} {1}/{2}( {3}) ({4}): {5}"' new object[] {  		time.ToString ("MM-dd HH:mm:ss.fff")'  		this.Priority.ToString () [0]'  		this.Tag'  		this.ProcessId'  		this.ThreadId'  		this.Data  	});  }  
