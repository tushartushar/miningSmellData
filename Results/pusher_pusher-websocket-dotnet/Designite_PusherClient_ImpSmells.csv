Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,PusherClient,Constants,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Constants.cs,,The length of the parameter CHANNEL_SUBSCRIPTION_SUCCEEDED is 30.
Long Statement,PusherClient,Connection,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Connection.cs,websocket_MessageReceived,The length of the statement  "            // good: "{\"event\":\"pusher:error\"'\"data\":\"{\\\"code\\\":4201'\\\"message\\\":\\\"Pong reply not received\\\"}\"}"; " is 121.
Long Statement,PusherClient,Connection,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Connection.cs,websocket_MessageReceived,The length of the statement  "                        Pusher.Trace.TraceEvent(TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches."); " is 170.
Long Statement,PusherClient,Connection,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Connection.cs,websocket_MessageReceived,The length of the statement  "                        Pusher.Trace.TraceEvent(TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches."); " is 170.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,Connect,The length of the statement  "                  Trace.TraceEvent(TraceEventType.Warning' 0' "Attempt to connect when another connection has already started. New attempt has been ignored."); " is 141.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,Subscribe,The length of the statement  "                Trace.TraceEvent(TraceEventType.Warning' 0' "Channel '" + channelName + "' is already subscribed to. Subscription event has been ignored."); " is 140.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,SubscribeToChannel,The length of the statement  "                    _connection.Send(JsonConvert.SerializeObject(new { @event = Constants.CHANNEL_SUBSCRIBE' data = new { channel = channelName' auth = message.auth' channel_data = message.channel_data } })); " is 188.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,SubscribeToChannel,The length of the statement  "                    _connection.Send(JsonConvert.SerializeObject(new { @event = Constants.CHANNEL_SUBSCRIBE' data = new { channel = channelName } })); " is 130.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,AuthEndpointCheck,The length of the statement  "                var pusherException = new PusherException("You must set a ChannelAuthorizer property to use private or presence channels"' ErrorCodes.ChannelAuthorizerNotSet); " is 159.
Long Statement,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,Unsubscribe,The length of the statement  "              _connection.Send(JsonConvert.SerializeObject(new { @event = Constants.CHANNEL_UNSUBSCRIBE' data = new { channel = channelName } })); " is 132.
Missing Default,PusherClient,Connection,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Connection.cs,websocket_MessageReceived,The following switch statement is missing a default case: switch (message.@event)                  {                      case Constants.ERROR:                          ParseError(message.data);                          break;                        case Constants.CONNECTION_ESTABLISHED:                          ParseConnectionEstablished(message.data);                          break;                        case Constants.CHANNEL_SUBSCRIPTION_SUCCEEDED:                            if (_pusher.Channels.ContainsKey(message.channel))                          {                              var channel = _pusher.Channels[message.channel];                              channel.SubscriptionSucceeded(message.data);                          }                            break;                        case Constants.CHANNEL_SUBSCRIPTION_ERROR:                            RaiseError(new PusherException("Error received on channel subscriptions: " + e.Message' ErrorCodes.SubscriptionError));                          break;                        case Constants.CHANNEL_MEMBER_ADDED:                            // Assume channel event                          if (_pusher.Channels.ContainsKey(message.channel))                          {                              var channel = _pusher.Channels[message.channel];                                if (channel is PresenceChannel)                              {                                  ((PresenceChannel)channel).AddMember(message.data);                                  break;                              }                          }                            Pusher.Trace.TraceEvent(TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches.");                          break;                        case Constants.CHANNEL_MEMBER_REMOVED:                            // Assume channel event                          if (_pusher.Channels.ContainsKey(message.channel))                          {                              var channel = _pusher.Channels[message.channel];                                if (channel is PresenceChannel)                              {                                  ((PresenceChannel)channel).RemoveMember(message.data);                                  break;                              }                          }                            Pusher.Trace.TraceEvent(TraceEventType.Warning' 0' "Received a presence event on channel '" + message.channel + "'' however there is no presence channel which matches.");                          break;                    }
Missing Default,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,CreateChannel,The following switch statement is missing a default case: switch (type)              {                  case ChannelTypes.Public:                      Channels[channelName] = new Channel(channelName' this);                      break;                  case ChannelTypes.Private:                      AuthEndpointCheck();                      Channels[channelName] = new PrivateChannel(channelName' this);                      break;                  case ChannelTypes.Presence:                      AuthEndpointCheck();                      Channels[channelName] = new PresenceChannel(channelName' this);                      break;              }
Missing Default,PusherClient,Pusher,C:\repos\pusher_pusher-websocket-dotnet\PusherClient\Pusher.cs,_connection_ConnectionStateChanged,The following switch statement is missing a default case: switch (state)              {                  case ConnectionState.Disconnected:                      MarkChannelsAsUnsubscribed();                      break;                  case ConnectionState.Connected:                      SubscribeExistingChannels();                      break;              }
