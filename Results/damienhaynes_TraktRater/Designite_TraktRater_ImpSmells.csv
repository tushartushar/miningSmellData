Implementation smell,Namespace,Class,File,Method,Description
Long Method,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The method has 191 lines of code.
Long Method,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The method has 479 lines of code.
Long Method,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The method has 123 lines of code.
Long Method,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The method has 151 lines of code.
Long Method,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The method has 103 lines of code.
Long Method,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The method has 357 lines of code.
Long Method,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The method has 517 lines of code.
Long Method,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The method has 133 lines of code.
Long Method,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The method has 1431 lines of code.
Long Method,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The method has 106 lines of code.
Long Method,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The method has 211 lines of code.
Complex Method,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,Cyclomatic complexity of the method is 16
Complex Method,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,Cyclomatic complexity of the method is 29
Complex Method,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,Cyclomatic complexity of the method is 56
Complex Method,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,Cyclomatic complexity of the method is 18
Complex Method,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,Cyclomatic complexity of the method is 27
Complex Method,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,Cyclomatic complexity of the method is 23
Complex Method,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,Cyclomatic complexity of the method is 73
Complex Method,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,Cyclomatic complexity of the method is 77
Complex Method,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,Cyclomatic complexity of the method is 22
Complex Method,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,Cyclomatic complexity of the method is 12
Complex Method,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,Cyclomatic complexity of the method is 10
Long Identifier,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,,The length of the parameter chkIcheckMoviesAddWatchedToWatchlist is 36.
Long Identifier,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,,The length of the parameter chkIcheckMoviesUpdateWatchedStatus is 34.
Long Identifier,TraktRater.Settings,AppSettings,C:\repos\damienhaynes_TraktRater\Settings\Settings.cs,,The length of the parameter ICheckMoviesAddWatchedMoviesToWatchlist is 39.
Long Identifier,TraktRater.Settings,AppSettings,C:\repos\damienhaynes_TraktRater\Settings\Settings.cs,,The length of the parameter ICheckMoviesUpdateWatchedStatus is 31.
Long Statement,TraktRater.Sites,ICheckMovies,C:\repos\damienhaynes_TraktRater\Sites\ICheckMovies.cs,ImportRatings,The length of the statement  "            var watchListMovies = AppSettings.ICheckMoviesAddWatchedMoviesToWatchlist ? icmMovieList : icmMovieList.Where(icm => !icm.IsChecked).ToList(); " is 142.
Long Statement,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The length of the statement  "                    criticker.Films.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == m.Title.ToLowerInvariant() && c.Movie.Year == m.Year)); " is 155.
Long Statement,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The length of the statement  "                        var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetSyncMoviesData(criticker.Films.Skip(i * pageSize).Take(pageSize).ToList())); " is 136.
Long Statement,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                        if (lAllMovies.Exists(r => r.Movie.Title == lPagedMovieRatings.First().Movie.Title && r.Movie.Year == lPagedMovieRatings.First().Movie.Year)) " is 141.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                    lMovieRatings.RemoveAll(r => lCurrentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == r.Movie.Title.ToLowerInvariant() && c.Movie.Year == r.Movie.Year.ToYear())); " is 175.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetSyncRateMoviesData(lMovieRatings.Skip(i * pageSize).Take(pageSize).ToList())); " is 138.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                    lMoviesWatched.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear())); " is 171.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                        var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lMoviesWatched.Skip(i * pageSize).Take(pageSize).ToList())); " is 135.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                        lAllMoviesWatchlist.RemoveAll(w => lWatchlistTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear())); " is 178.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                                lAllMoviesWatchlist.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear())); " is 176.
Long Statement,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The length of the statement  "                            var watchlistMoviesResponse = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(lAllMoviesWatchlist.Skip(i * pageSize).Take(pageSize).ToList())); " is 143.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("Requesting ratings {0} - {1}' Total Results: {2}"' movieIndex' (movieIncrement + movieIndex - 1)' count); " is 127.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                    Regex reg = new Regex("<td class=\"title[^\"]*\"><a href=\"/title/(?<cIMDbID>tt\\d+)/[^\"]*\">(?<cTitle>[^<]+)</a>(?:\\s*<br>\\s*Episode:\\s*<a href=\"/title/(?<cEpisodeID>tt\\d+)/[^\"]*\">(?<cEpisodeTitle>[^<]+)</a>)?</td>"); " is 226.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("Requesting watchlist items {0} - {1}' Total Results: {2}"' movieIndex' (movieIncrement + movieIndex - 1)' count); " is 135.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        Regex reg = new Regex("<td class=\"title[^\"]*\"><a href=\"/title/(?<cIMDbID>tt\\d+)/[^\"]*\">(?<cTitle>[^<]+)</a>(?:\\s*<br>\\s*Episode:\\s*<a href=\"/title/(?<cEpisodeID>tt\\d+)/[^\"]*\">(?<cEpisodeTitle>[^<]+)</a>)?</td>"); " is 226.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            watchListItem.Add(IMDbFieldMapping.cTitle' string.Format("{0}: {1}"' find.Groups["cTitle"]' find.Groups["cEpisodeTitle"])); " is 123.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "            var movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList(); " is 154.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(movies.Skip(i * pageSize).Take(pageSize))); " is 125.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 133.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "            var shows = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList(); " is 152.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                    shows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear]))); " is 209.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(shows.Skip(i * pageSize).Take(pageSize))); " is 122.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 131.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 137.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList(); " is 150.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 245.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList())); " is 134.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                                UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 139.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 137.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 256.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                                watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 254.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList())); " is 131.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 270.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0); " is 258.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 133.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                        imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null); " is 150.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                                                                         .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber)))); " is 122.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                            var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize))); " is 123.
Long Statement,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The length of the statement  "                                UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 139.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                    lRateItems.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title == m[LetterboxdFieldMapping.cTitle] && c.Movie.Year.ToString() == m[LetterboxdFieldMapping.cYear])); " is 173.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(lRateItems.Skip(i * pageSize).Take(pageSize))); " is 122.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync Letterboxd ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 139.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                if (!lDiaryItems.Exists(d => d[LetterboxdFieldMapping.cTitle] == movie[LetterboxdFieldMapping.cTitle] && d[LetterboxdFieldMapping.cYear] == movie[LetterboxdFieldMapping.cYear])) " is 177.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                    lDiaryItems.RemoveAll(d => watchedTraktMovies.FirstOrDefault(t => t.Movie.Title == d[LetterboxdFieldMapping.cTitle] && t.Movie.Year.ToString() == d[LetterboxdFieldMapping.cYear]) != null); " is 188.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                        var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lDiaryItems.Skip(i * pageSize).Take(pageSize).ToList())); " is 132.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync Letterboxd watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 146.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,GetRateMoviesData,The length of the statement  "                                     Rating = (int)Math.Ceiling(float.Parse(movie[LetterboxdFieldMapping.cRating]' CultureInfo.InvariantCulture.NumberFormat) * 2)' " is 126.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,GetDateAdded,The length of the statement  "                return DateTime.ParseExact(aItem[LetterboxdFieldMapping.cDateAdded]' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.None).ToString().ToISO8601(); " is 157.
Long Statement,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,GetWatchedDate,The length of the statement  "                    return DateTime.ParseExact(aItem[LetterboxdFieldMapping.cWatchedDate]' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.None).ToString().ToISO8601(); " is 159.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                        var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList())); " is 125.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                    listalMovieRatings.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null); " is 121.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                            var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetWatchedMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList())); " is 142.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                                UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The length of the statement  "                            var watchlistMoviesResponse = TraktAPI.AddMoviesToWatchlist(GetMoviesData(wantList.Skip(i * pageSize).Take(pageSize).ToList())); " is 128.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The length of the statement  "                        var response = TraktAPI.AddShowsToRatings(GetRateShowsData(listalShowRatings.Skip(i * pageSize).Take(pageSize).ToList())); " is 122.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 126.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The length of the statement  "                            var watchlistShowsResponse = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(wantList.Skip(i * pageSize).Take(pageSize).ToList())); " is 129.
Long Statement,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,GetWatchedMoviesData,The length of the statement  "                                     WatchedAt = AppSettings.WatchedOnReleaseDay ? "released" : movie.PublishedDate.ToISO8601(-5) // bug with Listal's GMT conversion " is 128.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count); " is 141.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages); " is 121.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count); " is 141.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(watchedMovies.Skip(i * pageSize).Take(pageSize).ToList())); " is 134.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count); " is 136.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 126.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count); " is 136.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 126.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count); " is 159.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count)); " is 145.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages); " is 135.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count); " is 159.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                                    UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 130.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count); " is 154.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 128.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages); " is 132.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count); " is 154.
Long Statement,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The length of the statement  "                                    UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 128.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "            var lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList(); " is 155.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(lMovies.Skip(i * pageSize).Take(pageSize))); " is 126.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 128.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "            var lShows = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList(); " is 153.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    lShows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear]))); " is 210.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(lShows.Skip(i * pageSize).Take(pageSize))); " is 123.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 126.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null)); " is 121.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    lImdbEpisodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => c.Episode.Ids.TvdbId == e.TvdbId || c.Episode.Ids.ImdbId == e.ImdbId)); " is 135.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 137.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 247.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList())); " is 135.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                                UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 135.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 137.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    lMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 248.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 247.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList())); " is 123.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 130.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    lShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 262.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        lShows.RemoveAll(w => watchedTraktShows.FirstOrDefault(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null); " is 262.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 128.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null)); " is 121.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                    lImdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null); " is 151.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                                                                         .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber)))); " is 122.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize))); " is 124.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count); " is 139.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null); " is 161.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                        lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null); " is 158.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count); " is 138.
Long Statement,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The length of the statement  "                            UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 136.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("Unable to get list of shows from thetvdb.com' NOTE: episode ratings can not be retreived from theTVDb.com unless the Show has also been rated!"' true); " is 173.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                    TraktSyncResponse response = TraktAPI.AddShowsToRatings(GetRateShowsData(filteredShows.Shows.Skip(i * pageSize).Take(pageSize).ToList())); " is 138.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("Unable to sync ratings of {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count); " is 125.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("[{0}/{1}] Requesting episode ratings for {2} from theTVDb.com"' iCounter' showRatings.Shows.Count' showInfo.Show.Name); " is 141.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus(string.Format("Unable to get episode ratings for {0} [{1}] from theTVDb.com"' showInfo.Show.Name' show.Id)' true); " is 135.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("Found {0} episode ratings for {1} on theTVDb.com"' episodeRatings.Episodes.Count' showInfo.Show.Name); " is 124.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} episode ratings for {3}"' iCounter' showRatings.Shows.Count' episodeRatings.Episodes.Count' showInfo.Show.Name); " is 158.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Unable to sync ratings for {2} episodes of {3} as they're not found on trakt.tv!"' iCounter' showRatings.Shows.Count' response.NotFound.Episodes.Count' showInfo.Show.Name); " is 204.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TVDb episodes of {3} as watched to trakt.tv..."' ++i' episodesRated.Count' show.Value.Count' show.Key); " is 149.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The length of the statement  "                        UIUtils.UpdateStatus("[{0}/{1}] Unable to sync {2} TVDb episodes of {3} as watched as they're not found on trakt.tv!"' i' episodesRated.Count' response.NotFound.Episodes.Count' show.Key); " is 187.
Long Statement,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,GetRateEpisodeData,The length of the statement  "                episodeRateData.Episodes.Add(new TraktEpisodeRating { Rating = episode.UserRating' Ids = new TraktEpisodeId { TvdbId = episode.Id } }); " is 135.
Long Statement,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,CreatePrefix,The length of the statement  "            return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString().PadLeft(2' '0')) + ": {1}"; " is 200.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchedHistory,The length of the statement  "                UIUtils.UpdateStatus("Found {0} shows with {1} episodes watched ({2} plays) on trakt.tv"' count' watchedShows.Sum(w => w.Seasons.Sum(we => we.Episodes.Count()))' watchedShows.Sum(s => s.Plays)); " is 194.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchedHistory,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv watched history"' ++i' count' watchedShow.Show.Title); " is 129.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchedHistory,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv watched history"' watchedShow.Show.Title)' true); " is 132.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchedHistory,The length of the statement  "                UIUtils.UpdateStatus("Found {0} movies watched ({1} plays) on trakt.tv"' watchedMovies.Count()' watchedMovies.Sum(s => s.Plays)); " is 129.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchedHistory,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv watched history"' i + 1' pages)' true); " is 123.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromCollection,The length of the statement  "                UIUtils.UpdateStatus("Found {0} shows with {1} episodes collected on trakt.tv"' count' collectedShows.Sum(c => c.Seasons.Sum(ce => ce.Episodes.Count()))); " is 154.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromCollection,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv collection"' ++i' count' collectedShow.Show.Title); " is 126.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromCollection,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv collection"' collectedShow.Show.Title)' true); " is 129.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromRatings,The length of the statement  "                UIUtils.UpdateStatus("Found {0} seasons rated in {1} shows on trakt.tv"' ratedSeasons.Count()' seasonGroupings.Count()); " is 120.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromRatings,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Removing season for {2} from trakt.tv ratings"' ++i' count' seasonGroup.First().Show.Title); " is 124.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromRatings,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv ratings"' i' count' seasonGroup.First().Show.Title)' true); " is 148.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromWatchlist,The length of the statement  "                UIUtils.UpdateStatus("Found {0} seasons watchlisted in {1} shows on trakt.tv"' watchlistedSeasons.Count()' seasonGroupings.Count()); " is 132.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromWatchlist,The length of the statement  "                    UIUtils.UpdateStatus("[{0}/{1}] Removing seasons for {2} from trakt.tv watchlist"' ++i' count' seasonGroup.First().Show.Title); " is 127.
Long Statement,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromWatchlist,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv watchlist"' i' count' seasonGroup.First().Show.Title)' true); " is 150.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,OnLoad,The length of the statement  "            if (!string.IsNullOrEmpty(AppSettings.IMDbRatingsFilename) || !string.IsNullOrEmpty(AppSettings.IMDbWatchlistFilename) || AppSettings.IMDbCustomLists.Count > 0) " is 160.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,The length of the statement  "            if (AppSettings.EnableIMDb)       sites.Add(new IMDb(AppSettings.IMDbRatingsFilename' AppSettings.IMDbWatchlistFilename' AppSettings.IMDbCustomLists' rdnImdbCSV.Checked)); " is 171.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,The length of the statement  "            if (AppSettings.EnableListal)     sites.Add(new Listal(AppSettings.ListalMovieFilename' AppSettings.ListalShowFilename' AppSettings.ListalSyncWatchlist)); " is 154.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,The length of the statement  "            if (AppSettings.EnableLetterboxd) sites.Add(new Letterboxd(AppSettings.LetterboxdRatingsFilename' AppSettings.LetterboxdWatchedFilename' AppSettings.LetterboxdDiaryFilename)); " is 175.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,The length of the statement  "            if (AppSettings.EnableFlixster)   sites.Add(new Flixster(AppSettings.FlixsterUserId' AppSettings.FlixsterSyncWantToSee)); " is 121.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,CheckAccountDetails,The length of the statement  "                    UIUtils.UpdateStatus("You must authorise TraktRater to access your trakt.tv account and enter the 8 character pin code with-in 15 minutes of starting an import"' true); " is 168.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,SetTMDbControlState,The length of the statement  "                lblTMDbMessage.Text = "To get user ratings from TMDb you must first allow this application to access your account details. This needs to be done by you in a webbrowser."; " is 170.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TraktRater)); " is 130.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.lnkTraktOAuth.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkTraktOAuth_LinkClicked); " is 124.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.txtTVDbAccountId' "The Account Identifier can be found in the account tab of\r\nhttp://thetvdb.com web" + " is 134.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.lnkLogFolder.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkLogFolder_LinkClicked); " is 122.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.txtImdbRatingsFilename' "You can export your ratings history to csv from your IMDb account settings.\r\nOnce" + " is 140.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.txtImdbWatchlistFile' "Leave field blank if you\'re not interested in importing a watchlist from IMDb to " + " is 137.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.nudBatchSize' "Set the size of the batch when importing items to trakt.tv. Set lower if having i" + " is 128.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.txtLetterboxdDiaryFile' "The Diary file includes everything marked as watched at a specified date' this da" + " is 138.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.tipHelp.SetToolTip(this.txtiCheckMoviesCsvFile' "Leave field blank if you\'re not interested in importing a watchlist from IMDb to " + " is 139.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.lnkTMDbStart.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkTMDbStart_LinkClicked); " is 122.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.chkSetWatchedOnReleaseDay.Text = "Set the watched date to the release date of the movie or episode when data is not" + " is 123.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.chkSetWatchedOnReleaseDay.CheckedChanged += new System.EventHandler(this.chkSetWatchedOnReleaseDay_CheckedChanged); " is 120.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.lnkListalExport.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkListalExport_LinkClicked); " is 128.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.chkIcheckMoviesUpdateWatchedStatus.CheckedChanged += new System.EventHandler(this.chkIcheckMoviesUpdateWatchedStatus_CheckedChanged); " is 138.
Long Statement,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The length of the statement  "            this.chkIcheckMoviesAddWatchedToWatchlist.CheckedChanged += new System.EventHandler(this.chkIcheckMoviesAddWatchedToWatchlist_CheckedChanged); " is 142.
Long Statement,TraktRater.Sites.API.TMDb,TMDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TMDb\TMDbAPI.cs,GetRatedMovies,The length of the statement  "            string response = TraktWeb.TransmitExtended(string.Format(TMDbURIs.UserRatingsMovies' accountId' sessionId' page.ToString())); " is 126.
Long Statement,TraktRater.Sites.API.TMDb,TMDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TMDb\TMDbAPI.cs,GetRatedShows,The length of the statement  "            string response = TraktWeb.TransmitExtended(string.Format(TMDbURIs.UserRatingsShows' accountId' sessionId' page.ToString())); " is 125.
Long Statement,TraktRater.Sites.API.TMDb,TMDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TMDb\TMDbAPI.cs,GetWatchlistMovies,The length of the statement  "            string response = TraktWeb.TransmitExtended(string.Format(TMDbURIs.UserWatchlistMovies' accountId' sessionId' page.ToString())); " is 128.
Long Statement,TraktRater.Sites.API.TMDb,TMDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TMDb\TMDbAPI.cs,GetWatchlistShows,The length of the statement  "            string response = TraktWeb.TransmitExtended(string.Format(TMDbURIs.UserWatchlistShows' accountId' sessionId' page.ToString())); " is 127.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true); " is 125.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                        UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true); " is 148.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)); " is 134.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                    UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true); " is 153.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                            UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true); " is 220.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                            UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true); " is 177.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                    imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]); " is 128.
Long Statement,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The length of the statement  "                UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true); " is 159.
Long Statement,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MaintenanceDialog)); " is 137.
Empty Catch Block,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,WriteToFile,The method has an empty catch block.
Empty Catch Block,TraktRater.Sites.API.TVDb,TVDbCache,C:\repos\damienhaynes_TraktRater\Sites\API\TVDb\TVDbCache.cs,CacheResponse,The method has an empty catch block.
Empty Catch Block,TraktRater.Sites.API.TVDb,TVDbCache,C:\repos\damienhaynes_TraktRater\Sites\API\TVDb\TVDbCache.cs,DeleteFromCache,The method has an empty catch block.
Empty Catch Block,TraktRater.Settings.XML,XmlWriter,C:\repos\damienhaynes_TraktRater\Settings\XMLWriter.cs,CreateXmlSettings,The method has an empty catch block.
Magic Number,TraktRater.Sites,ICheckMovies,C:\repos\damienhaynes_TraktRater\Sites\ICheckMovies.cs,HandleResponse,The following statement contains a magic number: if (addToWatchlistResponse == null)              {                  UIUtils.UpdateStatus("Error importing ICheckMovies list to trakt.tv"' true);                  Thread.Sleep(2000);              }              else if (addToWatchlistResponse.NotFound.Movies.Count > 0)              {                  UIUtils.UpdateStatus("Unable to process {0} movies as they're not found on trakt.tv!"'                      addToWatchlistResponse.NotFound.Movies.Count);                  Thread.Sleep(1000);              }
Magic Number,TraktRater.Sites,ICheckMovies,C:\repos\damienhaynes_TraktRater\Sites\ICheckMovies.cs,HandleResponse,The following statement contains a magic number: if (addToWatchlistResponse == null)              {                  UIUtils.UpdateStatus("Error importing ICheckMovies list to trakt.tv"' true);                  Thread.Sleep(2000);              }              else if (addToWatchlistResponse.NotFound.Movies.Count > 0)              {                  UIUtils.UpdateStatus("Unable to process {0} movies as they're not found on trakt.tv!"'                      addToWatchlistResponse.NotFound.Movies.Count);                  Thread.Sleep(1000);              }
Magic Number,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The following statement contains a magic number: if (criticker.Films.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                  if (importCancelled) return;                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                        // filter out movies to rate from existing ratings online                      UIUtils.UpdateStatus("Filtering out movies which are already rated");                      criticker.Films.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == m.Title.ToLowerInvariant() && c.Movie.Year == m.Year));                  }                    UIUtils.UpdateStatus(string.Format("Importing {0} Criticker movie ratings..."' criticker.Films.Count));                  if (criticker.Films.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)criticker.Films.Count() / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Criticker movie ratings..."' i + 1' pages);                            var movies = GetRateMoviesData(criticker.Films.Skip(i * pageSize).Take(pageSize).ToList());                          var response = TraktAPI.AddMoviesToRatings(movies);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Criticker movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The following statement contains a magic number: if (criticker.Films.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                  if (importCancelled) return;                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                        // filter out movies to rate from existing ratings online                      UIUtils.UpdateStatus("Filtering out movies which are already rated");                      criticker.Films.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == m.Title.ToLowerInvariant() && c.Movie.Year == m.Year));                  }                    UIUtils.UpdateStatus(string.Format("Importing {0} Criticker movie ratings..."' criticker.Films.Count));                  if (criticker.Films.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)criticker.Films.Count() / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Criticker movie ratings..."' i + 1' pages);                            var movies = GetRateMoviesData(criticker.Films.Skip(i * pageSize).Take(pageSize).ToList());                          var response = TraktAPI.AddMoviesToRatings(movies);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Criticker movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  if (importCancelled) return;                    // mark all movies as watched if rated                  UIUtils.UpdateStatus("Importing {0} Criticker movies as watched..."' criticker.Films.Count);                  if (criticker.Films.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)criticker.Films.Count() / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Criticker movies as watched..."' i + 1' pages);                            var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetSyncMoviesData(criticker.Films.Skip(i * pageSize).Take(pageSize).ToList()));                          if (watchedResponse == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Criticker movies"' true);                              Thread.Sleep(2000);                          }                          else if (watchedResponse.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  if (importCancelled) return;                    // mark all movies as watched if rated                  UIUtils.UpdateStatus("Importing {0} Criticker movies as watched..."' criticker.Films.Count);                  if (criticker.Films.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)criticker.Films.Count() / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Criticker movies as watched..."' i + 1' pages);                            var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetSyncMoviesData(criticker.Films.Skip(i * pageSize).Take(pageSize).ToList()));                          if (watchedResponse == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Criticker movies"' true);                              Thread.Sleep(2000);                          }                          else if (watchedResponse.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Criticker,C:\repos\damienhaynes_TraktRater\Sites\Criticker.cs,GetRateMoviesData,The following statement contains a magic number: traktMovies.AddRange(from movie in movies                                   select new TraktMovieRating                                   {                                       Title = movie.Title'                                       Year = movie.Year'                                       Rating = Convert.ToInt32(Math.Round(movie.Score / 10.0' MidpointRounding.AwayFromZero))'                                       RatedAt = movie.ReviewDate.ToISO8601()                                   });
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: int lPageSize = 50;
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (lPagedMovieRatings == null)              {                  UIUtils.UpdateStatus("Failed to get movie ratings from Flixster"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (lPagedMovieRatings.Count() >= lPageSize)              {                  lAllMovies.AddRange(lPagedMovieRatings);                    int lPage = 2;                  bool lRequestMore = true;                    while (lRequestMore)                  {                      UIUtils.UpdateStatus("Getting page {0} of Flixster rated movies..."' lPage);                      lPagedMovieRatings = FlixsterAPI.GetRatedMovies(mUserId.ToString()' lPage++' lPageSize);                      if (lPagedMovieRatings == null)                      {                          lRequestMore = false;                          UIUtils.UpdateStatus(string.Format("Failed to get movie ratings on page {0} from Flixster"' lPage - 1)' true);                          Thread.Sleep(2000);                      }                      else if (lPagedMovieRatings.Count() > 0)                      {                          // when we request another page' if there are no more movies' it *sometimes* returns the same ones again                          // we can just check if the first movie returned already exists in our collection                          if (lAllMovies.Exists(r => r.Movie.Title == lPagedMovieRatings.First().Movie.Title && r.Movie.Year == lPagedMovieRatings.First().Movie.Year))                          {                              lRequestMore = false;                          }                          else                          {                              lAllMovies.AddRange(lPagedMovieRatings);                                // check if there is any more pages worth requesting based on size returned in last batch                              if (lPagedMovieRatings.Count() < lPageSize)                                  lRequestMore = false;                          }                      }                      else                      {                          lRequestMore = false;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (lPagedMovieRatings.Count() >= lPageSize)              {                  lAllMovies.AddRange(lPagedMovieRatings);                    int lPage = 2;                  bool lRequestMore = true;                    while (lRequestMore)                  {                      UIUtils.UpdateStatus("Getting page {0} of Flixster rated movies..."' lPage);                      lPagedMovieRatings = FlixsterAPI.GetRatedMovies(mUserId.ToString()' lPage++' lPageSize);                      if (lPagedMovieRatings == null)                      {                          lRequestMore = false;                          UIUtils.UpdateStatus(string.Format("Failed to get movie ratings on page {0} from Flixster"' lPage - 1)' true);                          Thread.Sleep(2000);                      }                      else if (lPagedMovieRatings.Count() > 0)                      {                          // when we request another page' if there are no more movies' it *sometimes* returns the same ones again                          // we can just check if the first movie returned already exists in our collection                          if (lAllMovies.Exists(r => r.Movie.Title == lPagedMovieRatings.First().Movie.Title && r.Movie.Year == lPagedMovieRatings.First().Movie.Year))                          {                              lRequestMore = false;                          }                          else                          {                              lAllMovies.AddRange(lPagedMovieRatings);                                // check if there is any more pages worth requesting based on size returned in last batch                              if (lPagedMovieRatings.Count() < lPageSize)                                  lRequestMore = false;                          }                      }                      else                      {                          lRequestMore = false;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (lAllMovieRatings.Any())              {                  var lMovieRatings = new List<FlixsterMovieRating>(lAllMovieRatings);                    UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var lCurrentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (lCurrentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' lCurrentUserMovieRatings.Count());                      lMovieRatings.RemoveAll(r => lCurrentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == r.Movie.Title.ToLowerInvariant() && c.Movie.Year == r.Movie.Year.ToYear()));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lMovieRatings.Count());                    if (lMovieRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMovieRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Flixster rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetSyncRateMoviesData(lMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing Flixster movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (lAllMovieRatings.Any())              {                  var lMovieRatings = new List<FlixsterMovieRating>(lAllMovieRatings);                    UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var lCurrentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (lCurrentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' lCurrentUserMovieRatings.Count());                      lMovieRatings.RemoveAll(r => lCurrentUserMovieRatings.Any(c => c.Movie.Title.ToLowerInvariant() == r.Movie.Title.ToLowerInvariant() && c.Movie.Year == r.Movie.Year.ToYear()));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lMovieRatings.Count());                    if (lMovieRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMovieRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Flixster rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetSyncRateMoviesData(lMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing Flixster movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && lAllMovieRatings.Count > 0)              {                  if (mImportCancelled) return;                    var lMoviesWatched = new List<FlixsterMovieRating>(lAllMovieRatings);                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt.tv...");                  lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (lWatchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lMoviesWatched.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear()));                        // mark all rated movies as watched                      UIUtils.UpdateStatus("Importing {0} Flixster movies as watched..."' lMoviesWatched.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMoviesWatched.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Flixster movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lMoviesWatched.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Flixster movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && lAllMovieRatings.Count > 0)              {                  if (mImportCancelled) return;                    var lMoviesWatched = new List<FlixsterMovieRating>(lAllMovieRatings);                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt.tv...");                  lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (lWatchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lMoviesWatched.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear()));                        // mark all rated movies as watched                      UIUtils.UpdateStatus("Importing {0} Flixster movies as watched..."' lMoviesWatched.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMoviesWatched.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Flixster movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lMoviesWatched.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Flixster movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && lAllMovieRatings.Count > 0)              {                  if (mImportCancelled) return;                    var lMoviesWatched = new List<FlixsterMovieRating>(lAllMovieRatings);                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt.tv...");                  lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (lWatchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lMoviesWatched.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear()));                        // mark all rated movies as watched                      UIUtils.UpdateStatus("Importing {0} Flixster movies as watched..."' lMoviesWatched.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMoviesWatched.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Flixster movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lMoviesWatched.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Flixster movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,ImportRatings,The following statement contains a magic number: if (mSyncWantToSee)              {                  if (mImportCancelled) return;                    lAllMoviesWatchlist.AddRange(lAllMovies.Where(m => m.UserScore == "+"));                    if (lAllMoviesWatchlist.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var lWatchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (lWatchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' lWatchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          lAllMoviesWatchlist.RemoveAll(w => lWatchlistTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear()));                      }                      if (mImportCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (lWatchedTraktMovies == null)                          {                              lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (lWatchedTraktMovies != null)                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                                    // remove movies from sync list which are watched already                                  lAllMoviesWatchlist.RemoveAll(w => lWatchedTraktMovies.Any(t => t.Movie.Title.ToLowerInvariant() == w.Movie.Title.ToLowerInvariant() && t.Movie.Year == w.Movie.Year.ToYear()));                              }                          }                          if (mImportCancelled) return;                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} Flixster wanttosee movies to trakt.tv watchlist..."' lAllMoviesWatchlist.Count());                        if (lAllMoviesWatchlist.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lAllMoviesWatchlist.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Flixster wantlist movies to trakt.tv watchlist..."' i + 1' pages);                                var watchlistMoviesResponse = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(lAllMoviesWatchlist.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchlistMoviesResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watchlist for Flixster movies"' true);                                  Thread.Sleep(2000);                              }                                if (mImportCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,GetSyncRateMoviesData,The following statement contains a magic number: traktMovies.AddRange(from ratedItem in aRatedItems                                   select new TraktMovieRating                                   {                                       Title = ratedItem.Movie.Title'                                       Year =  ratedItem.Movie.Year.ToYear()'                                       Rating = (int)Math.Ceiling(float.Parse(ratedItem.UserScore' CultureInfo.InvariantCulture.NumberFormat) * 2)'                                       RatedAt = GetDateUpdated(ratedItem)                                   });
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,GetDateUpdated,The following statement contains a magic number: if (lLastUpdated.Contains("minute"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(0' int.Parse(lLastUpdatedParts[0])' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("hour"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("day"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("week"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 7' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("month"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 30' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("year"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 365' 0' 0' 0)).ToString().ToISO8601();              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,GetDateUpdated,The following statement contains a magic number: if (lLastUpdated.Contains("minute"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(0' int.Parse(lLastUpdatedParts[0])' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("hour"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("day"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("week"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 7' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("month"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 30' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("year"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 365' 0' 0' 0)).ToString().ToISO8601();              }
Magic Number,TraktRater.Sites,Flixster,C:\repos\damienhaynes_TraktRater\Sites\Flixster.cs,GetDateUpdated,The following statement contains a magic number: if (lLastUpdated.Contains("minute"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(0' int.Parse(lLastUpdatedParts[0])' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("hour"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("day"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0])' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("week"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 7' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("month"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 30' 0' 0' 0)).ToString().ToISO8601();              }              else if (lLastUpdated.Contains("year"))              {                  return DateTime.UtcNow.Subtract(new TimeSpan(int.Parse(lLastUpdatedParts[0]) * 365' 0' 0' 0)).ToString().ToISO8601();              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: int movieIncrement = 250;
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: do              {                  count = ratedItems.Count;                  UIUtils.UpdateStatus("Requesting ratings {0} - {1}' Total Results: {2}"' movieIndex' (movieIncrement + movieIndex - 1)' count);                  string url = "http://www.imdb.com/user/" + username + "/ratings?start=" + movieIndex + "&view=compact";                                  string response = TraktWeb.Transmit(url' null' false);                  if (response == null) break;                  int begin = 0;                    // only log response when set to trace as it's very verbose in this case                  if (AppSettings.LogSeverityLevel >= AppSettings.LoggingSeverity.Trace)                      FileLog.Trace("Response: {0}"' response);                     while ((begin = response.IndexOf("<tr data-item-id"' begin)) > 0)                  {                      var rateItem = new Dictionary<string' string>();                      string sub = response.Substring(begin' response.IndexOf("</tr>"' begin) - begin);                        Regex reg = new Regex("<td class=\"title[^\"]*\"><a href=\"/title/(?<cIMDbID>tt\\d+)/[^\"]*\">(?<cTitle>[^<]+)</a>(?:\\s*<br>\\s*Episode:\\s*<a href=\"/title/(?<cEpisodeID>tt\\d+)/[^\"]*\">(?<cEpisodeTitle>[^<]+)</a>)?</td>");                        // Get IMDb ID                      var find = reg.Match(sub);                      rateItem.Add(IMDbFieldMapping.cIMDbID' find.Groups["cIMDbID"].ToString());                                            // Get Title                      // If it's a TV Episode then include both show and episode title                      if (!string.IsNullOrEmpty(find.Groups["cEpisodeTitle"].ToString()))                          rateItem.Add(IMDbFieldMapping.cTitle' string.Format("{0}: {1}"' find.Groups["cTitle"]' find.Groups["cEpisodeTitle"]));                      else                          rateItem.Add(IMDbFieldMapping.cTitle' find.Groups["cTitle"].ToString());                        // Get User Rating                      reg = new Regex("<td class=\"your_ratings\">\\n    <a>([1-9][0-9]{0'1})</a>\\n</td>");                      find = reg.Match(sub);                      rateItem.Add(IMDbFieldMapping.cRating' find.Groups[1].ToString());                        // Get Year                      reg = new Regex("<td class=\"year\">([1-2][0-9]{3})</td>");                      find = reg.Match(sub);                      rateItem.Add(IMDbFieldMapping.cYear' find.Groups[1].ToString());                        // Get Type                      reg = new Regex("<td class=\"title_type\"> (.*)</td>");                      find = reg.Match(sub);                      if (find.Groups[1].ToString() == string.Empty)                          rateItem.Add(IMDbFieldMapping.cType' "Feature Film");                      else                          rateItem.Add(IMDbFieldMapping.cType' find.Groups[1].ToString());                        // Set provider to web or csv                      rateItem.Add(IMDbFieldMapping.cProvider' "web");                        ratedItems.Add(rateItem);                        begin += 10;                  }                  // fetch next page                  movieIndex += movieIncrement;              }              while (count < ratedItems.Count);
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  UIUtils.UpdateStatus("Reading IMDb watchlist from web...");                  movieIndex = 1;                  movieIncrement = 100;                    do                  {                      count = watchlistItems.Count;                      UIUtils.UpdateStatus("Requesting watchlist items {0} - {1}' Total Results: {2}"' movieIndex' (movieIncrement + movieIndex - 1)' count);                      string url = "http://www.imdb.com/user/" + username + "/watchlist?start=" + movieIndex + "&view=compact";                      string response = TraktWeb.Transmit(url' null' false);                      if (response == null) break;                      int begin = 0;                        // only log response when set to trace as it's very verbose in this case                      if (AppSettings.LogSeverityLevel >= AppSettings.LoggingSeverity.Trace)                          FileLog.Trace("Response: {0}"' response);                         if (response == null) continue;                        while ((begin = response.IndexOf("<tr data-item-id"' begin)) > 0)                      {                          var watchListItem = new Dictionary<string' string>();                          var sub = response.Substring(begin' response.IndexOf("</tr>"' begin) - begin);                            Regex reg = new Regex("<td class=\"title[^\"]*\"><a href=\"/title/(?<cIMDbID>tt\\d+)/[^\"]*\">(?<cTitle>[^<]+)</a>(?:\\s*<br>\\s*Episode:\\s*<a href=\"/title/(?<cEpisodeID>tt\\d+)/[^\"]*\">(?<cEpisodeTitle>[^<]+)</a>)?</td>");                            // Get IMDb ID                          var find = reg.Match(sub);                          watchListItem.Add(IMDbFieldMapping.cIMDbID' find.Groups["cIMDbID"].ToString());                            // Get Title                          // If it's a TV Episode then include both show and episode title                          if (!string.IsNullOrEmpty(find.Groups["cEpisodeTitle"].ToString()))                              watchListItem.Add(IMDbFieldMapping.cTitle' string.Format("{0}: {1}"' find.Groups["cTitle"]' find.Groups["cEpisodeTitle"]));                          else                              watchListItem.Add(IMDbFieldMapping.cTitle' find.Groups["cTitle"].ToString());                            // Get Year                          reg = new Regex("<td class=\"year\">([1-2][0-9]{3})</td>");                          find = reg.Match(sub);                          watchListItem.Add(IMDbFieldMapping.cYear' find.Groups[1].ToString());                            // Get Type                          reg = new Regex("<td class=\"title_type\"> (.*)</td>");                          find = reg.Match(sub);                          if (find.Groups[1].ToString() == string.Empty)                              watchListItem.Add(IMDbFieldMapping.cType' "Feature Film");                          else                              watchListItem.Add(IMDbFieldMapping.cType' find.Groups[1].ToString());                            // Set provider to web or csv                          watchListItem.Add(IMDbFieldMapping.cProvider' "web");                            watchlistItems.Add(watchListItem);                                                    begin += 10;                      }                      // fetch next page                      movieIndex += movieIncrement;                  }                  while (count < watchlistItems.Count);              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  UIUtils.UpdateStatus("Reading IMDb watchlist from web...");                  movieIndex = 1;                  movieIncrement = 100;                    do                  {                      count = watchlistItems.Count;                      UIUtils.UpdateStatus("Requesting watchlist items {0} - {1}' Total Results: {2}"' movieIndex' (movieIncrement + movieIndex - 1)' count);                      string url = "http://www.imdb.com/user/" + username + "/watchlist?start=" + movieIndex + "&view=compact";                      string response = TraktWeb.Transmit(url' null' false);                      if (response == null) break;                      int begin = 0;                        // only log response when set to trace as it's very verbose in this case                      if (AppSettings.LogSeverityLevel >= AppSettings.LoggingSeverity.Trace)                          FileLog.Trace("Response: {0}"' response);                         if (response == null) continue;                        while ((begin = response.IndexOf("<tr data-item-id"' begin)) > 0)                      {                          var watchListItem = new Dictionary<string' string>();                          var sub = response.Substring(begin' response.IndexOf("</tr>"' begin) - begin);                            Regex reg = new Regex("<td class=\"title[^\"]*\"><a href=\"/title/(?<cIMDbID>tt\\d+)/[^\"]*\">(?<cTitle>[^<]+)</a>(?:\\s*<br>\\s*Episode:\\s*<a href=\"/title/(?<cEpisodeID>tt\\d+)/[^\"]*\">(?<cEpisodeTitle>[^<]+)</a>)?</td>");                            // Get IMDb ID                          var find = reg.Match(sub);                          watchListItem.Add(IMDbFieldMapping.cIMDbID' find.Groups["cIMDbID"].ToString());                            // Get Title                          // If it's a TV Episode then include both show and episode title                          if (!string.IsNullOrEmpty(find.Groups["cEpisodeTitle"].ToString()))                              watchListItem.Add(IMDbFieldMapping.cTitle' string.Format("{0}: {1}"' find.Groups["cTitle"]' find.Groups["cEpisodeTitle"]));                          else                              watchListItem.Add(IMDbFieldMapping.cTitle' find.Groups["cTitle"].ToString());                            // Get Year                          reg = new Regex("<td class=\"year\">([1-2][0-9]{3})</td>");                          find = reg.Match(sub);                          watchListItem.Add(IMDbFieldMapping.cYear' find.Groups[1].ToString());                            // Get Type                          reg = new Regex("<td class=\"title_type\"> (.*)</td>");                          find = reg.Match(sub);                          if (find.Groups[1].ToString() == string.Empty)                              watchListItem.Add(IMDbFieldMapping.cType' "Feature Film");                          else                              watchListItem.Add(IMDbFieldMapping.cType' find.Groups[1].ToString());                            // Set provider to web or csv                          watchListItem.Add(IMDbFieldMapping.cProvider' "web");                            watchlistItems.Add(watchListItem);                                                    begin += 10;                      }                      // fetch next page                      movieIndex += movieIncrement;                  }                  while (count < watchlistItems.Count);              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (movies.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus(string.Format("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count()));                      // Filter out movies to rate from existing ratings online                      movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == m[IMDbFieldMapping.cIMDbID]));                  }                    UIUtils.UpdateStatus("Importing {0} new IMDb movie ratings to trakt.tv"' movies.Count());                    if (movies.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(movies.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (movies.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus(string.Format("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count()));                      // Filter out movies to rate from existing ratings online                      movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == m[IMDbFieldMapping.cIMDbID]));                  }                    UIUtils.UpdateStatus("Importing {0} new IMDb movie ratings to trakt.tv"' movies.Count());                    if (movies.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(movies.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (shows.Any())              {                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                      // Filter out shows to rate from existing ratings online                      shows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear])));                  }                    if (shows.Count > 0)                  {                      UIUtils.UpdateStatus("Importing {0} new IMDb tv show ratings to trakt.tv"' shows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)shows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated shows..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(shows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb show ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (shows.Any())              {                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                      // Filter out shows to rate from existing ratings online                      shows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear])));                  }                    if (shows.Count > 0)                  {                      UIUtils.UpdateStatus("Importing {0} new IMDb tv show ratings to trakt.tv"' shows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)shows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated shows..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(shows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb show ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (episodes.Any())              {                  // we can't rely on the imdb id as trakt most likely wont have the info for episodes                    // search and cache all series info needed for syncing                  // use the tvdb API to first search for each unique series name                  // then GetSeries by TVDb ID to get a list of all episodes                  // each episode will have TVDb ID which we can use for syncing.                    imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    UIUtils.UpdateStatus("Retrieving existing tv episode ratings from trakt.tv");                  var currentUserEpisodeRatings = TraktAPI.GetRatedEpisodes();                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv episode ratings on trakt.tv"' currentUserEpisodeRatings.Count());                        // Filter out episodes to rate from existing ratings online                      imdbEpisodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => c.Episode.Ids.TvdbId == e.TvdbId));                  }                    UIUtils.UpdateStatus("Importing {0} episode ratings to trakt.tv"' imdbEpisodes.Count());                    if (imdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesRated = Helper.GetTraktEpisodeRateData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated episodes..."' i + 1' pages);                            var response = TraktAPI.AddsEpisodesToRatings(episodesRated);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (episodes.Any())              {                  // we can't rely on the imdb id as trakt most likely wont have the info for episodes                    // search and cache all series info needed for syncing                  // use the tvdb API to first search for each unique series name                  // then GetSeries by TVDb ID to get a list of all episodes                  // each episode will have TVDb ID which we can use for syncing.                    imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    UIUtils.UpdateStatus("Retrieving existing tv episode ratings from trakt.tv");                  var currentUserEpisodeRatings = TraktAPI.GetRatedEpisodes();                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv episode ratings on trakt.tv"' currentUserEpisodeRatings.Count());                        // Filter out episodes to rate from existing ratings online                      imdbEpisodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => c.Episode.Ids.TvdbId == e.TvdbId));                  }                    UIUtils.UpdateStatus("Importing {0} episode ratings to trakt.tv"' imdbEpisodes.Count());                    if (imdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesRated = Helper.GetTraktEpisodeRateData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated episodes..."' i + 1' pages);                            var response = TraktAPI.AddsEpisodesToRatings(episodesRated);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList();                  if (movies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      watchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (watchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (importCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' movies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                    if (imdbEpisodes != null && imdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList();                  if (movies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      watchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (watchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (importCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' movies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                    if (imdbEpisodes != null && imdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList();                  if (movies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      watchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (watchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (importCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' movies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                    if (imdbEpisodes != null && imdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList();                  if (movies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      watchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (watchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (importCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' movies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                    if (imdbEpisodes != null && imdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  movies = ratedItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie && !string.IsNullOrEmpty(r[IMDbFieldMapping.cRating])).ToList();                  if (movies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      watchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (watchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (importCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            movies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' movies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)movies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(movies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched state for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                    if (imdbEpisodes != null && imdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(imdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDbWeb,C:\repos\damienhaynes_TraktRater\Sites\IMDbWeb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.IMDbSyncWatchlist)              {                  #region Movies                  watchlistMovies.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie));                  if (watchlistMovies.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          watchlistMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && movies.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies != null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies == null)                              {                                  UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                                    // remove movies from sync list which are watched already                                  watchlistMovies.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                              }                          }                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv ..."' watchlistMovies.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(watchlistMovies.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region TV Shows                  IEnumerable<TraktShowPlays> watchedTraktShows = null;                  watchlistShows.AddRange(watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Show));                  if (watchlistShows.Any())                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          watchlistShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && shows.Count > 0)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv");                                // remove shows from sync list which are watched already                              watchlistShows.RemoveAll(w => watchedTraktShows.Count(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != 0);                          }                      }                        //add all shows to watchlist                      UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' watchlistShows.Count());                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)watchlistShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb shows into watchlist..."' i + 1' pages);                            var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(watchlistShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }                  #endregion                    #region Episodes                  imdbEpisodes.Clear();                  episodes = watchlistItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Episode).ToList();                  if (episodes.Any())                  {                      UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' episodes.Count());                        imdbEpisodes.AddRange(episodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                        // filter out existing watchlist episodes                      UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                      var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                      if (watchlistTraktEpisodes != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                          UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                          imdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist && episodes.Count > 0)                      {                          // we already might have it from the shows sync                          if (watchedTraktShows == null)                          {                              UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                                // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                              watchedTraktShows = TraktAPI.GetWatchedShows();                          }                            if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv.");                                imdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                          }                      }                        UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' imdbEpisodes.Count());                        if (imdbEpisodes.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)imdbEpisodes.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus(string.Format("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages));                                var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(imdbEpisodes.Skip(i * pageSize).Take(pageSize)));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Episodes.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (mImportRatings && !ParseCSVFile(mLetterboxdRatingsFile' out lRateItems))              {                  UIUtils.UpdateStatus("Failed to parse Letterboxd ratings file!"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (mImportWatched && !ParseCSVFile(mLetterboxdWatchedFile' out lWatchedItems))              {                  UIUtils.UpdateStatus("Failed to parse Letterboxd watched file!"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (mImportDiary && !ParseCSVFile(mLetterboxdDiaryFile' out lDiaryItems))              {                  UIUtils.UpdateStatus("Failed to parse Letterboxd diary file!"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (lRateItems.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      // Filter out movies to rate from existing ratings online                      lRateItems.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title == m[LetterboxdFieldMapping.cTitle] && c.Movie.Year.ToString() == m[LetterboxdFieldMapping.cYear]));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lRateItems.Count());                    if (lRateItems.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lRateItems.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Letterboxd rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(lRateItems.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing Letterboxd movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync Letterboxd ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (lRateItems.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      // Filter out movies to rate from existing ratings online                      lRateItems.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Title == m[LetterboxdFieldMapping.cTitle] && c.Movie.Year.ToString() == m[LetterboxdFieldMapping.cYear]));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lRateItems.Count());                    if (lRateItems.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lRateItems.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Letterboxd rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(lRateItems.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing Letterboxd movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync Letterboxd ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (lDiaryItems.Count > 0)              {                  // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  var watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lDiaryItems.RemoveAll(d => watchedTraktMovies.FirstOrDefault(t => t.Movie.Title == d[LetterboxdFieldMapping.cTitle] && t.Movie.Year.ToString() == d[LetterboxdFieldMapping.cYear]) != null);                        UIUtils.UpdateStatus("Importing {0} Letterboxd movies as watched..."' lDiaryItems.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lDiaryItems.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Letterboxd movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lDiaryItems.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Letterboxd movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync Letterboxd watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (lDiaryItems.Count > 0)              {                  // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  var watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lDiaryItems.RemoveAll(d => watchedTraktMovies.FirstOrDefault(t => t.Movie.Title == d[LetterboxdFieldMapping.cTitle] && t.Movie.Year.ToString() == d[LetterboxdFieldMapping.cYear]) != null);                        UIUtils.UpdateStatus("Importing {0} Letterboxd movies as watched..."' lDiaryItems.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lDiaryItems.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Letterboxd movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lDiaryItems.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Letterboxd movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync Letterboxd watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,ImportRatings,The following statement contains a magic number: if (lDiaryItems.Count > 0)              {                  // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  var watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (mImportCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                        lDiaryItems.RemoveAll(d => watchedTraktMovies.FirstOrDefault(t => t.Movie.Title == d[LetterboxdFieldMapping.cTitle] && t.Movie.Year.ToString() == d[LetterboxdFieldMapping.cYear]) != null);                        UIUtils.UpdateStatus("Importing {0} Letterboxd movies as watched..."' lDiaryItems.Count);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lDiaryItems.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Letterboxd movies as watched..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(lDiaryItems.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watched status for Letterboxd movies to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync Letterboxd watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Letterboxd,C:\repos\damienhaynes_TraktRater\Sites\Letterboxd.cs,GetRateMoviesData,The following statement contains a magic number: lTraktMovies.AddRange(from movie in aMovies                                   select new TraktMovieRating                                   {                                       Title = movie[LetterboxdFieldMapping.cTitle]'                                       Year = movie[LetterboxdFieldMapping.cYear].ToYear()'                                       Rating = (int)Math.Ceiling(float.Parse(movie[LetterboxdFieldMapping.cRating]' CultureInfo.InvariantCulture.NumberFormat) * 2)'                                       RatedAt = GetDateAdded(movie)                                   });
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (listalMovieRatings.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                  if (importCancelled) return;                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                        // filter out movies to rate from existing ratings online                      listalMovieRatings.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == "tt" + m.IMDbId.ToString()));                  }                    UIUtils.UpdateStatus("Importing {0} new Listal movie ratings..."' listalMovieRatings.Count);                  if (listalMovieRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)listalMovieRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Listal rated movies..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Listal movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (listalMovieRatings.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                  if (importCancelled) return;                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                        // filter out movies to rate from existing ratings online                      listalMovieRatings.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == "tt" + m.IMDbId.ToString()));                  }                    UIUtils.UpdateStatus("Importing {0} new Listal movie ratings..."' listalMovieRatings.Count);                  if (listalMovieRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)listalMovieRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Listal rated movies..."' i + 1' pages);                            var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Listal movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  if (importCancelled) return;                    // mark all movies as watched if rated                  listalMovieRatings = listal.Channel.Items.Where(m => m.Rating > 0).ToList();                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (importCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                      listalMovieRatings.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null);                        UIUtils.UpdateStatus("Importing {0} Listal movies as watched..."' listalMovieRatings.Count);                        if (listalMovieRatings.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)listalMovieRatings.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Listal movies as watched..."' i + 1' pages);                                var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetWatchedMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchedResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for Listal movies"' true);                                  Thread.Sleep(2000);                              }                              else if (watchedResponse.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  if (importCancelled) return;                    // mark all movies as watched if rated                  listalMovieRatings = listal.Channel.Items.Where(m => m.Rating > 0).ToList();                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (importCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                      listalMovieRatings.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null);                        UIUtils.UpdateStatus("Importing {0} Listal movies as watched..."' listalMovieRatings.Count);                        if (listalMovieRatings.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)listalMovieRatings.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Listal movies as watched..."' i + 1' pages);                                var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetWatchedMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchedResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for Listal movies"' true);                                  Thread.Sleep(2000);                              }                              else if (watchedResponse.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  if (importCancelled) return;                    // mark all movies as watched if rated                  listalMovieRatings = listal.Channel.Items.Where(m => m.Rating > 0).ToList();                    // get watched movies from trakt.tv                  UIUtils.UpdateStatus("Requesting watched movies from trakt...");                  watchedTraktMovies = TraktAPI.GetWatchedMovies();                  if (watchedTraktMovies == null)                  {                      UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                      Thread.Sleep(2000);                  }                  else                  {                      if (importCancelled) return;                        UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                      listalMovieRatings.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null);                        UIUtils.UpdateStatus("Importing {0} Listal movies as watched..."' listalMovieRatings.Count);                        if (listalMovieRatings.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)listalMovieRatings.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Listal movies as watched..."' i + 1' pages);                                var watchedResponse = TraktAPI.AddMoviesToWatchedHistory(GetWatchedMoviesData(listalMovieRatings.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchedResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for Listal movies"' true);                                  Thread.Sleep(2000);                              }                              else if (watchedResponse.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched for {0} movies as they're not found on trakt.tv!"' watchedResponse.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                                if (importCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportMovieData,The following statement contains a magic number: if (importWantlist)              {                  if (importCancelled) return;                    var wantList = listal.Channel.Items.Where(m => m.ListType == ListType.wanted.ToString()).ToList();                    if (wantList.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                      if (watchlistTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          wantList.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Requesting watched movies from trakt...");                            // get watched movies from trakt so we don't import movies into watchlist that are already watched                          if (watchedTraktMovies == null)                          {                              watchedTraktMovies = TraktAPI.GetWatchedMovies();                              if (watchedTraktMovies != null)                              {                                  UIUtils.UpdateStatus("Found {0} watched movies on trakt"' watchedTraktMovies.Count());                                    // remove movies from sync list which are watched already                                  wantList.RemoveAll(w => watchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == "tt" + w.IMDbId) != null);                              }                          }                          if (importCancelled) return;                      }                        // add all movies to watchlist                      UIUtils.UpdateStatus("Importing {0} Listal Wantlist movies to trakt.tv Watchlist..."' wantList.Count());                        if (wantList.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)wantList.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Listal wantlist movies to trakt.tv watchlist..."' i + 1' pages);                                var watchlistMoviesResponse = TraktAPI.AddMoviesToWatchlist(GetMoviesData(wantList.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchlistMoviesResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watchlist for Listal movies"' true);                                  Thread.Sleep(2000);                              }                                if (importCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The following statement contains a magic number: if (listalShowRatings.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                  if (importCancelled) return;                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                        // filter out shows to rate from existing ratings online                      listalShowRatings.RemoveAll(m => currentUserShowRatings.Any(c => c.Show.Ids.ImdbId == "tt" + m.IMDbId.ToString()));                  }                    UIUtils.UpdateStatus("Importing {0} Listal tv show ratings..."' listalShowRatings.Count);                  if (listalShowRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)listalShowRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Listal show ratings..."' i + 1' pages);                            var response = TraktAPI.AddShowsToRatings(GetRateShowsData(listalShowRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Listal tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The following statement contains a magic number: if (listalShowRatings.Count > 0)              {                  // get current trakt ratings                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                  if (importCancelled) return;                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                        // filter out shows to rate from existing ratings online                      listalShowRatings.RemoveAll(m => currentUserShowRatings.Any(c => c.Show.Ids.ImdbId == "tt" + m.IMDbId.ToString()));                  }                    UIUtils.UpdateStatus("Importing {0} Listal tv show ratings..."' listalShowRatings.Count);                  if (listalShowRatings.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)listalShowRatings.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} Listal show ratings..."' i + 1' pages);                            var response = TraktAPI.AddShowsToRatings(GetRateShowsData(listalShowRatings.Skip(i * pageSize).Take(pageSize).ToList()));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for Listal tv shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,ImportShowData,The following statement contains a magic number: if (importWantlist)              {                  if (importCancelled) return;                    var wantList = listal.Channel.Items.Where(m => m.ListType == ListType.wanted.ToString()).ToList();                    if (wantList.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var watchlistTraktShows = TraktAPI.GetWatchlistShows();                      if (watchlistTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          wantList.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == "tt" + w.IMDbId) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Requesting watched shows from trakt...");                            // get watched movies from trakt so we don't import shows into watchlist that are already watched                          var watchedTraktShows = TraktAPI.GetWatchedShows();                          if (watchedTraktShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv.");                                // remove shows from sync list which are watched already                              wantList.RemoveAll(w => watchedTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == "tt" + w.IMDbId) != null);                          }                            if (importCancelled) return;                      }                        // add movies to watchlist                      UIUtils.UpdateStatus("Importing {0} Listal Wantlist tv shows to trakt.tv Watchlist..."' wantList.Count());                        if (wantList.Count > 0)                      {                          int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)wantList.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} Listal wantlist tv shows to trakt.tv watchlist..."' i + 1' pages);                                var watchlistShowsResponse = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(wantList.Skip(i * pageSize).Take(pageSize).ToList()));                              if (watchlistShowsResponse == null)                              {                                  UIUtils.UpdateStatus("Failed to send watchlist for Listal tv shows"' true);                                  Thread.Sleep(2000);                              }                                if (importCancelled) return;                          }                      }                  }              }
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,GetRateMoviesData,The following statement contains a magic number: traktMovies.AddRange(from movie in movies                                   select new TraktMovieRating                                   {                                       Ids = new TraktMovieId { ImdbId = "tt" + movie.IMDbId }'                                       Title = movie.Title'                                       Rating = movie.Rating'                                       RatedAt = movie.PublishedDate.ToISO8601(-5) // bug with Listal's GMT conversion                                   });
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,GetWatchedMoviesData,The following statement contains a magic number: traktMovies.AddRange(from movie in movies                                   select new TraktMovieWatched                                   {                                       Title = movie.Title'                                       Ids = new TraktMovieId { ImdbId = "tt" + movie.IMDbId }'                                       WatchedAt = AppSettings.WatchedOnReleaseDay ? "released" : movie.PublishedDate.ToISO8601(-5) // bug with Listal's GMT conversion                                   });
Magic Number,TraktRater.Sites,Listal,C:\repos\damienhaynes_TraktRater\Sites\Listal.cs,GetRateShowsData,The following statement contains a magic number: traktShows.AddRange(from show in shows                                  select new TraktShowRating                                  {                                      Ids = new TraktShowId { ImdbId = "tt" + show.IMDbId }'                                      Title = show.Title'                                      Rating = show.Rating'                                      RatedAt = show.PublishedDate.ToISO8601(-5) // bug with Listal's GMT conversion                                  });
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (string.IsNullOrEmpty(AppSettings.TMDbSessionId))              {                  UIUtils.UpdateStatus("Getting TMDb Authentication Session Id...");                  var sessionResponse = TMDbAPI.RequestSessionId(AppSettings.TMDbRequestToken);                  if (sessionResponse == null || !sessionResponse.Success)                  {                      UIUtils.UpdateStatus("Unable to get TMDb Authentication Session Id."' true);                      Thread.Sleep(2000);                      return;                  }                  AppSettings.TMDbSessionId = sessionResponse.SessionId;              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (accountInfo == null)              {                  UIUtils.UpdateStatus("Unable to get TMDb Account Id."' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (movieRatings != null && movieRatings.TotalResults > 0)              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                      movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                    if (movieRatings.Movies.Count > 0)                  {                      var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                        // add to list of movies to mark as watched                      watchedMovies.AddRange(movieRatings.Movies);                  }                    // get each page of movies                  for (int i = 2; i <= movieRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages);                      movieRatings = TMDbAPI.GetRatedMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (movieRatings == null || movieRatings.TotalResults == 0 || importCancelled) return;                        if (currentUserMovieRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                          movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                        if (movieRatings.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                            // add to list of movies to mark as watched                          watchedMovies.AddRange(movieRatings.Movies);                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (movieRatings != null && movieRatings.TotalResults > 0)              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                      movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                    if (movieRatings.Movies.Count > 0)                  {                      var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                        // add to list of movies to mark as watched                      watchedMovies.AddRange(movieRatings.Movies);                  }                    // get each page of movies                  for (int i = 2; i <= movieRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages);                      movieRatings = TMDbAPI.GetRatedMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (movieRatings == null || movieRatings.TotalResults == 0 || importCancelled) return;                        if (currentUserMovieRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                          movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                        if (movieRatings.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                            // add to list of movies to mark as watched                          watchedMovies.AddRange(movieRatings.Movies);                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (movieRatings != null && movieRatings.TotalResults > 0)              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                      movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                    if (movieRatings.Movies.Count > 0)                  {                      var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                        // add to list of movies to mark as watched                      watchedMovies.AddRange(movieRatings.Movies);                  }                    // get each page of movies                  for (int i = 2; i <= movieRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages);                      movieRatings = TMDbAPI.GetRatedMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (movieRatings == null || movieRatings.TotalResults == 0 || importCancelled) return;                        if (currentUserMovieRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                          movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                        if (movieRatings.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                            // add to list of movies to mark as watched                          watchedMovies.AddRange(movieRatings.Movies);                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (movieRatings != null && movieRatings.TotalResults > 0)              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                      movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                    if (movieRatings.Movies.Count > 0)                  {                      var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                        // add to list of movies to mark as watched                      watchedMovies.AddRange(movieRatings.Movies);                  }                    // get each page of movies                  for (int i = 2; i <= movieRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages);                      movieRatings = TMDbAPI.GetRatedMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (movieRatings == null || movieRatings.TotalResults == 0 || importCancelled) return;                        if (currentUserMovieRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                          movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                        if (movieRatings.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                            // add to list of movies to mark as watched                          watchedMovies.AddRange(movieRatings.Movies);                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (movieRatings != null && movieRatings.TotalResults > 0)              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var currentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (currentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' currentUserMovieRatings.Count());                      UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                      movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                    if (movieRatings.Movies.Count > 0)                  {                      var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                        // add to list of movies to mark as watched                      watchedMovies.AddRange(movieRatings.Movies);                  }                    // get each page of movies                  for (int i = 2; i <= movieRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb Rated Movies..."' movieRatings.Page' movieRatings.TotalPages);                      movieRatings = TMDbAPI.GetRatedMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (movieRatings == null || movieRatings.TotalResults == 0 || importCancelled) return;                        if (currentUserMovieRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out movies already rated on trakt.tv");                          movieRatings.Movies.RemoveAll(m => currentUserMovieRatings.Any(c => c.Movie.Ids.TmdbId == m.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Movie Ratings..."' movieRatings.Page' movieRatings.TotalPages' movieRatings.Movies.Count);                        if (movieRatings.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToRatings(GetRateMoviesData(movieRatings.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                            // add to list of movies to mark as watched                          watchedMovies.AddRange(movieRatings.Movies);                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && watchedMovies.Count > 0)              {                  // mark all rated movies as watched                  UIUtils.UpdateStatus("Importing {0} TMDb movies as watched..."' watchedMovies.Count);                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchedMovies.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} TMDb movies as watched..."' i + 1' pages);                        var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(watchedMovies.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watched status for TMDb movies to trakt.tv"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && watchedMovies.Count > 0)              {                  // mark all rated movies as watched                  UIUtils.UpdateStatus("Importing {0} TMDb movies as watched..."' watchedMovies.Count);                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchedMovies.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} TMDb movies as watched..."' i + 1' pages);                        var response = TraktAPI.AddMoviesToWatchedHistory(GetSyncWatchedMoviesData(watchedMovies.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watched status for TMDb movies to trakt.tv"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: {                  UIUtils.UpdateStatus("Retrieving existing show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user show ratings on trakt.tv"' currentUserShowRatings.Count());                      UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                      showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                    if (showRatings == null || showRatings.Shows.Count > 0)                  {                      var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (importCancelled) return;                  }                    // get each page of movies                  for (int i = 2; i <= showRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb rated shows..."' showRatings.Page' showRatings.TotalPages);                      showRatings = TMDbAPI.GetRatedShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (importCancelled) return;                        if (currentUserShowRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                          showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                        if (showRatings == null || showRatings.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: {                  UIUtils.UpdateStatus("Retrieving existing show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user show ratings on trakt.tv"' currentUserShowRatings.Count());                      UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                      showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                    if (showRatings == null || showRatings.Shows.Count > 0)                  {                      var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (importCancelled) return;                  }                    // get each page of movies                  for (int i = 2; i <= showRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb rated shows..."' showRatings.Page' showRatings.TotalPages);                      showRatings = TMDbAPI.GetRatedShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (importCancelled) return;                        if (currentUserShowRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                          showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                        if (showRatings == null || showRatings.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: {                  UIUtils.UpdateStatus("Retrieving existing show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user show ratings on trakt.tv"' currentUserShowRatings.Count());                      UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                      showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                    if (showRatings == null || showRatings.Shows.Count > 0)                  {                      var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (importCancelled) return;                  }                    // get each page of movies                  for (int i = 2; i <= showRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb rated shows..."' showRatings.Page' showRatings.TotalPages);                      showRatings = TMDbAPI.GetRatedShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (importCancelled) return;                        if (currentUserShowRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                          showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                        if (showRatings == null || showRatings.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: {                  UIUtils.UpdateStatus("Retrieving existing show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user show ratings on trakt.tv"' currentUserShowRatings.Count());                      UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                      showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                    if (showRatings == null || showRatings.Shows.Count > 0)                  {                      var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (importCancelled) return;                  }                    // get each page of movies                  for (int i = 2; i <= showRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb rated shows..."' showRatings.Page' showRatings.TotalPages);                      showRatings = TMDbAPI.GetRatedShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (importCancelled) return;                        if (currentUserShowRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                          showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                        if (showRatings == null || showRatings.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: {                  UIUtils.UpdateStatus("Retrieving existing show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user show ratings on trakt.tv"' currentUserShowRatings.Count());                      UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                      showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb Show Ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                    if (showRatings == null || showRatings.Shows.Count > 0)                  {                      var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send ratings for TMDb shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (importCancelled) return;                  }                    // get each page of movies                  for (int i = 2; i <= showRatings.TotalPages; i++)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb rated shows..."' showRatings.Page' showRatings.TotalPages);                      showRatings = TMDbAPI.GetRatedShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                      if (importCancelled) return;                        if (currentUserShowRatings != null)                      {                          UIUtils.UpdateStatus("Filtering out shows already rated on trakt.tv");                          showRatings.Shows.RemoveAll(s => currentUserShowRatings.Any(c => c.Show.Ids.TmdbId == s.Id));                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb show ratings..."' showRatings.Page' showRatings.TotalPages' showRatings.Shows.Count);                        if (showRatings == null || showRatings.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToRatings(GetRateShowsData(showRatings.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send ratings for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.TMDbSyncWatchlist)              {                  #region Movies                  IEnumerable<TraktMoviePlays> traktWatchedMovies = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist movies...");                  var moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                      var traktWatchlistMovies = TraktAPI.GetWatchlistMovies();                      if (traktWatchlistMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' traktWatchlistMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                          moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                      }                      if (importCancelled) return;                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched movies from trakt.tv");                          traktWatchedMovies = TraktAPI.GetWatchedMovies();                            if (traktWatchedMovies != null)                          {                              UIUtils.UpdateStatus("Found {0} watched movies on trakt.tv"' traktWatchedMovies.Count());                              UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                              moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                          }                      }                      if (importCancelled) return;                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                        if (moviesInWatchlist.Movies.Count > 0)                      {                          var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus(string.Format("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count));                              Thread.Sleep(1000);                          }                            if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= moviesInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages);                          moviesInWatchlist = TMDbAPI.GetWatchlistMovies(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (moviesInWatchlist != null && moviesInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(w => traktWatchlistMovies.FirstOrDefault(t => t.Movie.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedMovies != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watched on trakt.tv");                                  moviesInWatchlist.Movies.RemoveAll(m => traktWatchedMovies.Any(c => c.Movie.Ids.TmdbId == m.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist movies..."' moviesInWatchlist.Page' moviesInWatchlist.TotalPages' moviesInWatchlist.Movies.Count);                                if (moviesInWatchlist.Movies.Count > 0)                              {                                  var response = TraktAPI.AddMoviesToWatchlist(GetSyncMoviesData(moviesInWatchlist.Movies));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb movies"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Movies.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion                    #region Shows                  IEnumerable<TraktShowPlays> traktWatchedShows = null;                    UIUtils.UpdateStatus("Getting first batch of TMDb watchlist shows...");                  var showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' 1);                  if (importCancelled) return;                    if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                  {                      UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                      var traktWatchlistShows = TraktAPI.GetWatchlistShows();                      if (traktWatchlistShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                          showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                      }                        if (AppSettings.IgnoreWatchedForWatchlist)                      {                          UIUtils.UpdateStatus("Retrieving existing watched shows from trakt.tv.");                          traktWatchedShows = TraktAPI.GetWatchedShows();                            if (traktWatchedShows != null)                          {                              UIUtils.UpdateStatus("Found {0} watched shows on trakt.tv"' traktWatchedShows.Count());                              UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                              showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                          }                      }                        UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                        if (showsInWatchlist.Shows.Count > 0)                      {                          var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows."' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                          if (importCancelled) return;                      }                        // get each page of movies                      for (int i = 2; i <= showsInWatchlist.TotalPages; i++)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Getting next batch of TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages);                          showsInWatchlist = TMDbAPI.GetWatchlistShows(accountInfo.Id.ToString()' AppSettings.TMDbSessionId' i);                          if (importCancelled) return;                            if (showsInWatchlist != null || showsInWatchlist.TotalResults > 0)                          {                              if (traktWatchlistShows != null)                              {                                  UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' traktWatchlistShows.Count());                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(w => traktWatchlistShows.FirstOrDefault(t => t.Show.Ids.TmdbId == w.Id) != null);                              }                                if (traktWatchedShows != null)                              {                                  UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watched on trakt.tv");                                  showsInWatchlist.Shows.RemoveAll(s => traktWatchedShows.Any(c => c.Show.Ids.TmdbId == s.Id));                              }                                UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TMDb watchlist shows..."' showsInWatchlist.Page' showsInWatchlist.TotalPages' showsInWatchlist.Shows.Count);                                if (showsInWatchlist.Shows.Count > 0)                              {                                  var response = TraktAPI.AddShowsToWatchlist(GetSyncShowsData(showsInWatchlist.Shows));                                  if (response == null)                                  {                                      UIUtils.UpdateStatus("Failed to send watchlist for TMDb shows"' true);                                      Thread.Sleep(2000);                                  }                                  else if (response.NotFound.Shows.Count > 0)                                  {                                      UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                                      Thread.Sleep(1000);                                  }                                  if (importCancelled) return;                              }                          }                      }                  }                  if (importCancelled) return;                  #endregion              }
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,GetSyncShowsData,The following statement contains a magic number: traktShows.AddRange(from show in shows                                  select new TraktShow                                   {                                       Ids = new TraktShowId { TmdbId = show.Id}'                                       Title = show.Title'                                       Year = int.Parse(show.ReleaseDate.Substring(0'4))                                   });
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,GetRateShowsData,The following statement contains a magic number: traktShows.AddRange(from show in shows                                  select new TraktShowRating                                   {                                       Ids = new TraktShowId { TmdbId = show.Id }'                                       Title = show.Title'                                       Year = string.IsNullOrEmpty(show.ReleaseDate) ? 0 : int.Parse(show.ReleaseDate.Substring(0' 4))'                                       Rating = Convert.ToInt32(Math.Round(show.Rating' MidpointRounding.AwayFromZero))                                   });
Magic Number,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,RequestToken,The following statement contains a magic number: if (response == null || !response.Success)              {                  UIUtils.UpdateStatus("Failed to get TMDb token"' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (mImportCsvRatings && !ParseCSVFile(mRatingsFileCsv' out lRateItems))              {                  UIUtils.UpdateStatus("Failed to parse IMDb ratings file!"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (mImportCsvWatchlist && !ParseCSVFile(mWatchlistFileCsv' out lWatchlistItems))              {                  UIUtils.UpdateStatus("Failed to parse IMDb watchlist file!"' true);                  Thread.Sleep(2000);                  return;              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (mImportCsvCustomLists)              {                  foreach(var list in mCustomListsCsvs)                  {                      UIUtils.UpdateStatus("Reading IMDb custom list '{0}' export..."' list);                      var lCustomList = new List<Dictionary<string' string>>();                        if (!ParseCSVFile(list' out lCustomList))                      {                          UIUtils.UpdateStatus("Failed to parse IMDb custom list file!"' true);                          Thread.Sleep(2000);                          return;                      }                        lCustomLists.Add(list' lCustomList);                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lMovies.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var lCurrentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (lCurrentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' lCurrentUserMovieRatings.Count());                      // Filter out movies to rate from existing ratings online                      lMovies.RemoveAll(m => lCurrentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == m[IMDbFieldMapping.cIMDbID]));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lMovies.Count());                    if (lMovies.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(lMovies.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lMovies.Any())              {                  UIUtils.UpdateStatus("Retrieving existing movie ratings from trakt.tv");                  var lCurrentUserMovieRatings = TraktAPI.GetRatedMovies();                    if (lCurrentUserMovieRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user movie ratings on trakt.tv"' lCurrentUserMovieRatings.Count());                      // Filter out movies to rate from existing ratings online                      lMovies.RemoveAll(m => lCurrentUserMovieRatings.Any(c => c.Movie.Ids.ImdbId == m[IMDbFieldMapping.cIMDbID]));                  }                    UIUtils.UpdateStatus("Importing {0} new movie ratings to trakt.tv"' lMovies.Count());                    if (lMovies.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated movies..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddMoviesToRatings(Helper.GetRateMoviesData(lMovies.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb movie ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lShows.Any())              {                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                      // Filter out shows to rate from existing ratings online                      lShows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear])));                  }                    UIUtils.UpdateStatus("Importing {0} tv show ratings to trakt.tv"' lShows.Count());                    if (lShows.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated shows..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(lShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb tv show ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lShows.Any())              {                  UIUtils.UpdateStatus("Retrieving existing tv show ratings from trakt.tv");                  var currentUserShowRatings = TraktAPI.GetRatedShows();                    if (currentUserShowRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv show ratings on trakt.tv"' currentUserShowRatings.Count());                      // Filter out shows to rate from existing ratings online                      lShows.RemoveAll(s => currentUserShowRatings.Any(c => (c.Show.Ids.ImdbId == s[IMDbFieldMapping.cIMDbID]) || (c.Show.Title == s[IMDbFieldMapping.cTitle] && c.Show.Year.ToString() == s[IMDbFieldMapping.cYear])));                  }                    UIUtils.UpdateStatus("Importing {0} tv show ratings to trakt.tv"' lShows.Count());                    if (lShows.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated shows..."' i + 1' pages);                            TraktSyncResponse response = TraktAPI.AddShowsToRatings(Helper.GetRateShowsData(lShows.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb tv show ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lImdbCsvEpisodes.Any())              {                  // we can't rely on the imdb id as trakt most likely wont have the info for episodes                    // search and cache all series info needed for syncing                  // use the tvdb API to first search for each unique series name                  // then GetSeries by TVDb ID to get a list of all episodes                  // each episode will have TVDb ID which we can use for syncing.                    lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    UIUtils.UpdateStatus("Retrieving existing tv episode ratings from trakt.tv");                  var currentUserEpisodeRatings = TraktAPI.GetRatedEpisodes();                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv episode ratings on trakt.tv"' currentUserEpisodeRatings.Count());                        // Filter out episodes to rate from existing ratings online                      lImdbEpisodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => c.Episode.Ids.TvdbId == e.TvdbId || c.Episode.Ids.ImdbId == e.ImdbId));                  }                    UIUtils.UpdateStatus("Importing {0} episode ratings to trakt.tv"' lImdbEpisodes.Count());                    if (lImdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesRated = Helper.GetTraktEpisodeRateData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated episodes..."' i + 1' pages);                            var response = TraktAPI.AddsEpisodesToRatings(episodesRated);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lImdbCsvEpisodes.Any())              {                  // we can't rely on the imdb id as trakt most likely wont have the info for episodes                    // search and cache all series info needed for syncing                  // use the tvdb API to first search for each unique series name                  // then GetSeries by TVDb ID to get a list of all episodes                  // each episode will have TVDb ID which we can use for syncing.                    lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    UIUtils.UpdateStatus("Retrieving existing tv episode ratings from trakt.tv");                  var currentUserEpisodeRatings = TraktAPI.GetRatedEpisodes();                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Found {0} user tv episode ratings on trakt.tv"' currentUserEpisodeRatings.Count());                        // Filter out episodes to rate from existing ratings online                      lImdbEpisodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => c.Episode.Ids.TvdbId == e.TvdbId || c.Episode.Ids.ImdbId == e.ImdbId));                  }                    UIUtils.UpdateStatus("Importing {0} episode ratings to trakt.tv"' lImdbEpisodes.Count());                    if (lImdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesRated = Helper.GetTraktEpisodeRateData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb rated episodes..."' i + 1' pages);                            var response = TraktAPI.AddsEpisodesToRatings(episodesRated);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes ratings to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync ratings for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie).ToList();                  FileLog.Info("Found {0} movies in CSV file"' lMovies.Count);                  if (lMovies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (lWatchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (mImportCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' lMovies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                              if (mImportCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                  if (lImdbEpisodes != null && lImdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie).ToList();                  FileLog.Info("Found {0} movies in CSV file"' lMovies.Count);                  if (lMovies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (lWatchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (mImportCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' lMovies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                              if (mImportCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                  if (lImdbEpisodes != null && lImdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie).ToList();                  FileLog.Info("Found {0} movies in CSV file"' lMovies.Count);                  if (lMovies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (lWatchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (mImportCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' lMovies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                              if (mImportCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                  if (lImdbEpisodes != null && lImdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie).ToList();                  FileLog.Info("Found {0} movies in CSV file"' lMovies.Count);                  if (lMovies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (lWatchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (mImportCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' lMovies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                              if (mImportCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                  if (lImdbEpisodes != null && lImdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched)              {                  #region Movies                  // compare all movies rated against what's not watched on trakt                  lMovies = lRateItems.Where(r => r[IMDbFieldMapping.cType].ItemType() == IMDbType.Movie).ToList();                  FileLog.Info("Found {0} movies in CSV file"' lMovies.Count);                  if (lMovies.Count > 0)                  {                      // get watched movies from trakt.tv                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                      lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                      if (lWatchedTraktMovies == null)                      {                          UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv' skipping watched movie import"' true);                          Thread.Sleep(2000);                      }                      else                      {                          if (mImportCancelled) return;                            UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watched movies that are already watched on trakt.tv");                            lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                            // mark all rated movies as watched                          UIUtils.UpdateStatus("Importing {0} IMDb movies as watched..."' lMovies.Count);                            int pageSize = AppSettings.BatchSize;                          int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                          for (int i = 0; i < pages; i++)                          {                              UIUtils.UpdateStatus("Importing page {0}/{1} IMDb movies as watched..."' i + 1' pages);                                var response = TraktAPI.AddMoviesToWatchedHistory(Helper.GetSyncWatchedMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                              if (response == null)                              {                                  UIUtils.UpdateStatus("Failed to send watched status for IMDb movies to trakt.tv"' true);                                  Thread.Sleep(2000);                              }                              else if (response.NotFound.Movies.Count > 0)                              {                                  UIUtils.UpdateStatus("Unable to sync watched states for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                                  Thread.Sleep(1000);                              }                              if (mImportCancelled) return;                          }                      }                  }                  #endregion                    #region Episodes                  if (lImdbEpisodes != null && lImdbEpisodes.Any())                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          var episodesWatched = Helper.GetTraktEpisodeWatchedData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize));                            UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watched episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchedHistory(episodesWatched);                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episodes as watched to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync {0} IMDb episodes as watched' as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }                  #endregion              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lMovies.Any())              {                  UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                  var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                  if (watchlistTraktMovies != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                      lMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lMovies.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                        // get watched movies from trakt so we don't import movies into watchlist that are already watched                      if (lWatchedTraktMovies != null)                      {                          lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                          if (lWatchedTraktMovies == null)                          {                              UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                              Thread.Sleep(2000);                          }                      }                        if (lWatchedTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                            // remove movies from sync list which are watched already                          lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                  }                    // add movies to watchlist                  UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv..."' lMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist movies..."' i + 1' pages);                        var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                        if (mImportCancelled) return;                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lMovies.Any())              {                  UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                  var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                  if (watchlistTraktMovies != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                      lMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lMovies.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                        // get watched movies from trakt so we don't import movies into watchlist that are already watched                      if (lWatchedTraktMovies != null)                      {                          lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                          if (lWatchedTraktMovies == null)                          {                              UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                              Thread.Sleep(2000);                          }                      }                        if (lWatchedTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                            // remove movies from sync list which are watched already                          lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                  }                    // add movies to watchlist                  UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv..."' lMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist movies..."' i + 1' pages);                        var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                        if (mImportCancelled) return;                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lMovies.Any())              {                  UIUtils.UpdateStatus("Requesting existing watchlist movies from trakt...");                  var watchlistTraktMovies = TraktAPI.GetWatchlistMovies();                  if (watchlistTraktMovies != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist movies on trakt"' watchlistTraktMovies.Count());                      UIUtils.UpdateStatus("Filtering out watchlist movies that are already in watchlist on trakt.tv");                      lMovies.RemoveAll(w => watchlistTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lMovies.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting watched movies from trakt...");                        // get watched movies from trakt so we don't import movies into watchlist that are already watched                      if (lWatchedTraktMovies != null)                      {                          lWatchedTraktMovies = TraktAPI.GetWatchedMovies();                          if (lWatchedTraktMovies == null)                          {                              UIUtils.UpdateStatus("Failed to get watched movies from trakt.tv"' true);                              Thread.Sleep(2000);                          }                      }                        if (lWatchedTraktMovies != null)                      {                          UIUtils.UpdateStatus("Found {0} watched movies on trakt"' lWatchedTraktMovies.Count());                          UIUtils.UpdateStatus("Filtering out watchlist movies that are watched on trakt.tv");                            // remove movies from sync list which are watched already                          lMovies.RemoveAll(w => lWatchedTraktMovies.FirstOrDefault(t => t.Movie.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Movie.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle] && t.Movie.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                  }                    // add movies to watchlist                  UIUtils.UpdateStatus("Importing {0} IMDb watchlist movies to trakt.tv..."' lMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)lMovies.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist movies..."' i + 1' pages);                        var response = TraktAPI.AddMoviesToWatchlist(Helper.GetSyncMoviesData(lMovies.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watchlist for IMDb movies"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Movies.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watchlist for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                          Thread.Sleep(1000);                      }                        if (mImportCancelled) return;                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lShows.Any())              {                  UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                  var watchlistTraktShows = TraktAPI.GetWatchlistShows();                  if (watchlistTraktShows != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                      UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                      lShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lShows.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting watched shows from trakt...");                        // get watched movies from trakt so we don't import shows into watchlist that are already watched                      watchedTraktShows = TraktAPI.GetWatchedShows();                      if (watchedTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv.");                            // remove shows from sync list which are watched already                          lShows.RemoveAll(w => watchedTraktShows.FirstOrDefault(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                  }                    // add shows to watchlist                  UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' lShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)lShows.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist shows..."' i + 1' pages);                        var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(lShows.Skip(i * pageSize).Take(pageSize)));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (mImportCancelled) return;                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lShows.Any())              {                  UIUtils.UpdateStatus("Requesting existing watchlist shows from trakt...");                  var watchlistTraktShows = TraktAPI.GetWatchlistShows();                  if (watchlistTraktShows != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist shows on trakt"' watchlistTraktShows.Count());                      UIUtils.UpdateStatus("Filtering out watchlist shows that are already in watchlist on trakt.tv");                      lShows.RemoveAll(w => watchlistTraktShows.FirstOrDefault(t => t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID] || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lShows.Count > 0)                  {                      UIUtils.UpdateStatus("Requesting watched shows from trakt...");                        // get watched movies from trakt so we don't import shows into watchlist that are already watched                      watchedTraktShows = TraktAPI.GetWatchedShows();                      if (watchedTraktShows != null)                      {                          UIUtils.UpdateStatus("Found {0} watched shows on trakt"' watchedTraktShows.Count());                          UIUtils.UpdateStatus("Filtering out watchlist shows containing watched episodes on trakt.tv.");                            // remove shows from sync list which are watched already                          lShows.RemoveAll(w => watchedTraktShows.FirstOrDefault(t => (t.Show.Ids.ImdbId == w[IMDbFieldMapping.cIMDbID]) || (t.Show.Title.ToLowerInvariant() == w[IMDbFieldMapping.cTitle].ToLowerInvariant() && t.Show.Year.ToString() == w[IMDbFieldMapping.cYear])) != null);                      }                  }                    // add shows to watchlist                  UIUtils.UpdateStatus("Importing {0} IMDb watchlist shows to trakt.tv..."' lShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)lShows.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist shows..."' i + 1' pages);                        var response = TraktAPI.AddShowsToWatchlist(Helper.GetSyncShowsData(lShows.Skip(i * pageSize).Take(pageSize)));                      if (response == null)                      {                          UIUtils.UpdateStatus("Failed to send watchlist for IMDb tv shows"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync watchlist for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                        if (mImportCancelled) return;                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lImdbCsvEpisodes.Any())              {                  UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' lImdbCsvEpisodes.Count());                    lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    // filter out existing watchlist episodes                  UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                  var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                  if (watchlistTraktEpisodes != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                      UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                      lImdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lImdbEpisodes.Count > 0)                  {                      // we already might have it from the shows sync                      if (watchedTraktShows == null)                      {                          UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                            // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                      }                        if (watchedTraktShows != null)                      {                          UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv");                            lImdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                      }                  }                    UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' lImdbEpisodes.Count());                    if (lImdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lImdbCsvEpisodes.Any())              {                  UIUtils.UpdateStatus("Found {0} IMDb watchlist episodes"' lImdbCsvEpisodes.Count());                    lImdbEpisodes.AddRange(lImdbCsvEpisodes.Select(Helper.GetIMDbEpisodeFromTVDb).Where(imdbEpisode => imdbEpisode != null));                    // filter out existing watchlist episodes                  UIUtils.UpdateStatus("Requesting existing watchlist episodes from trakt...");                  var watchlistTraktEpisodes = TraktAPI.GetWatchlistEpisodes();                  if (watchlistTraktEpisodes != null)                  {                      UIUtils.UpdateStatus("Found {0} watchlist episodes on trakt"' watchlistTraktEpisodes.Count());                      UIUtils.UpdateStatus("Filtering out watchlist episodes that are already in watchlist on trakt.tv");                      lImdbEpisodes.RemoveAll(e => watchlistTraktEpisodes.FirstOrDefault(w => w.Episode.Ids.ImdbId == e.ImdbId || w.Episode.Ids.TvdbId == e.TvdbId) != null);                  }                    if (AppSettings.IgnoreWatchedForWatchlist && lImdbEpisodes.Count > 0)                  {                      // we already might have it from the shows sync                      if (watchedTraktShows == null)                      {                          UIUtils.UpdateStatus("Requesting watched episodes from trakt...");                            // get watched episodes from trakt so we don't import episodes into watchlist that are already watched                          watchedTraktShows = TraktAPI.GetWatchedShows();                      }                        if (watchedTraktShows != null)                      {                          UIUtils.UpdateStatus("Filtering out watchlist episodes containing watched episodes on trakt.tv");                            lImdbEpisodes.RemoveAll(e => watchedTraktShows.Where(s => s.Show.Ids.ImdbId == e.ImdbId)                                                                           .Any(s => s.Seasons.Exists(se => se.Number == e.SeasonNumber && se.Episodes.Exists(ep => ep.Number == e.EpisodeNumber))));                      }                  }                    UIUtils.UpdateStatus("Importing {0} episodes in watchlist to trakt.tv"' lImdbEpisodes.Count());                    if (lImdbEpisodes.Count > 0)                  {                      int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbEpisodes.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb watchlist episodes..."' i + 1' pages);                            var response = TraktAPI.AddEpisodesToWatchlist(Helper.GetTraktEpisodeData(lImdbEpisodes.Skip(i * pageSize).Take(pageSize)));                          if (response == null)                          {                              UIUtils.UpdateStatus("Error importing IMDb episode watchlist to trakt.tv"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Episodes.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync watchlist for {0} IMDb episodes as they're not found on trakt.tv!"' response.NotFound.Episodes.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,IMDb,C:\repos\damienhaynes_TraktRater\Sites\IMDb.cs,ImportRatings,The following statement contains a magic number: if (lCustomLists.Count > 0)              {                  UIUtils.UpdateStatus("Requesting custom lists from trakt...");                  var lTraktCustomLists = TraktAPI.GetCustomLists();                  if (lTraktCustomLists == null)                  {                      UIUtils.UpdateStatus("Error requesting custom lists from trakt.tv"' true);                      Thread.Sleep(2000);                      return;                  }                    UIUtils.UpdateStatus("Found {0} custom lists on trakt.tv"' lTraktCustomLists.Count());                    foreach (var list in lCustomLists)                  {                      bool lListCreated = false;                      string lListName = Path.GetFileNameWithoutExtension(list.Key);                        // create the list if we don't have it                      TraktListDetail lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                        if (lTraktCustomList == null)                      {                          UIUtils.UpdateStatus("Creating new custom list '{0}' on trakt.tv"' lListName);                          var lTraktList = new TraktList                          {                              Name = lListName'                              DisplayNumbers = true'                          };                            lTraktCustomList = TraktAPI.CreateCustomList(lTraktList);                          if (lTraktCustomList == null)                          {                              UIUtils.UpdateStatus("Error creating custom list on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            lListCreated = true;                      }                        // get the CSV list items parsed                      var lIMDbListItems = list.Value;                                            var lImdbListMovies = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Movie).ToList();                      var lImdbListShows = lIMDbListItems.Where(l => l.ItemType() == IMDbType.Show).ToList();                        // if the list already exists' get current items for list                       if (!lListCreated)                      {                          lTraktCustomList = lTraktCustomLists.FirstOrDefault(l => l.Name == lListName);                                                    UIUtils.UpdateStatus("Requesting existing custom list '{0}' items from trakt..."' lListName);                          var lTraktListItems = TraktAPI.GetCustomListItems(lTraktCustomList.Ids.Trakt.ToString());                          if (lTraktListItems == null)                          {                              UIUtils.UpdateStatus("Error requesting custom list items on trakt.tv' skipping list creation"' true);                              Thread.Sleep(2000);                              continue;                          }                            // filter out existing items from CSV so we don't send again                          FileLog.Info("Filtering out existing items from IMDb list '{0}' so we don't send again to trakt.tv"' lListName);                          lImdbListMovies.RemoveAll(d => d.ItemType() == IMDbType.Movie && lTraktListItems.FirstOrDefault(l => l.Movie.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                          lImdbListShows.RemoveAll(d => d.ItemType() == IMDbType.Show && lTraktListItems.FirstOrDefault(l => l.Show.Ids.ImdbId == d[IMDbFieldMapping.cIMDbID]) != null);                      }                        #region Movies                        UIUtils.UpdateStatus("Importing {0} movies into {1} custom list..."' lImdbListMovies.Count()' lListName);                        int pageSize = AppSettings.BatchSize;                      int pages = (int)Math.Ceiling((double)lImdbListMovies.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list movies..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktMovieSync = new TraktSyncAll                          {                              Movies = Helper.GetSyncMoviesData(lImdbListMovies.Skip(i * pageSize).Take(pageSize).ToList()).Movies                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktMovieSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb movies"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Movies.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} movies as they're not found on trakt.tv!"' response.NotFound.Movies.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                      #endregion                        #region Shows                        UIUtils.UpdateStatus("Importing {0} shows into {1} custom list..."' lImdbListShows.Count()' lListName);                        pageSize = AppSettings.BatchSize;                      pages = (int)Math.Ceiling((double)lImdbListShows.Count / pageSize);                      for (int i = 0; i < pages; i++)                      {                          UIUtils.UpdateStatus("Importing page {0}/{1} IMDb custom list shows..."' i + 1' pages);                            // create list sync object to hold list items                          var lTraktShowSync = new TraktSyncAll                          {                              Shows = Helper.GetSyncShowsData(lImdbListShows.Skip(i * pageSize).Take(pageSize).ToList()).Shows                          };                            var response = TraktAPI.AddItemsToList(lTraktCustomList.Ids.Trakt.ToString()' lTraktShowSync);                          if (response == null)                          {                              UIUtils.UpdateStatus("Failed to send custom list items for IMDb shows"' true);                              Thread.Sleep(2000);                          }                          else if (response.NotFound.Shows.Count > 0)                          {                              UIUtils.UpdateStatus("Unable to sync custom list items for {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                              Thread.Sleep(1000);                          }                            if (mImportCancelled) return;                      }                        #endregion                  }              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,TVDb,The following statement contains a magic number: Enabled = !string.IsNullOrEmpty(accountId) && accountId.Length == 16;
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: if (filteredShows.Shows.Count > 0)              {                  int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)filteredShows.Shows.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} TVDb rated shows..."' i + 1' pages);                        TraktSyncResponse response = TraktAPI.AddShowsToRatings(GetRateShowsData(filteredShows.Shows.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Error importing show ratings to trakt.tv"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings of {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                  }              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: if (filteredShows.Shows.Count > 0)              {                  int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)filteredShows.Shows.Count / pageSize);                  for (int i = 0; i < pages; i++)                  {                      UIUtils.UpdateStatus("Importing page {0}/{1} TVDb rated shows..."' i + 1' pages);                        TraktSyncResponse response = TraktAPI.AddShowsToRatings(GetRateShowsData(filteredShows.Shows.Skip(i * pageSize).Take(pageSize).ToList()));                      if (response == null)                      {                          UIUtils.UpdateStatus("Error importing show ratings to trakt.tv"' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Shows.Count > 0)                      {                          UIUtils.UpdateStatus("Unable to sync ratings of {0} shows as they're not found on trakt.tv!"' response.NotFound.Shows.Count);                          Thread.Sleep(1000);                      }                      if (importCancelled) return;                  }              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: foreach (var show in showRatings.Shows)              {                  if (importCancelled) return;                  iCounter++;                    UIUtils.UpdateStatus("[{0}/{1}] Getting show info for tvdb series id {2}"' iCounter' showRatings.Shows.Count' show.Id);                    // we need to get the episode/season numbers as trakt api requires this                  // tvdb only returns episode ids' so user series info call to this info                  TVDbShow showInfo = TVDbAPI.GetShowInfo(show.Id.ToString());                  if (showInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get show info for tvdb series id: {0}"' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                  UIUtils.UpdateStatus("[{0}/{1}] Requesting episode ratings for {2} from theTVDb.com"' iCounter' showRatings.Shows.Count' showInfo.Show.Name);                    // get episode ratings for each show in showratings                  TVDbEpisodeRatings episodeRatings = TVDbAPI.GetEpisodeRatings(accountId' show.Id.ToString());                  if (episodeRatings == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get episode ratings for {0} [{1}] from theTVDb.com"' showInfo.Show.Name' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                    UIUtils.UpdateStatus("Found {0} episode ratings for {1} on theTVDb.com"' episodeRatings.Episodes.Count' showInfo.Show.Name);                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Filtering out {0} tvdb episode ratings that already exist at trakt.tv"' showInfo.Show.Name);                        // Filter out episodes to rate from existing ratings online' using tvdb episode id's                      episodeRatings.Episodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => ((c.Episode.Ids.TvdbId == e.Id))));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} episode ratings for {3}"' iCounter' showRatings.Shows.Count' episodeRatings.Episodes.Count' showInfo.Show.Name);                  if (episodeRatings.Episodes.Count == 0) continue;                    // submit one series at a time                  var episodesToRate = GetRateEpisodeData(episodeRatings);                  var response = TraktAPI.AddsEpisodesToRatings(episodesToRate);                  if (response == null)                  {                      UIUtils.UpdateStatus(string.Format("Error importing {0} episode ratings to trakt.tv"' showInfo.Show.Name)' true);                      Thread.Sleep(2000);                      continue;                  }                  else if (response.NotFound.Episodes.Count > 0)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Unable to sync ratings for {2} episodes of {3} as they're not found on trakt.tv!"' iCounter' showRatings.Shows.Count' response.NotFound.Episodes.Count' showInfo.Show.Name);                      Thread.Sleep(1000);                  }                  episodesRated.Add(showInfo.Show.Name' episodesToRate.Episodes);              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: foreach (var show in showRatings.Shows)              {                  if (importCancelled) return;                  iCounter++;                    UIUtils.UpdateStatus("[{0}/{1}] Getting show info for tvdb series id {2}"' iCounter' showRatings.Shows.Count' show.Id);                    // we need to get the episode/season numbers as trakt api requires this                  // tvdb only returns episode ids' so user series info call to this info                  TVDbShow showInfo = TVDbAPI.GetShowInfo(show.Id.ToString());                  if (showInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get show info for tvdb series id: {0}"' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                  UIUtils.UpdateStatus("[{0}/{1}] Requesting episode ratings for {2} from theTVDb.com"' iCounter' showRatings.Shows.Count' showInfo.Show.Name);                    // get episode ratings for each show in showratings                  TVDbEpisodeRatings episodeRatings = TVDbAPI.GetEpisodeRatings(accountId' show.Id.ToString());                  if (episodeRatings == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get episode ratings for {0} [{1}] from theTVDb.com"' showInfo.Show.Name' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                    UIUtils.UpdateStatus("Found {0} episode ratings for {1} on theTVDb.com"' episodeRatings.Episodes.Count' showInfo.Show.Name);                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Filtering out {0} tvdb episode ratings that already exist at trakt.tv"' showInfo.Show.Name);                        // Filter out episodes to rate from existing ratings online' using tvdb episode id's                      episodeRatings.Episodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => ((c.Episode.Ids.TvdbId == e.Id))));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} episode ratings for {3}"' iCounter' showRatings.Shows.Count' episodeRatings.Episodes.Count' showInfo.Show.Name);                  if (episodeRatings.Episodes.Count == 0) continue;                    // submit one series at a time                  var episodesToRate = GetRateEpisodeData(episodeRatings);                  var response = TraktAPI.AddsEpisodesToRatings(episodesToRate);                  if (response == null)                  {                      UIUtils.UpdateStatus(string.Format("Error importing {0} episode ratings to trakt.tv"' showInfo.Show.Name)' true);                      Thread.Sleep(2000);                      continue;                  }                  else if (response.NotFound.Episodes.Count > 0)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Unable to sync ratings for {2} episodes of {3} as they're not found on trakt.tv!"' iCounter' showRatings.Shows.Count' response.NotFound.Episodes.Count' showInfo.Show.Name);                      Thread.Sleep(1000);                  }                  episodesRated.Add(showInfo.Show.Name' episodesToRate.Episodes);              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: foreach (var show in showRatings.Shows)              {                  if (importCancelled) return;                  iCounter++;                    UIUtils.UpdateStatus("[{0}/{1}] Getting show info for tvdb series id {2}"' iCounter' showRatings.Shows.Count' show.Id);                    // we need to get the episode/season numbers as trakt api requires this                  // tvdb only returns episode ids' so user series info call to this info                  TVDbShow showInfo = TVDbAPI.GetShowInfo(show.Id.ToString());                  if (showInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get show info for tvdb series id: {0}"' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                  UIUtils.UpdateStatus("[{0}/{1}] Requesting episode ratings for {2} from theTVDb.com"' iCounter' showRatings.Shows.Count' showInfo.Show.Name);                    // get episode ratings for each show in showratings                  TVDbEpisodeRatings episodeRatings = TVDbAPI.GetEpisodeRatings(accountId' show.Id.ToString());                  if (episodeRatings == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get episode ratings for {0} [{1}] from theTVDb.com"' showInfo.Show.Name' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                    UIUtils.UpdateStatus("Found {0} episode ratings for {1} on theTVDb.com"' episodeRatings.Episodes.Count' showInfo.Show.Name);                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Filtering out {0} tvdb episode ratings that already exist at trakt.tv"' showInfo.Show.Name);                        // Filter out episodes to rate from existing ratings online' using tvdb episode id's                      episodeRatings.Episodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => ((c.Episode.Ids.TvdbId == e.Id))));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} episode ratings for {3}"' iCounter' showRatings.Shows.Count' episodeRatings.Episodes.Count' showInfo.Show.Name);                  if (episodeRatings.Episodes.Count == 0) continue;                    // submit one series at a time                  var episodesToRate = GetRateEpisodeData(episodeRatings);                  var response = TraktAPI.AddsEpisodesToRatings(episodesToRate);                  if (response == null)                  {                      UIUtils.UpdateStatus(string.Format("Error importing {0} episode ratings to trakt.tv"' showInfo.Show.Name)' true);                      Thread.Sleep(2000);                      continue;                  }                  else if (response.NotFound.Episodes.Count > 0)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Unable to sync ratings for {2} episodes of {3} as they're not found on trakt.tv!"' iCounter' showRatings.Shows.Count' response.NotFound.Episodes.Count' showInfo.Show.Name);                      Thread.Sleep(1000);                  }                  episodesRated.Add(showInfo.Show.Name' episodesToRate.Episodes);              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: foreach (var show in showRatings.Shows)              {                  if (importCancelled) return;                  iCounter++;                    UIUtils.UpdateStatus("[{0}/{1}] Getting show info for tvdb series id {2}"' iCounter' showRatings.Shows.Count' show.Id);                    // we need to get the episode/season numbers as trakt api requires this                  // tvdb only returns episode ids' so user series info call to this info                  TVDbShow showInfo = TVDbAPI.GetShowInfo(show.Id.ToString());                  if (showInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get show info for tvdb series id: {0}"' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                  UIUtils.UpdateStatus("[{0}/{1}] Requesting episode ratings for {2} from theTVDb.com"' iCounter' showRatings.Shows.Count' showInfo.Show.Name);                    // get episode ratings for each show in showratings                  TVDbEpisodeRatings episodeRatings = TVDbAPI.GetEpisodeRatings(accountId' show.Id.ToString());                  if (episodeRatings == null)                  {                      UIUtils.UpdateStatus(string.Format("Unable to get episode ratings for {0} [{1}] from theTVDb.com"' showInfo.Show.Name' show.Id)' true);                      Thread.Sleep(2000);                      continue;                  }                  if (importCancelled) return;                    UIUtils.UpdateStatus("Found {0} episode ratings for {1} on theTVDb.com"' episodeRatings.Episodes.Count' showInfo.Show.Name);                    if (currentUserEpisodeRatings != null)                  {                      UIUtils.UpdateStatus("Filtering out {0} tvdb episode ratings that already exist at trakt.tv"' showInfo.Show.Name);                        // Filter out episodes to rate from existing ratings online' using tvdb episode id's                      episodeRatings.Episodes.RemoveAll(e => currentUserEpisodeRatings.Any(c => ((c.Episode.Ids.TvdbId == e.Id))));                  }                    UIUtils.UpdateStatus("[{0}/{1}] Importing {2} episode ratings for {3}"' iCounter' showRatings.Shows.Count' episodeRatings.Episodes.Count' showInfo.Show.Name);                  if (episodeRatings.Episodes.Count == 0) continue;                    // submit one series at a time                  var episodesToRate = GetRateEpisodeData(episodeRatings);                  var response = TraktAPI.AddsEpisodesToRatings(episodesToRate);                  if (response == null)                  {                      UIUtils.UpdateStatus(string.Format("Error importing {0} episode ratings to trakt.tv"' showInfo.Show.Name)' true);                      Thread.Sleep(2000);                      continue;                  }                  else if (response.NotFound.Episodes.Count > 0)                  {                      UIUtils.UpdateStatus("[{0}/{1}] Unable to sync ratings for {2} episodes of {3} as they're not found on trakt.tv!"' iCounter' showRatings.Shows.Count' response.NotFound.Episodes.Count' showInfo.Show.Name);                      Thread.Sleep(1000);                  }                  episodesRated.Add(showInfo.Show.Name' episodesToRate.Episodes);              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && episodesRated.Any())              {                  int i = 0;                  foreach (var show in episodesRated)                  {                      if (importCancelled) return;                        // mark all episodes as watched if rated                                      UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TVDb episodes of {3} as watched to trakt.tv..."' ++i' episodesRated.Count' show.Value.Count' show.Key);                      var watchedEpisodes = GetWatchedEpisodeData(show.Value);                                       var response = TraktAPI.AddEpisodesToWatchedHistory(watchedEpisodes);                      if (response == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to send watched status for TVDb '{0}' episodes"' show.Key)' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Episodes.Count > 0)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Unable to sync {2} TVDb episodes of {3} as watched as they're not found on trakt.tv!"' i' episodesRated.Count' response.NotFound.Episodes.Count' show.Key);                          Thread.Sleep(1000);                      }                  }              }
Magic Number,TraktRater.Sites,TVDb,C:\repos\damienhaynes_TraktRater\Sites\TVDb.cs,ImportRatings,The following statement contains a magic number: if (AppSettings.MarkAsWatched && episodesRated.Any())              {                  int i = 0;                  foreach (var show in episodesRated)                  {                      if (importCancelled) return;                        // mark all episodes as watched if rated                                      UIUtils.UpdateStatus("[{0}/{1}] Importing {2} TVDb episodes of {3} as watched to trakt.tv..."' ++i' episodesRated.Count' show.Value.Count' show.Key);                      var watchedEpisodes = GetWatchedEpisodeData(show.Value);                                       var response = TraktAPI.AddEpisodesToWatchedHistory(watchedEpisodes);                      if (response == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to send watched status for TVDb '{0}' episodes"' show.Key)' true);                          Thread.Sleep(2000);                      }                      else if (response.NotFound.Episodes.Count > 0)                      {                          UIUtils.UpdateStatus("[{0}/{1}] Unable to sync {2} TVDb episodes of {3} as watched as they're not found on trakt.tv!"' i' episodesRated.Count' response.NotFound.Episodes.Count' show.Key);                          Thread.Sleep(1000);                      }                  }              }
Magic Number,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,Info,The following statement contains a magic number: if ((int)AppSettings.LogSeverityLevel >= 2)                  WriteToFile(String.Format(CreatePrefix()' "INFO"' log));
Magic Number,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,Debug,The following statement contains a magic number: if ((int)AppSettings.LogSeverityLevel >= 3)                  WriteToFile(String.Format(CreatePrefix()' "DEBG"' log));
Magic Number,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,Trace,The following statement contains a magic number: if ((int)AppSettings.LogSeverityLevel >= 4)                  WriteToFile(String.Format(CreatePrefix()' "TRACE"' log));
Magic Number,TraktRater.Logger,FileLog,C:\repos\damienhaynes_TraktRater\Logger\FileLog.cs,CreatePrefix,The following statement contains a magic number: return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " [{0}] " + String.Format("[{0}][{1}]"' Thread.CurrentThread.Name' Thread.CurrentThread.ManagedThreadId.ToString().PadLeft(2' '0')) + ": {1}";
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchedHistory,The following statement contains a magic number: if (watchedShows != null)              {                  int i = 0;                  int count = watchedShows.Count();                  UIUtils.UpdateStatus("Found {0} shows with {1} episodes watched ({2} plays) on trakt.tv"' count' watchedShows.Sum(w => w.Seasons.Sum(we => we.Episodes.Count()))' watchedShows.Sum(s => s.Plays));                    // remove one show at a time                  // there could be many underlying episodes per show                  foreach (var watchedShow in watchedShows)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = new List<TraktShow>                          {                              new TraktShow                              {                                  Ids = new TraktShowId                                  {                                       Trakt = watchedShow.Show.Ids.Trakt                                  }                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv watched history"' ++i' count' watchedShow.Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromWatchedHistory(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv watched history"' watchedShow.Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watched shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchedHistory,The following statement contains a magic number: if (watchedShows != null)              {                  int i = 0;                  int count = watchedShows.Count();                  UIUtils.UpdateStatus("Found {0} shows with {1} episodes watched ({2} plays) on trakt.tv"' count' watchedShows.Sum(w => w.Seasons.Sum(we => we.Episodes.Count()))' watchedShows.Sum(s => s.Plays));                    // remove one show at a time                  // there could be many underlying episodes per show                  foreach (var watchedShow in watchedShows)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = new List<TraktShow>                          {                              new TraktShow                              {                                  Ids = new TraktShowId                                  {                                       Trakt = watchedShow.Show.Ids.Trakt                                  }                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv watched history"' ++i' count' watchedShow.Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromWatchedHistory(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv watched history"' watchedShow.Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watched shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchedHistory,The following statement contains a magic number: if (watchedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies watched ({1} plays) on trakt.tv"' watchedMovies.Count()' watchedMovies.Sum(s => s.Plays));                                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = watchedMovies.Select(w => w.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv watched history"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromWatchedHistory(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv watched history"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watched movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchedHistory,The following statement contains a magic number: if (watchedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies watched ({1} plays) on trakt.tv"' watchedMovies.Count()' watchedMovies.Sum(s => s.Plays));                                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = watchedMovies.Select(w => w.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv watched history"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromWatchedHistory(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv watched history"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watched movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromCollection,The following statement contains a magic number: if (collectedShows != null)              {                  int i = 0;                  int count = collectedShows.Count();                  UIUtils.UpdateStatus("Found {0} shows with {1} episodes collected on trakt.tv"' count' collectedShows.Sum(c => c.Seasons.Sum(ce => ce.Episodes.Count())));                    // remove one show at a time                  // there could be many underlying episodes per show                  foreach (var collectedShow in collectedShows)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = new List<TraktShow>                          {                              new TraktShow                              {                                  Ids = new TraktShowId                                  {                                       Trakt = collectedShow.Show.Ids.Trakt                                  }                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv collection"' ++i' count' collectedShow.Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromCollection(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv collection"' collectedShow.Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of collected shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromCollection,The following statement contains a magic number: if (collectedShows != null)              {                  int i = 0;                  int count = collectedShows.Count();                  UIUtils.UpdateStatus("Found {0} shows with {1} episodes collected on trakt.tv"' count' collectedShows.Sum(c => c.Seasons.Sum(ce => ce.Episodes.Count())));                    // remove one show at a time                  // there could be many underlying episodes per show                  foreach (var collectedShow in collectedShows)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = new List<TraktShow>                          {                              new TraktShow                              {                                  Ids = new TraktShowId                                  {                                       Trakt = collectedShow.Show.Ids.Trakt                                  }                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing all episodes of {2} from trakt.tv collection"' ++i' count' collectedShow.Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromCollection(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to remove episodes of {0} from trakt.tv collection"' collectedShow.Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of collected shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromCollection,The following statement contains a magic number: if (collectedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies collected on trakt.tv"' collectedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)collectedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = collectedMovies.Select(c => c.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv collection"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromCollection(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv collection"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of collected movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromCollection,The following statement contains a magic number: if (collectedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies collected on trakt.tv"' collectedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)collectedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = collectedMovies.Select(c => c.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv collection"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromCollection(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv collection"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of collected movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromRatings,The following statement contains a magic number: if (ratedEpisodes != null)              {                  UIUtils.UpdateStatus("Found {0} episodes rated on trakt.tv"' ratedEpisodes.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedEpisodes.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktEpisodeSync                      {                          Episodes = ratedEpisodes.Select(r => new TraktEpisode { Ids = r.Episode.Ids })                                                  .Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing episodes from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveEpisodesFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove episodes from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated episodes from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromRatings,The following statement contains a magic number: if (ratedEpisodes != null)              {                  UIUtils.UpdateStatus("Found {0} episodes rated on trakt.tv"' ratedEpisodes.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedEpisodes.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktEpisodeSync                      {                          Episodes = ratedEpisodes.Select(r => new TraktEpisode { Ids = r.Episode.Ids })                                                  .Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing episodes from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveEpisodesFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove episodes from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated episodes from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveShowsFromRatings,The following statement contains a magic number: if (ratedShows != null)              {                  UIUtils.UpdateStatus("Found {0} shows rated on trakt.tv"' ratedShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedShows.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = ratedShows.Select(r => r.Show).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing shows from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove shows from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveShowsFromRatings,The following statement contains a magic number: if (ratedShows != null)              {                  UIUtils.UpdateStatus("Found {0} shows rated on trakt.tv"' ratedShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedShows.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = ratedShows.Select(r => r.Show).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing shows from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove shows from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromRatings,The following statement contains a magic number: if (ratedSeasons != null)              {                  // group the seasons by tv show id                  // remove season ratings by show i.e. one show at a time                  // we get ratings for seasons ungrouped and sorted by date added                  var seasonGroupings = ratedSeasons.GroupBy(r => r.Show.Ids.Trakt' r => r);                    UIUtils.UpdateStatus("Found {0} seasons rated in {1} shows on trakt.tv"' ratedSeasons.Count()' seasonGroupings.Count());                    int i = 0;                  int count = seasonGroupings.Count();                                    foreach (var seasonGroup in seasonGroupings)                  {                      if (Cancel) return;                        // get the seasons rated for this show                      var seasons = from rating in seasonGroup                                    select new TraktSeason                                    {                                        Number = rating.Season.Number                                    };                        var syncData = new TraktSeasonSync                      {                          Shows = new List<TraktSeasonSync.TraktShowSeason>                          {                              new TraktSeasonSync.TraktShowSeason                              {                                  Ids = new TraktShowId { Trakt = seasonGroup.Key }'                                  Seasons = seasons.ToList()                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing season for {2} from trakt.tv ratings"' ++i' count' seasonGroup.First().Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveSeasonsFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv ratings"' i' count' seasonGroup.First().Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated seasons from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromRatings,The following statement contains a magic number: if (ratedSeasons != null)              {                  // group the seasons by tv show id                  // remove season ratings by show i.e. one show at a time                  // we get ratings for seasons ungrouped and sorted by date added                  var seasonGroupings = ratedSeasons.GroupBy(r => r.Show.Ids.Trakt' r => r);                    UIUtils.UpdateStatus("Found {0} seasons rated in {1} shows on trakt.tv"' ratedSeasons.Count()' seasonGroupings.Count());                    int i = 0;                  int count = seasonGroupings.Count();                                    foreach (var seasonGroup in seasonGroupings)                  {                      if (Cancel) return;                        // get the seasons rated for this show                      var seasons = from rating in seasonGroup                                    select new TraktSeason                                    {                                        Number = rating.Season.Number                                    };                        var syncData = new TraktSeasonSync                      {                          Shows = new List<TraktSeasonSync.TraktShowSeason>                          {                              new TraktSeasonSync.TraktShowSeason                              {                                  Ids = new TraktShowId { Trakt = seasonGroup.Key }'                                  Seasons = seasons.ToList()                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing season for {2} from trakt.tv ratings"' ++i' count' seasonGroup.First().Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveSeasonsFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv ratings"' i' count' seasonGroup.First().Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated seasons from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromRatings,The following statement contains a magic number: if (ratedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies rated on trakt.tv"' ratedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = ratedMovies.Select(r => r.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromRatings,The following statement contains a magic number: if (ratedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies rated on trakt.tv"' ratedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)ratedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = ratedMovies.Select(r => r.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv ratings"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromRatings(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv ratings"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of rated movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchlist,The following statement contains a magic number: if (watchlistedEpisodes != null)              {                  UIUtils.UpdateStatus("Found {0} episodes watchlisted on trakt.tv"' watchlistedEpisodes.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedEpisodes.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktEpisodeSync                      {                          Episodes = watchlistedEpisodes.Select(r => new TraktEpisode { Ids = r.Episode.Ids })                                                  .Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing episodes from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveEpisodesFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove episodes from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted episodes from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveEpisodesFromWatchlist,The following statement contains a magic number: if (watchlistedEpisodes != null)              {                  UIUtils.UpdateStatus("Found {0} episodes watchlisted on trakt.tv"' watchlistedEpisodes.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedEpisodes.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktEpisodeSync                      {                          Episodes = watchlistedEpisodes.Select(r => new TraktEpisode { Ids = r.Episode.Ids })                                                  .Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing episodes from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveEpisodesFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove episodes from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted episodes from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveShowsFromWatchlist,The following statement contains a magic number: if (watchlistedShows != null)              {                  UIUtils.UpdateStatus("Found {0} shows watchlisted on trakt.tv"' watchlistedShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedShows.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = watchlistedShows.Select(r => r.Show).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing shows from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove shows from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveShowsFromWatchlist,The following statement contains a magic number: if (watchlistedShows != null)              {                  UIUtils.UpdateStatus("Found {0} shows watchlisted on trakt.tv"' watchlistedShows.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedShows.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktShowSync                      {                          Shows = watchlistedShows.Select(r => r.Show).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing shows from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveShowsFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove shows from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted shows from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromWatchlist,The following statement contains a magic number: if (watchlistedSeasons != null)              {                  // group the seasons by tv show id                  // remove watchlist seasons by show i.e. one show at a time                  // we get watchlist for seasons ungrouped and sorted by date added                  var seasonGroupings = watchlistedSeasons.GroupBy(r => r.Show.Ids.Trakt' r => r);                    UIUtils.UpdateStatus("Found {0} seasons watchlisted in {1} shows on trakt.tv"' watchlistedSeasons.Count()' seasonGroupings.Count());                    int i = 0;                  int count = seasonGroupings.Count();                    foreach (var seasonGroup in seasonGroupings)                  {                      if (Cancel) return;                        // get the seasons watchlisted for this show                      var seasons = from rating in seasonGroup                                    select new TraktSeason                                    {                                        Number = rating.Season.Number                                    };                        var syncData = new TraktSeasonSync                      {                          Shows = new List<TraktSeasonSync.TraktShowSeason>                          {                              new TraktSeasonSync.TraktShowSeason                              {                                  Ids = new TraktShowId { Trakt = seasonGroup.Key }'                                  Seasons = seasons.ToList()                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing seasons for {2} from trakt.tv watchlist"' ++i' count' seasonGroup.First().Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveSeasonsFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv watchlist"' i' count' seasonGroup.First().Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted seasons from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveSeasonsFromWatchlist,The following statement contains a magic number: if (watchlistedSeasons != null)              {                  // group the seasons by tv show id                  // remove watchlist seasons by show i.e. one show at a time                  // we get watchlist for seasons ungrouped and sorted by date added                  var seasonGroupings = watchlistedSeasons.GroupBy(r => r.Show.Ids.Trakt' r => r);                    UIUtils.UpdateStatus("Found {0} seasons watchlisted in {1} shows on trakt.tv"' watchlistedSeasons.Count()' seasonGroupings.Count());                    int i = 0;                  int count = seasonGroupings.Count();                    foreach (var seasonGroup in seasonGroupings)                  {                      if (Cancel) return;                        // get the seasons watchlisted for this show                      var seasons = from rating in seasonGroup                                    select new TraktSeason                                    {                                        Number = rating.Season.Number                                    };                        var syncData = new TraktSeasonSync                      {                          Shows = new List<TraktSeasonSync.TraktShowSeason>                          {                              new TraktSeasonSync.TraktShowSeason                              {                                  Ids = new TraktShowId { Trakt = seasonGroup.Key }'                                  Seasons = seasons.ToList()                              }                          }                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing seasons for {2} from trakt.tv watchlist"' ++i' count' seasonGroup.First().Show.Title);                      var syncResponse = TraktAPI.TraktAPI.RemoveSeasonsFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove {2} seasons from trakt.tv watchlist"' i' count' seasonGroup.First().Show.Title)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted seasons from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchlist,The following statement contains a magic number: if (watchlistedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies watchlisted on trakt.tv"' watchlistedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = watchlistedMovies.Select(r => r.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,Maintenance,C:\repos\damienhaynes_TraktRater\Maintenance.cs,RemoveMoviesFromWatchlist,The following statement contains a magic number: if (watchlistedMovies != null)              {                  UIUtils.UpdateStatus("Found {0} movies watchlisted on trakt.tv"' watchlistedMovies.Count());                    int pageSize = AppSettings.BatchSize;                  int pages = (int)Math.Ceiling((double)watchlistedMovies.Count() / pageSize);                  for (int i = 0; i < pages; i++)                  {                      if (Cancel) return;                        var syncData = new TraktMovieSync                      {                          Movies = watchlistedMovies.Select(r => r.Movie).Skip(i * pageSize).Take(pageSize).ToList()                      };                        UIUtils.UpdateStatus("[{0}/{1}] Removing movies from trakt.tv watchlist"' i + 1' pages);                      var syncResponse = TraktAPI.TraktAPI.RemoveMoviesFromWatchlist(syncData);                      if (syncResponse == null)                      {                          UIUtils.UpdateStatus(string.Format("[{0}/{1}] Failed to remove movies from trakt.tv watchlist"' i + 1' pages)' true);                          Thread.Sleep(2000);                          continue;                      }                  }              }              else              {                  UIUtils.UpdateStatus("Failed to get current list of watchlisted movies from trakt.tv"' true);                  Thread.Sleep(2000);              }
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,StartImport,The following statement contains a magic number: var importThread = new Thread(o =>              {                  importRunning = true;                    // only one import at a time                  SetControlState(false);                    // Clear Progress                  ClearProgress();                    // Login to trakt.tv                  if (!Login())                      return;                    // import ratings                  foreach (var site in sites.Where(s => s.Enabled))                  {                      UIUtils.UpdateStatus(string.Format("Starting import from {0}"' site.Name));                      try                      {                             if (!importCancelled)                              site.ImportRatings();                      }                      catch (Exception e)                      {                          UIUtils.UpdateStatus(string.Format("{0}:{1}"' site.Name' e.Message)' true);                          Thread.Sleep(5000);                      }                      UIUtils.UpdateStatus("Finished import from {0}"' site.Name);                  }                    // finished                  SetControlState(true);                  UIUtils.UpdateStatus("Import Complete!");                  importRunning = false;                  importCancelled = false;              });
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,Login,The following statement contains a magic number: if (!AppSettings.TraktOAuth)              {                  UIUtils.UpdateStatus("Logging in to trakt.tv...");                  var response = TraktAPI.TraktAPI.GetUserToken();                  if (response == null || string.IsNullOrEmpty(response.Token))                  {                      UIUtils.UpdateStatus("Unable to login to trakt' check log for details"' true);                      SetControlState(true);                      importRunning = false;                      importCancelled = false;                      maintenanceRunning = false;                      return false;                  }                  return true;              }              else              {                  // exchange pin-code for access token or refresh existing token                  UIUtils.UpdateStatus("Exchanging {0} for access-token..."' pinCode.Length == 8 ? "pin-code" : "refresh-token");                  var response = TraktAPI.TraktAPI.GetOAuthToken(pinCode.Length == 8 ? pinCode : AppSettings.TraktOAuthToken);                  if (response == null || string.IsNullOrEmpty(response.AccessToken))                  {                      UIUtils.UpdateStatus("Unable to login to trakt' check log for details"' true);                      SetControlState(true);                      importRunning = false;                      importCancelled = false;                      maintenanceRunning = false;                      pinCode = string.Empty;                      return false;                  }                    // save the refresh-token for next time                  AppSettings.TraktOAuthToken = response.RefreshToken;                  pinCode = string.Empty;                    return true;              }
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,Login,The following statement contains a magic number: if (!AppSettings.TraktOAuth)              {                  UIUtils.UpdateStatus("Logging in to trakt.tv...");                  var response = TraktAPI.TraktAPI.GetUserToken();                  if (response == null || string.IsNullOrEmpty(response.Token))                  {                      UIUtils.UpdateStatus("Unable to login to trakt' check log for details"' true);                      SetControlState(true);                      importRunning = false;                      importCancelled = false;                      maintenanceRunning = false;                      return false;                  }                  return true;              }              else              {                  // exchange pin-code for access token or refresh existing token                  UIUtils.UpdateStatus("Exchanging {0} for access-token..."' pinCode.Length == 8 ? "pin-code" : "refresh-token");                  var response = TraktAPI.TraktAPI.GetOAuthToken(pinCode.Length == 8 ? pinCode : AppSettings.TraktOAuthToken);                  if (response == null || string.IsNullOrEmpty(response.AccessToken))                  {                      UIUtils.UpdateStatus("Unable to login to trakt' check log for details"' true);                      SetControlState(true);                      importRunning = false;                      importCancelled = false;                      maintenanceRunning = false;                      pinCode = string.Empty;                      return false;                  }                    // save the refresh-token for next time                  AppSettings.TraktOAuthToken = response.RefreshToken;                  pinCode = string.Empty;                    return true;              }
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,CheckAccountDetails,The following statement contains a magic number: if (!AppSettings.TraktOAuth)              {                  if (string.IsNullOrEmpty(AppSettings.TraktUsername) || string.IsNullOrEmpty(AppSettings.TraktPassword))                  {                      UIUtils.UpdateStatus("You must enter in your trakt username and password!"' true);                      return false;                  }              }              else if (string.IsNullOrEmpty(AppSettings.TraktOAuthToken))              {                  if (string.IsNullOrEmpty(pinCode) || pinCode.Length != 8)                  {                      UIUtils.UpdateStatus("You must authorise TraktRater to access your trakt.tv account and enter the 8 character pin code with-in 15 minutes of starting an import"' true);                      return false;                  }              }
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTrakt.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Location = new System.Drawing.Point(241' 112);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Location = new System.Drawing.Point(241' 112);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Size = new System.Drawing.Size(284' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.Size = new System.Drawing.Size(284' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblWarnPeriod.TabIndex = 17;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.Location = new System.Drawing.Point(237' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.Location = new System.Drawing.Point(237' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPinCode.TabIndex = 16;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Location = new System.Drawing.Point(237' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Location = new System.Drawing.Point(237' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Size = new System.Drawing.Size(267' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.Size = new System.Drawing.Size(267' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTraktOAuth.TabIndex = 15;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.Location = new System.Drawing.Point(396' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.Location = new System.Drawing.Point(396' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.Size = new System.Drawing.Size(137' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.Size = new System.Drawing.Size(137' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktPinCode.TabIndex = 14;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.Location = new System.Drawing.Point(237' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.Location = new System.Drawing.Point(237' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.Size = new System.Drawing.Size(94' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.Size = new System.Drawing.Size(94' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.radTraktUserPass.TabIndex = 13;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Location = new System.Drawing.Point(29' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Location = new System.Drawing.Point(29' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Size = new System.Drawing.Size(153' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.Size = new System.Drawing.Size(153' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktAuthMethod.TabIndex = 12;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.Location = new System.Drawing.Point(237' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.Location = new System.Drawing.Point(237' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktPassword.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Location = new System.Drawing.Point(29' 82);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Location = new System.Drawing.Point(29' 82);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Size = new System.Drawing.Size(73' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.Size = new System.Drawing.Size(73' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktPassword.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Location = new System.Drawing.Point(29' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Location = new System.Drawing.Point(29' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Size = new System.Drawing.Size(77' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTraktUser.Size = new System.Drawing.Size(77' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktUser.Location = new System.Drawing.Point(237' 50);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktUser.Location = new System.Drawing.Point(237' 50);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktUser.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktUser.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTraktUser.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.Location = new System.Drawing.Point(28' 215);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.Location = new System.Drawing.Point(28' 215);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.Size = new System.Drawing.Size(368' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.Size = new System.Drawing.Size(368' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnMaintenance.TabIndex = 5;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Size = new System.Drawing.Size(1159' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.Size = new System.Drawing.Size(1159' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTVDb.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTVDbEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTVDbEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTVDbEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTVDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTVDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.Location = new System.Drawing.Point(233' 57);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.Location = new System.Drawing.Point(233' 57);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.Size = new System.Drawing.Size(324' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtTVDbAccountId.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Location = new System.Drawing.Point(21' 60);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Location = new System.Drawing.Point(21' 60);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Size = new System.Drawing.Size(121' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTVDbAccountId.Size = new System.Drawing.Size(121' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.Location = new System.Drawing.Point(5' 660);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.Location = new System.Drawing.Point(5' 660);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.Size = new System.Drawing.Size(1183' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.Size = new System.Drawing.Size(1183' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnStartSync.TabIndex = 8;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.Location = new System.Drawing.Point(7' 699);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.Location = new System.Drawing.Point(7' 699);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.Size = new System.Drawing.Size(1181' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.Size = new System.Drawing.Size(1181' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.pbrImportProgress.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Location = new System.Drawing.Point(5' 740);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Location = new System.Drawing.Point(5' 740);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Size = new System.Drawing.Size(1183' 60);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.Size = new System.Drawing.Size(1183' 60);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbReport.TabIndex = 10;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Location = new System.Drawing.Point(1060' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Location = new System.Drawing.Point(1060' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Size = new System.Drawing.Size(115' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.Size = new System.Drawing.Size(115' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkLogFolder.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Location = new System.Drawing.Point(103' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Location = new System.Drawing.Point(103' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Size = new System.Drawing.Size(949' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblStatusMessage.Size = new System.Drawing.Size(949' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(9' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(9' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(92' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(92' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tipHelp.AutoPopDelay = 10000;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tipHelp.InitialDelay = 500;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tipHelp.ReshowDelay = 100;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.Location = new System.Drawing.Point(233' 112);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.Location = new System.Drawing.Point(233' 112);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbRatingsFilename.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.Location = new System.Drawing.Point(236' 415);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.Location = new System.Drawing.Point(236' 415);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.Size = new System.Drawing.Size(273' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.Size = new System.Drawing.Size(273' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWebUsername.TabIndex = 14;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.Location = new System.Drawing.Point(233' 167);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.Location = new System.Drawing.Point(233' 167);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtImdbWatchlistFile.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Location = new System.Drawing.Point(179' 122);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Location = new System.Drawing.Point(179' 122);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Maximum = new decimal(new int[] {              1000'              0'              0'              0});
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Size = new System.Drawing.Size(139' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Size = new System.Drawing.Size(139' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.nudBatchSize.Value = new decimal(new int[] {              50'              0'              0'              0});
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdDiaryFile.Location = new System.Drawing.Point(27' 213);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdDiaryFile.Location = new System.Drawing.Point(27' 213);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdDiaryFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdDiaryFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdDiaryFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.Location = new System.Drawing.Point(34' 93);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.Location = new System.Drawing.Point(34' 93);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtiCheckMoviesCsvFile.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.Location = new System.Drawing.Point(27' 94);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.Location = new System.Drawing.Point(27' 94);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdRatingsFile.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.Location = new System.Drawing.Point(27' 153);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.Location = new System.Drawing.Point(27' 153);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtLetterboxdWatchedFile.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbImdb.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Location = new System.Drawing.Point(233' 208);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Location = new System.Drawing.Point(233' 208);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Size = new System.Drawing.Size(92' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.Size = new System.Drawing.Size(92' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbCustomLists.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.Location = new System.Drawing.Point(520' 319);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.Location = new System.Drawing.Point(520' 319);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbDeleteList.TabIndex = 12;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.Location = new System.Drawing.Point(520' 282);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.Location = new System.Drawing.Point(520' 282);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbAddList.TabIndex = 11;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.ItemHeight = 16;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.Location = new System.Drawing.Point(233' 231);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.Location = new System.Drawing.Point(233' 231);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.Size = new System.Drawing.Size(276' 164);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.Size = new System.Drawing.Size(276' 164);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lsImdbCustomLists.TabIndex = 10;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIMDbEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIMDbEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIMDbEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIMDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIMDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.Location = new System.Drawing.Point(520' 164);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.Location = new System.Drawing.Point(520' 164);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbWatchlistBrowse.TabIndex = 8;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Location = new System.Drawing.Point(233' 145);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Location = new System.Drawing.Point(233' 145);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Size = new System.Drawing.Size(95' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.Size = new System.Drawing.Size(95' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbWatchlistFile.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Location = new System.Drawing.Point(229' 92);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Location = new System.Drawing.Point(229' 92);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Size = new System.Drawing.Size(86' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.Size = new System.Drawing.Size(86' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbRatingsFile.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Location = new System.Drawing.Point(24' 55);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Location = new System.Drawing.Point(24' 55);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Size = new System.Drawing.Size(464' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblImdbDescription.Size = new System.Drawing.Size(464' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.Location = new System.Drawing.Point(28' 418);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.Location = new System.Drawing.Point(28' 418);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.Size = new System.Drawing.Size(111' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.Size = new System.Drawing.Size(111' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbUsername.TabIndex = 13;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.Location = new System.Drawing.Point(25' 90);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.Location = new System.Drawing.Point(25' 90);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.Size = new System.Drawing.Size(103' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.Size = new System.Drawing.Size(103' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.rdnImdbCSV.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.Location = new System.Drawing.Point(236' 447);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.Location = new System.Drawing.Point(236' 447);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.Size = new System.Drawing.Size(122' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.Size = new System.Drawing.Size(122' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkImdbWebWatchlist.TabIndex = 15;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.Location = new System.Drawing.Point(519' 110);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.Location = new System.Drawing.Point(519' 110);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnImdbRatingsBrowse.TabIndex = 5;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbTMDb.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbSyncWatchlist.Location = new System.Drawing.Point(27' 52);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbSyncWatchlist.Location = new System.Drawing.Point(27' 52);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbSyncWatchlist.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbSyncWatchlist.Size = new System.Drawing.Size(122' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbSyncWatchlist.Size = new System.Drawing.Size(122' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbEnabled.Location = new System.Drawing.Point(27' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbEnabled.Location = new System.Drawing.Point(27' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkTMDbEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Location = new System.Drawing.Point(24' 121);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Location = new System.Drawing.Point(24' 121);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Size = new System.Drawing.Size(150' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.Size = new System.Drawing.Size(150' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkTMDbStart.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Location = new System.Drawing.Point(23' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Location = new System.Drawing.Point(23' 79);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Size = new System.Drawing.Size(541' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.Size = new System.Drawing.Size(541' 54);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblTMDbMessage.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbOptions.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.Location = new System.Drawing.Point(28' 81);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.Location = new System.Drawing.Point(28' 81);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.Size = new System.Drawing.Size(663' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.Size = new System.Drawing.Size(663' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkSetWatchedOnReleaseDay.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Location = new System.Drawing.Point(24' 128);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Location = new System.Drawing.Point(24' 128);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Size = new System.Drawing.Size(122' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.Size = new System.Drawing.Size(122' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblBatchImportSize.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreWatchedForWatchlists.Location = new System.Drawing.Point(28' 52);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreWatchedForWatchlists.Location = new System.Drawing.Point(28' 52);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreWatchedForWatchlists.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreWatchedForWatchlists.Size = new System.Drawing.Size(361' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIgnoreWatchedForWatchlists.Size = new System.Drawing.Size(361' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkAsWatched.Location = new System.Drawing.Point(28' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkAsWatched.Location = new System.Drawing.Point(28' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkAsWatched.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkAsWatched.Size = new System.Drawing.Size(423' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkMarkAsWatched.Size = new System.Drawing.Size(423' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbListal.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalEnabled.Location = new System.Drawing.Point(27' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalEnabled.Location = new System.Drawing.Point(27' 32);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Location = new System.Drawing.Point(21' 110);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Location = new System.Drawing.Point(21' 110);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Size = new System.Drawing.Size(138' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.Size = new System.Drawing.Size(138' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalShowExportFile.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.Location = new System.Drawing.Point(523' 98);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.Location = new System.Drawing.Point(523' 98);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalShowXMLExport.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.Location = new System.Drawing.Point(207' 101);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.Location = new System.Drawing.Point(207' 101);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalShowXMLExport.TabIndex = 5;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Location = new System.Drawing.Point(23' 183);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Location = new System.Drawing.Point(23' 183);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Size = new System.Drawing.Size(460' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.Size = new System.Drawing.Size(460' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalLinkInfo.TabIndex = 8;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Location = new System.Drawing.Point(23' 208);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Location = new System.Drawing.Point(23' 208);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Size = new System.Drawing.Size(215' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.Size = new System.Drawing.Size(215' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lnkListalExport.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.Location = new System.Drawing.Point(207' 143);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.Location = new System.Drawing.Point(207' 143);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.Size = new System.Drawing.Size(192' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.Size = new System.Drawing.Size(192' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkListalWebWatchlist.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.Location = new System.Drawing.Point(523' 66);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.Location = new System.Drawing.Point(523' 66);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnListalMovieXMLExport.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.Location = new System.Drawing.Point(207' 69);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.Location = new System.Drawing.Point(207' 69);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtListalMovieXMLExport.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Location = new System.Drawing.Point(21' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Location = new System.Drawing.Point(21' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Size = new System.Drawing.Size(119' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblListalMovieExportFile.Size = new System.Drawing.Size(119' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.Size = new System.Drawing.Size(1156' 590);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbCriticker.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.Location = new System.Drawing.Point(517' 65);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.Location = new System.Drawing.Point(517' 65);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnCritickerMovieExportBrowse.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkCritickerEnabled.Location = new System.Drawing.Point(27' 36);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkCritickerEnabled.Location = new System.Drawing.Point(27' 36);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkCritickerEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkCritickerEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkCritickerEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.Location = new System.Drawing.Point(201' 68);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.Location = new System.Drawing.Point(201' 68);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.Size = new System.Drawing.Size(307' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtCritickerMovieExportFile.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Location = new System.Drawing.Point(23' 71);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Location = new System.Drawing.Point(23' 71);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Size = new System.Drawing.Size(119' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblCritickerMovieExportFile.Size = new System.Drawing.Size(119' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.Location = new System.Drawing.Point(5' 16);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.Location = new System.Drawing.Point(5' 16);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.Size = new System.Drawing.Size(1183' 636);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.Size = new System.Drawing.Size(1183' 636);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabTraktRater.TabIndex = 10;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage1.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage2.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage3.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage4.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage5.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage7.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage8.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Location = new System.Drawing.Point(8' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbLetterboxd.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Location = new System.Drawing.Point(23' 133);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Location = new System.Drawing.Point(23' 133);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Size = new System.Drawing.Size(94' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.Size = new System.Drawing.Size(94' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdWatched.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.Location = new System.Drawing.Point(312' 150);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.Location = new System.Drawing.Point(312' 150);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdWatchedBrowse.TabIndex = 7;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Location = new System.Drawing.Point(23' 193);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Location = new System.Drawing.Point(23' 193);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Size = new System.Drawing.Size(71' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.Size = new System.Drawing.Size(71' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdDiary.TabIndex = 8;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdDiaryBrowse.Location = new System.Drawing.Point(312' 210);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdDiaryBrowse.Location = new System.Drawing.Point(312' 210);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdDiaryBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdDiaryBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdDiaryBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Location = new System.Drawing.Point(23' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Location = new System.Drawing.Point(23' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Size = new System.Drawing.Size(86' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblLetterboxdRatingsFile.Size = new System.Drawing.Size(86' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.Location = new System.Drawing.Point(312' 91);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.Location = new System.Drawing.Point(312' 91);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.Size = new System.Drawing.Size(39' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnLetterboxdRatingsBrowse.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkLetterboxdEnabled.Location = new System.Drawing.Point(27' 34);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkLetterboxdEnabled.Location = new System.Drawing.Point(27' 34);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkLetterboxdEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkLetterboxdEnabled.Size = new System.Drawing.Size(74' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkLetterboxdEnabled.Size = new System.Drawing.Size(74' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage6.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Location = new System.Drawing.Point(8' 5);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Location = new System.Drawing.Point(8' 5);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbFlixster.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.Location = new System.Drawing.Point(27' 138);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.Location = new System.Drawing.Point(27' 138);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.Size = new System.Drawing.Size(231' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.Size = new System.Drawing.Size(231' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterSyncWantToSee.TabIndex = 3;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Location = new System.Drawing.Point(23' 187);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Location = new System.Drawing.Point(23' 187);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Size = new System.Drawing.Size(605' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.Size = new System.Drawing.Size(605' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlixsterUserIdDesc.TabIndex = 4;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Location = new System.Drawing.Point(23' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Location = new System.Drawing.Point(23' 74);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Size = new System.Drawing.Size(59' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblFlisterUserId.Size = new System.Drawing.Size(59' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.Location = new System.Drawing.Point(27' 94);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.Location = new System.Drawing.Point(27' 94);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.Size = new System.Drawing.Size(276' 22);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.txtFlixsterUserId.TabIndex = 2;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterEnabled.Location = new System.Drawing.Point(27' 34);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterEnabled.Location = new System.Drawing.Point(27' 34);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterEnabled.Size = new System.Drawing.Size(74' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkFlixsterEnabled.Size = new System.Drawing.Size(74' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage10.TabIndex = 10;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.Location = new System.Drawing.Point(4' 25);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.Padding = new System.Windows.Forms.Padding(3);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.Size = new System.Drawing.Size(1175' 607);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.tabPage9.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Location = new System.Drawing.Point(9' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Location = new System.Drawing.Point(9' 7);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Padding = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.grbICheckMovies.Size = new System.Drawing.Size(1156' 593);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.Location = new System.Drawing.Point(35' 155);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.Location = new System.Drawing.Point(35' 155);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.Size = new System.Drawing.Size(215' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.Size = new System.Drawing.Size(215' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesUpdateWatchedStatus.TabIndex = 10;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.Location = new System.Drawing.Point(35' 126);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.Location = new System.Drawing.Point(35' 126);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.Size = new System.Drawing.Size(232' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.Size = new System.Drawing.Size(232' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesAddWatchedToWatchlist.TabIndex = 9;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesEnabled.Location = new System.Drawing.Point(25' 23);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesEnabled.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.chkIcheckMoviesEnabled.Size = new System.Drawing.Size(82' 21);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.Location = new System.Drawing.Point(321' 90);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.Location = new System.Drawing.Point(321' 90);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.Size = new System.Drawing.Size(37' 28);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.btnIcheckMoviesExportBrowse.TabIndex = 8;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Location = new System.Drawing.Point(34' 71);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Location = new System.Drawing.Point(34' 71);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Margin = new System.Windows.Forms.Padding(4' 0' 4' 0);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Size = new System.Drawing.Size(138' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.Size = new System.Drawing.Size(138' 17);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.lblIcheckMoviesFile.TabIndex = 6;
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1193' 809);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1193' 809);
Magic Number,TraktRater,TraktRater,C:\repos\damienhaynes_TraktRater\TraktRater.cs,InitializeComponent,The following statement contains a magic number: this.Margin = new System.Windows.Forms.Padding(4);
Magic Number,TraktRater.Settings,AppSettings,C:\repos\damienhaynes_TraktRater\Settings\Settings.cs,Load,The following statement contains a magic number: try               {                  XmlReader xmlReader = new XmlReader();                  xmlReader.Load(SettingsFile);                    TraktUsername = xmlReader.GetSettingValueAsString(cTraktUsername' string.Empty);                  TraktPassword = xmlReader.GetSettingValueAsString(cTraktPassword' string.Empty);                  TraktOAuthToken = xmlReader.GetSettingValueAsString(cTraktOAuthToken' string.Empty);                  TraktOAuth = xmlReader.GetSettingValueAsBool(cTraktOAuth' TraktPassword == string.Empty ? true : false);                  TVDbAccountIdentifier = xmlReader.GetSettingValueAsString(cTVDbAccountId' string.Empty);                  TMDbSessionId = xmlReader.GetSettingValueAsString(cTMDbSessionId' string.Empty);                  TMDbSyncWatchlist = xmlReader.GetSettingValueAsBool(cTMDBSyncWatchlist' true);                  IMDbRatingsFilename = xmlReader.GetSettingValueAsString(cIMDbRatingsFilename' string.Empty);                  IMDbWatchlistFilename = xmlReader.GetSettingValueAsString(cIMDbWatchlistFilename' string.Empty);                  IMDbUsername = xmlReader.GetSettingValueAsString(cIMDbUsername' string.Empty);                  IMDbCustomLists = xmlReader.GetSettingValueAsString(cIMDbCustomLists' string.Empty).FromJSONArray<string>().ToList();                  IMDbSyncWatchlist = xmlReader.GetSettingValueAsBool(cIMDBSyncWatchlist' false);                  ListalSyncWatchlist = xmlReader.GetSettingValueAsBool(cListalSyncWatchlist' false);                  ListalMovieFilename = xmlReader.GetSettingValueAsString(cListalMovieFilename' string.Empty);                  ListalShowFilename = xmlReader.GetSettingValueAsString(cListalShowFilename' string.Empty);                  CritickerMovieFilename = xmlReader.GetSettingValueAsString(cCritickerMovieFilename' string.Empty);                  LetterboxdRatingsFilename = xmlReader.GetSettingValueAsString(cLetterboxdRatingsFilename' string.Empty);                  LetterboxdWatchedFilename = xmlReader.GetSettingValueAsString(cLetterboxdWatchedFilename' string.Empty);                  LetterboxdDiaryFilename = xmlReader.GetSettingValueAsString(cLetterboxdDiaryFilename' string.Empty);                  FlixsterUserId = xmlReader.GetSettingValueAsString(cFlixsterUserId' string.Empty);                  FlixsterSyncWantToSee = xmlReader.GetSettingValueAsBool(cFlixsterSyncWantToSee' true);                  MarkAsWatched = xmlReader.GetSettingValueAsBool(cMarkAsWatched' true);                  IgnoreWatchedForWatchlist = xmlReader.GetSettingValueAsBool(cIgnoreWatchedForWatchlist' true);                  EnableIMDb = xmlReader.GetSettingValueAsBool(cEnableIMDb' false);                  EnableTMDb = xmlReader.GetSettingValueAsBool(cEnableTMDb' false);                  EnableTVDb = xmlReader.GetSettingValueAsBool(cEnableTVDb' false);                  EnableListal = xmlReader.GetSettingValueAsBool(cEnableListal' false);                  EnableCriticker = xmlReader.GetSettingValueAsBool(cEnableCriticker' false);                  EnableLetterboxd = xmlReader.GetSettingValueAsBool(cEnableLetterboxd' false);                  EnableFlixster = xmlReader.GetSettingValueAsBool(cEnableFlixster' false);                  LogSeverityLevel = (LoggingSeverity)(xmlReader.GetSettingValueAsInt(cLogLevel' 3));                  BatchSize = xmlReader.GetSettingValueAsInt(cBatchSize' 50);                  WatchedOnReleaseDay = xmlReader.GetSettingValueAsBool(cWatchedOnReleaseDay' false);                    // save settings' might be some new settings added                  Save();              }              catch (Exception)              {                  return;              }
Magic Number,TraktRater.Settings,AppSettings,C:\repos\damienhaynes_TraktRater\Settings\Settings.cs,Load,The following statement contains a magic number: try               {                  XmlReader xmlReader = new XmlReader();                  xmlReader.Load(SettingsFile);                    TraktUsername = xmlReader.GetSettingValueAsString(cTraktUsername' string.Empty);                  TraktPassword = xmlReader.GetSettingValueAsString(cTraktPassword' string.Empty);                  TraktOAuthToken = xmlReader.GetSettingValueAsString(cTraktOAuthToken' string.Empty);                  TraktOAuth = xmlReader.GetSettingValueAsBool(cTraktOAuth' TraktPassword == string.Empty ? true : false);                  TVDbAccountIdentifier = xmlReader.GetSettingValueAsString(cTVDbAccountId' string.Empty);                  TMDbSessionId = xmlReader.GetSettingValueAsString(cTMDbSessionId' string.Empty);                  TMDbSyncWatchlist = xmlReader.GetSettingValueAsBool(cTMDBSyncWatchlist' true);                  IMDbRatingsFilename = xmlReader.GetSettingValueAsString(cIMDbRatingsFilename' string.Empty);                  IMDbWatchlistFilename = xmlReader.GetSettingValueAsString(cIMDbWatchlistFilename' string.Empty);                  IMDbUsername = xmlReader.GetSettingValueAsString(cIMDbUsername' string.Empty);                  IMDbCustomLists = xmlReader.GetSettingValueAsString(cIMDbCustomLists' string.Empty).FromJSONArray<string>().ToList();                  IMDbSyncWatchlist = xmlReader.GetSettingValueAsBool(cIMDBSyncWatchlist' false);                  ListalSyncWatchlist = xmlReader.GetSettingValueAsBool(cListalSyncWatchlist' false);                  ListalMovieFilename = xmlReader.GetSettingValueAsString(cListalMovieFilename' string.Empty);                  ListalShowFilename = xmlReader.GetSettingValueAsString(cListalShowFilename' string.Empty);                  CritickerMovieFilename = xmlReader.GetSettingValueAsString(cCritickerMovieFilename' string.Empty);                  LetterboxdRatingsFilename = xmlReader.GetSettingValueAsString(cLetterboxdRatingsFilename' string.Empty);                  LetterboxdWatchedFilename = xmlReader.GetSettingValueAsString(cLetterboxdWatchedFilename' string.Empty);                  LetterboxdDiaryFilename = xmlReader.GetSettingValueAsString(cLetterboxdDiaryFilename' string.Empty);                  FlixsterUserId = xmlReader.GetSettingValueAsString(cFlixsterUserId' string.Empty);                  FlixsterSyncWantToSee = xmlReader.GetSettingValueAsBool(cFlixsterSyncWantToSee' true);                  MarkAsWatched = xmlReader.GetSettingValueAsBool(cMarkAsWatched' true);                  IgnoreWatchedForWatchlist = xmlReader.GetSettingValueAsBool(cIgnoreWatchedForWatchlist' true);                  EnableIMDb = xmlReader.GetSettingValueAsBool(cEnableIMDb' false);                  EnableTMDb = xmlReader.GetSettingValueAsBool(cEnableTMDb' false);                  EnableTVDb = xmlReader.GetSettingValueAsBool(cEnableTVDb' false);                  EnableListal = xmlReader.GetSettingValueAsBool(cEnableListal' false);                  EnableCriticker = xmlReader.GetSettingValueAsBool(cEnableCriticker' false);                  EnableLetterboxd = xmlReader.GetSettingValueAsBool(cEnableLetterboxd' false);                  EnableFlixster = xmlReader.GetSettingValueAsBool(cEnableFlixster' false);                  LogSeverityLevel = (LoggingSeverity)(xmlReader.GetSettingValueAsInt(cLogLevel' 3));                  BatchSize = xmlReader.GetSettingValueAsInt(cBatchSize' 50);                  WatchedOnReleaseDay = xmlReader.GetSettingValueAsBool(cWatchedOnReleaseDay' false);                    // save settings' might be some new settings added                  Save();              }              catch (Exception)              {                  return;              }
Magic Number,TraktRater.Sites.API.TVDb,TVDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TVDb\TVDbAPI.cs,GetShowInfo,The following statement contains a magic number: string response = TVDbCache.GetFromCache(fileCache' 7);
Magic Number,TraktRater.Sites.API.TVDb,TVDbAPI,C:\repos\damienhaynes_TraktRater\Sites\API\TVDb\TVDbAPI.cs,SearchShow,The following statement contains a magic number: string response = TVDbCache.GetFromCache(fileCache' 7);
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetShowName,The following statement contains a magic number: if (parts.Count() == 2)                  return parts[0];
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetShowName,The following statement contains a magic number: if (parts.Count() > 2)                  return title.Replace(string.Format(": {0}"' parts[parts.Count() - 1].Trim())' string.Empty);
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetEpisodeName,The following statement contains a magic number: if (parts.Count() >= 2)                  return parts[parts.Count() - 1].Trim();
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetIMDbEpisodeFromTVDb,The following statement contains a magic number: try              {                  string tvEpisodeName = GetEpisodeName(episode[IMDbFieldMapping.cTitle]);                  string tvShowName = GetShowName(episode[IMDbFieldMapping.cTitle]);                  string tvShowYear = episode[IMDbFieldMapping.cYear];                  string tvShowImdbId = episode[IMDbFieldMapping.cIMDbID];                    // search for the show                  UIUtils.UpdateStatus("Searching for tv show {0} on thetvdb.com"' tvShowName);                  var searchResults = TVDbAPI.SearchShow(tvShowName);                  if (searchResults == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} from thetvdb.com"' tvShowName)' true);                      Thread.Sleep(2000);                      return null;                  }                    // get the first match that contains the same 'year'                  // only if we're using a csv export file                   var tvdbShowSearchResult = new TVDbShowSearch.Series();                  if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                  {                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.FirstAired != null && s.FirstAired.Contains(tvShowYear));                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} ({1}) from thetvdb.com"' tvShowName' tvShowYear)' true);                          Thread.Sleep(2000);                          return null;                      }                  }                  else                  {                      // the website populates the 'year' with the episode year (not show)                      // so we can't use that for a show match.                      // However' the website populates the IMDb using the IMDb ID of the show (not episode).                      tvdbShowSearchResult = searchResults.Shows.Find(s => s.ImdbId != null && s.ImdbId == tvShowImdbId);                      if (tvdbShowSearchResult == null)                      {                          UIUtils.UpdateStatus(string.Format("Failed to search for tv show {0} (imdb_id:{1}) from thetvdb.com"' tvShowName' tvShowImdbId ?? "<empty>")' true);                          Thread.Sleep(2000);                          return null;                      }                  }                    // get the show info for the given show                  UIUtils.UpdateStatus(string.Format("Getting tv show info for {0} [tvdb_id:{1}] on thetvdb.com"' tvShowName' tvdbShowSearchResult.Id));                  var tvdbShowInfo = TVDbAPI.GetShowInfo(tvdbShowSearchResult.Id.ToString());                  if (tvdbShowInfo == null)                  {                      UIUtils.UpdateStatus(string.Format("Failed to get show info for tv show {0} [tvdb_id:{1}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id)' true);                      Thread.Sleep(2000);                      return null;                  }                    // we now have a list of episodes from thetvdb.com' we can use the IMDb Episode Title to lookup a tvdb ID                  var tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.Name.ToLowerInvariant() == tvEpisodeName.ToLowerInvariant());                  if (tvdbEpisodeInfo == null)                  {                      // we can also lookup by airDate if using a csv export file                      if (episode[IMDbFieldMapping.cProvider].IsCSVExport())                      {                          string episodeAirDate = null;                          episode.TryGetValue(IMDbFieldMapping.cReleaseDate' out episodeAirDate);                          if (!string.IsNullOrEmpty(episodeAirDate))                          {                              tvdbEpisodeInfo = tvdbShowInfo.Episodes.Find(e => e.AirDate == episodeAirDate);                          }                            // still no luck?                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} [AirDate:{3}] from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName' episodeAirDate ?? "<empty>")' true);                              Thread.Sleep(2000);                              return null;                          }                      }                      else                      {                          if (tvdbEpisodeInfo == null)                          {                              UIUtils.UpdateStatus(string.Format("Failed to get episode info for tv show {0} [tvdb_id:{1}] - {2} from thetvdb.com"' tvShowName' tvdbShowSearchResult.Id' tvEpisodeName)' true);                              Thread.Sleep(2000);                              return null;                          }                      }                  }                    // Note: Web Parsing does not use the IMDb ID for the episode' only the show.                  //       we're also not setting the created date from the webrequest.                  var imdbEpisode = new IMDbEpisode                  {                      Created = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cCreated] : null'                      EpisodeName = tvEpisodeName'                      EpisodeNumber = tvdbEpisodeInfo.EpisodeNumber'                      ImdbId = episode[IMDbFieldMapping.cProvider].IsCSVExport() ? episode[IMDbFieldMapping.cIMDbID] : null'                      SeasonNumber = tvdbEpisodeInfo.SeasonNumber'                      ShowName = tvShowName'                      TvdbId = tvdbEpisodeInfo.Id                  };                    if (episode.ContainsKey(IMDbFieldMapping.cRating))                      imdbEpisode.Rating = string.IsNullOrEmpty(episode[IMDbFieldMapping.cRating]) ? 0 : int.Parse(episode[IMDbFieldMapping.cRating]);                    // return the episode                  return imdbEpisode;              }              catch (Exception e)              {                  UIUtils.UpdateStatus(string.Format("Failed to get episode info for '{0}' from thetvdb.com' Reason: '{1}'"' episode[IMDbFieldMapping.cTitle]' e.Message)' true);                  Thread.Sleep(2000);                  return null;              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetLastCreatedDate,The following statement contains a magic number: if (!string.IsNullOrEmpty(imdbDateTime))              {                  // date is in the form:                  // Tue Mar  4 00:00:00 2014                  string[] splits = imdbDateTime.Split(new[] { " "' "  " }' StringSplitOptions.RemoveEmptyEntries);                  if (splits.Count() == 5)                  {                      // make date in form DD MMM YYYY                      DateTime result;                      if (DateTime.TryParse(string.Format("{0} {1} {2}"' splits[2]' splits[1]' splits[4])' out result))                      {                          createdDate = result.ToString().ToISO8601();                      }                  }              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetLastCreatedDate,The following statement contains a magic number: if (!string.IsNullOrEmpty(imdbDateTime))              {                  // date is in the form:                  // Tue Mar  4 00:00:00 2014                  string[] splits = imdbDateTime.Split(new[] { " "' "  " }' StringSplitOptions.RemoveEmptyEntries);                  if (splits.Count() == 5)                  {                      // make date in form DD MMM YYYY                      DateTime result;                      if (DateTime.TryParse(string.Format("{0} {1} {2}"' splits[2]' splits[1]' splits[4])' out result))                      {                          createdDate = result.ToString().ToISO8601();                      }                  }              }
Magic Number,TraktRater.Sites.Common,Helper,C:\repos\damienhaynes_TraktRater\Sites\Common\IMDbHelper.cs,GetLastCreatedDate,The following statement contains a magic number: if (!string.IsNullOrEmpty(imdbDateTime))              {                  // date is in the form:                  // Tue Mar  4 00:00:00 2014                  string[] splits = imdbDateTime.Split(new[] { " "' "  " }' StringSplitOptions.RemoveEmptyEntries);                  if (splits.Count() == 5)                  {                      // make date in form DD MMM YYYY                      DateTime result;                      if (DateTime.TryParse(string.Format("{0} {1} {2}"' splits[2]' splits[1]' splits[4])' out result))                      {                          createdDate = result.ToString().ToISO8601();                      }                  }              }
Magic Number,TraktRater.TraktAPI,TraktAPI,C:\repos\damienhaynes_TraktRater\TraktAPI\TraktAPI.cs,GetOAuthLogin,The following statement contains a magic number: bool isPinCode = key.Length == 8;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grbMaintenance.Location = new System.Drawing.Point(5' 4);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grbMaintenance.Location = new System.Drawing.Point(5' 4);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grbMaintenance.Size = new System.Drawing.Size(419' 246);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.grbMaintenance.Size = new System.Drawing.Size(419' 246);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieRatings.Location = new System.Drawing.Point(227' 117);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieRatings.Location = new System.Drawing.Point(227' 117);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieRatings.TabIndex = 12;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonRatings.Location = new System.Drawing.Point(227' 92);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonRatings.Location = new System.Drawing.Point(227' 92);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonRatings.TabIndex = 11;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowRatings.Location = new System.Drawing.Point(227' 67);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowRatings.Location = new System.Drawing.Point(227' 67);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowRatings.TabIndex = 10;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeRatings.Location = new System.Drawing.Point(227' 42);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeRatings.Location = new System.Drawing.Point(227' 42);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeRatings.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeRatings.TabIndex = 9;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieCollection.Location = new System.Drawing.Point(10' 117);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieCollection.Location = new System.Drawing.Point(10' 117);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieCollection.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieCollection.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieCollection.TabIndex = 4;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeCollection.Location = new System.Drawing.Point(10' 92);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeCollection.Location = new System.Drawing.Point(10' 92);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeCollection.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeCollection.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeCollection.TabIndex = 3;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchedHistory.Location = new System.Drawing.Point(10' 67);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchedHistory.Location = new System.Drawing.Point(10' 67);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchedHistory.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchedHistory.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchedHistory.TabIndex = 2;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchedHistory.Location = new System.Drawing.Point(10' 42);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchedHistory.Location = new System.Drawing.Point(10' 42);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchedHistory.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchedHistory.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSelect.Location = new System.Drawing.Point(7' 16);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSelect.Location = new System.Drawing.Point(7' 16);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSelect.Size = new System.Drawing.Size(399' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblSelect.Size = new System.Drawing.Size(399' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point(285' 259);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Location = new System.Drawing.Point(285' 259);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size(138' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnStart.Size = new System.Drawing.Size(138' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(204' 259);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(204' 259);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchlist.Location = new System.Drawing.Point(10' 142);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchlist.Location = new System.Drawing.Point(10' 142);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkEpisodeWatchlist.TabIndex = 5;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowWatchlist.Location = new System.Drawing.Point(10' 167);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowWatchlist.Location = new System.Drawing.Point(10' 167);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkShowWatchlist.TabIndex = 6;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonWatchlist.Location = new System.Drawing.Point(10' 192);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonWatchlist.Location = new System.Drawing.Point(10' 192);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkSeasonWatchlist.TabIndex = 7;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchlist.Location = new System.Drawing.Point(10' 217);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchlist.Location = new System.Drawing.Point(10' 217);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchlist.Size = new System.Drawing.Size(146' 17);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.chkMovieWatchlist.TabIndex = 8;
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(429' 291);
Magic Number,TraktRater.UI,MaintenanceDialog,C:\repos\damienhaynes_TraktRater\UI\MaintenanceDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(429' 291);
Magic Number,TraktRater.Web,ExtendedWebClient,C:\repos\damienhaynes_TraktRater\Web\TraktWeb.cs,ExtendedWebClient,The following statement contains a magic number: Timeout = 100000;
Magic Number,TraktRater.Web,TraktWeb,C:\repos\damienhaynes_TraktRater\Web\TraktWeb.cs,Transmit,The following statement contains a magic number: try              {                  ServicePointManager.Expect100Continue = false;                  var client = new ExtendedWebClient { Timeout = 120000' Encoding = Encoding.UTF8 };                  client.Headers.Add("user-agent"' AppSettings.UserAgent);                    var response = string.Empty;                    if (string.IsNullOrEmpty(data))                      response = client.DownloadString(address);                  else                      response = client.UploadString(address' data);                    if (logResponse && OnDataReceived != null)                      OnDataReceived(response);                    return response;              }              catch (WebException we)              {                  string ret = null;                    // something bad happened                  var response = we.Response as HttpWebResponse;                  try                  {                      using (var stream = response.GetResponseStream())                      {                          using (var reader = new StreamReader(stream))                          {                              ret = reader.ReadToEnd();                                if (OnDataErrorReceived != null)                                  OnDataErrorReceived(ret);                          }                      }                  }                  catch (Exception e)                  {                      if (OnDataErrorReceived != null)                          OnDataErrorReceived(e.Message);                  }                  return ret;              }
Magic Number,TraktRater.Web,TraktWeb,C:\repos\damienhaynes_TraktRater\Web\TraktWeb.cs,GetFromTrakt,The following statement contains a magic number: request.Timeout = 120000;
Magic Number,TraktRater.Web,TraktWeb,C:\repos\damienhaynes_TraktRater\Web\TraktWeb.cs,PostToTrakt,The following statement contains a magic number: request.Timeout = 120000;
Duplicate Code,TraktRater.Sites,TMDb,C:\repos\damienhaynes_TraktRater\Sites\TMDb.cs,ImportRatings,The method contains a code clone-set at the following line numbers (starting from the method definition): ((51' 74)' (85' 108))
