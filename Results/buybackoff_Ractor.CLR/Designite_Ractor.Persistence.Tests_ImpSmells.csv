Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The length of the statement  "            var Persistor = new DatabasePersistor(migrationConfig: new MySqlMigrationsConfiguration()' guidType: SequentialGuidType.SequentialAsBinary); " is 140.
Long Statement,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldCreateTableAndCrudDataObject,The length of the statement  "            var Persistor = new DatabasePersistor(guidType: SequentialGuidType.SequentialAsString' migrationConfig: new MySqlMigrationsConfiguration()); " is 140.
Long Statement,Ractor.Persistence.Tests,RedisTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisTests.cs,TestEval,The length of the statement  "            var res = r.Eval<string>(lua' new[] { r.KeyNameSpace + "greeter:Mailbox:inbox"' r.KeyNameSpace + "test:greeter:Mailbox:pipeline"' "test" }); " is 140.
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,GuidFirstLetterDistribution,The following statement contains a magic number: const int count = 1000;
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,GuidFirstLetterDistribution,The following statement contains a magic number: var guidFirstChar = GuidGenerator.NewGuid().ToString("N").Substring(0' 2);
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,GuidShardDistribution,The following statement contains a magic number: const int count = 10000;
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,GuidShardDistribution,The following statement contains a magic number: bucket < 255
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,GuidInspectByEyes,The following statement contains a magic number: const int count = 10;
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,Generate1Million,The following statement contains a magic number: i < 1000000
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,Ticks,The following statement contains a magic number: i < 100
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,Generate1MillionCheckUnique,The following statement contains a magic number: var action = new Action(() => {                  for (int i = 0; i < 1000000/4; i++) {                      var guid = GuidGenerator.NewRandomBucketGuid();                      if (set.ContainsKey(guid)) throw new ApplicationException("duplicate");                      if (!set.TryAdd(guid' null)) throw new ApplicationException("cannot add");                  }              });
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,Generate1MillionCheckUnique,The following statement contains a magic number: var action = new Action(() => {                  for (int i = 0; i < 1000000/4; i++) {                      var guid = GuidGenerator.NewRandomBucketGuid();                      if (set.ContainsKey(guid)) throw new ApplicationException("duplicate");                      if (!set.TryAdd(guid' null)) throw new ApplicationException("cannot add");                  }              });
Magic Number,Ractor.Persistence.Tests,GuidTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\GuidTests.cs,Generate1MillionCheckOrder,The following statement contains a magic number: i < 1000000
Magic Number,Ractor.Persistence.Tests,RedisAsyncDictTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisAsyncDictTests.cs,CouldFillAndTakeValues,The following statement contains a magic number: const int n = 100;
Magic Number,Ractor.Persistence.Tests,RedisAsyncDictTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisAsyncDictTests.cs,CouldFillAndTakeValuesInParallel,The following statement contains a magic number: const int n = 100000;
Magic Number,Ractor.Persistence.Tests,RedisQueueTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisQueueTests.cs,CouldSendAndReceiveMessages,The following statement contains a magic number: var queue = new RedisQueue<string>(redis' "CouldSendAndReceiveMessages"' timeout: 5000);
Magic Number,Ractor.Persistence.Tests,RedisQueueTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisQueueTests.cs,CouldSendAndReceiveMessages,The following statement contains a magic number: const int n = 100000;
Magic Number,Ractor.Persistence.Tests,RedisQueueTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisQueueTests.cs,ProcessInbox,The following statement contains a magic number: var queue = new RedisQueue<string>(redis' "CouldSendAndReceiveMessages"' timeout: 5000);
Magic Number,Ractor.Persistence.Tests,RedisQueueTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisQueueTests.cs,ProcessInbox,The following statement contains a magic number: const int n = 10000;
Magic Number,Ractor.Persistence.Tests,RedisQueueTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisQueueTests.cs,ProcessInbox,The following statement contains a magic number: var consumer = Task.Run(async () => {                  var c = 0;                  while (true) {                      var message = await queue.TryReceiveMessage();                      c++;                      if(c % 10000 == 0) Console.WriteLine(c);                      //if (message.OK) { Console.WriteLine(message.Value); }                      if (message.Ok) {                          await queue.TryDeleteMessage(message.DeleteHandle);                      }                                        }              });
Magic Number,Ractor.Persistence.Tests,MySqlHistoryContext,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<HistoryRow>().Property(h => h.MigrationId).HasMaxLength(100).IsRequired();
Magic Number,Ractor.Persistence.Tests,MySqlHistoryContext,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<HistoryRow>().Property(h => h.ContextKey).HasMaxLength(200).IsRequired();
Magic Number,Ractor.Persistence.Tests,TestDataObject,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,TestDataObject,The following statement contains a magic number: SingleTableContext<TestDataObject>.OnModelCreatingAction = (econfig) => {                  econfig.Property(tdo => tdo.DateTime).HasPrecision(6);              };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: var dobj = new DataRecord() {                      Source = 0'                      Entity = i*10'                      Relationship = i*10'                      Metric = i/100'                      Period = DateTime.Today'                      ObservationTime = DateTime.Now'                      Value = 123 + ((double)i)/100.0                  };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: var dobj = new DataRecord() {                      Source = 0'                      Entity = i*10'                      Relationship = i*10'                      Metric = i/100'                      Period = DateTime.Today'                      ObservationTime = DateTime.Now'                      Value = 123 + ((double)i)/100.0                  };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: var dobj = new DataRecord() {                      Source = 0'                      Entity = i*10'                      Relationship = i*10'                      Metric = i/100'                      Period = DateTime.Today'                      ObservationTime = DateTime.Now'                      Value = 123 + ((double)i)/100.0                  };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: var dobj = new DataRecord() {                      Source = 0'                      Entity = i*10'                      Relationship = i*10'                      Metric = i/100'                      Period = DateTime.Today'                      ObservationTime = DateTime.Now'                      Value = 123 + ((double)i)/100.0                  };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: var dobj = new DataRecord() {                      Source = 0'                      Entity = i*10'                      Relationship = i*10'                      Metric = i/100'                      Period = DateTime.Today'                      ObservationTime = DateTime.Now'                      Value = 123 + ((double)i)/100.0                  };
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldInsertDataRecords,The following statement contains a magic number: i < 100000
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,CouldCreateTableAndInsertManyDataObject,The following statement contains a magic number: i < 1000
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,RandomTest,The following statement contains a magic number: Console.WriteLine((new Random()).Next(0' 2));
Magic Number,Ractor.Persistence.Tests,PocoPersistorTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\PocoPersistorTests.cs,RandomTest,The following statement contains a magic number: i < 100
Magic Number,Ractor.Persistence.Tests,RedisTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\RedisTests.cs,Third,The following statement contains a magic number: i < 10000
Magic Number,Ractor.Persistence.Tests,SerializationTests,D:\research\architectureSmells\repos\buybackoff_Ractor.CLR\tests\Ractor.Persistence.Tests\SerializationTests.cs,SerializePrimitives,The following statement contains a magic number: Console.WriteLine(123.ToJson());
