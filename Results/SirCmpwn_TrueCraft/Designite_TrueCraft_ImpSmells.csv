Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TrueCraft,Program,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,TrueCraft,MultiplayerServer,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\MultiplayerServer.cs,DoEnvironment,Cyclomatic complexity of the method is 10
Complex Method,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,HandleReceive,Cyclomatic complexity of the method is 8
Complex Method,TrueCraft,EventScheduler,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EventScheduler.cs,Update,Cyclomatic complexity of the method is 15
Complex Method,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,UpdateClientEntities,Cyclomatic complexity of the method is 9
Complex Method,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,GiveItem,Cyclomatic complexity of the method is 8
Complex Method,TrueCraft.Handlers,LoginHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\LoginHandlers.cs,HandleLoginRequestPacket,Cyclomatic complexity of the method is 10
Complex Method,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,Cyclomatic complexity of the method is 16
Complex Method,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerBlockPlacementPacket,Cyclomatic complexity of the method is 11
Long Statement,TrueCraft,Program,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Program.cs,Main,The length of the statement  "            Server.AddLogProvider(new ConsoleLogProvider(LogCategory.Notice | LogCategory.Warning | LogCategory.Error | LogCategory.Debug)); " is 128.
Long Statement,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,OpenWindow,The length of the statement  "            QueuePacket(new OpenWindowPacket(window.ID' window.Type' window.Name' (sbyte)window.MinecraftWasWrittenByFuckingIdiotsLength));" is 127.
Long Statement,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,HandleWindowChange,The length of the statement  "                QueuePacket(new SetSlotPacket((sender as IWindow).ID' (short)e.SlotIndex' e.Value.ID' e.Value.Count' e.Value.Metadata));" is 120.
Long Statement,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,HandleWindowChange,The length of the statement  "            if (e.SlotIndex >= InventoryWindow.ArmorIndex && e.SlotIndex < InventoryWindow.ArmorIndex + InventoryWindow.Armor.Length)" is 121.
Long Statement,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,GetEntitiesInRange,The length of the statement  "            return Entities.Where(e => e.EntityID != entity.EntityID && !e.Despawned && IsInRange(e.Position' entity.Position' maxChunks)).ToArray(); " is 137.
Long Statement,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,GiveItem,The length of the statement  "                if (!short.TryParse(parts[0]' out id) || !short.TryParse(parts[1]' out metadata) || !Int32.TryParse(amount' out count)) return false; " is 133.
Long Statement,TrueCraft.Commands,ToMeCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\DebugCommands.cs,Handle,The length of the statement  "                var path = astar.FindPath(client.World' entity.BoundingBox' (Coordinates3D)entity.Position' (Coordinates3D)client.Entity.Position); " is 131.
Long Statement,TrueCraft.Handlers,PacketHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\PacketHandlers.cs,RegisterHandlers,The length of the statement  "            server.RegisterPacketHandler(new PlayerBlockPlacementPacket().ID' InteractionHandlers.HandlePlayerBlockPlacementPacket); " is 120.
Long Statement,TrueCraft.Handlers,EntityHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\EntityHandlers.cs,HandlePlayerMovement,The length of the statement  "                //client.QueuePacket(new DisconnectPacket("Client moved to fast (hacking?) " + client.Entity.Position.DistanceTo(position))); " is 125.
Long Statement,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerBlockPlacementPacket,The length of the statement  "                    server.SendMessage(ChatColor.Red + "Error occured from client {0} at coordinates {1}"' client.Username' block.Value.Coordinates); " is 129.
Long Statement,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerBlockPlacementPacket,The length of the statement  "                    client.QueuePacket(new SetSlotPacket(0' client.SelectedSlot' client.SelectedItem.ID' client.SelectedItem.Count' client.SelectedItem.Metadata)); " is 143.
Long Statement,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerBlockPlacementPacket,The length of the statement  "                        server.SendMessage(ChatColor.Red + "Error occured from client {0} at coordinates {1}"' client.Username' block.Value.Coordinates); " is 129.
Long Statement,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleChangeHeldItem,The length of the statement  "                c.QueuePacket(new EntityEquipmentPacket(client.Entity.EntityID' 0' client.SelectedItem.ID' client.SelectedItem.Metadata)); " is 122.
Long Statement,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleUpdateSignPacket,The length of the statement  "                    server.Clients.Where(c => ((RemoteClient)c).LoggedIn && c.World == _client.World).ToList().ForEach(c => c.QueuePacket(packet)); " is 127.
Empty Catch Block,TrueCraft,MultiplayerServer,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\MultiplayerServer.cs,AcceptClient,The method has an empty catch block.
Empty Catch Block,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,HandleReceive,The method has an empty catch block.
Empty Catch Block,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,Load,The method has an empty catch block.
Empty Catch Block,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,ProcessNetwork,The method has an empty catch block.
Empty Catch Block,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,ProcessNetwork,The method has an empty catch block.
Empty Catch Block,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,Update,The method has an empty catch block.
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,Start,The following statement contains a magic number: Timer = new Timer(ResetUserList' null' 0' 30000);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,HandleReceive,The following statement contains a magic number: buffer[2] == Type_Handshake
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,GetSessionId,The following statement contains a magic number: stream.BaseStream.Position = 3;
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,GetToken,The following statement contains a magic number: stream.BaseStream.Position = 7;
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[3]' ref buffer[6]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[3]' ref buffer[6]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[4]' ref buffer[5]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[4]' ref buffer[5]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: buffer.Length >= 7
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[7]' ref buffer[10]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[7]' ref buffer[10]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[8]' ref buffer[9]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: Swap(ref buffer[8]' ref buffer[9]);
Magic Number,TrueCraft,QueryProtocol,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\QueryProtocol.cs,DoReverseEndian,The following statement contains a magic number: buffer.Length >= 11
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,RemoteClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,RemoteClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,RemoteClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,Load,The following statement contains a magic number: Entity.Position = new Vector3(                     nbt.RootTag["position"][0].DoubleValue'                     nbt.RootTag["position"][1].DoubleValue'                     nbt.RootTag["position"][2].DoubleValue);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,ProcessNetwork,The following statement contains a magic number: sem.Wait(500' cancel.Token);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,ExpandChunkRadius,The following statement contains a magic number: Task.Factory.StartNew(() =>             {                 if (ChunkRadius < 8) // TODO: Allow customization of this number                 {                     ChunkRadius++;                     server.Scheduler.ScheduleEvent("client.update-chunks"' this'                         TimeSpan.Zero' s => UpdateChunks());                     server.Scheduler.ScheduleEvent("remote.chunks"' this'                         TimeSpan.FromSeconds(1)' ExpandChunkRadius);                 }             });
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,SendKeepAlive,The following statement contains a magic number: server.Scheduler.ScheduleEvent("remote.keepalive"' this' TimeSpan.FromSeconds(10)' SendKeepAlive);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,UpdateChunks,The following statement contains a magic number: var coords = new Coordinates2D(                         ((int)Entity.Position.X >> 4) + x'                         ((int)Entity.Position.Z >> 4) + z);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,UpdateChunks,The following statement contains a magic number: var coords = new Coordinates2D(                         ((int)Entity.Position.X >> 4) + x'                         ((int)Entity.Position.Z >> 4) + z);
Magic Number,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,HandleWindowChange,The following statement contains a magic number: short slot = (short)(4 - (e.SlotIndex - InventoryWindow.ArmorIndex));
Magic Number,TrueCraft,EventScheduler,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EventScheduler.cs,ScheduleEvent,The following statement contains a magic number: var queue = when.TotalSeconds > 3 ? LaterEventQueue : ImmediateEventQueue;
Magic Number,TrueCraft,EventScheduler,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EventScheduler.cs,Update,The following statement contains a magic number: long limit = Stopwatch.ElapsedMilliseconds + 10;
Magic Number,TrueCraft,EventScheduler,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EventScheduler.cs,Update,The following statement contains a magic number: limit = Stopwatch.ElapsedMilliseconds + 10;
Magic Number,TrueCraft,EventScheduler,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EventScheduler.cs,Update,The following statement contains a magic number: Profiler.Done(20);
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following statement contains a magic number: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityVelocityPacket                      {                          EntityID = entity.EntityID'                          XVelocity = (short)(pentity.Velocity.X * 320)'                          YVelocity = (short)(pentity.Velocity.Y * 320)'                          ZVelocity = (short)(pentity.Velocity.Z * 320)'                      });
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityVelocityPacket                      {                          EntityID = entity.EntityID'                          XVelocity = (short)(pentity.Velocity.X * 320)'                          YVelocity = (short)(pentity.Velocity.Y * 320)'                          ZVelocity = (short)(pentity.Velocity.Z * 320)'                      });
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityVelocityPacket                      {                          EntityID = entity.EntityID'                          XVelocity = (short)(pentity.Velocity.X * 320)'                          YVelocity = (short)(pentity.Velocity.Y * 320)'                          ZVelocity = (short)(pentity.Velocity.Z * 320)'                      });
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          4' spawnedClient.InventoryWindow.Armor[0].ID' spawnedClient.InventoryWindow.Armor[0].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          3' spawnedClient.InventoryWindow.Armor[1].ID' spawnedClient.InventoryWindow.Armor[1].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          2' spawnedClient.InventoryWindow.Armor[2].ID' spawnedClient.InventoryWindow.Armor[2].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          2' spawnedClient.InventoryWindow.Armor[2].ID' spawnedClient.InventoryWindow.Armor[2].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          2' spawnedClient.InventoryWindow.Armor[2].ID' spawnedClient.InventoryWindow.Armor[2].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          1' spawnedClient.InventoryWindow.Armor[3].ID' spawnedClient.InventoryWindow.Armor[3].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SendEntityToClient,The following statement contains a magic number: client.QueuePacket(new EntityEquipmentPacket(entity.EntityID'                          1' spawnedClient.InventoryWindow.Armor[3].ID' spawnedClient.InventoryWindow.Armor[3].Metadata));
Magic Number,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,SpawnEntity,The following statement contains a magic number: GetEntitiesInRange(entity' 8)
Magic Number,TrueCraft,ServerConfiguration,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\ServerConfiguration.cs,ServerConfiguration,The following statement contains a magic number: ServerPort = 25565;
Magic Number,TrueCraft,ServerConfiguration,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\ServerConfiguration.cs,ServerConfiguration,The following statement contains a magic number: WorldSaveInterval = 30;
Magic Number,TrueCraft,ServerConfiguration,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\ServerConfiguration.cs,ServerConfiguration,The following statement contains a magic number: QueryPort = 25566;
Magic Number,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,Handle,The following statement contains a magic number: arguments.Length < 2
Magic Number,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,Handle,The following statement contains a magic number: amount = arguments[2];
Magic Number,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,Handle,The following statement contains a magic number: arguments.Length >= 3
Magic Number,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,GiveItem,The following statement contains a magic number: amountToGive = 64;
Magic Number,TrueCraft.Commands,GiveCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveCommand.cs,GiveItem,The following statement contains a magic number: count >= 64
Magic Number,TrueCraft.Commands,GiveMeCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\GiveMeCommand.cs,Handle,The following statement contains a magic number: arguments.Length >= 2
Magic Number,TrueCraft.Commands,HelpCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\HelpCommand.cs,HelpPage,The following statement contains a magic number: const int perPage = 5;
Magic Number,TrueCraft.Commands,TellCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\TellCommand.cs,Handle,The following statement contains a magic number: arguments.Length < 2
Magic Number,TrueCraft.Commands,TimeCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\TimeCommand.cs,Handle,The following statement contains a magic number: switch (arguments.Length)              {                  case 0:                      client.SendMessage(client.World.Time.ToString());                      break;                  case 2:                      if (!arguments[0].Equals("set"))                          Help(client' alias' arguments);                        int newTime;                        if(!Int32.TryParse(arguments[1]' out newTime))                          Help(client' alias' arguments);                        client.World.Time = newTime;                        client.SendMessage(string.Format("Setting time to {0}"' arguments[1]));                        foreach (var remoteClient in client.Server.Clients.Where(c => c.World.Equals(client.World)))                          remoteClient.QueuePacket(new TimeUpdatePacket(newTime));                                            break;                  default:                      Help(client' alias' arguments);                      break;              }
Magic Number,TrueCraft.Commands,SpawnCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\DebugCommands.cs,Handle,The following statement contains a magic number: entity.Position = client.Entity.Position + MathHelper.FowardVector(client.Entity.Yaw) * 3;
Magic Number,TrueCraft.Commands,TrashCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\DebugCommands.cs,Handle,The following statement contains a magic number: i <= 44
Magic Number,TrueCraft.Commands,ListCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\ListCommand.cs,Handle,The following statement contains a magic number: listMessage.Length + c.Username.Length + 2 >= 120
Magic Number,TrueCraft.Commands,ListCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\ListCommand.cs,Handle,The following statement contains a magic number: listMessage.Length + c.Username.Length + 2 >= 120
Magic Number,TrueCraft.Commands,ListCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\ListCommand.cs,Handle,The following statement contains a magic number: listMessage.Remove(listMessage.Length - 2' 2);
Magic Number,TrueCraft.Commands,ListCommand,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Commands\ListCommand.cs,Handle,The following statement contains a magic number: listMessage.Remove(listMessage.Length - 2' 2);
Magic Number,TrueCraft.Handlers,EntityHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\EntityHandlers.cs,HandlePlayerMovement,The following statement contains a magic number: client.Entity.Position.DistanceTo(position) > 10
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,The following statement contains a magic number: switch (packet.PlayerAction)              {                  case PlayerDiggingPacket.Action.DropItem:                      // Throwing item                      if (client.SelectedItem.Empty)                          break;                      var spawned = client.SelectedItem;                      spawned.Count = 1;                      var inventory = client.SelectedItem;                      inventory.Count--;                      var item = new ItemEntity(client.Entity.Position + new Vector3(0' PlayerEntity.Height' 0)' spawned);                      item.Velocity = MathHelper.RotateY(Vector3.Forwards' MathHelper.DegreesToRadians(client.Entity.Yaw)) * 0.5;                      client.Inventory[client.SelectedSlot] = inventory;                      server.GetEntityManagerForWorld(client.World).SpawnEntity(item);                      break;                  case PlayerDiggingPacket.Action.StartDigging:                      foreach (var nearbyClient in server.Clients) // TODO: Send this repeatedly during the course of the digging                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.SwingArm));                      }                      if (provider == null)                          server.SendMessage(ChatColor.Red + "WARNING: block provider for ID {0} is null (player digging)"' descriptor.ID);                      else                          provider.BlockLeftClicked(descriptor' packet.Face' world' client);                        // "But why on Earth does this behavior change if you use shears on leaves?"                      // "This is poor seperation of concerns"                      // "Let me do a git blame and flame whoever wrote the next line"                      // To answer all of those questions' here:                      // Minecraft sends a player digging packet when the player starts and stops digging a block (two packets)                      // However' it only sends ONE packet if the block would be mined immediately - which usually is only the case                      // for blocks that have a hardness equal to zero.                      // The exception to this rule is shears on leaves. Leaves normally have a hardness of 0.2' but when you mine them                      // using shears the client only sends the start digging packet and expects them to be mined immediately.                      // So if you want to blame anyone' send flames to Notch for the stupid idea of not sending "stop digging" packets                      // for hardness == 0 blocks.                        time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                      if (time <= 20)                      {                          provider.BlockMined(descriptor' packet.Face' world' client);                          break;                      }                      client.ExpectedDigComplete = DateTime.UtcNow.AddMilliseconds(time);                      break;                  case PlayerDiggingPacket.Action.StopDigging:                      foreach (var nearbyClient in server.Clients)                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.None));                      }                      if (provider != null && descriptor.ID != 0)                      {                          time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                          if (time <= 20)                              break; // Already handled earlier                          var diff = (DateTime.UtcNow - client.ExpectedDigComplete).TotalMilliseconds;                          if (diff > -100) // Allow a small tolerance                          {                              provider.BlockMined(descriptor' packet.Face' world' client);                              // Damage the item                              if (damage != 0)                              {                                  var tool = server.ItemRepository.GetItemProvider(client.SelectedItem.ID) as ToolItem;                                  if (tool != null && tool.Uses != -1)                                  {                                      var slot = client.SelectedItem;                                      slot.Metadata += damage;                                      if (slot.Metadata >= tool.Uses)                                          slot.Count = 0; // Destroy item                                      client.Inventory[client.SelectedSlot] = slot;                                  }                              }                          }                      }                      break;              }
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,The following statement contains a magic number: switch (packet.PlayerAction)              {                  case PlayerDiggingPacket.Action.DropItem:                      // Throwing item                      if (client.SelectedItem.Empty)                          break;                      var spawned = client.SelectedItem;                      spawned.Count = 1;                      var inventory = client.SelectedItem;                      inventory.Count--;                      var item = new ItemEntity(client.Entity.Position + new Vector3(0' PlayerEntity.Height' 0)' spawned);                      item.Velocity = MathHelper.RotateY(Vector3.Forwards' MathHelper.DegreesToRadians(client.Entity.Yaw)) * 0.5;                      client.Inventory[client.SelectedSlot] = inventory;                      server.GetEntityManagerForWorld(client.World).SpawnEntity(item);                      break;                  case PlayerDiggingPacket.Action.StartDigging:                      foreach (var nearbyClient in server.Clients) // TODO: Send this repeatedly during the course of the digging                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.SwingArm));                      }                      if (provider == null)                          server.SendMessage(ChatColor.Red + "WARNING: block provider for ID {0} is null (player digging)"' descriptor.ID);                      else                          provider.BlockLeftClicked(descriptor' packet.Face' world' client);                        // "But why on Earth does this behavior change if you use shears on leaves?"                      // "This is poor seperation of concerns"                      // "Let me do a git blame and flame whoever wrote the next line"                      // To answer all of those questions' here:                      // Minecraft sends a player digging packet when the player starts and stops digging a block (two packets)                      // However' it only sends ONE packet if the block would be mined immediately - which usually is only the case                      // for blocks that have a hardness equal to zero.                      // The exception to this rule is shears on leaves. Leaves normally have a hardness of 0.2' but when you mine them                      // using shears the client only sends the start digging packet and expects them to be mined immediately.                      // So if you want to blame anyone' send flames to Notch for the stupid idea of not sending "stop digging" packets                      // for hardness == 0 blocks.                        time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                      if (time <= 20)                      {                          provider.BlockMined(descriptor' packet.Face' world' client);                          break;                      }                      client.ExpectedDigComplete = DateTime.UtcNow.AddMilliseconds(time);                      break;                  case PlayerDiggingPacket.Action.StopDigging:                      foreach (var nearbyClient in server.Clients)                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.None));                      }                      if (provider != null && descriptor.ID != 0)                      {                          time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                          if (time <= 20)                              break; // Already handled earlier                          var diff = (DateTime.UtcNow - client.ExpectedDigComplete).TotalMilliseconds;                          if (diff > -100) // Allow a small tolerance                          {                              provider.BlockMined(descriptor' packet.Face' world' client);                              // Damage the item                              if (damage != 0)                              {                                  var tool = server.ItemRepository.GetItemProvider(client.SelectedItem.ID) as ToolItem;                                  if (tool != null && tool.Uses != -1)                                  {                                      var slot = client.SelectedItem;                                      slot.Metadata += damage;                                      if (slot.Metadata >= tool.Uses)                                          slot.Count = 0; // Destroy item                                      client.Inventory[client.SelectedSlot] = slot;                                  }                              }                          }                      }                      break;              }
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,The following statement contains a magic number: switch (packet.PlayerAction)              {                  case PlayerDiggingPacket.Action.DropItem:                      // Throwing item                      if (client.SelectedItem.Empty)                          break;                      var spawned = client.SelectedItem;                      spawned.Count = 1;                      var inventory = client.SelectedItem;                      inventory.Count--;                      var item = new ItemEntity(client.Entity.Position + new Vector3(0' PlayerEntity.Height' 0)' spawned);                      item.Velocity = MathHelper.RotateY(Vector3.Forwards' MathHelper.DegreesToRadians(client.Entity.Yaw)) * 0.5;                      client.Inventory[client.SelectedSlot] = inventory;                      server.GetEntityManagerForWorld(client.World).SpawnEntity(item);                      break;                  case PlayerDiggingPacket.Action.StartDigging:                      foreach (var nearbyClient in server.Clients) // TODO: Send this repeatedly during the course of the digging                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.SwingArm));                      }                      if (provider == null)                          server.SendMessage(ChatColor.Red + "WARNING: block provider for ID {0} is null (player digging)"' descriptor.ID);                      else                          provider.BlockLeftClicked(descriptor' packet.Face' world' client);                        // "But why on Earth does this behavior change if you use shears on leaves?"                      // "This is poor seperation of concerns"                      // "Let me do a git blame and flame whoever wrote the next line"                      // To answer all of those questions' here:                      // Minecraft sends a player digging packet when the player starts and stops digging a block (two packets)                      // However' it only sends ONE packet if the block would be mined immediately - which usually is only the case                      // for blocks that have a hardness equal to zero.                      // The exception to this rule is shears on leaves. Leaves normally have a hardness of 0.2' but when you mine them                      // using shears the client only sends the start digging packet and expects them to be mined immediately.                      // So if you want to blame anyone' send flames to Notch for the stupid idea of not sending "stop digging" packets                      // for hardness == 0 blocks.                        time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                      if (time <= 20)                      {                          provider.BlockMined(descriptor' packet.Face' world' client);                          break;                      }                      client.ExpectedDigComplete = DateTime.UtcNow.AddMilliseconds(time);                      break;                  case PlayerDiggingPacket.Action.StopDigging:                      foreach (var nearbyClient in server.Clients)                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.None));                      }                      if (provider != null && descriptor.ID != 0)                      {                          time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                          if (time <= 20)                              break; // Already handled earlier                          var diff = (DateTime.UtcNow - client.ExpectedDigComplete).TotalMilliseconds;                          if (diff > -100) // Allow a small tolerance                          {                              provider.BlockMined(descriptor' packet.Face' world' client);                              // Damage the item                              if (damage != 0)                              {                                  var tool = server.ItemRepository.GetItemProvider(client.SelectedItem.ID) as ToolItem;                                  if (tool != null && tool.Uses != -1)                                  {                                      var slot = client.SelectedItem;                                      slot.Metadata += damage;                                      if (slot.Metadata >= tool.Uses)                                          slot.Count = 0; // Destroy item                                      client.Inventory[client.SelectedSlot] = slot;                                  }                              }                          }                      }                      break;              }
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,The following statement contains a magic number: switch (packet.PlayerAction)              {                  case PlayerDiggingPacket.Action.DropItem:                      // Throwing item                      if (client.SelectedItem.Empty)                          break;                      var spawned = client.SelectedItem;                      spawned.Count = 1;                      var inventory = client.SelectedItem;                      inventory.Count--;                      var item = new ItemEntity(client.Entity.Position + new Vector3(0' PlayerEntity.Height' 0)' spawned);                      item.Velocity = MathHelper.RotateY(Vector3.Forwards' MathHelper.DegreesToRadians(client.Entity.Yaw)) * 0.5;                      client.Inventory[client.SelectedSlot] = inventory;                      server.GetEntityManagerForWorld(client.World).SpawnEntity(item);                      break;                  case PlayerDiggingPacket.Action.StartDigging:                      foreach (var nearbyClient in server.Clients) // TODO: Send this repeatedly during the course of the digging                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.SwingArm));                      }                      if (provider == null)                          server.SendMessage(ChatColor.Red + "WARNING: block provider for ID {0} is null (player digging)"' descriptor.ID);                      else                          provider.BlockLeftClicked(descriptor' packet.Face' world' client);                        // "But why on Earth does this behavior change if you use shears on leaves?"                      // "This is poor seperation of concerns"                      // "Let me do a git blame and flame whoever wrote the next line"                      // To answer all of those questions' here:                      // Minecraft sends a player digging packet when the player starts and stops digging a block (two packets)                      // However' it only sends ONE packet if the block would be mined immediately - which usually is only the case                      // for blocks that have a hardness equal to zero.                      // The exception to this rule is shears on leaves. Leaves normally have a hardness of 0.2' but when you mine them                      // using shears the client only sends the start digging packet and expects them to be mined immediately.                      // So if you want to blame anyone' send flames to Notch for the stupid idea of not sending "stop digging" packets                      // for hardness == 0 blocks.                        time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                      if (time <= 20)                      {                          provider.BlockMined(descriptor' packet.Face' world' client);                          break;                      }                      client.ExpectedDigComplete = DateTime.UtcNow.AddMilliseconds(time);                      break;                  case PlayerDiggingPacket.Action.StopDigging:                      foreach (var nearbyClient in server.Clients)                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.None));                      }                      if (provider != null && descriptor.ID != 0)                      {                          time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                          if (time <= 20)                              break; // Already handled earlier                          var diff = (DateTime.UtcNow - client.ExpectedDigComplete).TotalMilliseconds;                          if (diff > -100) // Allow a small tolerance                          {                              provider.BlockMined(descriptor' packet.Face' world' client);                              // Damage the item                              if (damage != 0)                              {                                  var tool = server.ItemRepository.GetItemProvider(client.SelectedItem.ID) as ToolItem;                                  if (tool != null && tool.Uses != -1)                                  {                                      var slot = client.SelectedItem;                                      slot.Metadata += damage;                                      if (slot.Metadata >= tool.Uses)                                          slot.Count = 0; // Destroy item                                      client.Inventory[client.SelectedSlot] = slot;                                  }                              }                          }                      }                      break;              }
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerBlockPlacementPacket,The following statement contains a magic number: position.DistanceTo((Coordinates3D)client.Entity.Position) > 10
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleClickWindowPacket,The following statement contains a magic number: item.Velocity = MathHelper.FowardVector(client.Entity.Yaw) * 0.3;
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleClickWindowPacket,The following statement contains a magic number: packet.SlotIndex == -999
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleUpdateSignPacket,The following statement contains a magic number: client.World.SetTileEntity(coords' new NbtCompound(new[]                      {                          new NbtString("Text1"' packet.Text[0])'                          new NbtString("Text2"' packet.Text[1])'                          new NbtString("Text3"' packet.Text[2])'                          new NbtString("Text4"' packet.Text[3])'                      }));
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleUpdateSignPacket,The following statement contains a magic number: client.World.SetTileEntity(coords' new NbtCompound(new[]                      {                          new NbtString("Text1"' packet.Text[0])'                          new NbtString("Text2"' packet.Text[1])'                          new NbtString("Text3"' packet.Text[2])'                          new NbtString("Text4"' packet.Text[3])'                      }));
Magic Number,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandleUpdateSignPacket,The following statement contains a magic number: client.Entity.Position.DistanceTo(coords) < 10
Missing Default,TrueCraft,RemoteClient,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\RemoteClient.cs,OperationCompleted,The following switch statement is missing a default case: switch (e.LastOperation)             {                 case SocketAsyncOperation.Receive:                     ProcessNetwork(e);                      SocketPool.Add(e);                     break;                 case SocketAsyncOperation.Send:                     IPacket packet = e.UserToken as IPacket;                      if (packet is DisconnectPacket)                         Server.DisconnectClient(this);                      e.SetBuffer(null' 0' 0);                     break;                 case SocketAsyncOperation.Disconnect:                     Connection.Close();                      break;             }
Missing Default,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)              {                  case "Position":                  case "Yaw":                  case "Pitch":                      PropegateEntityPositionUpdates(entity);                      break;                  case "Metadata":                      PropegateEntityMetadataUpdates(entity);                      break;              }
Missing Default,TrueCraft,EntityManager,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\EntityManager.cs,HandlePlayerPropertyChanged,The following switch statement is missing a default case: switch (property)              {                  case "Position":                      if ((int)(entity.Position.X) >> 4 != (int)(entity.OldPosition.X) >> 4 ||                          (int)(entity.Position.Z) >> 4 != (int)(entity.OldPosition.Z) >> 4)                      {                          client.Log("Passed chunk boundary at {0}' {1}"' (int)(entity.Position.X) >> 4' (int)(entity.Position.Z) >> 4);                          Server.Scheduler.ScheduleEvent("client.update-chunks"' client'                              TimeSpan.Zero' s => client.UpdateChunks());                          UpdateClientEntities(client);                      }                      break;              }
Missing Default,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerDiggingPacket,The following switch statement is missing a default case: switch (packet.PlayerAction)              {                  case PlayerDiggingPacket.Action.DropItem:                      // Throwing item                      if (client.SelectedItem.Empty)                          break;                      var spawned = client.SelectedItem;                      spawned.Count = 1;                      var inventory = client.SelectedItem;                      inventory.Count--;                      var item = new ItemEntity(client.Entity.Position + new Vector3(0' PlayerEntity.Height' 0)' spawned);                      item.Velocity = MathHelper.RotateY(Vector3.Forwards' MathHelper.DegreesToRadians(client.Entity.Yaw)) * 0.5;                      client.Inventory[client.SelectedSlot] = inventory;                      server.GetEntityManagerForWorld(client.World).SpawnEntity(item);                      break;                  case PlayerDiggingPacket.Action.StartDigging:                      foreach (var nearbyClient in server.Clients) // TODO: Send this repeatedly during the course of the digging                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.SwingArm));                      }                      if (provider == null)                          server.SendMessage(ChatColor.Red + "WARNING: block provider for ID {0} is null (player digging)"' descriptor.ID);                      else                          provider.BlockLeftClicked(descriptor' packet.Face' world' client);                        // "But why on Earth does this behavior change if you use shears on leaves?"                      // "This is poor seperation of concerns"                      // "Let me do a git blame and flame whoever wrote the next line"                      // To answer all of those questions' here:                      // Minecraft sends a player digging packet when the player starts and stops digging a block (two packets)                      // However' it only sends ONE packet if the block would be mined immediately - which usually is only the case                      // for blocks that have a hardness equal to zero.                      // The exception to this rule is shears on leaves. Leaves normally have a hardness of 0.2' but when you mine them                      // using shears the client only sends the start digging packet and expects them to be mined immediately.                      // So if you want to blame anyone' send flames to Notch for the stupid idea of not sending "stop digging" packets                      // for hardness == 0 blocks.                        time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                      if (time <= 20)                      {                          provider.BlockMined(descriptor' packet.Face' world' client);                          break;                      }                      client.ExpectedDigComplete = DateTime.UtcNow.AddMilliseconds(time);                      break;                  case PlayerDiggingPacket.Action.StopDigging:                      foreach (var nearbyClient in server.Clients)                      {                          var c = (RemoteClient)nearbyClient;                          if (c.KnownEntities.Contains(client.Entity))                              c.QueuePacket(new AnimationPacket(client.Entity.EntityID' AnimationPacket.PlayerAnimation.None));                      }                      if (provider != null && descriptor.ID != 0)                      {                          time = BlockProvider.GetHarvestTime(descriptor.ID' client.SelectedItem.ID' out damage);                          if (time <= 20)                              break; // Already handled earlier                          var diff = (DateTime.UtcNow - client.ExpectedDigComplete).TotalMilliseconds;                          if (diff > -100) // Allow a small tolerance                          {                              provider.BlockMined(descriptor' packet.Face' world' client);                              // Damage the item                              if (damage != 0)                              {                                  var tool = server.ItemRepository.GetItemProvider(client.SelectedItem.ID) as ToolItem;                                  if (tool != null && tool.Uses != -1)                                  {                                      var slot = client.SelectedItem;                                      slot.Metadata += damage;                                      if (slot.Metadata >= tool.Uses)                                          slot.Count = 0; // Destroy item                                      client.Inventory[client.SelectedSlot] = slot;                                  }                              }                          }                      }                      break;              }
Missing Default,TrueCraft.Handlers,InteractionHandlers,D:\research\architectureSmells\repos1\SirCmpwn_TrueCraft\TrueCraft\Handlers\InteractionHandlers.cs,HandlePlayerAction,The following switch statement is missing a default case: switch (packet.Action)              {                  case PlayerActionPacket.PlayerAction.Crouch:                      entity.EntityFlags |= EntityFlags.Crouched;                      break;                  case PlayerActionPacket.PlayerAction.Uncrouch:                      entity.EntityFlags &= ~EntityFlags.Crouched;                      break;              }
