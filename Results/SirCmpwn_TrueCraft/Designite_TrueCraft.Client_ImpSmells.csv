Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TrueCraft.Client.Input,MouseHandler,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Input\MouseHandler.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,TrueCraft.Client,VoxelCast,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\VoxelCast.cs,Cast,Cyclomatic complexity of the method is 9
Complex Method,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,Cyclomatic complexity of the method is 9
Complex Method,TrueCraft.Client.Rendering,ChunkRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\ChunkRenderer.cs,ProcessChunk,Cyclomatic complexity of the method is 9
Complex Method,TrueCraft.Client.Modules,ChunkModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChunkModule.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,Cyclomatic complexity of the method is 15
Complex Method,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,Cyclomatic complexity of the method is 11
Long Parameter List,TrueCraft.Client,VoxelCast,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\VoxelCast.cs,Cast,The method has 5 parameters. Parameters: world' ray' repository' posmax' negmax
Long Parameter List,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The method has 5 parameters. Parameters: descriptor' offset' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderDoubleSlab,The method has 5 parameters. Parameters: descriptor' offset' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,CraftingTableRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CraftingTableRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,TNTRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TNTRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,SnowRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SnowRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,TorchRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TorchRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,LogRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LogRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,LeavesRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LeavesRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,VegitationRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\VegitationRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,WaterRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WaterRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,FarmlandRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\FarmlandRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering,Camera,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Camera.cs,Camera,The method has 7 parameters. Parameters: aspectRatio' fov' nearZ' farZ' position' pitch' yaw
Long Parameter List,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,FontRenderer,The method has 5 parameters. Parameters: regular' bold' strikethrough' underline' italic
Long Parameter List,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The method has 6 parameters. Parameters: spriteBatch' x' y' text' scale' alpha
Long Parameter List,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,RenderBlock,The method has 6 parameters. Parameters: provider' descriptor' faces' offset' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The method has 7 parameters. Parameters: offset' texture' faces' indiciesOffset' indicies' color' lighting
Long Parameter List,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The method has 7 parameters. Parameters: face' offset' texture' textureOffset' indiciesOffset' indicies' color
Long Parameter List,TrueCraft.Client.Rendering,ChunkMesh,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\ChunkMesh.cs,ChunkMesh,The method has 5 parameters. Parameters: chunk' game' vertices' opaqueIndices' transparentIndices
Long Parameter List,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,Render,The method has 6 parameters. Parameters: descriptor' offset' faces' textureMap' indiciesOffset' indicies
Long Parameter List,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The method has 6 parameters. Parameters: descriptor' offset' textureMap' indiciesOffset' indicies' color
Long Parameter List,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The method has 7 parameters. Parameters: face' offset' texture' textureOffset' indiciesOffset' indicies' color
Long Parameter List,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderItemIcon,The method has 6 parameters. Parameters: spriteBatch' texture' provider' metadata' destination' color
Long Parameter List,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The method has 5 parameters. Parameters: area' _x' _y' frame' stage
Long Statement,TrueCraft.Client.Input,MouseHandler,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Input\MouseHandler.cs,Process,The length of the statement  "                var args = new MouseScrollEventArgs(newState.X' newState.Y' newState.ScrollWheelValue' (newState.ScrollWheelValue - oldState.ScrollWheelValue)); " is 144.
Long Statement,TrueCraft.Client.Input,MouseHandler,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Input\MouseHandler.cs,Process,The length of the statement  "                var args = new MouseButtonEventArgs(newState.X' newState.Y' MouseButton.Left' (newState.LeftButton == ButtonState.Pressed)); " is 124.
Long Statement,TrueCraft.Client.Input,MouseHandler,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Input\MouseHandler.cs,Process,The length of the statement  "                var args = new MouseButtonEventArgs(newState.X' newState.Y' MouseButton.Right' (newState.RightButton == ButtonState.Pressed)); " is 126.
Long Statement,TrueCraft.Client.Input,MouseHandler,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Input\MouseHandler.cs,Process,The length of the statement  "                var args = new MouseButtonEventArgs(newState.X' newState.Y' MouseButton.Middle' (newState.MiddleButton == ButtonState.Pressed)); " is 128.
Long Statement,TrueCraft.Client.Rendering,Mesh,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Mesh.cs,Draw,The length of the statement  "            if (_vertices == null || _vertices.IsDisposed || _indices[index] == null || _indices[index].IsDisposed || _indices[index].IndexCount < 3) " is 137.
Long Statement,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The length of the statement  "                var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color); " is 126.
Long Statement,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The length of the statement  "                        destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0)) " is 120.
Long Statement,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The length of the statement  "                Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)' " is 125.
Long Statement,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The length of the statement  "            SkyPlaneEffect.AmbientLightColor = WorldSkyColor.ToVector3(); foreach (var pass in SkyPlaneEffect.CurrentTechnique.Passes) " is 122.
Complex Conditional,TrueCraft.Client.Rendering,Mesh,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Mesh.cs,Draw,The conditional expression  "_vertices == null || _vertices.IsDisposed || _indices[index] == null || _indices[index].IsDisposed || _indices[index].IndexCount < 3"  is complex.
Complex Conditional,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,GetLight,The conditional expression  "(coords.X < 0) || (coords.X >= Chunk.Width) ||                  (coords.Z < 0) || (coords.Z >= Chunk.Depth)"  is complex.
Complex Conditional,TrueCraft.Client.Rendering,ChunkRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\ChunkRenderer.cs,AddAdjacentBlocks,The conditional expression  "next.X < 0 || next.X >= Chunk.Width                      || next.Y < 0 || next.Y >= Chunk.Height                      || next.Z < 0 || next.Z >= Chunk.Depth"  is complex.
Complex Conditional,TrueCraft.Client.Rendering,ChunkRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\ChunkRenderer.cs,AddTransparentBlock,The conditional expression  "next.X < 0 || next.X >= Chunk.Width                      || next.Y < 0 || next.Y >= Chunk.Height                      || next.Z < 0 || next.Z >= Chunk.Depth"  is complex.
Complex Conditional,TrueCraft.Client.Rendering,ChunkRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\ChunkRenderer.cs,ProcessChunk,The conditional expression  "coords.X == 0 || coords.X == Chunk.Width - 1 ||                                  coords.Z == 0 || coords.Z == Chunk.Depth - 1"  is complex.
Complex Conditional,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The conditional expression  "e.X < 10 || e.X > Game.GraphicsDevice.Viewport.Width - 10 ||                  e.Y < 10 || e.Y > Game.GraphicsDevice.Viewport.Height - 10"  is complex.
Magic Number,TrueCraft.Client,Program,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Program.cs,ParseEndPoint,The following statement contains a magic number: if (IPAddress.TryParse(arg' out address))                  return new IPEndPoint(address' 25565);
Magic Number,TrueCraft.Client,Program,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Program.cs,ParseEndPoint,The following statement contains a magic number: return new IPEndPoint(Resolve(arg)' 25565);
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Window_ClientSizeChanged,The following statement contains a magic number: if (GraphicsDevice.Viewport.Width < 640 || GraphicsDevice.Viewport.Height < 480)                  ScaleFactor = 0.5f;              else if (GraphicsDevice.Viewport.Width < 978 || GraphicsDevice.Viewport.Height < 720)                  ScaleFactor = 1.0f;              else                  ScaleFactor = 1.5f;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Window_ClientSizeChanged,The following statement contains a magic number: if (GraphicsDevice.Viewport.Width < 640 || GraphicsDevice.Viewport.Height < 480)                  ScaleFactor = 0.5f;              else if (GraphicsDevice.Viewport.Width < 978 || GraphicsDevice.Viewport.Height < 720)                  ScaleFactor = 1.0f;              else                  ScaleFactor = 1.5f;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Window_ClientSizeChanged,The following statement contains a magic number: if (GraphicsDevice.Viewport.Width < 640 || GraphicsDevice.Viewport.Height < 480)                  ScaleFactor = 0.5f;              else if (GraphicsDevice.Viewport.Width < 978 || GraphicsDevice.Viewport.Height < 720)                  ScaleFactor = 1.0f;              else                  ScaleFactor = 1.5f;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Window_ClientSizeChanged,The following statement contains a magic number: if (GraphicsDevice.Viewport.Width < 640 || GraphicsDevice.Viewport.Height < 480)                  ScaleFactor = 0.5f;              else if (GraphicsDevice.Viewport.Width < 978 || GraphicsDevice.Viewport.Height < 720)                  ScaleFactor = 1.0f;              else                  ScaleFactor = 1.5f;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Initialize,The following statement contains a magic number: var centerX = GraphicsDevice.Viewport.Width / 2;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Initialize,The following statement contains a magic number: var centerY = GraphicsDevice.Viewport.Height / 2;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,Update,The following statement contains a magic number: if (NextPhysicsUpdate < DateTime.UtcNow && Client.LoggedIn)              {                  // NOTE: This is to make the vanilla server send us chunk packets                  // We should eventually make some means of detecing that we're on a vanilla server to enable this                  // It's a waste of bandwidth to do it on a TrueCraft server                  Client.QueuePacket(new PlayerGroundedPacket { OnGround = true });                  NextPhysicsUpdate = DateTime.UtcNow.AddMilliseconds(50);              }
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,UpdateCamera,The following statement contains a magic number: const double bobbingMultiplier = 0.05;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,UpdateCamera,The following statement contains a magic number: var bobbing = Bobbing * 1.5;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,UpdateCamera,The following statement contains a magic number: var xbob = Math.Cos(bobbing + Math.PI / 2) * bobbingMultiplier;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,UpdateCamera,The following statement contains a magic number: var ybob = Math.Sin(Math.PI / 2 - (2 * bobbing)) * bobbingMultiplier;
Magic Number,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,UpdateCamera,The following statement contains a magic number: var ybob = Math.Sin(Math.PI / 2 - (2 * bobbing)) * bobbingMultiplier;
Magic Number,TrueCraft.Client,MultiplayerClient,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\MultiplayerClient.cs,MultiplayerClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft.Client,MultiplayerClient,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\MultiplayerClient.cs,MultiplayerClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft.Client,MultiplayerClient,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\MultiplayerClient.cs,MultiplayerClient,The following statement contains a magic number: SocketPool = new SocketAsyncEventArgsPool(100' 200' 65536);
Magic Number,TrueCraft.Client,MultiplayerClient,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\MultiplayerClient.cs,MultiplayerClient,The following statement contains a magic number: Health = 20;
Magic Number,TrueCraft.Client,VoxelCast,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\VoxelCast.cs,Cast,The following statement contains a magic number: double min = negmax * 2;
Magic Number,TrueCraft.Client,AudioManager,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\AudioManager.cs,LoadOgg,The following statement contains a magic number: using (var reader = new VorbisReader(stream' false))              {                  float[] _buffer = new float[reader.TotalSamples];                  byte[] buffer = new byte[reader.TotalSamples * 2];                  reader.ReadSamples(_buffer' 0' _buffer.Length);                  for (int i = 0; i < _buffer.Length; i++)                  {                      short val = (short)Math.Max(Math.Min(short.MaxValue * _buffer[i]' short.MaxValue)' short.MinValue);                      var decoded = BitConverter.GetBytes(val);                      buffer[i * 2] = decoded[0];                      buffer[i * 2 + 1] = decoded[1];                  }                  return new SoundEffect(buffer' reader.SampleRate' reader.Channels == 1 ? AudioChannels.Mono : AudioChannels.Stereo);              }
Magic Number,TrueCraft.Client,AudioManager,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\AudioManager.cs,LoadOgg,The following statement contains a magic number: using (var reader = new VorbisReader(stream' false))              {                  float[] _buffer = new float[reader.TotalSamples];                  byte[] buffer = new byte[reader.TotalSamples * 2];                  reader.ReadSamples(_buffer' 0' _buffer.Length);                  for (int i = 0; i < _buffer.Length; i++)                  {                      short val = (short)Math.Max(Math.Min(short.MaxValue * _buffer[i]' short.MaxValue)' short.MinValue);                      var decoded = BitConverter.GetBytes(val);                      buffer[i * 2] = decoded[0];                      buffer[i * 2 + 1] = decoded[1];                  }                  return new SoundEffect(buffer' reader.SampleRate' reader.Channels == 1 ? AudioChannels.Mono : AudioChannels.Stereo);              }
Magic Number,TrueCraft.Client,AudioManager,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\AudioManager.cs,LoadOgg,The following statement contains a magic number: using (var reader = new VorbisReader(stream' false))              {                  float[] _buffer = new float[reader.TotalSamples];                  byte[] buffer = new byte[reader.TotalSamples * 2];                  reader.ReadSamples(_buffer' 0' _buffer.Length);                  for (int i = 0; i < _buffer.Length; i++)                  {                      short val = (short)Math.Max(Math.Min(short.MaxValue * _buffer[i]' short.MaxValue)' short.MinValue);                      var decoded = BitConverter.GetBytes(val);                      buffer[i * 2] = decoded[0];                      buffer[i * 2 + 1] = decoded[1];                  }                  return new SoundEffect(buffer' reader.SampleRate' reader.Channels == 1 ? AudioChannels.Mono : AudioChannels.Stereo);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: int[] lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var face = (CubeFace)i;                  switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }              }
Magic Number,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The following statement contains a magic number: for (int i = (int)(CubeFace.PositiveY) * 4; i < (int)(CubeFace.PositiveY) * 4 + 4; i++)              {                  cube[i].Color = new Color(cube[i].Color.ToVector3() * BiomeColor.ToVector3()); // TODO: Take this from biome              }
Magic Number,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The following statement contains a magic number: for (int i = (int)(CubeFace.PositiveY) * 4; i < (int)(CubeFace.PositiveY) * 4 + 4; i++)              {                  cube[i].Color = new Color(cube[i].Color.ToVector3() * BiomeColor.ToVector3()); // TODO: Take this from biome              }
Magic Number,TrueCraft.Client.Rendering.Blocks,GrassRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\GrassRenderer.cs,Render,The following statement contains a magic number: for (int i = (int)(CubeFace.PositiveY) * 4; i < (int)(CubeFace.PositiveY) * 4 + 4; i++)              {                  cube[i].Color = new Color(cube[i].Color.ToVector3() * BiomeColor.ToVector3()); // TODO: Take this from biome              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CraftingTableRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CraftingTableRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,CraftingTableRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CraftingTableRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,TNTRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TNTRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,TNTRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TNTRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,SnowRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SnowRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,SnowRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SnowRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,TorchRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TorchRenderer.cs,Render,The following statement contains a magic number: int[] lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,TorchRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\TorchRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LogRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LogRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,LogRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LogRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LeavesRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LeavesRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,LeavesRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LeavesRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: int[] lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: switch ((LadderBlock.LadderDirection)descriptor.Metadata)              {                  case LadderBlock.LadderDirection.North:                      verticies = CreateQuad(CubeFace.PositiveZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Forward;                      faceCorrection = (int)CubeFace.PositiveZ * 4;                      break;                  case LadderBlock.LadderDirection.South:                      verticies = CreateQuad(CubeFace.NegativeZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Backward;                      faceCorrection = (int)CubeFace.NegativeZ * 4;                      break;                  case LadderBlock.LadderDirection.East:                      verticies = CreateQuad(CubeFace.NegativeX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Right;                      faceCorrection = (int)CubeFace.NegativeX * 4;                      break;                  case LadderBlock.LadderDirection.West:                      verticies = CreateQuad(CubeFace.PositiveX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Left;                      faceCorrection = (int)CubeFace.PositiveX * 4;                      break;                  default:                      // Should never happen                      verticies = CreateUniformCube(offset' Texture' VisibleFaces.All'                          indiciesOffset' out indicies' Color.White);                      correction = Vector3.Zero;                      break;              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: switch ((LadderBlock.LadderDirection)descriptor.Metadata)              {                  case LadderBlock.LadderDirection.North:                      verticies = CreateQuad(CubeFace.PositiveZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Forward;                      faceCorrection = (int)CubeFace.PositiveZ * 4;                      break;                  case LadderBlock.LadderDirection.South:                      verticies = CreateQuad(CubeFace.NegativeZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Backward;                      faceCorrection = (int)CubeFace.NegativeZ * 4;                      break;                  case LadderBlock.LadderDirection.East:                      verticies = CreateQuad(CubeFace.NegativeX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Right;                      faceCorrection = (int)CubeFace.NegativeX * 4;                      break;                  case LadderBlock.LadderDirection.West:                      verticies = CreateQuad(CubeFace.PositiveX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Left;                      faceCorrection = (int)CubeFace.PositiveX * 4;                      break;                  default:                      // Should never happen                      verticies = CreateUniformCube(offset' Texture' VisibleFaces.All'                          indiciesOffset' out indicies' Color.White);                      correction = Vector3.Zero;                      break;              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: switch ((LadderBlock.LadderDirection)descriptor.Metadata)              {                  case LadderBlock.LadderDirection.North:                      verticies = CreateQuad(CubeFace.PositiveZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Forward;                      faceCorrection = (int)CubeFace.PositiveZ * 4;                      break;                  case LadderBlock.LadderDirection.South:                      verticies = CreateQuad(CubeFace.NegativeZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Backward;                      faceCorrection = (int)CubeFace.NegativeZ * 4;                      break;                  case LadderBlock.LadderDirection.East:                      verticies = CreateQuad(CubeFace.NegativeX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Right;                      faceCorrection = (int)CubeFace.NegativeX * 4;                      break;                  case LadderBlock.LadderDirection.West:                      verticies = CreateQuad(CubeFace.PositiveX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Left;                      faceCorrection = (int)CubeFace.PositiveX * 4;                      break;                  default:                      // Should never happen                      verticies = CreateUniformCube(offset' Texture' VisibleFaces.All'                          indiciesOffset' out indicies' Color.White);                      correction = Vector3.Zero;                      break;              }
Magic Number,TrueCraft.Client.Rendering.Blocks,LadderRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\LadderRenderer.cs,Render,The following statement contains a magic number: switch ((LadderBlock.LadderDirection)descriptor.Metadata)              {                  case LadderBlock.LadderDirection.North:                      verticies = CreateQuad(CubeFace.PositiveZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Forward;                      faceCorrection = (int)CubeFace.PositiveZ * 4;                      break;                  case LadderBlock.LadderDirection.South:                      verticies = CreateQuad(CubeFace.NegativeZ' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Backward;                      faceCorrection = (int)CubeFace.NegativeZ * 4;                      break;                  case LadderBlock.LadderDirection.East:                      verticies = CreateQuad(CubeFace.NegativeX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Right;                      faceCorrection = (int)CubeFace.NegativeX * 4;                      break;                  case LadderBlock.LadderDirection.West:                      verticies = CreateQuad(CubeFace.PositiveX' offset' Texture' 0' indiciesOffset' out indicies' Color.White);                      correction = Vector3.Left;                      faceCorrection = (int)CubeFace.PositiveX * 4;                      break;                  default:                      // Should never happen                      verticies = CreateUniformCube(offset' Texture' VisibleFaces.All'                          indiciesOffset' out indicies' Color.White);                      correction = Vector3.Zero;                      break;              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,WheatRenderer,The following statement contains a magic number: var textureMap = new Vector2(8' 5);
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,WheatRenderer,The following statement contains a magic number: var textureMap = new Vector2(8' 5);
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,WheatRenderer,The following statement contains a magic number: Textures = new Vector2[8][];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,WheatRenderer,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  Textures[i] = new[]                  {                      textureMap + Vector2.UnitX + Vector2.UnitY'                      textureMap + Vector2.UnitY'                      textureMap'                      textureMap + Vector2.UnitX'                  };                  for (int j = 0; j < Textures[i].Length; j++)                      Textures[i][j] *= new Vector2(16f / 256f);                  textureMap += new Vector2(1' 0);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: indicies = new int[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: indicies = new int[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: indicies = new int[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * 2 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++) // Y faces are the last two in the CubeFace enum' so we can just iterate to 4              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++) // Y faces are the last two in the CubeFace enum' so we can just iterate to 4              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++) // Y faces are the last two in the CubeFace enum' so we can just iterate to 4              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++) // Y faces are the last two in the CubeFace enum' so we can just iterate to 4              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++) // Y faces are the last two in the CubeFace enum' so we can just iterate to 4              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: indiciesOffset += 4 * 6;
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: indiciesOffset += 4 * 6;
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WheatRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WheatRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  var side = (CubeFace)_side;                  var quad = CreateQuad(side' center' texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 0.5f;                          quad[i].Position.X = -quad[i].Position.X;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 0.5f;                          quad[i].Position.Z = -quad[i].Position.Z;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4 + 4 * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6 + 6 * 4' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,WaterRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WaterRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,WaterRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\WaterRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,FarmlandRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\FarmlandRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering.Blocks,FarmlandRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\FarmlandRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: indicies = new int[5 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: indicies = new int[5 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[5 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[5 * 6];
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  side = (CubeFace)_side;                  quad = CreateQuad(side' center' Texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  side = (CubeFace)_side;                  quad = CreateQuad(side' center' Texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  side = (CubeFace)_side;                  quad = CreateQuad(side' center' Texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  side = (CubeFace)_side;                  quad = CreateQuad(side' center' Texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: for (int _side = 0; _side < 4; _side++)              {                  side = (CubeFace)_side;                  quad = CreateQuad(side' center' Texture' 0' indiciesOffset' out _indicies' Color.White);                  if (side == CubeFace.NegativeX || side == CubeFace.PositiveX)                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.X *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  else                  {                      for (int i = 0; i < quad.Length; i++)                      {                          quad[i].Position.Z *= 14f / 16f;                          quad[i].Position += offset;                      }                  }                  Array.Copy(quad' 0' verticies' _side * 4' 4);                  Array.Copy(_indicies' 0' indicies' _side * 6' 6);              }
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: Array.Copy(quad' 0' verticies' (int)side * 4' 4);
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: Array.Copy(quad' 0' verticies' (int)side * 4' 4);
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: Array.Copy(_indicies' 0' indicies' (int)side * 6' 6);
Magic Number,TrueCraft.Client.Rendering.Blocks,CactusRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\CactusRenderer.cs,Render,The following statement contains a magic number: Array.Copy(_indicies' 0' indicies' (int)side * 6' 6);
Magic Number,TrueCraft.Client.Rendering,Camera,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Camera.cs,Recalculate,The following statement contains a magic number: var direction = Vector3.Transform(Vector3.UnitZ'                  Matrix.CreateRotationX(MathHelper.ToRadians(_pitch)) *                  Matrix.CreateRotationY(MathHelper.ToRadians(-(_yaw - 180) + 180)));
Magic Number,TrueCraft.Client.Rendering,Camera,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Camera.cs,Recalculate,The following statement contains a magic number: var direction = Vector3.Transform(Vector3.UnitZ'                  Matrix.CreateRotationX(MathHelper.ToRadians(_pitch)) *                  Matrix.CreateRotationY(MathHelper.ToRadians(-(_yaw - 180) + 180)));
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  if (text[i] == '§')                  {                      i++;                      var code = string.Format("§{0}"' text[i]);                      if (ChatFormat.IsValid(code))                          font = GetFont(code);                      else                          color = GetColor(code);                  }                  else                  {                      var glyph = font.GetGlyph(text[i]);                      if (glyph != null)                      {                          var sourceRectangle = new Rectangle(glyph.X' glyph.Y' glyph.Width' glyph.Height);                          var destRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale)'                              dy + (int)(glyph.YOffset * scale)'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                          var shadowRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale) + 4'                              dy + (int)(glyph.YOffset * scale) + 4'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                            spriteBatch.Draw(font.GetTexture(glyph.Page)' shadowRectangle' sourceRectangle' new Color(21' 21' 21' alpha));                          spriteBatch.Draw(font.GetTexture(glyph.Page)' destRectangle' sourceRectangle' new Color(color' alpha));                          dx += (int)(glyph.XAdvance * scale);                      }                  }              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  if (text[i] == '§')                  {                      i++;                      var code = string.Format("§{0}"' text[i]);                      if (ChatFormat.IsValid(code))                          font = GetFont(code);                      else                          color = GetColor(code);                  }                  else                  {                      var glyph = font.GetGlyph(text[i]);                      if (glyph != null)                      {                          var sourceRectangle = new Rectangle(glyph.X' glyph.Y' glyph.Width' glyph.Height);                          var destRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale)'                              dy + (int)(glyph.YOffset * scale)'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                          var shadowRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale) + 4'                              dy + (int)(glyph.YOffset * scale) + 4'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                            spriteBatch.Draw(font.GetTexture(glyph.Page)' shadowRectangle' sourceRectangle' new Color(21' 21' 21' alpha));                          spriteBatch.Draw(font.GetTexture(glyph.Page)' destRectangle' sourceRectangle' new Color(color' alpha));                          dx += (int)(glyph.XAdvance * scale);                      }                  }              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  if (text[i] == '§')                  {                      i++;                      var code = string.Format("§{0}"' text[i]);                      if (ChatFormat.IsValid(code))                          font = GetFont(code);                      else                          color = GetColor(code);                  }                  else                  {                      var glyph = font.GetGlyph(text[i]);                      if (glyph != null)                      {                          var sourceRectangle = new Rectangle(glyph.X' glyph.Y' glyph.Width' glyph.Height);                          var destRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale)'                              dy + (int)(glyph.YOffset * scale)'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                          var shadowRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale) + 4'                              dy + (int)(glyph.YOffset * scale) + 4'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                            spriteBatch.Draw(font.GetTexture(glyph.Page)' shadowRectangle' sourceRectangle' new Color(21' 21' 21' alpha));                          spriteBatch.Draw(font.GetTexture(glyph.Page)' destRectangle' sourceRectangle' new Color(color' alpha));                          dx += (int)(glyph.XAdvance * scale);                      }                  }              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  if (text[i] == '§')                  {                      i++;                      var code = string.Format("§{0}"' text[i]);                      if (ChatFormat.IsValid(code))                          font = GetFont(code);                      else                          color = GetColor(code);                  }                  else                  {                      var glyph = font.GetGlyph(text[i]);                      if (glyph != null)                      {                          var sourceRectangle = new Rectangle(glyph.X' glyph.Y' glyph.Width' glyph.Height);                          var destRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale)'                              dy + (int)(glyph.YOffset * scale)'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                          var shadowRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale) + 4'                              dy + (int)(glyph.YOffset * scale) + 4'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                            spriteBatch.Draw(font.GetTexture(glyph.Page)' shadowRectangle' sourceRectangle' new Color(21' 21' 21' alpha));                          spriteBatch.Draw(font.GetTexture(glyph.Page)' destRectangle' sourceRectangle' new Color(color' alpha));                          dx += (int)(glyph.XAdvance * scale);                      }                  }              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,DrawText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  if (text[i] == '§')                  {                      i++;                      var code = string.Format("§{0}"' text[i]);                      if (ChatFormat.IsValid(code))                          font = GetFont(code);                      else                          color = GetColor(code);                  }                  else                  {                      var glyph = font.GetGlyph(text[i]);                      if (glyph != null)                      {                          var sourceRectangle = new Rectangle(glyph.X' glyph.Y' glyph.Width' glyph.Height);                          var destRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale)'                              dy + (int)(glyph.YOffset * scale)'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                          var shadowRectangle = new Rectangle(                              dx + (int)(glyph.XOffset * scale) + 4'                              dy + (int)(glyph.YOffset * scale) + 4'                              (int)(glyph.Width * scale)'                              (int)(glyph.Height * scale));                            spriteBatch.Draw(font.GetTexture(glyph.Page)' shadowRectangle' sourceRectangle' new Color(21' 21' 21' alpha));                          spriteBatch.Draw(font.GetTexture(glyph.Page)' destRectangle' sourceRectangle' new Color(color' alpha));                          dx += (int)(glyph.XAdvance * scale);                      }                  }              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,FontRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FontRenderer.cs,GetColor,The following statement contains a magic number: switch (colorCode)              {                  case ChatColor.Black:                      return new Color(0' 0' 0);                    case ChatColor.DarkBlue:                      return new Color(0' 0' 170);                    case ChatColor.DarkGreen:                      return new Color(0' 170' 0);                    case ChatColor.DarkCyan:                      return new Color(0' 170' 170);                    case ChatColor.DarkRed:                      return new Color(170' 0' 0);                    case ChatColor.Purple:                      return new Color(170' 0' 170);                    case ChatColor.Orange:                      return new Color(255' 170' 0);                    case ChatColor.Gray:                      return new Color(170' 170' 170);                    case ChatColor.DarkGray:                      return new Color(85' 85' 85);                    case ChatColor.Blue:                      return new Color(85' 85' 255);                    case ChatColor.BrightGreen:                      return new Color(85' 255' 85);                    case ChatColor.Cyan:                      return new Color(85' 255' 255);                    case ChatColor.Red:                      return new Color(255' 85' 85);                    case ChatColor.Pink:                      return new Color(255' 85' 255);                    case ChatColor.Yellow:                      return new Color(255' 255' 85);                    case ChatColor.White:                      return new Color(255' 255' 255);                    default:                      break;              }
Magic Number,TrueCraft.Client.Rendering,Renderer<T>,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Renderer.cs,Renderer,The following statement contains a magic number: lock (_syncLock)              {                  _isRunning = false;                  var threads = Environment.ProcessorCount - 2;                  if (threads < 1)                      threads = 1;                  _rendererThreads = new Thread[threads];                  for (int i = 0; i < _rendererThreads.Length; i++)                  {                      _rendererThreads[i] = new Thread(DoRendering) { IsBackground = true };                  }                  _items = new ConcurrentQueue<T>(); _priorityItems = new ConcurrentQueue<T>();                  _pending = new HashSet<T>();                  _isDisposed = false;              }
Magic Number,TrueCraft.Client.Rendering,Renderer<T>,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Renderer.cs,DoRendering,The following statement contains a magic number: while (_isRunning)              {                  var item = default(T);                  var result = default(Mesh);                    lock (_syncLock)                  {                      if (_priorityItems.TryDequeue(out item) && _pending.Remove(item) && TryRender(item' out result))                      {                          var args = new RendererEventArgs<T>(item' result' true);                          if (MeshCompleted != null)                              MeshCompleted(this' args);                      }                      else if (_items.TryDequeue(out item) && _pending.Remove(item) && TryRender(item' out result))                      {                          var args = new RendererEventArgs<T>(item' result' false);                          if (MeshCompleted != null)                              MeshCompleted(this' args);                      }                  }                    if (item == null) // We don't have any work' so sleep for a bit.                      Thread.Sleep(100);              }
Magic Number,TrueCraft.Client.Rendering,TextureMapper,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\TextureMapper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,TrueCraft.Client.Rendering,TextureMapper,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\TextureMapper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,TrueCraft.Client.Rendering,Mesh,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Mesh.cs,Draw,The following statement contains a magic number: if (_vertices == null || _vertices.IsDisposed || _indices[index] == null || _indices[index].IsDisposed || _indices[index].IndexCount < 3)                  return;
Magic Number,TrueCraft.Client.Rendering,Mesh,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Mesh.cs,Draw,The following statement contains a magic number: foreach (var pass in effect.CurrentTechnique.Passes)              {                  pass.Apply();                  effect.GraphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList'                      0' 0' _indices[index].IndexCount' 0' _indices[index].IndexCount / 3);              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,Render,The following statement contains a magic number: var lighting = new int[6];
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,Render,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  var coords = (descriptor.Coordinates + FaceCoords[i]);                  lighting[i] = GetLight(descriptor.Chunk' coords);              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: indicies = new int[6 * totalFaces];
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * totalFaces];
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateUniformCube,The following statement contains a magic number: for (int _side = 0; _side < 6; _side++)              {                  if ((faces & VisibleForCubeFace[_side]) == 0)                  {                      textureIndex += 4;                      continue;                  }                  var lightColor = LightColor.ToVector3() * CubeBrightness[lighting[_side]];                    var side = (CubeFace)_side;                  var quad = CreateQuad(side' offset' texture' textureIndex % texture.Length' indiciesOffset'                      out _indicies' new Color(lightColor * color.ToVector3()));                  Array.Copy(quad' 0' verticies' sidesSoFar * 4' 4);                  Array.Copy(_indicies' 0' indicies' sidesSoFar * 6' 6);                  textureIndex += 4;                  sidesSoFar++;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: for (int i = 0; i < indicies.Length; i++)                  indicies[i] += ((int)face * 4) + indiciesOffset;
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: var quad = new VertexPositionNormalColorTexture[4];
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,CreateQuad,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  quad[i] = new VertexPositionNormalColorTexture(offset + unit[i]' normal' faceColor' texture[textureOffset + i]);              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,GetLight,The following statement contains a magic number: if (chunk == null)                  return 15;
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,GetLight,The following statement contains a magic number: if (coords.Y >= Chunk.Height)                  return 15;
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,GetLight,The following statement contains a magic number: if ((coords.X < 0) || (coords.X >= Chunk.Width) ||                  (coords.Z < 0) || (coords.Z >= Chunk.Depth))              {                  return 15;              }
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,GetLight,The following statement contains a magic number: return Math.Min(chunk.GetBlockLight(coords) + chunk.GetSkyLight(coords)' 15);
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,BlockRenderer,The following statement contains a magic number: CubeMesh = new Vector3[6][];
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,BlockRenderer,The following statement contains a magic number: CubeMesh[2] = new[] // Positive X face              {                  new Vector3(1' 0' 0)'                  new Vector3(1' 0' 1)'                  new Vector3(1' 1' 1)'                  new Vector3(1' 1' 0)              };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,BlockRenderer,The following statement contains a magic number: CubeMesh[3] = new[] // Negative X face              {                  new Vector3(0' 0' 1)'                  new Vector3(0' 0' 0)'                  new Vector3(0' 1' 0)'                  new Vector3(0' 1' 1)              };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,BlockRenderer,The following statement contains a magic number: CubeMesh[4] = new[] // Positive Y face              {                  new Vector3(1' 1' 1)'                  new Vector3(0' 1' 1)'                  new Vector3(0' 1' 0)'                  new Vector3(1' 1' 0)              };
Magic Number,TrueCraft.Client.Rendering,BlockRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\BlockRenderer.cs,BlockRenderer,The following statement contains a magic number: CubeMesh[5] = new[] // Negative Y face              {                  new Vector3(1' 0' 0)'                  new Vector3(0' 0' 0)'                  new Vector3(0' 0' 1)'                  new Vector3(1' 0' 1)              };
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: indicies = new int[6 * 4];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: indicies = new int[6 * 4];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * 4];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: var verticies = new VertexPositionNormalColorTexture[4 * 4];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,RenderQuads,The following statement contains a magic number: for (int side = 0; side < 4; side++)              {                  var quad = CreateAngledQuad(side' offset' textureMap' textureIndex % textureMap.Length' indiciesOffset' out _indicies' color);                  Array.Copy(quad' 0' verticies' side * 4' 4);                  Array.Copy(_indicies' 0' indicies' side * 6' 6);                  textureIndex += 4;              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: indicies = new[] { 0' 1' 3' 1' 2' 3 };
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: for (int i = 0; i < indicies.Length; i++)                  indicies[i] += (face * 4) + indiciesOffset;
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: var quad = new VertexPositionNormalColorTexture[4];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,CreateAngledQuad,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  quad[i] = new VertexPositionNormalColorTexture(offset + unit[i]' normal' color' texture[textureOffset + i]);              }
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,FlatQuadRenderer,The following statement contains a magic number: QuadMesh = new Vector3[4][];
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,FlatQuadRenderer,The following statement contains a magic number: QuadMesh[2] = new[]              {                  new Vector3(0' 0' 1)'                  new Vector3(1' 0' 0)'                  new Vector3(1' 1' 0)'                  new Vector3(0' 1' 1)              };
Magic Number,TrueCraft.Client.Rendering,FlatQuadRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\FlatQuadRenderer.cs,FlatQuadRenderer,The following statement contains a magic number: QuadMesh[3] = new[]              {                  new Vector3(1' 0' 0)'                  new Vector3(0' 0' 1)'                  new Vector3(0' 1' 1)'                  new Vector3(1' 1' 0)              };
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,PrepareEffects,The following statement contains a magic number: RenderEffect.DirectionalLight0.Direction = new Vector3(10' -10' -0.8f);
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,PrepareEffects,The following statement contains a magic number: RenderEffect.DirectionalLight0.Direction = new Vector3(10' -10' -0.8f);
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderItemIcon,The following statement contains a magic number: var scale = texture.Width / 16;
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The following statement contains a magic number: if (mesh != null)              {                  RenderEffect.World = Matrix.Identity                      * Matrix.CreateScale(0.6f)                      * Matrix.CreateRotationY(-MathHelper.PiOver4)                      * Matrix.CreateRotationX(MathHelper.ToRadians(30))                      * Matrix.CreateScale(new Vector3(destination.Width' destination.Height' 1))                      * Matrix.CreateTranslation(new Vector3(                          destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0))                      * Matrix.CreateTranslation(new Vector3(destination.Width / 2' -destination.Height / 2' 0));                  mesh.Draw(RenderEffect);              }
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The following statement contains a magic number: if (mesh != null)              {                  RenderEffect.World = Matrix.Identity                      * Matrix.CreateScale(0.6f)                      * Matrix.CreateRotationY(-MathHelper.PiOver4)                      * Matrix.CreateRotationX(MathHelper.ToRadians(30))                      * Matrix.CreateScale(new Vector3(destination.Width' destination.Height' 1))                      * Matrix.CreateTranslation(new Vector3(                          destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0))                      * Matrix.CreateTranslation(new Vector3(destination.Width / 2' -destination.Height / 2' 0));                  mesh.Draw(RenderEffect);              }
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The following statement contains a magic number: if (mesh != null)              {                  RenderEffect.World = Matrix.Identity                      * Matrix.CreateScale(0.6f)                      * Matrix.CreateRotationY(-MathHelper.PiOver4)                      * Matrix.CreateRotationX(MathHelper.ToRadians(30))                      * Matrix.CreateScale(new Vector3(destination.Width' destination.Height' 1))                      * Matrix.CreateTranslation(new Vector3(                          destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0))                      * Matrix.CreateTranslation(new Vector3(destination.Width / 2' -destination.Height / 2' 0));                  mesh.Draw(RenderEffect);              }
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The following statement contains a magic number: if (mesh != null)              {                  RenderEffect.World = Matrix.Identity                      * Matrix.CreateScale(0.6f)                      * Matrix.CreateRotationY(-MathHelper.PiOver4)                      * Matrix.CreateRotationX(MathHelper.ToRadians(30))                      * Matrix.CreateScale(new Vector3(destination.Width' destination.Height' 1))                      * Matrix.CreateTranslation(new Vector3(                          destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0))                      * Matrix.CreateTranslation(new Vector3(destination.Width / 2' -destination.Height / 2' 0));                  mesh.Draw(RenderEffect);              }
Magic Number,TrueCraft.Client.Rendering,IconRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\IconRenderer.cs,RenderBlockIcon,The following statement contains a magic number: if (mesh != null)              {                  RenderEffect.World = Matrix.Identity                      * Matrix.CreateScale(0.6f)                      * Matrix.CreateRotationY(-MathHelper.PiOver4)                      * Matrix.CreateRotationX(MathHelper.ToRadians(30))                      * Matrix.CreateScale(new Vector3(destination.Width' destination.Height' 1))                      * Matrix.CreateTranslation(new Vector3(                          destination.X' -(destination.Y - game.GraphicsDevice.Viewport.Height / 2) + game.GraphicsDevice.Viewport.Height / 2' 0))                      * Matrix.CreateTranslation(new Vector3(destination.Width / 2' -destination.Height / 2' 0));                  mesh.Draw(RenderEffect);              }
Magic Number,TrueCraft.Client.Handlers,PacketHandlers,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Handlers\PacketHandlers.cs,HandleTimeUpdate,The following statement contains a magic number: var time = packet.Time / 20.0;
Magic Number,TrueCraft.Client.Handlers,ChunkHandlers,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Handlers\ChunkHandlers.cs,HandleChunkData,The following statement contains a magic number: if (packet.Width == Chunk.Width                  && packet.Height == Chunk.Height                  && packet.Depth == Chunk.Depth) // Fast path              {                  // Chunk data offsets                  int metadataOffset = chunk.Data.Length;                  int lightOffset = metadataOffset + chunk.Metadata.Length;                  int skylightOffset = lightOffset + chunk.BlockLight.Length;                    // Block IDs                  Buffer.BlockCopy(data' 0' chunk.Data' 0' chunk.Data.Length);                  // Block metadata                  if (metadataOffset < data.Length)                  {                      Buffer.BlockCopy(data' metadataOffset'                          chunk.Metadata.Data' 0' chunk.Metadata.Data.Length);                  }                  // Block light                  if (lightOffset < data.Length)                  {                      Buffer.BlockCopy(data' lightOffset'                          chunk.BlockLight.Data' 0' chunk.BlockLight.Data.Length);                  }                  // Sky light                  if (skylightOffset < data.Length)                  {                      Buffer.BlockCopy(data' skylightOffset'                          chunk.SkyLight.Data' 0' chunk.SkyLight.Data.Length);                  }              }              else // Slow path              {                  int x = adjustedCoords.X' y = adjustedCoords.Y' z = adjustedCoords.Z;                  int fullLength = packet.Width * packet.Height * packet.Depth; // Length of full sized byte section                  int nibbleLength = fullLength / 2; // Length of nibble sections                  for (int i = 0; i < fullLength; i++) // Iterate through block IDs                  {                      chunk.SetBlockID(new Coordinates3D(x' y' z)' data[i]);                      y++;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  x = adjustedCoords.X; y = adjustedCoords.Y; z = adjustedCoords.Z;                  for (int i = fullLength; i < nibbleLength; i++) // Iterate through metadata                  {                      byte m = data[i];                      chunk.SetMetadata(new Coordinates3D(x' y' z)' (byte)(m & 0xF));                      chunk.SetMetadata(new Coordinates3D(x' y + 1' z)' (byte)(m & 0xF0 << 8));                      y += 2;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  // TODO: Lighting              }
Magic Number,TrueCraft.Client.Handlers,ChunkHandlers,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Handlers\ChunkHandlers.cs,HandleChunkData,The following statement contains a magic number: if (packet.Width == Chunk.Width                  && packet.Height == Chunk.Height                  && packet.Depth == Chunk.Depth) // Fast path              {                  // Chunk data offsets                  int metadataOffset = chunk.Data.Length;                  int lightOffset = metadataOffset + chunk.Metadata.Length;                  int skylightOffset = lightOffset + chunk.BlockLight.Length;                    // Block IDs                  Buffer.BlockCopy(data' 0' chunk.Data' 0' chunk.Data.Length);                  // Block metadata                  if (metadataOffset < data.Length)                  {                      Buffer.BlockCopy(data' metadataOffset'                          chunk.Metadata.Data' 0' chunk.Metadata.Data.Length);                  }                  // Block light                  if (lightOffset < data.Length)                  {                      Buffer.BlockCopy(data' lightOffset'                          chunk.BlockLight.Data' 0' chunk.BlockLight.Data.Length);                  }                  // Sky light                  if (skylightOffset < data.Length)                  {                      Buffer.BlockCopy(data' skylightOffset'                          chunk.SkyLight.Data' 0' chunk.SkyLight.Data.Length);                  }              }              else // Slow path              {                  int x = adjustedCoords.X' y = adjustedCoords.Y' z = adjustedCoords.Z;                  int fullLength = packet.Width * packet.Height * packet.Depth; // Length of full sized byte section                  int nibbleLength = fullLength / 2; // Length of nibble sections                  for (int i = 0; i < fullLength; i++) // Iterate through block IDs                  {                      chunk.SetBlockID(new Coordinates3D(x' y' z)' data[i]);                      y++;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  x = adjustedCoords.X; y = adjustedCoords.Y; z = adjustedCoords.Z;                  for (int i = fullLength; i < nibbleLength; i++) // Iterate through metadata                  {                      byte m = data[i];                      chunk.SetMetadata(new Coordinates3D(x' y' z)' (byte)(m & 0xF));                      chunk.SetMetadata(new Coordinates3D(x' y + 1' z)' (byte)(m & 0xF0 << 8));                      y += 2;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  // TODO: Lighting              }
Magic Number,TrueCraft.Client.Handlers,ChunkHandlers,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Handlers\ChunkHandlers.cs,HandleChunkData,The following statement contains a magic number: if (packet.Width == Chunk.Width                  && packet.Height == Chunk.Height                  && packet.Depth == Chunk.Depth) // Fast path              {                  // Chunk data offsets                  int metadataOffset = chunk.Data.Length;                  int lightOffset = metadataOffset + chunk.Metadata.Length;                  int skylightOffset = lightOffset + chunk.BlockLight.Length;                    // Block IDs                  Buffer.BlockCopy(data' 0' chunk.Data' 0' chunk.Data.Length);                  // Block metadata                  if (metadataOffset < data.Length)                  {                      Buffer.BlockCopy(data' metadataOffset'                          chunk.Metadata.Data' 0' chunk.Metadata.Data.Length);                  }                  // Block light                  if (lightOffset < data.Length)                  {                      Buffer.BlockCopy(data' lightOffset'                          chunk.BlockLight.Data' 0' chunk.BlockLight.Data.Length);                  }                  // Sky light                  if (skylightOffset < data.Length)                  {                      Buffer.BlockCopy(data' skylightOffset'                          chunk.SkyLight.Data' 0' chunk.SkyLight.Data.Length);                  }              }              else // Slow path              {                  int x = adjustedCoords.X' y = adjustedCoords.Y' z = adjustedCoords.Z;                  int fullLength = packet.Width * packet.Height * packet.Depth; // Length of full sized byte section                  int nibbleLength = fullLength / 2; // Length of nibble sections                  for (int i = 0; i < fullLength; i++) // Iterate through block IDs                  {                      chunk.SetBlockID(new Coordinates3D(x' y' z)' data[i]);                      y++;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  x = adjustedCoords.X; y = adjustedCoords.Y; z = adjustedCoords.Z;                  for (int i = fullLength; i < nibbleLength; i++) // Iterate through metadata                  {                      byte m = data[i];                      chunk.SetMetadata(new Coordinates3D(x' y' z)' (byte)(m & 0xF));                      chunk.SetMetadata(new Coordinates3D(x' y + 1' z)' (byte)(m & 0xF0 << 8));                      y += 2;                      if (y >= packet.Height)                      {                          y = 0;                          z++;                          if (z >= packet.Depth)                          {                              z = 0;                              x++;                              if (x >= packet.Width)                              {                                  x = 0;                              }                          }                      }                  }                  // TODO: Lighting              }
Magic Number,TrueCraft.Client.Modules,ChunkModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChunkModule.cs,ChunkModule,The following statement contains a magic number: TransparentEffect.ReferenceAlpha = 127;
Magic Number,TrueCraft.Client.Modules,ChunkModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChunkModule.cs,Game_Client_BlockChanged,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  if (!WorldLighting.TryLightNext())                      break;              }
Magic Number,TrueCraft.Client.Modules,ChunkModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChunkModule.cs,Draw,The following statement contains a magic number: for (int i = 0; i < ChunkMeshes.Count; i++)              {                  if (Game.Camera.Frustum.Intersects(ChunkMeshes[i].BoundingBox))                  {                      chunks++;                      ChunkMeshes[i].Draw(OpaqueEffect' 0);                      if (!ChunkMeshes[i].IsReady || ChunkMeshes[i].Submeshes != 2)                          Console.WriteLine("Warning: rendered chunk that was not ready");                  }              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: CubeIndicies = new short[]              {                  0' 1'   1' 2'   2' 3'   3' 0'                  0' 4'   4' 7'   7' 6'   6' 2'                  1' 5'   5' 4'   3' 7'   6' 5              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: RasterizerState = new RasterizerState              {                  DepthBias = -3'                  SlopeScaleDepthBias = -3              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,HighlightModule,The following statement contains a magic number: RasterizerState = new RasterizerState              {                  DepthBias = -3'                  SlopeScaleDepthBias = -3              };
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,GenerateProgressMesh,The following statement contains a magic number: var texCoords = new Vector2(Progress' 15);
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Update,The following statement contains a magic number: var direction = XVector3.Transform(XVector3.UnitZ'              Matrix.CreateRotationX(MathHelper.ToRadians(Game.Client.Pitch)) *              Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Update,The following statement contains a magic number: var direction = XVector3.Transform(XVector3.UnitZ'              Matrix.CreateRotationX(MathHelper.ToRadians(Game.Client.Pitch)) *              Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Update,The following statement contains a magic number: var cast = VoxelCast.Cast(Game.Client.World'                  new TRay(Game.Camera.Position' new TVector3(direction.X' direction.Y' direction.Z))'                  Game.BlockRepository' TrueCraftGame.Reach' TrueCraftGame.Reach + 2);
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.HighlightedBlock != -Coordinates3D.One)              {                  Game.GraphicsDevice.RasterizerState = RasterizerState;                  foreach (var pass in HighlightEffect.CurrentTechnique.Passes)                  {                      pass.Apply();                      HighlightEffect.GraphicsDevice.DrawUserIndexedPrimitives<VertexPositionColor>(                          PrimitiveType.LineList' CubeVerticies' 0'                          CubeVerticies.Length' CubeIndicies' 0' CubeIndicies.Length / 2);                  }              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  var diff = Game.EndDigging - DateTime.UtcNow;                  var total = Game.EndDigging - Game.StartDigging;                  var progress = (int)(diff.TotalMilliseconds / total.TotalMilliseconds * 10);                  progress = -(progress - 5) + 5;                  if (progress > 9)                      progress = 9;                    if (progress != Progress)                  {                      Progress = progress;                      GenerateProgressMesh();                  }                    Game.GraphicsDevice.BlendState = DestructionBlendState;                  ProgressMesh.Draw(DestructionEffect);                  Game.GraphicsDevice.BlendState = BlendState.AlphaBlend;                  Game.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  var diff = Game.EndDigging - DateTime.UtcNow;                  var total = Game.EndDigging - Game.StartDigging;                  var progress = (int)(diff.TotalMilliseconds / total.TotalMilliseconds * 10);                  progress = -(progress - 5) + 5;                  if (progress > 9)                      progress = 9;                    if (progress != Progress)                  {                      Progress = progress;                      GenerateProgressMesh();                  }                    Game.GraphicsDevice.BlendState = DestructionBlendState;                  ProgressMesh.Draw(DestructionEffect);                  Game.GraphicsDevice.BlendState = BlendState.AlphaBlend;                  Game.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  var diff = Game.EndDigging - DateTime.UtcNow;                  var total = Game.EndDigging - Game.StartDigging;                  var progress = (int)(diff.TotalMilliseconds / total.TotalMilliseconds * 10);                  progress = -(progress - 5) + 5;                  if (progress > 9)                      progress = 9;                    if (progress != Progress)                  {                      Progress = progress;                      GenerateProgressMesh();                  }                    Game.GraphicsDevice.BlendState = DestructionBlendState;                  ProgressMesh.Draw(DestructionEffect);                  Game.GraphicsDevice.BlendState = BlendState.AlphaBlend;                  Game.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  var diff = Game.EndDigging - DateTime.UtcNow;                  var total = Game.EndDigging - Game.StartDigging;                  var progress = (int)(diff.TotalMilliseconds / total.TotalMilliseconds * 10);                  progress = -(progress - 5) + 5;                  if (progress > 9)                      progress = 9;                    if (progress != Progress)                  {                      Progress = progress;                      GenerateProgressMesh();                  }                    Game.GraphicsDevice.BlendState = DestructionBlendState;                  ProgressMesh.Draw(DestructionEffect);                  Game.GraphicsDevice.BlendState = BlendState.AlphaBlend;                  Game.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;              }
Magic Number,TrueCraft.Client.Modules,HighlightModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HighlightModule.cs,Draw,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  var diff = Game.EndDigging - DateTime.UtcNow;                  var total = Game.EndDigging - Game.StartDigging;                  var progress = (int)(diff.TotalMilliseconds / total.TotalMilliseconds * 10);                  progress = -(progress - 5) + 5;                  if (progress > 9)                      progress = 9;                    if (progress != Progress)                  {                      Progress = progress;                      GenerateProgressMesh();                  }                    Game.GraphicsDevice.BlendState = DestructionBlendState;                  ProgressMesh.Draw(DestructionEffect);                  Game.GraphicsDevice.BlendState = BlendState.AlphaBlend;                  Game.GraphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following statement contains a magic number: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following statement contains a magic number: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following statement contains a magic number: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following statement contains a magic number: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following statement contains a magic number: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following statement contains a magic number: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseScroll,The following statement contains a magic number: if (selected < 0)                  selected = 8;
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseScroll,The following statement contains a magic number: if (selected > 8)                  selected = 0;
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: var centerX = Game.GraphicsDevice.Viewport.Width / 2;
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: var centerY = Game.GraphicsDevice.Viewport.Height / 2;
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: if (e.X < 10 || e.X > Game.GraphicsDevice.Viewport.Width - 10 ||                  e.Y < 10 || e.Y > Game.GraphicsDevice.Viewport.Height - 10)              {                  Mouse.SetPosition(centerX' centerY);                  IgnoreNextUpdate = true;                  return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: if (e.X < 10 || e.X > Game.GraphicsDevice.Viewport.Width - 10 ||                  e.Y < 10 || e.Y > Game.GraphicsDevice.Viewport.Height - 10)              {                  Mouse.SetPosition(centerX' centerY);                  IgnoreNextUpdate = true;                  return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: if (e.X < 10 || e.X > Game.GraphicsDevice.Viewport.Width - 10 ||                  e.Y < 10 || e.Y > Game.GraphicsDevice.Viewport.Height - 10)              {                  Mouse.SetPosition(centerX' centerY);                  IgnoreNextUpdate = true;                  return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: if (e.X < 10 || e.X > Game.GraphicsDevice.Viewport.Width - 10 ||                  e.Y < 10 || e.Y > Game.GraphicsDevice.Viewport.Height - 10)              {                  Mouse.SetPosition(centerX' centerY);                  IgnoreNextUpdate = true;                  return true;              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: var look = new Vector2((-e.DeltaX)' (-e.DeltaY))                  * (float)(gameTime.ElapsedGameTime.TotalSeconds * 30);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseMove,The following statement contains a magic number: Game.Client.Yaw %= 360;
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,BeginDigging,The following statement contains a magic number: NextAnimation = DateTime.UtcNow.AddSeconds(0.25);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (gamePad.IsConnected && gamePad.ThumbSticks.Right.Length() != 0)              {                  var look = -(gamePad.ThumbSticks.Right * 8) * (float)(gameTime.ElapsedGameTime.TotalSeconds * 30);                    Game.Client.Yaw -= look.X;                  Game.Client.Pitch -= look.Y;                  Game.Client.Yaw %= 360;                  Game.Client.Pitch = MathHelper.Clamp(Game.Client.Pitch' -89.9f' 89.9f);              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (gamePad.IsConnected && gamePad.ThumbSticks.Right.Length() != 0)              {                  var look = -(gamePad.ThumbSticks.Right * 8) * (float)(gameTime.ElapsedGameTime.TotalSeconds * 30);                    Game.Client.Yaw -= look.X;                  Game.Client.Pitch -= look.Y;                  Game.Client.Yaw %= 360;                  Game.Client.Pitch = MathHelper.Clamp(Game.Client.Pitch' -89.9f' 89.9f);              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (gamePad.IsConnected && gamePad.ThumbSticks.Right.Length() != 0)              {                  var look = -(gamePad.ThumbSticks.Right * 8) * (float)(gameTime.ElapsedGameTime.TotalSeconds * 30);                    Game.Client.Yaw -= look.X;                  Game.Client.Pitch -= look.Y;                  Game.Client.Yaw %= 360;                  Game.Client.Pitch = MathHelper.Clamp(Game.Client.Pitch' -89.9f' 89.9f);              }
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (delta != XVector3.Zero)              {                  var lookAt = XVector3.Transform(-delta'                                   Matrix.CreateRotationY(MathHelper.ToRadians(-(Game.Client.Yaw - 180) + 180)));                    lookAt.X *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                  lookAt.Z *= (float)(gameTime.ElapsedGameTime.TotalSeconds * 4.3717);                    var bobbing = Game.Bobbing;                  Game.Bobbing += Math.Max(Math.Abs(lookAt.X)' Math.Abs(lookAt.Z));                    Game.Client.Velocity = new TVector3(lookAt.X' Game.Client.Velocity.Y' lookAt.Z);                    if ((int)bobbing % 2 == 0 && (int)Game.Bobbing % 2 != 0)                      PlayFootstep();              }              else                  Game.Client.Velocity *= new TVector3(0' 1' 0);
Magic Number,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,Update,The following statement contains a magic number: if (Game.EndDigging != DateTime.MaxValue)              {                  if (NextAnimation < DateTime.UtcNow)                  {                      NextAnimation = DateTime.UtcNow.AddSeconds(0.25);                      Game.Client.QueuePacket(new AnimationPacket(Game.Client.EntityID'                          AnimationPacket.PlayerAnimation.SwingArm));                  }                  if (DateTime.UtcNow > Game.EndDigging && Game.HighlightedBlock == Game.TargetBlock)                  {                      Game.Client.QueuePacket(new PlayerDiggingPacket(                          PlayerDiggingPacket.Action.StopDigging'                          Game.TargetBlock.X' (sbyte)Game.TargetBlock.Y' Game.TargetBlock.Z'                          Game.HighlightedBlockFace));                      Game.EndDigging = DateTime.MaxValue;                  }              }
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,Draw,The following statement contains a magic number: const int xOrigin = 10;
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,Draw,The following statement contains a magic number: const int yOrigin = 5;
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,Draw,The following statement contains a magic number: const int yOffset = 25;
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,Draw,The following statement contains a magic number: Font.DrawText(SpriteBatch' xOrigin' yOrigin + (yOffset * 2)'                  string.Format(ChatColor.Gray + "Looking at {0} ({1})"' Game.HighlightedBlock'                      Enum.GetName(typeof(BlockFace)' Game.HighlightedBlockFace)));
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,Draw,The following statement contains a magic number: Font.DrawText(SpriteBatch' xOrigin' yOrigin + (yOffset * 3)'                  string.Format(ChatColor.Gray + "{0} pending chunks"' Game.ChunkModule.ChunkRenderer.PendingChunks));
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,GetFPSColor,The following statement contains a magic number: if (fps <= 16)                  return ChatColor.Red;
Magic Number,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,GetFPSColor,The following statement contains a magic number: if (fps <= 32)                  return ChatColor.Yellow;
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Draw,The following statement contains a magic number: SpriteBatch.Draw(Icons' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - (8 * Game.ScaleFactor * 2)'                  Game.GraphicsDevice.Viewport.Height / 2 - (8 * Game.ScaleFactor * 2))'                  new Rectangle(0' 0' 16' 16)' CrosshairColor'                  0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5))'                  HotbarBackgroundRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5))'                  HotbarBackgroundRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5))'                  HotbarBackgroundRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5))'                  HotbarBackgroundRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 6))'                  HotbarSelectionRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 6))'                  HotbarSelectionRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 6))'                  HotbarSelectionRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 6))'                  HotbarSelectionRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbar,The following statement contains a magic number: SpriteBatch.Draw(GUI' new Vector2(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2) + Scale(Game.Client.HotbarSelection * 20 - 1)'                  Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 6))'                  HotbarSelectionRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: int x = (int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: int x = (int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: int y = (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: y -= (int)(Scale(EmptyHeartRect.Height) * 1.25);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawLife,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(EmptyHeartRect.Width)' y)' EmptyHeartRect' Color.White'                      0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  if (Game.Client.Health >= i * 2)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(FullHeartRect.Width)' y)' FullHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }                  else if (Game.Client.Health >= i * 2 - 1)                  {                      SpriteBatch.Draw(Icons' new Vector2(x + i * Scale(HalfHeartRect.Width)' y)' HalfHeartRect' Color.White'                          0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                  }              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: origin.X += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: origin.Y += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarItemSprites,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  if (provider.GetIconTexture((byte)item.Metadata) == null)                      continue;                  var position = origin + new Point((int)Scale(i * 20)' 0);                  var rect = new Rectangle(position' scale);                  IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                      (byte)item.Metadata' rect' Color.White); // TODO: Fuck' metadata was supposed to be a short              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: origin.X += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: origin.Y += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarBlockSprites,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID) as IBlockProvider;                  if (provider == null || provider.GetIconTexture((byte)item.Metadata) != null)                      continue;                  var position = origin + new Point((int)Scale(i * 20)' 0);                  var rect = new Rectangle(position' scale);                  IconRenderer.RenderBlockIcon(Game' provider' (byte)item.Metadata' rect);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: var origin = new Point((int)(Game.GraphicsDevice.Viewport.Width / 2 - Scale(HotbarBackgroundRect.Width / 2))'                      (int)(Game.GraphicsDevice.Viewport.Height - Scale(HotbarBackgroundRect.Height + 5)));
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: origin.X += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: origin.Y += (int)Scale(3);
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty || item.Count == 1)                      continue;                  int offset = 10;                  if (item.Count >= 10)                      offset -= 6;                  var position = origin + new Point((int)Scale(i * 20 + offset)' (int)Scale(5));                  Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty || item.Count == 1)                      continue;                  int offset = 10;                  if (item.Count >= 10)                      offset -= 6;                  var position = origin + new Point((int)Scale(i * 20 + offset)' (int)Scale(5));                  Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty || item.Count == 1)                      continue;                  int offset = 10;                  if (item.Count >= 10)                      offset -= 6;                  var position = origin + new Point((int)Scale(i * 20 + offset)' (int)Scale(5));                  Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty || item.Count == 1)                      continue;                  int offset = 10;                  if (item.Count >= 10)                      offset -= 6;                  var position = origin + new Point((int)Scale(i * 20 + offset)' (int)Scale(5));                  Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,DrawHotbarSlotCounts,The following statement contains a magic number: for (int i = 0; i < Game.Client.Inventory.Hotbar.Length; i++)              {                  var item = Game.Client.Inventory.Hotbar[i];                  if (item.Empty || item.Count == 1)                      continue;                  int offset = 10;                  if (item.Count >= 10)                      offset -= 6;                  var position = origin + new Point((int)Scale(i * 20 + offset)' (int)Scale(5));                  Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);              }
Magic Number,TrueCraft.Client.Modules,HUDModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\HUDModule.cs,Scale,The following statement contains a magic number: return value * Game.ScaleFactor * 2;
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,ChatModule,The following statement contains a magic number: Background.SetData<Color>(new[] { new Color(Color.Black' 160) });
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: const int height = 25;
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: int x = 5' y = (int)(Game.GraphicsDevice.Viewport.Height - Scale(22) * 2);
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: int x = 5' y = (int)(Game.GraphicsDevice.Viewport.Height - Scale(22) * 2);
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: int x = 5' y = (int)(Game.GraphicsDevice.Viewport.Height - Scale(22) * 2);
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: int width = Game.GraphicsDevice.Viewport.Width / 2;
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Messages.Count && i < max; i++)              {                  var time = Watch.ElapsedMilliseconds - Messages[i].Arrived;                  if (time >= TimeToExpire && !Editing)                      continue;                  byte alpha = 255;                  if (time > TimeToFade && !Editing)                  {                      var t = TimeToExpire - time / (double)(TimeToExpire - TimeToFade);                      alpha = (byte)(t * 256);                  }                  SpriteBatch.Draw(Background' new Rectangle(                      x' y - (i * height)' width' height)' new Color(Color.White' alpha));                  Font.DrawText(SpriteBatch' x' y - (i * height) - 5' Messages[i].Text' alpha: alpha);              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Messages.Count && i < max; i++)              {                  var time = Watch.ElapsedMilliseconds - Messages[i].Arrived;                  if (time >= TimeToExpire && !Editing)                      continue;                  byte alpha = 255;                  if (time > TimeToFade && !Editing)                  {                      var t = TimeToExpire - time / (double)(TimeToExpire - TimeToFade);                      alpha = (byte)(t * 256);                  }                  SpriteBatch.Draw(Background' new Rectangle(                      x' y - (i * height)' width' height)' new Color(Color.White' alpha));                  Font.DrawText(SpriteBatch' x' y - (i * height) - 5' Messages[i].Text' alpha: alpha);              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Messages.Count && i < max; i++)              {                  var time = Watch.ElapsedMilliseconds - Messages[i].Arrived;                  if (time >= TimeToExpire && !Editing)                      continue;                  byte alpha = 255;                  if (time > TimeToFade && !Editing)                  {                      var t = TimeToExpire - time / (double)(TimeToExpire - TimeToFade);                      alpha = (byte)(t * 256);                  }                  SpriteBatch.Draw(Background' new Rectangle(                      x' y - (i * height)' width' height)' new Color(Color.White' alpha));                  Font.DrawText(SpriteBatch' x' y - (i * height) - 5' Messages[i].Text' alpha: alpha);              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: if (Editing)              {                  SpriteBatch.Draw(Background'                      new Rectangle(0' Game.GraphicsDevice.Viewport.Height - height'                      Game.GraphicsDevice.Viewport.Width' height)' Color.White);                  if (Watch.Elapsed.Seconds % 2 == 0)                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text);                  else                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text + "_");              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: if (Editing)              {                  SpriteBatch.Draw(Background'                      new Rectangle(0' Game.GraphicsDevice.Viewport.Height - height'                      Game.GraphicsDevice.Viewport.Width' height)' Color.White);                  if (Watch.Elapsed.Seconds % 2 == 0)                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text);                  else                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text + "_");              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: if (Editing)              {                  SpriteBatch.Draw(Background'                      new Rectangle(0' Game.GraphicsDevice.Viewport.Height - height'                      Game.GraphicsDevice.Viewport.Width' height)' Color.White);                  if (Watch.Elapsed.Seconds % 2 == 0)                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text);                  else                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text + "_");              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: if (Editing)              {                  SpriteBatch.Draw(Background'                      new Rectangle(0' Game.GraphicsDevice.Viewport.Height - height'                      Game.GraphicsDevice.Viewport.Width' height)' Color.White);                  if (Watch.Elapsed.Seconds % 2 == 0)                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text);                  else                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text + "_");              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Draw,The following statement contains a magic number: if (Editing)              {                  SpriteBatch.Draw(Background'                      new Rectangle(0' Game.GraphicsDevice.Viewport.Height - height'                      Game.GraphicsDevice.Viewport.Width' height)' Color.White);                  if (Watch.Elapsed.Seconds % 2 == 0)                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text);                  else                      Font.DrawText(SpriteBatch' 3' Game.GraphicsDevice.Viewport.Height - height - 5' Text + "_");              }
Magic Number,TrueCraft.Client.Modules,ChatModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChatModule.cs,Scale,The following statement contains a magic number: return value * Game.ScaleFactor * 2;
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  // TODO: slot == -999 when outside of the window and -1 when inside the window' but not on an item                  SelectedSlot = -999;                    IItemProvider provider = null;                  var scale = new Point((int)(16 * Game.ScaleFactor * 2));                  var mouse = Mouse.GetState().Position.ToVector2().ToPoint()                              - new Point((int)(8 * Game.ScaleFactor * 2));                  var rect = new Rectangle(mouse' scale);                  if (!HeldItem.Empty)                      provider = Game.ItemRepository.GetItemProvider(HeldItem.ID);                    SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  SpriteBatch.Draw(Game.White1x1' new Rectangle(0' 0'                      Game.GraphicsDevice.Viewport.Width' Game.GraphicsDevice.Viewport.Height)' new Color(Color.Black' 180));                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) != null)                      {                          IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                              (byte)HeldItem.Metadata' rect' Color.White);                      }                  }                  SpriteBatch.End();                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }                  if (provider != null)                  {                      if (provider.GetIconTexture((byte)HeldItem.Metadata) == null && provider is IBlockProvider)                      {                          IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)HeldItem.Metadata' rect);                      }                  }                  SpriteBatch.Begin(samplerState: SamplerState.PointClamp' blendState: BlendState.NonPremultiplied);                  switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }                  if (provider != null)                  {                      if (HeldItem.Count > 1)                      {                          int offset = 10;                          if (HeldItem.Count >= 10)                              offset -= 6;                          mouse += new Point((int)Scale(offset)' (int)Scale(5));                          Font.DrawText(SpriteBatch' mouse.X' mouse.Y' HeldItem.Count.ToString()' Game.ScaleFactor);                      }                  }                  if (SelectedSlot >= 0)                  {                      var item = Game.Client.CurrentWindow[SelectedSlot];                      if (!item.Empty)                      {                          var p = Game.ItemRepository.GetItemProvider(item.ID);                          var size = Font.MeasureText(p.DisplayName);                          mouse = Mouse.GetState().Position.ToVector2().ToPoint();                          mouse += new Point(10' 10);                          SpriteBatch.Draw(Game.White1x1' new Rectangle(mouse'                              new Point(size.X + 10' size.Y + 15))'                              new Color(Color.Black' 200));                          Font.DrawText(SpriteBatch' mouse.X + 5' mouse.Y' p.DisplayName);                      }                  }                  SpriteBatch.End();              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,MouseButtonDown,The following statement contains a magic number: if (packet.SlotIndex == -999)              {                  // Special case (throwing item) TODO              }              else              {                  var backup = Game.Client.CurrentWindow.GetSlots();                  var staging = (ItemStack)HeldItem.Clone();                  Window.HandleClickPacket(packet' Game.Client.CurrentWindow' ref staging);                  HeldItem = staging;                  Game.Client.CurrentWindow.SetSlots(backup);              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,KeyDown,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  if (e.Key == Keys.Escape)                  {                      if (Game.Client.CurrentWindow.Type != -1)                          Game.Client.QueuePacket(new CloseWindowPacket(Game.Client.CurrentWindow.ID));                      Game.Client.CurrentWindow = null;                      Mouse.SetPosition(Game.GraphicsDevice.Viewport.Width / 2' Game.GraphicsDevice.Viewport.Height / 2);                      Game.ControlModule.IgnoreNextUpdate = true;                  }                  return true;              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,KeyDown,The following statement contains a magic number: if (Game.Client.CurrentWindow != null)              {                  if (e.Key == Keys.Escape)                  {                      if (Game.Client.CurrentWindow.Type != -1)                          Game.Client.QueuePacket(new CloseWindowPacket(Game.Client.CurrentWindow.ID));                      Game.Client.CurrentWindow = null;                      Mouse.SetPosition(Game.GraphicsDevice.Viewport.Width / 2' Game.GraphicsDevice.Viewport.Height / 2);                      Game.ControlModule.IgnoreNextUpdate = true;                  }                  return true;              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.MainInventory' 8' 84' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.MainInventory' 8' 84' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.Hotbar' 8' 142' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.Hotbar' 8' 142' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.CraftingGrid' 88' 26' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.CraftingGrid' 88' 26' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.Armor' 8' 8' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawInventoryWindow,The following statement contains a magic number: DrawWindowArea(Game.Client.Inventory.Armor' 8' 8' InventoryWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.CraftingGrid' 29' 16' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.CraftingGrid' 29' 16' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.MainInventory' 8' 84' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.MainInventory' 8' 84' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.Hotbar' 8' 142' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawCraftingWindow,The following statement contains a magic number: DrawWindowArea(window.Hotbar' 8' 142' CraftingWindowRect' stage);
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var scale = new Point((int)(16 * Game.ScaleFactor * 2));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var origin = new Point((int)(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(frame.Width / 2) + Scale(_x))'                  (int)(Game.GraphicsDevice.Viewport.Height / 2 - Scale(frame.Height / 2) + Scale(_y)));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var origin = new Point((int)(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(frame.Width / 2) + Scale(_x))'                  (int)(Game.GraphicsDevice.Viewport.Height / 2 - Scale(frame.Height / 2) + Scale(_y)));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var origin = new Point((int)(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(frame.Width / 2) + Scale(_x))'                  (int)(Game.GraphicsDevice.Viewport.Height / 2 - Scale(frame.Height / 2) + Scale(_y)));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: var origin = new Point((int)(                  Game.GraphicsDevice.Viewport.Width / 2 - Scale(frame.Width / 2) + Scale(_x))'                  (int)(Game.GraphicsDevice.Viewport.Height / 2 - Scale(frame.Height / 2) + Scale(_y)));
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,DrawWindowArea,The following statement contains a magic number: for (int i = 0; i < area.Length; i++)              {                  var item = area[i];                  int x = (int)((i % area.Width) * Scale(18));                  int y = (int)((i / area.Width) * Scale(18));                  if (area is CraftingWindowArea)                  {                      // yes I know this is a crappy hack' bite me                      if (i == 0)                      {                          if (area.Width == 2)                          {                              x = (int)Scale(144 - _x);                              y = (int)Scale(36 - _y);                          }                          else                          {                              x = (int)Scale(124 - _x);                              y = (int)Scale(35 - _y);                          }                      }                      else                      {                          i--;                          x = (int)((i % area.Width) * Scale(18));                          y = (int)((i / area.Width) * Scale(18));                          i++;                      }                  }                  var position = origin + new Point(x' y);                  var rect = new Rectangle(position' scale);                  if (stage == RenderStage.Sprites && rect.Contains(mouse))                  {                      SelectedSlot = (short)(area.StartIndex + i);                      SpriteBatch.Draw(Game.White1x1' rect' new Color(Color.White' 150));                  }                  if (item.Empty)                      continue;                  var provider = Game.ItemRepository.GetItemProvider(item.ID);                  var texture = provider.GetIconTexture((byte)item.Metadata);                  if (texture != null && stage == RenderStage.Sprites)                      IconRenderer.RenderItemIcon(SpriteBatch' Items' provider'                          (byte)item.Metadata' rect' Color.White);                  if (texture == null && stage == RenderStage.Models && provider is IBlockProvider)                      IconRenderer.RenderBlockIcon(Game' provider as IBlockProvider' (byte)item.Metadata' rect);                  if (stage == RenderStage.Text && item.Count > 1)                  {                      int offset = 10;                      if (item.Count >= 10)                          offset -= 6;                      position += new Point((int)Scale(offset)' (int)Scale(5));                      Font.DrawText(SpriteBatch' position.X' position.Y' item.Count.ToString()' Game.ScaleFactor);                  }              }
Magic Number,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Scale,The following statement contains a magic number: return value * Game.ScaleFactor * 2;
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: SkyPlaneEffect.FogEnd = 64 * 0.8f;
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var plane = new[]              {                  new VertexPositionColor(new Vector3(-64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)'                    new VertexPositionColor(new Vector3(64' 0' -64)' Color.White)'                  new VertexPositionColor(new Vector3(64' 0' 64)' Color.White)'                  new VertexPositionColor(new Vector3(-64' 0' 64)' Color.White)              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,SkyModule,The following statement contains a magic number: var celestialPlane = new[]              {                  new VertexPositionTexture(new Vector3(-60' 0' -60)' new Vector2(0' 0))'                  new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))'                    new VertexPositionTexture(new Vector3(60' 0' -60)' new Vector2(1' 0))'                  new VertexPositionTexture(new Vector3(60' 0' 60)' new Vector2(1' 1))'                  new VertexPositionTexture(new Vector3(-60' 0' 60)' new Vector2(0' 1))              };
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  int sextant;                  float m' sv' fract' vsf' mid1' mid2;                  m = l + l - v;                  sv = (v - m) / v;                  h *= 6.0f;                  sextant = (int)h;                  fract = h - sextant;                  vsf = v * sv * fract;                  mid1 = m + vsf;                  mid2 = v - vsf;                  switch (sextant)                  {                      case 0:                          r = v; g = mid1; b = m;                          break;                      case 1:                          r = mid2; g = v; b = m;                          break;                      case 2:                          r = m; g = v; b = mid1;                          break;                      case 3:                          r = m; g = mid2; b = v;                          break;                      case 4:                          r = mid1; g = m; b = v;                          break;                      case 5:                          r = v; g = m; b = mid2;                          break;                  }              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  int sextant;                  float m' sv' fract' vsf' mid1' mid2;                  m = l + l - v;                  sv = (v - m) / v;                  h *= 6.0f;                  sextant = (int)h;                  fract = h - sextant;                  vsf = v * sv * fract;                  mid1 = m + vsf;                  mid2 = v - vsf;                  switch (sextant)                  {                      case 0:                          r = v; g = mid1; b = m;                          break;                      case 1:                          r = mid2; g = v; b = m;                          break;                      case 2:                          r = m; g = v; b = mid1;                          break;                      case 3:                          r = m; g = mid2; b = v;                          break;                      case 4:                          r = mid1; g = m; b = v;                          break;                      case 5:                          r = v; g = m; b = mid2;                          break;                  }              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  int sextant;                  float m' sv' fract' vsf' mid1' mid2;                  m = l + l - v;                  sv = (v - m) / v;                  h *= 6.0f;                  sextant = (int)h;                  fract = h - sextant;                  vsf = v * sv * fract;                  mid1 = m + vsf;                  mid2 = v - vsf;                  switch (sextant)                  {                      case 0:                          r = v; g = mid1; b = m;                          break;                      case 1:                          r = mid2; g = v; b = m;                          break;                      case 2:                          r = m; g = v; b = mid1;                          break;                      case 3:                          r = m; g = mid2; b = v;                          break;                      case 4:                          r = mid1; g = m; b = v;                          break;                      case 5:                          r = v; g = m; b = mid2;                          break;                  }              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,HSL2RGB,The following statement contains a magic number: if (v > 0)              {                  int sextant;                  float m' sv' fract' vsf' mid1' mid2;                  m = l + l - v;                  sv = (v - m) / v;                  h *= 6.0f;                  sextant = (int)h;                  fract = h - sextant;                  vsf = v * sv * fract;                  mid1 = m + vsf;                  mid2 = v - vsf;                  switch (sextant)                  {                      case 0:                          r = v; g = mid1; b = m;                          break;                      case 1:                          r = mid2; g = v; b = m;                          break;                      case 2:                          r = m; g = v; b = mid1;                          break;                      case 3:                          r = m; g = mid2; b = v;                          break;                      case 4:                          r = mid1; g = m; b = v;                          break;                      case 5:                          r = v; g = m; b = mid2;                          break;                  }              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: SkyPlaneEffect.World = Matrix.CreateRotationX(MathHelper.Pi)                  * Matrix.CreateTranslation(0' 100' 0)                  * Matrix.CreateRotationX(MathHelper.TwoPi * CelestialAngle);
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: foreach (var pass in SkyPlaneEffect.CurrentTechnique.Passes)              {                  pass.Apply();                  SkyPlaneEffect.GraphicsDevice.DrawPrimitives(PrimitiveType.TriangleList' 0' 2);              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: CelestialPlaneEffect.World = Matrix.CreateRotationX(MathHelper.Pi)                  * Matrix.CreateTranslation(0' 100' 0)                  * Matrix.CreateRotationX(MathHelper.TwoPi * CelestialAngle);
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: foreach (var pass in CelestialPlaneEffect.CurrentTechnique.Passes)              {                  pass.Apply();                  CelestialPlaneEffect.GraphicsDevice.DrawPrimitives(PrimitiveType.TriangleList' 0' 2);              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: CelestialPlaneEffect.World = Matrix.CreateTranslation(0' -100' 0)                  * Matrix.CreateRotationX(MathHelper.TwoPi * CelestialAngle);
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: foreach (var pass in CelestialPlaneEffect.CurrentTechnique.Passes)              {                  pass.Apply();                  CelestialPlaneEffect.GraphicsDevice.DrawPrimitives(PrimitiveType.TriangleList' 0' 2);              }
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: SkyPlaneEffect.World = Matrix.CreateTranslation(0' -16' 0);
Magic Number,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,Draw,The following statement contains a magic number: foreach (var pass in SkyPlaneEffect.CurrentTechnique.Passes)              {                  pass.Apply();                  SkyPlaneEffect.GraphicsDevice.DrawPrimitives(PrimitiveType.TriangleList' 0' 2);              }
Missing Default,TrueCraft.Client,TrueCraftGame,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\TrueCraftGame.cs,HandleClientPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)              {                  case "Position":                      UpdateCamera();                      break;              }
Missing Default,TrueCraft.Client,MultiplayerClient,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\MultiplayerClient.cs,OperationCompleted,The following switch statement is missing a default case: switch (e.LastOperation)              {                  case SocketAsyncOperation.Receive:                      ProcessNetwork(e);                        SocketPool.Add(e);                      break;                  case SocketAsyncOperation.Send:                      IPacket packet = e.UserToken as IPacket;                        if (packet is DisconnectPacket)                      {                          Client.Client.Shutdown(SocketShutdown.Send);                          Client.Close();                            cancel.Cancel();                      }                        e.SetBuffer(null' 0' 0);                      break;              }
Missing Default,TrueCraft.Client.Rendering.Blocks,SlabRenderer,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Rendering\Blocks\SlabRenderer.cs,RenderSlab,The following switch statement is missing a default case: switch(face)                  {                      case CubeFace.PositiveZ:                      case CubeFace.NegativeZ:                      case CubeFace.PositiveX:                      case CubeFace.NegativeX:                          for (int j = 0; j < 2; j++)                              result[(i * 4) + j].Texture.Y -= (1f / 32f);                          for (int k = 2; k < 4; k++)                          {                              result[(i * 4) + k].Position.Y -= 0.5f;                              // result[(i * 4) + k].Texture.Y -= (1f / 16f);                          }                          break;                        case CubeFace.PositiveY:                          for (int j = 0; j < 4; j++)                              result[(i * 4) + j].Position.Y -= 0.5f;                          break;                  }
Missing Default,TrueCraft.Client.Handlers,InventoryHandlers,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Handlers\InventoryHandlers.cs,HandleOpenWindowPacket,The following switch statement is missing a default case: switch (packet.Type)              {                  case 1: // Crafting bench window                      window = new CraftingBenchWindow(client.CraftingRepository' client.Inventory);                      break;              }
Missing Default,TrueCraft.Client.Modules,ChunkModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\ChunkModule.cs,HandleClientPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName)              {                  case "Position":                      var sorter = new ChunkRenderer.ChunkSorter(new Coordinates3D(                          (int)Game.Client.Position.X' 0' (int)Game.Client.Position.Z));                      Game.Invoke(() => ChunkMeshes.Sort(sorter));                      break;              }
Missing Default,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  // Exit game                  case Keys.Escape:                      Process.GetCurrentProcess().Kill();                      return true;                    // Take a screenshot.                  case Keys.F2:                      Game.TakeScreenshot();                      return true;                    // Move to the left.                  case Keys.A:                  case Keys.Left:                      Delta += XVector3.Left;                      return true;                    // Move to the right.                  case Keys.D:                  case Keys.Right:                      Delta += XVector3.Right;                      return true;                    // Move forwards.                  case Keys.W:                  case Keys.Up:                      Delta += XVector3.Forward;                      return true;                    // Move backwards.                  case Keys.S:                  case Keys.Down:                      Delta += XVector3.Backward;                      return true;                    case Keys.I:                      Game.Client.Position = Game.Client.Position.Floor();                      return true;                    case Keys.Tab:                      Capture = !Capture;                      return true;                    case Keys.E:                      Game.Client.CurrentWindow = Game.Client.Inventory;                      return true;                    case Keys.Space:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      return true;                    case Keys.D1:                  case Keys.NumPad1:                      Game.Client.HotbarSelection = 0;                      return true;                    case Keys.D2:                  case Keys.NumPad2:                      Game.Client.HotbarSelection = 1;                      return true;                    case Keys.D3:                  case Keys.NumPad3:                      Game.Client.HotbarSelection = 2;                      return true;                    case Keys.D4:                  case Keys.NumPad4:                      Game.Client.HotbarSelection = 3;                      return true;                    case Keys.D5:                  case Keys.NumPad5:                      Game.Client.HotbarSelection = 4;                      return true;                    case Keys.D6:                  case Keys.NumPad6:                      Game.Client.HotbarSelection = 5;                      return true;                    case Keys.D7:                  case Keys.NumPad7:                      Game.Client.HotbarSelection = 6;                      return true;                    case Keys.D8:                  case Keys.NumPad8:                      Game.Client.HotbarSelection = 7;                      return true;                    case Keys.D9:                  case Keys.NumPad9:                      Game.Client.HotbarSelection = 8;                      return true;              }
Missing Default,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,KeyUp,The following switch statement is missing a default case: switch (e.Key)              {                  // Stop moving to the left.                  case Keys.A:                  case Keys.Left:                      Delta -= XVector3.Left;                      return true;                    // Stop moving to the right.                  case Keys.D:                  case Keys.Right:                      Delta -= XVector3.Right;                      return true;                    // Stop moving forwards.                  case Keys.W:                  case Keys.Up:                      Delta -= XVector3.Forward;                      return true;                    // Stop moving backwards.                  case Keys.S:                  case Keys.Down:                      Delta -= XVector3.Backward;                      return true;              }
Missing Default,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,GamePadButtonDown,The following switch statement is missing a default case: switch (e.Button)              {                  case Buttons.LeftShoulder:                      selected--;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.RightShoulder:                      selected++;                      if (selected < 0)                          selected = 8;                      if (selected > 8)                          selected = 0;                      Game.Client.HotbarSelection = selected;                      break;                  case Buttons.A:                      if (Math.Floor(Game.Client.Position.Y) == Game.Client.Position.Y)                          Game.Client.Velocity += TrueCraft.API.Vector3.Up * 0.3;                      break;              }
Missing Default,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseButtonDown,The following switch statement is missing a default case: switch (e.Button)              {                  case MouseButton.Left:                      Digging = true;                      return true;                  case MouseButton.Right:                      var item = Game.Client.Inventory.Hotbar[Game.Client.HotbarSelection];                          Game.Client.QueuePacket(new PlayerBlockPlacementPacket(                          Game.HighlightedBlock.X' (sbyte)Game.HighlightedBlock.Y' Game.HighlightedBlock.Z'                          Game.HighlightedBlockFace' item.ID' item.Count' item.Metadata));                      return true;              }
Missing Default,TrueCraft.Client.Modules,PlayerControlModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\PlayerControlModule.cs,MouseButtonUp,The following switch statement is missing a default case: switch (e.Button)              {                  case MouseButton.Left:                      Digging = false;                      return true;              }
Missing Default,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,KeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Keys.F3:                      return true;              }
Missing Default,TrueCraft.Client.Modules,DebugInfoModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\DebugInfoModule.cs,KeyUp,The following switch statement is missing a default case: switch (e.Key)              {                  case Keys.F3:                      Enabled = !Enabled;                      return true;              }
Missing Default,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following switch statement is missing a default case: switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          SpriteBatch.Draw(Inventory' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(InventoryWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(InventoryWindowRect.Height / 2))'                              InventoryWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawInventoryWindow(RenderStage.Sprites);                          break;                      case 1: // Crafting bench                          SpriteBatch.Draw(Crafting' new Vector2(                              Game.GraphicsDevice.Viewport.Width / 2 - Scale(CraftingWindowRect.Width / 2)'                              Game.GraphicsDevice.Viewport.Height / 2 - Scale(CraftingWindowRect.Height / 2))'                              CraftingWindowRect' Color.White' 0' Vector2.Zero' Game.ScaleFactor * 2' SpriteEffects.None' 1);                          DrawCraftingWindow(RenderStage.Sprites);                          break;                  }
Missing Default,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following switch statement is missing a default case: switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Models);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Models);                          break;                  }
Missing Default,TrueCraft.Client.Modules,WindowModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\WindowModule.cs,Draw,The following switch statement is missing a default case: switch (Game.Client.CurrentWindow.Type)                  {                      case -1:                          DrawInventoryWindow(RenderStage.Text);                          break;                      case 1: // Crafting bench                          DrawCraftingWindow(RenderStage.Text);                          break;                  }
Missing Default,TrueCraft.Client.Modules,SkyModule,C:\repos\SirCmpwn_TrueCraft\TrueCraft.Client\Modules\SkyModule.cs,HSL2RGB,The following switch statement is missing a default case: switch (sextant)                  {                      case 0:                          r = v; g = mid1; b = m;                          break;                      case 1:                          r = mid2; g = v; b = m;                          break;                      case 2:                          r = m; g = v; b = mid1;                          break;                      case 3:                          r = m; g = mid2; b = v;                          break;                      case 4:                          r = mid1; g = m; b = v;                          break;                      case 5:                          r = v; g = m; b = mid2;                          break;                  }
