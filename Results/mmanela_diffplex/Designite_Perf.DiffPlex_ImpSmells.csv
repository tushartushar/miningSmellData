Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,MakeDifferent,The following statement contains a magic number: foreach (var i in Enumerable.Range(0' lines.Count))              {                  if(random.NextDouble() <= differenceAmount)                  {                      // Either delete line or add different one                      if(random.Next(2) % 2 == 1)                      {                          newLines.Add(RandomString(MaxLineLength));                      }                  }                  else                  {                      newLines.Add(lines[i]);                  }              }
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,MakeDifferent,The following statement contains a magic number: foreach (var i in Enumerable.Range(0' lines.Count))              {                  if(random.NextDouble() <= differenceAmount)                  {                      // Either delete line or add different one                      if(random.Next(2) % 2 == 1)                      {                          newLines.Add(RandomString(MaxLineLength));                      }                  }                  else                  {                      newLines.Add(lines[i]);                  }              }
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,RandomString,The following statement contains a magic number: foreach (var i in Enumerable.Range(0' random.Next(0' maxLength)))              {                  var ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));                  builder.Append(ch);              }
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,RandomString,The following statement contains a magic number: foreach (var i in Enumerable.Range(0' random.Next(0' maxLength)))              {                  var ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26 * random.NextDouble() + 65)));                  builder.Append(ch);              }
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,RandomString,The following statement contains a magic number: if (random.Next(2) % 2 == 0)                  return builder.ToString().ToLower();
Magic Number,Perf.DiffPlex,DiffPerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\DiffPerfTester.cs,RandomString,The following statement contains a magic number: if (random.Next(2) % 2 == 0)                  return builder.ToString().ToLower();
Magic Number,Perf.DiffPlex,LoadTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\LoadTester.cs,Run,The following statement contains a magic number: Thread.Sleep(10 * numberOfSeconds);
Magic Number,Perf.DiffPlex,LoadTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\LoadTester.cs,Run,The following statement contains a magic number: for (var i = 0; i < numberOfSeconds; i++)              {                  Console.Write(".");                  Thread.Sleep(1000);              }
Magic Number,Perf.DiffPlex,LoadTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\LoadTester.cs,Run,The following statement contains a magic number: do              {                  Thread.Sleep(10);                  signal.EnterReadLock();                  sleepMore = threadCount != 0;                  signal.ExitReadLock();              } while (sleepMore);
Magic Number,Perf.DiffPlex,LoadTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\LoadTester.cs,Run,The following statement contains a magic number: Console.WriteLine("RPS: {0}"' (Convert.ToDouble(times.Count()) / overallTimer.ElapsedMilliseconds) * 1000);
Magic Number,Perf.DiffPlex,PerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\PerfTester.cs,Run,The following statement contains a magic number: const double count = 5;
Magic Number,Perf.DiffPlex,PerfTester,C:\repos\mmanela_diffplex\Perf.DiffPlex\PerfTester.cs,Run,The following statement contains a magic number: Console.WriteLine("Diffs Per Second: {0}"' (count / totalTime.ElapsedMilliseconds) * 1000);
